ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"event_groups.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTestWaitCondition,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	prvTestWaitCondition:
  24              	.LVL0:
  25              	.LFB13:
  26              		.file 1 "Src/event_groups.c"
   1:Src/event_groups.c **** /*
   2:Src/event_groups.c ****  * FreeRTOS Kernel V10.4.6
   3:Src/event_groups.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Src/event_groups.c ****  *
   5:Src/event_groups.c ****  * SPDX-License-Identifier: MIT
   6:Src/event_groups.c ****  *
   7:Src/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Src/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:Src/event_groups.c ****  * the Software without restriction, including without limitation the rights to
  10:Src/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Src/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Src/event_groups.c ****  * subject to the following conditions:
  13:Src/event_groups.c ****  *
  14:Src/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  15:Src/event_groups.c ****  * copies or substantial portions of the Software.
  16:Src/event_groups.c ****  *
  17:Src/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Src/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Src/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Src/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Src/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Src/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Src/event_groups.c ****  *
  24:Src/event_groups.c ****  * https://www.FreeRTOS.org
  25:Src/event_groups.c ****  * https://github.com/FreeRTOS
  26:Src/event_groups.c ****  *
  27:Src/event_groups.c ****  */
  28:Src/event_groups.c **** 
  29:Src/event_groups.c **** /* Standard includes. */
  30:Src/event_groups.c **** #include <stdlib.h>
  31:Src/event_groups.c **** 
  32:Src/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 2


  33:Src/event_groups.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:Src/event_groups.c ****  * task.h is included from an application file. */
  35:Src/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Src/event_groups.c **** 
  37:Src/event_groups.c **** /* FreeRTOS includes. */
  38:Src/event_groups.c **** #include "FreeRTOS.h"
  39:Src/event_groups.c **** #include "task.h"
  40:Src/event_groups.c **** #include "timers.h"
  41:Src/event_groups.c **** #include "event_groups.h"
  42:Src/event_groups.c **** 
  43:Src/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  44:Src/event_groups.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Src/event_groups.c ****  * for the header files above, but not in this file, in order to generate the
  46:Src/event_groups.c ****  * correct privileged Vs unprivileged linkage and placement. */
  47:Src/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  48:Src/event_groups.c **** 
  49:Src/event_groups.c **** /* The following bit fields convey control information in a task's event list
  50:Src/event_groups.c ****  * item value.  It is important they don't clash with the
  51:Src/event_groups.c ****  * taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  52:Src/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  53:Src/event_groups.c ****     #define eventCLEAR_EVENTS_ON_EXIT_BIT    0x0100U
  54:Src/event_groups.c ****     #define eventUNBLOCKED_DUE_TO_BIT_SET    0x0200U
  55:Src/event_groups.c ****     #define eventWAIT_FOR_ALL_BITS           0x0400U
  56:Src/event_groups.c ****     #define eventEVENT_BITS_CONTROL_BYTES    0xff00U
  57:Src/event_groups.c **** #else
  58:Src/event_groups.c ****     #define eventCLEAR_EVENTS_ON_EXIT_BIT    0x01000000UL
  59:Src/event_groups.c ****     #define eventUNBLOCKED_DUE_TO_BIT_SET    0x02000000UL
  60:Src/event_groups.c ****     #define eventWAIT_FOR_ALL_BITS           0x04000000UL
  61:Src/event_groups.c ****     #define eventEVENT_BITS_CONTROL_BYTES    0xff000000UL
  62:Src/event_groups.c **** #endif
  63:Src/event_groups.c **** 
  64:Src/event_groups.c **** typedef struct EventGroupDef_t
  65:Src/event_groups.c **** {
  66:Src/event_groups.c ****     EventBits_t uxEventBits;
  67:Src/event_groups.c ****     List_t xTasksWaitingForBits; /*< List of tasks waiting for a bit to be set. */
  68:Src/event_groups.c **** 
  69:Src/event_groups.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
  70:Src/event_groups.c ****         UBaseType_t uxEventGroupNumber;
  71:Src/event_groups.c ****     #endif
  72:Src/event_groups.c **** 
  73:Src/event_groups.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  74:Src/event_groups.c ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated
  75:Src/event_groups.c ****     #endif
  76:Src/event_groups.c **** } EventGroup_t;
  77:Src/event_groups.c **** 
  78:Src/event_groups.c **** /*-----------------------------------------------------------*/
  79:Src/event_groups.c **** 
  80:Src/event_groups.c **** /*
  81:Src/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  82:Src/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  83:Src/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  84:Src/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  85:Src/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  86:Src/event_groups.c ****  * in uxCurrentEventBits.
  87:Src/event_groups.c ****  */
  88:Src/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
  89:Src/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 3


  90:Src/event_groups.c ****                                         const BaseType_t xWaitForAllBits ) PRIVILEGED_FUNCTION;
  91:Src/event_groups.c **** 
  92:Src/event_groups.c **** /*-----------------------------------------------------------*/
  93:Src/event_groups.c **** 
  94:Src/event_groups.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
  95:Src/event_groups.c **** 
  96:Src/event_groups.c ****     EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t * pxEventGroupBuffer )
  97:Src/event_groups.c ****     {
  98:Src/event_groups.c ****         EventGroup_t * pxEventBits;
  99:Src/event_groups.c **** 
 100:Src/event_groups.c ****         /* A StaticEventGroup_t object must be provided. */
 101:Src/event_groups.c ****         configASSERT( pxEventGroupBuffer );
 102:Src/event_groups.c **** 
 103:Src/event_groups.c ****         #if ( configASSERT_DEFINED == 1 )
 104:Src/event_groups.c ****             {
 105:Src/event_groups.c ****                 /* Sanity check that the size of the structure used to declare a
 106:Src/event_groups.c ****                  * variable of type StaticEventGroup_t equals the size of the real
 107:Src/event_groups.c ****                  * event group structure. */
 108:Src/event_groups.c ****                 volatile size_t xSize = sizeof( StaticEventGroup_t );
 109:Src/event_groups.c ****                 configASSERT( xSize == sizeof( EventGroup_t ) );
 110:Src/event_groups.c ****             } /*lint !e529 xSize is referenced if configASSERT() is defined. */
 111:Src/event_groups.c ****         #endif /* configASSERT_DEFINED */
 112:Src/event_groups.c **** 
 113:Src/event_groups.c ****         /* The user has provided a statically allocated event group - use it. */
 114:Src/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and S
 115:Src/event_groups.c **** 
 116:Src/event_groups.c ****         if( pxEventBits != NULL )
 117:Src/event_groups.c ****         {
 118:Src/event_groups.c ****             pxEventBits->uxEventBits = 0;
 119:Src/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 120:Src/event_groups.c **** 
 121:Src/event_groups.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 122:Src/event_groups.c ****                 {
 123:Src/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note that
 124:Src/event_groups.c ****                      * this event group was created statically in case the event group
 125:Src/event_groups.c ****                      * is later deleted. */
 126:Src/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdTRUE;
 127:Src/event_groups.c ****                 }
 128:Src/event_groups.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 129:Src/event_groups.c **** 
 130:Src/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 131:Src/event_groups.c ****         }
 132:Src/event_groups.c ****         else
 133:Src/event_groups.c ****         {
 134:Src/event_groups.c ****             /* xEventGroupCreateStatic should only ever be called with
 135:Src/event_groups.c ****              * pxEventGroupBuffer pointing to a pre-allocated (compile time
 136:Src/event_groups.c ****              * allocated) StaticEventGroup_t variable. */
 137:Src/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED();
 138:Src/event_groups.c ****         }
 139:Src/event_groups.c **** 
 140:Src/event_groups.c ****         return pxEventBits;
 141:Src/event_groups.c ****     }
 142:Src/event_groups.c **** 
 143:Src/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 144:Src/event_groups.c **** /*-----------------------------------------------------------*/
 145:Src/event_groups.c **** 
 146:Src/event_groups.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 4


 147:Src/event_groups.c **** 
 148:Src/event_groups.c ****     EventGroupHandle_t xEventGroupCreate( void )
 149:Src/event_groups.c ****     {
 150:Src/event_groups.c ****         EventGroup_t * pxEventBits;
 151:Src/event_groups.c **** 
 152:Src/event_groups.c ****         /* Allocate the event group.  Justification for MISRA deviation as
 153:Src/event_groups.c ****          * follows:  pvPortMalloc() always ensures returned memory blocks are
 154:Src/event_groups.c ****          * aligned per the requirements of the MCU stack.  In this case
 155:Src/event_groups.c ****          * pvPortMalloc() must return a pointer that is guaranteed to meet the
 156:Src/event_groups.c ****          * alignment requirements of the EventGroup_t structure - which (if you
 157:Src/event_groups.c ****          * follow it through) is the alignment requirements of the TickType_t type
 158:Src/event_groups.c ****          * (EventBits_t being of TickType_t itself).  Therefore, whenever the
 159:Src/event_groups.c ****          * stack alignment requirements are greater than or equal to the
 160:Src/event_groups.c ****          * TickType_t alignment requirements the cast is safe.  In other cases,
 161:Src/event_groups.c ****          * where the natural word size of the architecture is less than
 162:Src/event_groups.c ****          * sizeof( TickType_t ), the TickType_t variables will be accessed in two
 163:Src/event_groups.c ****          * or more reads operations, and the alignment requirements is only that
 164:Src/event_groups.c ****          * of each individual read. */
 165:Src/event_groups.c ****         pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e90
 166:Src/event_groups.c **** 
 167:Src/event_groups.c ****         if( pxEventBits != NULL )
 168:Src/event_groups.c ****         {
 169:Src/event_groups.c ****             pxEventBits->uxEventBits = 0;
 170:Src/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 171:Src/event_groups.c **** 
 172:Src/event_groups.c ****             #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 173:Src/event_groups.c ****                 {
 174:Src/event_groups.c ****                     /* Both static and dynamic allocation can be used, so note this
 175:Src/event_groups.c ****                      * event group was allocated statically in case the event group is
 176:Src/event_groups.c ****                      * later deleted. */
 177:Src/event_groups.c ****                     pxEventBits->ucStaticallyAllocated = pdFALSE;
 178:Src/event_groups.c ****                 }
 179:Src/event_groups.c ****             #endif /* configSUPPORT_STATIC_ALLOCATION */
 180:Src/event_groups.c **** 
 181:Src/event_groups.c ****             traceEVENT_GROUP_CREATE( pxEventBits );
 182:Src/event_groups.c ****         }
 183:Src/event_groups.c ****         else
 184:Src/event_groups.c ****         {
 185:Src/event_groups.c ****             traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracin
 186:Src/event_groups.c ****         }
 187:Src/event_groups.c **** 
 188:Src/event_groups.c ****         return pxEventBits;
 189:Src/event_groups.c ****     }
 190:Src/event_groups.c **** 
 191:Src/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 192:Src/event_groups.c **** /*-----------------------------------------------------------*/
 193:Src/event_groups.c **** 
 194:Src/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
 195:Src/event_groups.c ****                              const EventBits_t uxBitsToSet,
 196:Src/event_groups.c ****                              const EventBits_t uxBitsToWaitFor,
 197:Src/event_groups.c ****                              TickType_t xTicksToWait )
 198:Src/event_groups.c **** {
 199:Src/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 200:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 201:Src/event_groups.c ****     BaseType_t xAlreadyYielded;
 202:Src/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 203:Src/event_groups.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 5


 204:Src/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 205:Src/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 206:Src/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 207:Src/event_groups.c ****         {
 208:Src/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 209:Src/event_groups.c ****         }
 210:Src/event_groups.c ****     #endif
 211:Src/event_groups.c **** 
 212:Src/event_groups.c ****     vTaskSuspendAll();
 213:Src/event_groups.c ****     {
 214:Src/event_groups.c ****         uxOriginalBitValue = pxEventBits->uxEventBits;
 215:Src/event_groups.c **** 
 216:Src/event_groups.c ****         ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 217:Src/event_groups.c **** 
 218:Src/event_groups.c ****         if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 219:Src/event_groups.c ****         {
 220:Src/event_groups.c ****             /* All the rendezvous bits are now set - no need to block. */
 221:Src/event_groups.c ****             uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 222:Src/event_groups.c **** 
 223:Src/event_groups.c ****             /* Rendezvous always clear the bits.  They will have been cleared
 224:Src/event_groups.c ****              * already unless this is the only task in the rendezvous. */
 225:Src/event_groups.c ****             pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 226:Src/event_groups.c **** 
 227:Src/event_groups.c ****             xTicksToWait = 0;
 228:Src/event_groups.c ****         }
 229:Src/event_groups.c ****         else
 230:Src/event_groups.c ****         {
 231:Src/event_groups.c ****             if( xTicksToWait != ( TickType_t ) 0 )
 232:Src/event_groups.c ****             {
 233:Src/event_groups.c ****                 traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 234:Src/event_groups.c **** 
 235:Src/event_groups.c ****                 /* Store the bits that the calling task is waiting for in the
 236:Src/event_groups.c ****                  * task's event list item so the kernel knows when a match is
 237:Src/event_groups.c ****                  * found.  Then enter the blocked state. */
 238:Src/event_groups.c ****                 vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToW
 239:Src/event_groups.c **** 
 240:Src/event_groups.c ****                 /* This assignment is obsolete as uxReturn will get set after
 241:Src/event_groups.c ****                  * the task unblocks, but some compilers mistakenly generate a
 242:Src/event_groups.c ****                  * warning about uxReturn being returned without being set if the
 243:Src/event_groups.c ****                  * assignment is omitted. */
 244:Src/event_groups.c ****                 uxReturn = 0;
 245:Src/event_groups.c ****             }
 246:Src/event_groups.c ****             else
 247:Src/event_groups.c ****             {
 248:Src/event_groups.c ****                 /* The rendezvous bits were not set, but no block time was
 249:Src/event_groups.c ****                  * specified - just return the current event bit value. */
 250:Src/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 251:Src/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 252:Src/event_groups.c ****             }
 253:Src/event_groups.c ****         }
 254:Src/event_groups.c ****     }
 255:Src/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 256:Src/event_groups.c **** 
 257:Src/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 258:Src/event_groups.c ****     {
 259:Src/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 260:Src/event_groups.c ****         {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 6


 261:Src/event_groups.c ****             portYIELD_WITHIN_API();
 262:Src/event_groups.c ****         }
 263:Src/event_groups.c ****         else
 264:Src/event_groups.c ****         {
 265:Src/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 266:Src/event_groups.c ****         }
 267:Src/event_groups.c **** 
 268:Src/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 269:Src/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 270:Src/event_groups.c ****          * the required bits were set they will have been stored in the task's
 271:Src/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 272:Src/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 273:Src/event_groups.c **** 
 274:Src/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 275:Src/event_groups.c ****         {
 276:Src/event_groups.c ****             /* The task timed out, just return the current event bit value. */
 277:Src/event_groups.c ****             taskENTER_CRITICAL();
 278:Src/event_groups.c ****             {
 279:Src/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
 280:Src/event_groups.c **** 
 281:Src/event_groups.c ****                 /* Although the task got here because it timed out before the
 282:Src/event_groups.c ****                  * bits it was waiting for were set, it is possible that since it
 283:Src/event_groups.c ****                  * unblocked another task has set the bits.  If this is the case
 284:Src/event_groups.c ****                  * then it needs to clear the bits before exiting. */
 285:Src/event_groups.c ****                 if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 286:Src/event_groups.c ****                 {
 287:Src/event_groups.c ****                     pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 288:Src/event_groups.c ****                 }
 289:Src/event_groups.c ****                 else
 290:Src/event_groups.c ****                 {
 291:Src/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 292:Src/event_groups.c ****                 }
 293:Src/event_groups.c ****             }
 294:Src/event_groups.c ****             taskEXIT_CRITICAL();
 295:Src/event_groups.c **** 
 296:Src/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 297:Src/event_groups.c ****         }
 298:Src/event_groups.c ****         else
 299:Src/event_groups.c ****         {
 300:Src/event_groups.c ****             /* The task unblocked because the bits were set. */
 301:Src/event_groups.c ****         }
 302:Src/event_groups.c **** 
 303:Src/event_groups.c ****         /* Control bits might be set as the task had blocked should not be
 304:Src/event_groups.c ****          * returned. */
 305:Src/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 306:Src/event_groups.c ****     }
 307:Src/event_groups.c **** 
 308:Src/event_groups.c ****     traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 309:Src/event_groups.c **** 
 310:Src/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 311:Src/event_groups.c ****     ( void ) xTimeoutOccurred;
 312:Src/event_groups.c **** 
 313:Src/event_groups.c ****     return uxReturn;
 314:Src/event_groups.c **** }
 315:Src/event_groups.c **** /*-----------------------------------------------------------*/
 316:Src/event_groups.c **** 
 317:Src/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 7


 318:Src/event_groups.c ****                                  const EventBits_t uxBitsToWaitFor,
 319:Src/event_groups.c ****                                  const BaseType_t xClearOnExit,
 320:Src/event_groups.c ****                                  const BaseType_t xWaitForAllBits,
 321:Src/event_groups.c ****                                  TickType_t xTicksToWait )
 322:Src/event_groups.c **** {
 323:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 324:Src/event_groups.c ****     EventBits_t uxReturn, uxControlBits = 0;
 325:Src/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 326:Src/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 327:Src/event_groups.c **** 
 328:Src/event_groups.c ****     /* Check the user is not attempting to wait on the bits used by the kernel
 329:Src/event_groups.c ****      * itself, and that at least one bit is being requested. */
 330:Src/event_groups.c ****     configASSERT( xEventGroup );
 331:Src/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 332:Src/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 333:Src/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 334:Src/event_groups.c ****         {
 335:Src/event_groups.c ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 336:Src/event_groups.c ****         }
 337:Src/event_groups.c ****     #endif
 338:Src/event_groups.c **** 
 339:Src/event_groups.c ****     vTaskSuspendAll();
 340:Src/event_groups.c ****     {
 341:Src/event_groups.c ****         const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 342:Src/event_groups.c **** 
 343:Src/event_groups.c ****         /* Check to see if the wait condition is already met or not. */
 344:Src/event_groups.c ****         xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllB
 345:Src/event_groups.c **** 
 346:Src/event_groups.c ****         if( xWaitConditionMet != pdFALSE )
 347:Src/event_groups.c ****         {
 348:Src/event_groups.c ****             /* The wait condition has already been met so there is no need to
 349:Src/event_groups.c ****              * block. */
 350:Src/event_groups.c ****             uxReturn = uxCurrentEventBits;
 351:Src/event_groups.c ****             xTicksToWait = ( TickType_t ) 0;
 352:Src/event_groups.c **** 
 353:Src/event_groups.c ****             /* Clear the wait bits if requested to do so. */
 354:Src/event_groups.c ****             if( xClearOnExit != pdFALSE )
 355:Src/event_groups.c ****             {
 356:Src/event_groups.c ****                 pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 357:Src/event_groups.c ****             }
 358:Src/event_groups.c ****             else
 359:Src/event_groups.c ****             {
 360:Src/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 361:Src/event_groups.c ****             }
 362:Src/event_groups.c ****         }
 363:Src/event_groups.c ****         else if( xTicksToWait == ( TickType_t ) 0 )
 364:Src/event_groups.c ****         {
 365:Src/event_groups.c ****             /* The wait condition has not been met, but no block time was
 366:Src/event_groups.c ****              * specified, so just return the current value. */
 367:Src/event_groups.c ****             uxReturn = uxCurrentEventBits;
 368:Src/event_groups.c ****             xTimeoutOccurred = pdTRUE;
 369:Src/event_groups.c ****         }
 370:Src/event_groups.c ****         else
 371:Src/event_groups.c ****         {
 372:Src/event_groups.c ****             /* The task is going to block to wait for its required bits to be
 373:Src/event_groups.c ****              * set.  uxControlBits are used to remember the specified behaviour of
 374:Src/event_groups.c ****              * this call to xEventGroupWaitBits() - for use when the event bits
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 8


 375:Src/event_groups.c ****              * unblock the task. */
 376:Src/event_groups.c ****             if( xClearOnExit != pdFALSE )
 377:Src/event_groups.c ****             {
 378:Src/event_groups.c ****                 uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 379:Src/event_groups.c ****             }
 380:Src/event_groups.c ****             else
 381:Src/event_groups.c ****             {
 382:Src/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 383:Src/event_groups.c ****             }
 384:Src/event_groups.c **** 
 385:Src/event_groups.c ****             if( xWaitForAllBits != pdFALSE )
 386:Src/event_groups.c ****             {
 387:Src/event_groups.c ****                 uxControlBits |= eventWAIT_FOR_ALL_BITS;
 388:Src/event_groups.c ****             }
 389:Src/event_groups.c ****             else
 390:Src/event_groups.c ****             {
 391:Src/event_groups.c ****                 mtCOVERAGE_TEST_MARKER();
 392:Src/event_groups.c ****             }
 393:Src/event_groups.c **** 
 394:Src/event_groups.c ****             /* Store the bits that the calling task is waiting for in the
 395:Src/event_groups.c ****              * task's event list item so the kernel knows when a match is
 396:Src/event_groups.c ****              * found.  Then enter the blocked state. */
 397:Src/event_groups.c ****             vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitF
 398:Src/event_groups.c **** 
 399:Src/event_groups.c ****             /* This is obsolete as it will get set after the task unblocks, but
 400:Src/event_groups.c ****              * some compilers mistakenly generate a warning about the variable
 401:Src/event_groups.c ****              * being returned without being set if it is not done. */
 402:Src/event_groups.c ****             uxReturn = 0;
 403:Src/event_groups.c **** 
 404:Src/event_groups.c ****             traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 405:Src/event_groups.c ****         }
 406:Src/event_groups.c ****     }
 407:Src/event_groups.c ****     xAlreadyYielded = xTaskResumeAll();
 408:Src/event_groups.c **** 
 409:Src/event_groups.c ****     if( xTicksToWait != ( TickType_t ) 0 )
 410:Src/event_groups.c ****     {
 411:Src/event_groups.c ****         if( xAlreadyYielded == pdFALSE )
 412:Src/event_groups.c ****         {
 413:Src/event_groups.c ****             portYIELD_WITHIN_API();
 414:Src/event_groups.c ****         }
 415:Src/event_groups.c ****         else
 416:Src/event_groups.c ****         {
 417:Src/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 418:Src/event_groups.c ****         }
 419:Src/event_groups.c **** 
 420:Src/event_groups.c ****         /* The task blocked to wait for its required bits to be set - at this
 421:Src/event_groups.c ****          * point either the required bits were set or the block time expired.  If
 422:Src/event_groups.c ****          * the required bits were set they will have been stored in the task's
 423:Src/event_groups.c ****          * event list item, and they should now be retrieved then cleared. */
 424:Src/event_groups.c ****         uxReturn = uxTaskResetEventItemValue();
 425:Src/event_groups.c **** 
 426:Src/event_groups.c ****         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 427:Src/event_groups.c ****         {
 428:Src/event_groups.c ****             taskENTER_CRITICAL();
 429:Src/event_groups.c ****             {
 430:Src/event_groups.c ****                 /* The task timed out, just return the current event bit value. */
 431:Src/event_groups.c ****                 uxReturn = pxEventBits->uxEventBits;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 9


 432:Src/event_groups.c **** 
 433:Src/event_groups.c ****                 /* It is possible that the event bits were updated between this
 434:Src/event_groups.c ****                  * task leaving the Blocked state and running again. */
 435:Src/event_groups.c ****                 if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 436:Src/event_groups.c ****                 {
 437:Src/event_groups.c ****                     if( xClearOnExit != pdFALSE )
 438:Src/event_groups.c ****                     {
 439:Src/event_groups.c ****                         pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 440:Src/event_groups.c ****                     }
 441:Src/event_groups.c ****                     else
 442:Src/event_groups.c ****                     {
 443:Src/event_groups.c ****                         mtCOVERAGE_TEST_MARKER();
 444:Src/event_groups.c ****                     }
 445:Src/event_groups.c ****                 }
 446:Src/event_groups.c ****                 else
 447:Src/event_groups.c ****                 {
 448:Src/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 449:Src/event_groups.c ****                 }
 450:Src/event_groups.c **** 
 451:Src/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 452:Src/event_groups.c ****             }
 453:Src/event_groups.c ****             taskEXIT_CRITICAL();
 454:Src/event_groups.c ****         }
 455:Src/event_groups.c ****         else
 456:Src/event_groups.c ****         {
 457:Src/event_groups.c ****             /* The task unblocked because the bits were set. */
 458:Src/event_groups.c ****         }
 459:Src/event_groups.c **** 
 460:Src/event_groups.c ****         /* The task blocked so control bits may have been set. */
 461:Src/event_groups.c ****         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 462:Src/event_groups.c ****     }
 463:Src/event_groups.c **** 
 464:Src/event_groups.c ****     traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 465:Src/event_groups.c **** 
 466:Src/event_groups.c ****     /* Prevent compiler warnings when trace macros are not used. */
 467:Src/event_groups.c ****     ( void ) xTimeoutOccurred;
 468:Src/event_groups.c **** 
 469:Src/event_groups.c ****     return uxReturn;
 470:Src/event_groups.c **** }
 471:Src/event_groups.c **** /*-----------------------------------------------------------*/
 472:Src/event_groups.c **** 
 473:Src/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
 474:Src/event_groups.c ****                                   const EventBits_t uxBitsToClear )
 475:Src/event_groups.c **** {
 476:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 477:Src/event_groups.c ****     EventBits_t uxReturn;
 478:Src/event_groups.c **** 
 479:Src/event_groups.c ****     /* Check the user is not attempting to clear the bits used by the kernel
 480:Src/event_groups.c ****      * itself. */
 481:Src/event_groups.c ****     configASSERT( xEventGroup );
 482:Src/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 483:Src/event_groups.c **** 
 484:Src/event_groups.c ****     taskENTER_CRITICAL();
 485:Src/event_groups.c ****     {
 486:Src/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 487:Src/event_groups.c **** 
 488:Src/event_groups.c ****         /* The value returned is the event group value prior to the bits being
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 10


 489:Src/event_groups.c ****          * cleared. */
 490:Src/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
 491:Src/event_groups.c **** 
 492:Src/event_groups.c ****         /* Clear the bits. */
 493:Src/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 494:Src/event_groups.c ****     }
 495:Src/event_groups.c ****     taskEXIT_CRITICAL();
 496:Src/event_groups.c **** 
 497:Src/event_groups.c ****     return uxReturn;
 498:Src/event_groups.c **** }
 499:Src/event_groups.c **** /*-----------------------------------------------------------*/
 500:Src/event_groups.c **** 
 501:Src/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 502:Src/event_groups.c **** 
 503:Src/event_groups.c ****     BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
 504:Src/event_groups.c ****                                             const EventBits_t uxBitsToClear )
 505:Src/event_groups.c ****     {
 506:Src/event_groups.c ****         BaseType_t xReturn;
 507:Src/event_groups.c **** 
 508:Src/event_groups.c ****         traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 509:Src/event_groups.c ****         xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGro
 510:Src/event_groups.c **** 
 511:Src/event_groups.c ****         return xReturn;
 512:Src/event_groups.c ****     }
 513:Src/event_groups.c **** 
 514:Src/event_groups.c **** #endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( co
 515:Src/event_groups.c **** /*-----------------------------------------------------------*/
 516:Src/event_groups.c **** 
 517:Src/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 518:Src/event_groups.c **** {
 519:Src/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 520:Src/event_groups.c ****     EventGroup_t const * const pxEventBits = xEventGroup;
 521:Src/event_groups.c ****     EventBits_t uxReturn;
 522:Src/event_groups.c **** 
 523:Src/event_groups.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 524:Src/event_groups.c ****     {
 525:Src/event_groups.c ****         uxReturn = pxEventBits->uxEventBits;
 526:Src/event_groups.c ****     }
 527:Src/event_groups.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 528:Src/event_groups.c **** 
 529:Src/event_groups.c ****     return uxReturn;
 530:Src/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 531:Src/event_groups.c **** /*-----------------------------------------------------------*/
 532:Src/event_groups.c **** 
 533:Src/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
 534:Src/event_groups.c ****                                 const EventBits_t uxBitsToSet )
 535:Src/event_groups.c **** {
 536:Src/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 537:Src/event_groups.c ****     ListItem_t const * pxListEnd;
 538:Src/event_groups.c ****     List_t const * pxList;
 539:Src/event_groups.c ****     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 540:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 541:Src/event_groups.c ****     BaseType_t xMatchFound = pdFALSE;
 542:Src/event_groups.c **** 
 543:Src/event_groups.c ****     /* Check the user is not attempting to set the bits used by the kernel
 544:Src/event_groups.c ****      * itself. */
 545:Src/event_groups.c ****     configASSERT( xEventGroup );
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 11


 546:Src/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 547:Src/event_groups.c **** 
 548:Src/event_groups.c ****     pxList = &( pxEventBits->xTasksWaitingForBits );
 549:Src/event_groups.c ****     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is 
 550:Src/event_groups.c ****     vTaskSuspendAll();
 551:Src/event_groups.c ****     {
 552:Src/event_groups.c ****         traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 553:Src/event_groups.c **** 
 554:Src/event_groups.c ****         pxListItem = listGET_HEAD_ENTRY( pxList );
 555:Src/event_groups.c **** 
 556:Src/event_groups.c ****         /* Set the bits. */
 557:Src/event_groups.c ****         pxEventBits->uxEventBits |= uxBitsToSet;
 558:Src/event_groups.c **** 
 559:Src/event_groups.c ****         /* See if the new bit value should unblock any tasks. */
 560:Src/event_groups.c ****         while( pxListItem != pxListEnd )
 561:Src/event_groups.c ****         {
 562:Src/event_groups.c ****             pxNext = listGET_NEXT( pxListItem );
 563:Src/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 564:Src/event_groups.c ****             xMatchFound = pdFALSE;
 565:Src/event_groups.c **** 
 566:Src/event_groups.c ****             /* Split the bits waited for from the control bits. */
 567:Src/event_groups.c ****             uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 568:Src/event_groups.c ****             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 569:Src/event_groups.c **** 
 570:Src/event_groups.c ****             if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 571:Src/event_groups.c ****             {
 572:Src/event_groups.c ****                 /* Just looking for single bit being set. */
 573:Src/event_groups.c ****                 if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 574:Src/event_groups.c ****                 {
 575:Src/event_groups.c ****                     xMatchFound = pdTRUE;
 576:Src/event_groups.c ****                 }
 577:Src/event_groups.c ****                 else
 578:Src/event_groups.c ****                 {
 579:Src/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 580:Src/event_groups.c ****                 }
 581:Src/event_groups.c ****             }
 582:Src/event_groups.c ****             else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 583:Src/event_groups.c ****             {
 584:Src/event_groups.c ****                 /* All bits are set. */
 585:Src/event_groups.c ****                 xMatchFound = pdTRUE;
 586:Src/event_groups.c ****             }
 587:Src/event_groups.c ****             else
 588:Src/event_groups.c ****             {
 589:Src/event_groups.c ****                 /* Need all bits to be set, but not all the bits were set. */
 590:Src/event_groups.c ****             }
 591:Src/event_groups.c **** 
 592:Src/event_groups.c ****             if( xMatchFound != pdFALSE )
 593:Src/event_groups.c ****             {
 594:Src/event_groups.c ****                 /* The bits match.  Should the bits be cleared on exit? */
 595:Src/event_groups.c ****                 if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 596:Src/event_groups.c ****                 {
 597:Src/event_groups.c ****                     uxBitsToClear |= uxBitsWaitedFor;
 598:Src/event_groups.c ****                 }
 599:Src/event_groups.c ****                 else
 600:Src/event_groups.c ****                 {
 601:Src/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 602:Src/event_groups.c ****                 }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 12


 603:Src/event_groups.c **** 
 604:Src/event_groups.c ****                 /* Store the actual event flag value in the task's event list
 605:Src/event_groups.c ****                  * item before removing the task from the event list.  The
 606:Src/event_groups.c ****                  * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 607:Src/event_groups.c ****                  * that is was unblocked due to its required bits matching, rather
 608:Src/event_groups.c ****                  * than because it timed out. */
 609:Src/event_groups.c ****                 vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBL
 610:Src/event_groups.c ****             }
 611:Src/event_groups.c **** 
 612:Src/event_groups.c ****             /* Move onto the next list item.  Note pxListItem->pxNext is not
 613:Src/event_groups.c ****              * used here as the list item may have been removed from the event list
 614:Src/event_groups.c ****              * and inserted into the ready/pending reading list. */
 615:Src/event_groups.c ****             pxListItem = pxNext;
 616:Src/event_groups.c ****         }
 617:Src/event_groups.c **** 
 618:Src/event_groups.c ****         /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 619:Src/event_groups.c ****          * bit was set in the control word. */
 620:Src/event_groups.c ****         pxEventBits->uxEventBits &= ~uxBitsToClear;
 621:Src/event_groups.c ****     }
 622:Src/event_groups.c ****     ( void ) xTaskResumeAll();
 623:Src/event_groups.c **** 
 624:Src/event_groups.c ****     return pxEventBits->uxEventBits;
 625:Src/event_groups.c **** }
 626:Src/event_groups.c **** /*-----------------------------------------------------------*/
 627:Src/event_groups.c **** 
 628:Src/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 629:Src/event_groups.c **** {
 630:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 631:Src/event_groups.c ****     const List_t * pxTasksWaitingForBits;
 632:Src/event_groups.c **** 
 633:Src/event_groups.c ****     configASSERT( pxEventBits );
 634:Src/event_groups.c **** 
 635:Src/event_groups.c ****     pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 636:Src/event_groups.c **** 
 637:Src/event_groups.c ****     vTaskSuspendAll();
 638:Src/event_groups.c ****     {
 639:Src/event_groups.c ****         traceEVENT_GROUP_DELETE( xEventGroup );
 640:Src/event_groups.c **** 
 641:Src/event_groups.c ****         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 642:Src/event_groups.c ****         {
 643:Src/event_groups.c ****             /* Unblock the task, returning 0 as the event list is being deleted
 644:Src/event_groups.c ****              * and cannot therefore have any bits set. */
 645:Src/event_groups.c ****             configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTas
 646:Src/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 647:Src/event_groups.c ****         }
 648:Src/event_groups.c **** 
 649:Src/event_groups.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
 650:Src/event_groups.c ****             {
 651:Src/event_groups.c ****                 /* The event group can only have been allocated dynamically - free
 652:Src/event_groups.c ****                  * it again. */
 653:Src/event_groups.c ****                 vPortFree( pxEventBits );
 654:Src/event_groups.c ****             }
 655:Src/event_groups.c ****         #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1
 656:Src/event_groups.c ****             {
 657:Src/event_groups.c ****                 /* The event group could have been allocated statically or
 658:Src/event_groups.c ****                  * dynamically, so check before attempting to free the memory. */
 659:Src/event_groups.c ****                 if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 13


 660:Src/event_groups.c ****                 {
 661:Src/event_groups.c ****                     vPortFree( pxEventBits );
 662:Src/event_groups.c ****                 }
 663:Src/event_groups.c ****                 else
 664:Src/event_groups.c ****                 {
 665:Src/event_groups.c ****                     mtCOVERAGE_TEST_MARKER();
 666:Src/event_groups.c ****                 }
 667:Src/event_groups.c ****             }
 668:Src/event_groups.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 669:Src/event_groups.c ****     }
 670:Src/event_groups.c ****     ( void ) xTaskResumeAll();
 671:Src/event_groups.c **** }
 672:Src/event_groups.c **** /*-----------------------------------------------------------*/
 673:Src/event_groups.c **** 
 674:Src/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 675:Src/event_groups.c ****  * an interrupt. */
 676:Src/event_groups.c **** void vEventGroupSetBitsCallback( void * pvEventGroup,
 677:Src/event_groups.c ****                                  const uint32_t ulBitsToSet )
 678:Src/event_groups.c **** {
 679:Src/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 680:Src/event_groups.c **** }
 681:Src/event_groups.c **** /*-----------------------------------------------------------*/
 682:Src/event_groups.c **** 
 683:Src/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 684:Src/event_groups.c ****  * an interrupt. */
 685:Src/event_groups.c **** void vEventGroupClearBitsCallback( void * pvEventGroup,
 686:Src/event_groups.c ****                                    const uint32_t ulBitsToClear )
 687:Src/event_groups.c **** {
 688:Src/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 689:Src/event_groups.c **** }
 690:Src/event_groups.c **** /*-----------------------------------------------------------*/
 691:Src/event_groups.c **** 
 692:Src/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
 693:Src/event_groups.c ****                                         const EventBits_t uxBitsToWaitFor,
 694:Src/event_groups.c ****                                         const BaseType_t xWaitForAllBits )
 695:Src/event_groups.c **** {
  27              		.loc 1 695 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 696:Src/event_groups.c ****     BaseType_t xWaitConditionMet = pdFALSE;
  32              		.loc 1 696 5 view .LVU1
 697:Src/event_groups.c **** 
 698:Src/event_groups.c ****     if( xWaitForAllBits == pdFALSE )
  33              		.loc 1 698 5 view .LVU2
  34              		.loc 1 698 7 is_stmt 0 view .LVU3
  35 0000 1AB9     		cbnz	r2, .L2
 699:Src/event_groups.c ****     {
 700:Src/event_groups.c ****         /* Task only has to wait for one bit within uxBitsToWaitFor to be
 701:Src/event_groups.c ****          * set.  Is one already set? */
 702:Src/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  36              		.loc 1 702 9 is_stmt 1 view .LVU4
  37              		.loc 1 702 11 is_stmt 0 view .LVU5
  38 0002 0842     		tst	r0, r1
  39 0004 06D1     		bne	.L4
 696:Src/event_groups.c **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 14


  40              		.loc 1 696 16 view .LVU6
  41 0006 1046     		mov	r0, r2
  42              	.LVL1:
 696:Src/event_groups.c **** 
  43              		.loc 1 696 16 view .LVU7
  44 0008 7047     		bx	lr
  45              	.LVL2:
  46              	.L2:
 703:Src/event_groups.c ****         {
 704:Src/event_groups.c ****             xWaitConditionMet = pdTRUE;
 705:Src/event_groups.c ****         }
 706:Src/event_groups.c ****         else
 707:Src/event_groups.c ****         {
 708:Src/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
 709:Src/event_groups.c ****         }
 710:Src/event_groups.c ****     }
 711:Src/event_groups.c ****     else
 712:Src/event_groups.c ****     {
 713:Src/event_groups.c ****         /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 714:Src/event_groups.c ****          * Are they set already? */
 715:Src/event_groups.c ****         if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  47              		.loc 1 715 9 is_stmt 1 view .LVU8
  48              		.loc 1 715 11 is_stmt 0 view .LVU9
  49 000a 31EA0003 		bics	r3, r1, r0
  50 000e 03D0     		beq	.L5
 696:Src/event_groups.c **** 
  51              		.loc 1 696 16 view .LVU10
  52 0010 0020     		movs	r0, #0
  53              	.LVL3:
 696:Src/event_groups.c **** 
  54              		.loc 1 696 16 view .LVU11
  55 0012 7047     		bx	lr
  56              	.LVL4:
  57              	.L4:
 704:Src/event_groups.c ****         }
  58              		.loc 1 704 31 view .LVU12
  59 0014 0120     		movs	r0, #1
  60              	.LVL5:
 704:Src/event_groups.c ****         }
  61              		.loc 1 704 31 view .LVU13
  62 0016 7047     		bx	lr
  63              	.LVL6:
  64              	.L5:
 716:Src/event_groups.c ****         {
 717:Src/event_groups.c ****             xWaitConditionMet = pdTRUE;
  65              		.loc 1 717 31 view .LVU14
  66 0018 0120     		movs	r0, #1
  67              	.LVL7:
 718:Src/event_groups.c ****         }
 719:Src/event_groups.c ****         else
 720:Src/event_groups.c ****         {
 721:Src/event_groups.c ****             mtCOVERAGE_TEST_MARKER();
  68              		.loc 1 721 37 is_stmt 1 view .LVU15
 722:Src/event_groups.c ****         }
 723:Src/event_groups.c ****     }
 724:Src/event_groups.c **** 
 725:Src/event_groups.c ****     return xWaitConditionMet;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 15


  69              		.loc 1 725 5 view .LVU16
 726:Src/event_groups.c **** }
  70              		.loc 1 726 1 is_stmt 0 view .LVU17
  71 001a 7047     		bx	lr
  72              		.cfi_endproc
  73              	.LFE13:
  75              		.section	.text.xEventGroupCreate,"ax",%progbits
  76              		.align	1
  77              		.global	xEventGroupCreate
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  81              		.fpu softvfp
  83              	xEventGroupCreate:
  84              	.LFB4:
 149:Src/event_groups.c ****         EventGroup_t * pxEventBits;
  85              		.loc 1 149 5 is_stmt 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89 0000 10B5     		push	{r4, lr}
  90              	.LCFI0:
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 4, -8
  93              		.cfi_offset 14, -4
 150:Src/event_groups.c **** 
  94              		.loc 1 150 9 view .LVU19
 165:Src/event_groups.c **** 
  95              		.loc 1 165 9 view .LVU20
 165:Src/event_groups.c **** 
  96              		.loc 1 165 42 is_stmt 0 view .LVU21
  97 0002 1820     		movs	r0, #24
  98 0004 FFF7FEFF 		bl	pvPortMalloc
  99              	.LVL8:
 167:Src/event_groups.c ****         {
 100              		.loc 1 167 9 is_stmt 1 view .LVU22
 167:Src/event_groups.c ****         {
 101              		.loc 1 167 11 is_stmt 0 view .LVU23
 102 0008 0446     		mov	r4, r0
 103 000a 20B1     		cbz	r0, .L6
 169:Src/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 104              		.loc 1 169 13 is_stmt 1 view .LVU24
 169:Src/event_groups.c ****             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 105              		.loc 1 169 38 is_stmt 0 view .LVU25
 106 000c 0023     		movs	r3, #0
 107 000e 40F8043B 		str	r3, [r0], #4
 108              	.LVL9:
 170:Src/event_groups.c **** 
 109              		.loc 1 170 13 is_stmt 1 view .LVU26
 110 0012 FFF7FEFF 		bl	vListInitialise
 111              	.LVL10:
 181:Src/event_groups.c ****         }
 112              		.loc 1 181 51 view .LVU27
 185:Src/event_groups.c ****         }
 113              		.loc 1 185 45 view .LVU28
 188:Src/event_groups.c ****     }
 114              		.loc 1 188 9 view .LVU29
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 16


 115              	.L6:
 189:Src/event_groups.c **** 
 116              		.loc 1 189 5 is_stmt 0 view .LVU30
 117 0016 2046     		mov	r0, r4
 118 0018 10BD     		pop	{r4, pc}
 189:Src/event_groups.c **** 
 119              		.loc 1 189 5 view .LVU31
 120              		.cfi_endproc
 121              	.LFE4:
 123              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 124              		.align	1
 125              		.global	xEventGroupWaitBits
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 129              		.fpu softvfp
 131              	xEventGroupWaitBits:
 132              	.LVL11:
 133              	.LFB6:
 322:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 134              		.loc 1 322 1 is_stmt 1 view -0
 135              		.cfi_startproc
 136              		@ args = 4, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 322:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 138              		.loc 1 322 1 is_stmt 0 view .LVU33
 139 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 140              	.LCFI1:
 141              		.cfi_def_cfa_offset 32
 142              		.cfi_offset 3, -32
 143              		.cfi_offset 4, -28
 144              		.cfi_offset 5, -24
 145              		.cfi_offset 6, -20
 146              		.cfi_offset 7, -16
 147              		.cfi_offset 8, -12
 148              		.cfi_offset 9, -8
 149              		.cfi_offset 14, -4
 150 0004 0646     		mov	r6, r0
 151 0006 0D46     		mov	r5, r1
 152 0008 9046     		mov	r8, r2
 153 000a 1F46     		mov	r7, r3
 154 000c DDF82090 		ldr	r9, [sp, #32]
 323:Src/event_groups.c ****     EventBits_t uxReturn, uxControlBits = 0;
 155              		.loc 1 323 5 is_stmt 1 view .LVU34
 156              	.LVL12:
 324:Src/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 157              		.loc 1 324 5 view .LVU35
 325:Src/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 158              		.loc 1 325 5 view .LVU36
 326:Src/event_groups.c **** 
 159              		.loc 1 326 5 view .LVU37
 330:Src/event_groups.c ****     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 160              		.loc 1 330 32 view .LVU38
 331:Src/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 161              		.loc 1 331 77 view .LVU39
 332:Src/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 162              		.loc 1 332 41 view .LVU40
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 17


 335:Src/event_groups.c ****         }
 163              		.loc 1 335 114 view .LVU41
 339:Src/event_groups.c ****     {
 164              		.loc 1 339 5 view .LVU42
 165 0010 FFF7FEFF 		bl	vTaskSuspendAll
 166              	.LVL13:
 167              	.LBB6:
 341:Src/event_groups.c **** 
 168              		.loc 1 341 9 view .LVU43
 341:Src/event_groups.c **** 
 169              		.loc 1 341 27 is_stmt 0 view .LVU44
 170 0014 3468     		ldr	r4, [r6]
 171              	.LVL14:
 344:Src/event_groups.c **** 
 172              		.loc 1 344 9 is_stmt 1 view .LVU45
 344:Src/event_groups.c **** 
 173              		.loc 1 344 29 is_stmt 0 view .LVU46
 174 0016 3A46     		mov	r2, r7
 175 0018 2946     		mov	r1, r5
 176 001a 2046     		mov	r0, r4
 177 001c FFF7FEFF 		bl	prvTestWaitCondition
 178              	.LVL15:
 346:Src/event_groups.c ****         {
 179              		.loc 1 346 9 is_stmt 1 view .LVU47
 346:Src/event_groups.c ****         {
 180              		.loc 1 346 11 is_stmt 0 view .LVU48
 181 0020 40B1     		cbz	r0, .L10
 350:Src/event_groups.c ****             xTicksToWait = ( TickType_t ) 0;
 182              		.loc 1 350 13 is_stmt 1 view .LVU49
 183              	.LVL16:
 351:Src/event_groups.c **** 
 184              		.loc 1 351 13 view .LVU50
 354:Src/event_groups.c ****             {
 185              		.loc 1 354 13 view .LVU51
 354:Src/event_groups.c ****             {
 186              		.loc 1 354 15 is_stmt 0 view .LVU52
 187 0022 B8F1000F 		cmp	r8, #0
 188 0026 19D0     		beq	.L18
 356:Src/event_groups.c ****             }
 189              		.loc 1 356 17 is_stmt 1 view .LVU53
 356:Src/event_groups.c ****             }
 190              		.loc 1 356 42 is_stmt 0 view .LVU54
 191 0028 24EA0503 		bic	r3, r4, r5
 192 002c 3360     		str	r3, [r6]
 351:Src/event_groups.c **** 
 193              		.loc 1 351 26 view .LVU55
 194 002e 4FF00009 		mov	r9, #0
 195 0032 15E0     		b	.L11
 196              	.LVL17:
 197              	.L10:
 363:Src/event_groups.c ****         {
 198              		.loc 1 363 14 is_stmt 1 view .LVU56
 363:Src/event_groups.c ****         {
 199              		.loc 1 363 16 is_stmt 0 view .LVU57
 200 0034 B9F1000F 		cmp	r9, #0
 201 0038 12D0     		beq	.L11
 376:Src/event_groups.c ****             {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 18


 202              		.loc 1 376 13 is_stmt 1 view .LVU58
 376:Src/event_groups.c ****             {
 203              		.loc 1 376 15 is_stmt 0 view .LVU59
 204 003a B8F1000F 		cmp	r8, #0
 205 003e 0AD1     		bne	.L19
 206              	.LBE6:
 324:Src/event_groups.c ****     BaseType_t xWaitConditionMet, xAlreadyYielded;
 207              		.loc 1 324 27 view .LVU60
 208 0040 0021     		movs	r1, #0
 209              	.L12:
 210              	.LVL18:
 211              	.LBB7:
 382:Src/event_groups.c ****             }
 212              		.loc 1 382 41 is_stmt 1 view .LVU61
 385:Src/event_groups.c ****             {
 213              		.loc 1 385 13 view .LVU62
 385:Src/event_groups.c ****             {
 214              		.loc 1 385 15 is_stmt 0 view .LVU63
 215 0042 0FB1     		cbz	r7, .L13
 387:Src/event_groups.c ****             }
 216              		.loc 1 387 17 is_stmt 1 view .LVU64
 387:Src/event_groups.c ****             }
 217              		.loc 1 387 31 is_stmt 0 view .LVU65
 218 0044 41F08061 		orr	r1, r1, #67108864
 219              	.LVL19:
 220              	.L13:
 391:Src/event_groups.c ****             }
 221              		.loc 1 391 41 is_stmt 1 view .LVU66
 397:Src/event_groups.c **** 
 222              		.loc 1 397 13 view .LVU67
 223 0048 4A46     		mov	r2, r9
 224 004a 2943     		orrs	r1, r1, r5
 225              	.LVL20:
 397:Src/event_groups.c **** 
 226              		.loc 1 397 13 is_stmt 0 view .LVU68
 227 004c 301D     		adds	r0, r6, #4
 228              	.LVL21:
 397:Src/event_groups.c **** 
 229              		.loc 1 397 13 view .LVU69
 230 004e FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 231              	.LVL22:
 402:Src/event_groups.c **** 
 232              		.loc 1 402 13 is_stmt 1 view .LVU70
 402:Src/event_groups.c **** 
 233              		.loc 1 402 22 is_stmt 0 view .LVU71
 234 0052 0024     		movs	r4, #0
 235              	.LVL23:
 402:Src/event_groups.c **** 
 236              		.loc 1 402 22 view .LVU72
 237 0054 04E0     		b	.L11
 238              	.LVL24:
 239              	.L19:
 378:Src/event_groups.c ****             }
 240              		.loc 1 378 31 view .LVU73
 241 0056 4FF08071 		mov	r1, #16777216
 242 005a F2E7     		b	.L12
 243              	.LVL25:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 19


 244              	.L18:
 351:Src/event_groups.c **** 
 245              		.loc 1 351 26 view .LVU74
 246 005c 4FF00009 		mov	r9, #0
 247              	.LVL26:
 248              	.L11:
 404:Src/event_groups.c ****         }
 249              		.loc 1 404 77 is_stmt 1 view .LVU75
 250              	.LBE7:
 407:Src/event_groups.c **** 
 251              		.loc 1 407 5 view .LVU76
 407:Src/event_groups.c **** 
 252              		.loc 1 407 23 is_stmt 0 view .LVU77
 253 0060 FFF7FEFF 		bl	xTaskResumeAll
 254              	.LVL27:
 409:Src/event_groups.c ****     {
 255              		.loc 1 409 5 is_stmt 1 view .LVU78
 409:Src/event_groups.c ****     {
 256              		.loc 1 409 7 is_stmt 0 view .LVU79
 257 0064 B9F1000F 		cmp	r9, #0
 258 0068 10D0     		beq	.L9
 411:Src/event_groups.c ****         {
 259              		.loc 1 411 9 is_stmt 1 view .LVU80
 411:Src/event_groups.c ****         {
 260              		.loc 1 411 11 is_stmt 0 view .LVU81
 261 006a 38B9     		cbnz	r0, .L15
 413:Src/event_groups.c ****         }
 262              		.loc 1 413 13 is_stmt 1 view .LVU82
 263 006c 124B     		ldr	r3, .L22
 264 006e 4FF08052 		mov	r2, #268435456
 265 0072 1A60     		str	r2, [r3]
 413:Src/event_groups.c ****         }
 266              		.loc 1 413 13 view .LVU83
 267              		.syntax unified
 268              	@ 413 "Src/event_groups.c" 1
 269 0074 BFF34F8F 		dsb
 270              	@ 0 "" 2
 413:Src/event_groups.c ****         }
 271              		.loc 1 413 13 view .LVU84
 272              	@ 413 "Src/event_groups.c" 1
 273 0078 BFF36F8F 		isb
 274              	@ 0 "" 2
 413:Src/event_groups.c ****         }
 275              		.loc 1 413 35 view .LVU85
 276              		.thumb
 277              		.syntax unified
 278              	.L15:
 417:Src/event_groups.c ****         }
 279              		.loc 1 417 37 view .LVU86
 424:Src/event_groups.c **** 
 280              		.loc 1 424 9 view .LVU87
 424:Src/event_groups.c **** 
 281              		.loc 1 424 20 is_stmt 0 view .LVU88
 282 007c FFF7FEFF 		bl	uxTaskResetEventItemValue
 283              	.LVL28:
 424:Src/event_groups.c **** 
 284              		.loc 1 424 20 view .LVU89
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 20


 285 0080 0446     		mov	r4, r0
 286              	.LVL29:
 426:Src/event_groups.c ****         {
 287              		.loc 1 426 9 is_stmt 1 view .LVU90
 426:Src/event_groups.c ****         {
 288              		.loc 1 426 11 is_stmt 0 view .LVU91
 289 0082 10F0007F 		tst	r0, #33554432
 290 0086 04D0     		beq	.L21
 291              	.LVL30:
 292              	.L16:
 458:Src/event_groups.c **** 
 293              		.loc 1 458 9 is_stmt 1 view .LVU92
 461:Src/event_groups.c ****     }
 294              		.loc 1 461 9 view .LVU93
 461:Src/event_groups.c ****     }
 295              		.loc 1 461 18 is_stmt 0 view .LVU94
 296 0088 24F07F44 		bic	r4, r4, #-16777216
 297              	.LVL31:
 464:Src/event_groups.c **** 
 298              		.loc 1 464 5 is_stmt 1 view .LVU95
 467:Src/event_groups.c **** 
 299              		.loc 1 467 5 view .LVU96
 469:Src/event_groups.c **** }
 300              		.loc 1 469 5 view .LVU97
 301              	.L9:
 470:Src/event_groups.c **** /*-----------------------------------------------------------*/
 302              		.loc 1 470 1 is_stmt 0 view .LVU98
 303 008c 2046     		mov	r0, r4
 304 008e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 305              	.LVL32:
 306              	.L21:
 428:Src/event_groups.c ****             {
 307              		.loc 1 428 13 is_stmt 1 view .LVU99
 308 0092 FFF7FEFF 		bl	vPortEnterCritical
 309              	.LVL33:
 431:Src/event_groups.c **** 
 310              		.loc 1 431 17 view .LVU100
 431:Src/event_groups.c **** 
 311              		.loc 1 431 26 is_stmt 0 view .LVU101
 312 0096 3468     		ldr	r4, [r6]
 313              	.LVL34:
 435:Src/event_groups.c ****                 {
 314              		.loc 1 435 17 is_stmt 1 view .LVU102
 435:Src/event_groups.c ****                 {
 315              		.loc 1 435 21 is_stmt 0 view .LVU103
 316 0098 3A46     		mov	r2, r7
 317 009a 2946     		mov	r1, r5
 318 009c 2046     		mov	r0, r4
 319 009e FFF7FEFF 		bl	prvTestWaitCondition
 320              	.LVL35:
 435:Src/event_groups.c ****                 {
 321              		.loc 1 435 19 view .LVU104
 322 00a2 28B1     		cbz	r0, .L17
 437:Src/event_groups.c ****                     {
 323              		.loc 1 437 21 is_stmt 1 view .LVU105
 437:Src/event_groups.c ****                     {
 324              		.loc 1 437 23 is_stmt 0 view .LVU106
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 21


 325 00a4 B8F1000F 		cmp	r8, #0
 326 00a8 02D0     		beq	.L17
 439:Src/event_groups.c ****                     }
 327              		.loc 1 439 25 is_stmt 1 view .LVU107
 439:Src/event_groups.c ****                     }
 328              		.loc 1 439 50 is_stmt 0 view .LVU108
 329 00aa 24EA0505 		bic	r5, r4, r5
 330              	.LVL36:
 439:Src/event_groups.c ****                     }
 331              		.loc 1 439 50 view .LVU109
 332 00ae 3560     		str	r5, [r6]
 333              	.L17:
 448:Src/event_groups.c ****                 }
 334              		.loc 1 448 45 is_stmt 1 view .LVU110
 451:Src/event_groups.c ****             }
 335              		.loc 1 451 17 view .LVU111
 336              	.LVL37:
 453:Src/event_groups.c ****         }
 337              		.loc 1 453 13 view .LVU112
 338 00b0 FFF7FEFF 		bl	vPortExitCritical
 339              	.LVL38:
 340 00b4 E8E7     		b	.L16
 341              	.L23:
 342 00b6 00BF     		.align	2
 343              	.L22:
 344 00b8 04ED00E0 		.word	-536810236
 345              		.cfi_endproc
 346              	.LFE6:
 348              		.section	.text.xEventGroupClearBits,"ax",%progbits
 349              		.align	1
 350              		.global	xEventGroupClearBits
 351              		.syntax unified
 352              		.thumb
 353              		.thumb_func
 354              		.fpu softvfp
 356              	xEventGroupClearBits:
 357              	.LVL39:
 358              	.LFB7:
 475:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 359              		.loc 1 475 1 view -0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
 475:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 363              		.loc 1 475 1 is_stmt 0 view .LVU114
 364 0000 70B5     		push	{r4, r5, r6, lr}
 365              	.LCFI2:
 366              		.cfi_def_cfa_offset 16
 367              		.cfi_offset 4, -16
 368              		.cfi_offset 5, -12
 369              		.cfi_offset 6, -8
 370              		.cfi_offset 14, -4
 371 0002 0546     		mov	r5, r0
 372 0004 0C46     		mov	r4, r1
 476:Src/event_groups.c ****     EventBits_t uxReturn;
 373              		.loc 1 476 5 is_stmt 1 view .LVU115
 374              	.LVL40:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 22


 477:Src/event_groups.c **** 
 375              		.loc 1 477 5 view .LVU116
 481:Src/event_groups.c ****     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 376              		.loc 1 481 32 view .LVU117
 482:Src/event_groups.c **** 
 377              		.loc 1 482 75 view .LVU118
 484:Src/event_groups.c ****     {
 378              		.loc 1 484 5 view .LVU119
 379 0006 FFF7FEFF 		bl	vPortEnterCritical
 380              	.LVL41:
 486:Src/event_groups.c **** 
 381              		.loc 1 486 66 view .LVU120
 490:Src/event_groups.c **** 
 382              		.loc 1 490 9 view .LVU121
 490:Src/event_groups.c **** 
 383              		.loc 1 490 18 is_stmt 0 view .LVU122
 384 000a 2E68     		ldr	r6, [r5]
 385              	.LVL42:
 493:Src/event_groups.c ****     }
 386              		.loc 1 493 9 is_stmt 1 view .LVU123
 493:Src/event_groups.c ****     }
 387              		.loc 1 493 34 is_stmt 0 view .LVU124
 388 000c 26EA0404 		bic	r4, r6, r4
 389              	.LVL43:
 493:Src/event_groups.c ****     }
 390              		.loc 1 493 34 view .LVU125
 391 0010 2C60     		str	r4, [r5]
 495:Src/event_groups.c **** 
 392              		.loc 1 495 5 is_stmt 1 view .LVU126
 393 0012 FFF7FEFF 		bl	vPortExitCritical
 394              	.LVL44:
 497:Src/event_groups.c **** }
 395              		.loc 1 497 5 view .LVU127
 498:Src/event_groups.c **** /*-----------------------------------------------------------*/
 396              		.loc 1 498 1 is_stmt 0 view .LVU128
 397 0016 3046     		mov	r0, r6
 398 0018 70BD     		pop	{r4, r5, r6, pc}
 498:Src/event_groups.c **** /*-----------------------------------------------------------*/
 399              		.loc 1 498 1 view .LVU129
 400              		.cfi_endproc
 401              	.LFE7:
 403              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 404              		.align	1
 405              		.global	xEventGroupGetBitsFromISR
 406              		.syntax unified
 407              		.thumb
 408              		.thumb_func
 409              		.fpu softvfp
 411              	xEventGroupGetBitsFromISR:
 412              	.LVL45:
 413              	.LFB8:
 518:Src/event_groups.c ****     UBaseType_t uxSavedInterruptStatus;
 414              		.loc 1 518 1 is_stmt 1 view -0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              		@ link register save eliminated.
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 23


 519:Src/event_groups.c ****     EventGroup_t const * const pxEventBits = xEventGroup;
 419              		.loc 1 519 5 view .LVU131
 520:Src/event_groups.c ****     EventBits_t uxReturn;
 420              		.loc 1 520 5 view .LVU132
 521:Src/event_groups.c **** 
 421              		.loc 1 521 5 view .LVU133
 523:Src/event_groups.c ****     {
 422              		.loc 1 523 5 view .LVU134
 423              	.LBB8:
 424              	.LBI8:
 425              		.file 2 "Inc/portmacro.h"
   1:Inc/portmacro.h **** /*
   2:Inc/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:Inc/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Inc/portmacro.h ****  *
   5:Inc/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:Inc/portmacro.h ****  *
   7:Inc/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Inc/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:Inc/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:Inc/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Inc/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Inc/portmacro.h ****  * subject to the following conditions:
  13:Inc/portmacro.h ****  *
  14:Inc/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:Inc/portmacro.h ****  * copies or substantial portions of the Software.
  16:Inc/portmacro.h ****  *
  17:Inc/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Inc/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Inc/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Inc/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Inc/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Inc/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Inc/portmacro.h ****  *
  24:Inc/portmacro.h ****  * https://www.FreeRTOS.org
  25:Inc/portmacro.h ****  * https://github.com/FreeRTOS
  26:Inc/portmacro.h ****  *
  27:Inc/portmacro.h ****  */
  28:Inc/portmacro.h **** 
  29:Inc/portmacro.h **** 
  30:Inc/portmacro.h **** #ifndef PORTMACRO_H
  31:Inc/portmacro.h ****     #define PORTMACRO_H
  32:Inc/portmacro.h **** 
  33:Inc/portmacro.h ****     #ifdef __cplusplus
  34:Inc/portmacro.h ****         extern "C" {
  35:Inc/portmacro.h ****     #endif
  36:Inc/portmacro.h **** 
  37:Inc/portmacro.h **** /*-----------------------------------------------------------
  38:Inc/portmacro.h ****  * Port specific definitions.
  39:Inc/portmacro.h ****  *
  40:Inc/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:Inc/portmacro.h ****  * given hardware and compiler.
  42:Inc/portmacro.h ****  *
  43:Inc/portmacro.h ****  * These settings should not be altered.
  44:Inc/portmacro.h ****  *-----------------------------------------------------------
  45:Inc/portmacro.h ****  */
  46:Inc/portmacro.h **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 24


  47:Inc/portmacro.h **** /* Type definitions. */
  48:Inc/portmacro.h ****     #define portCHAR          char
  49:Inc/portmacro.h ****     #define portFLOAT         float
  50:Inc/portmacro.h ****     #define portDOUBLE        double
  51:Inc/portmacro.h ****     #define portLONG          long
  52:Inc/portmacro.h ****     #define portSHORT         short
  53:Inc/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:Inc/portmacro.h ****     #define portBASE_TYPE     long
  55:Inc/portmacro.h **** 
  56:Inc/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:Inc/portmacro.h ****     typedef long             BaseType_t;
  58:Inc/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:Inc/portmacro.h **** 
  60:Inc/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:Inc/portmacro.h ****         typedef uint16_t     TickType_t;
  62:Inc/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:Inc/portmacro.h ****     #else
  64:Inc/portmacro.h ****         typedef uint32_t     TickType_t;
  65:Inc/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:Inc/portmacro.h **** 
  67:Inc/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:Inc/portmacro.h ****  * not need to be guarded with a critical section. */
  69:Inc/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:Inc/portmacro.h ****     #endif
  71:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  72:Inc/portmacro.h **** 
  73:Inc/portmacro.h **** /* Architecture specifics. */
  74:Inc/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:Inc/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:Inc/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:Inc/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  79:Inc/portmacro.h **** 
  80:Inc/portmacro.h **** /* Scheduler utilities. */
  81:Inc/portmacro.h ****     #define portYIELD()                                 \
  82:Inc/portmacro.h ****     {                                                   \
  83:Inc/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:Inc/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:Inc/portmacro.h ****                                                         \
  86:Inc/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:Inc/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:Inc/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:Inc/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:Inc/portmacro.h ****     }
  91:Inc/portmacro.h **** 
  92:Inc/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:Inc/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:Inc/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:Inc/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  97:Inc/portmacro.h **** 
  98:Inc/portmacro.h **** /* Critical section management. */
  99:Inc/portmacro.h ****     extern void vPortEnterCritical( void );
 100:Inc/portmacro.h ****     extern void vPortExitCritical( void );
 101:Inc/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:Inc/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:Inc/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 25


 104:Inc/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:Inc/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:Inc/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:Inc/portmacro.h **** 
 108:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 109:Inc/portmacro.h **** 
 110:Inc/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:Inc/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:Inc/portmacro.h ****  * (which build with all the ports) will build. */
 113:Inc/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:Inc/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 116:Inc/portmacro.h **** 
 117:Inc/portmacro.h **** /* Tickless idle/low power functionality. */
 118:Inc/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:Inc/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:Inc/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:Inc/portmacro.h ****     #endif
 122:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 123:Inc/portmacro.h **** 
 124:Inc/portmacro.h **** /* Architecture specific optimisations. */
 125:Inc/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:Inc/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:Inc/portmacro.h ****     #endif
 128:Inc/portmacro.h **** 
 129:Inc/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:Inc/portmacro.h **** 
 131:Inc/portmacro.h **** /* Generic helper function. */
 132:Inc/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:Inc/portmacro.h ****         {
 134:Inc/portmacro.h ****             uint8_t ucReturn;
 135:Inc/portmacro.h **** 
 136:Inc/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:Inc/portmacro.h **** 
 138:Inc/portmacro.h ****             return ucReturn;
 139:Inc/portmacro.h ****         }
 140:Inc/portmacro.h **** 
 141:Inc/portmacro.h **** /* Check the configuration. */
 142:Inc/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:Inc/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:Inc/portmacro.h ****         #endif
 145:Inc/portmacro.h **** 
 146:Inc/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:Inc/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:Inc/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:Inc/portmacro.h **** 
 150:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 151:Inc/portmacro.h **** 
 152:Inc/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:Inc/portmacro.h **** 
 154:Inc/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:Inc/portmacro.h **** 
 156:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 157:Inc/portmacro.h **** 
 158:Inc/portmacro.h ****     #ifdef configASSERT
 159:Inc/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:Inc/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 26


 161:Inc/portmacro.h ****     #endif
 162:Inc/portmacro.h **** 
 163:Inc/portmacro.h **** /* portNOP() is not required by this port. */
 164:Inc/portmacro.h ****     #define portNOP()
 165:Inc/portmacro.h **** 
 166:Inc/portmacro.h ****     #define portINLINE              __inline
 167:Inc/portmacro.h **** 
 168:Inc/portmacro.h ****     #ifndef portFORCE_INLINE
 169:Inc/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:Inc/portmacro.h ****     #endif
 171:Inc/portmacro.h **** 
 172:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 173:Inc/portmacro.h **** 
 174:Inc/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 175:Inc/portmacro.h ****     {
 176:Inc/portmacro.h ****         uint32_t ulCurrentInterrupt;
 177:Inc/portmacro.h ****         BaseType_t xReturn;
 178:Inc/portmacro.h **** 
 179:Inc/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 180:Inc/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 181:Inc/portmacro.h **** 
 182:Inc/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 183:Inc/portmacro.h ****         {
 184:Inc/portmacro.h ****             xReturn = pdFALSE;
 185:Inc/portmacro.h ****         }
 186:Inc/portmacro.h ****         else
 187:Inc/portmacro.h ****         {
 188:Inc/portmacro.h ****             xReturn = pdTRUE;
 189:Inc/portmacro.h ****         }
 190:Inc/portmacro.h **** 
 191:Inc/portmacro.h ****         return xReturn;
 192:Inc/portmacro.h ****     }
 193:Inc/portmacro.h **** 
 194:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 195:Inc/portmacro.h **** 
 196:Inc/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 197:Inc/portmacro.h ****     {
 198:Inc/portmacro.h ****         uint32_t ulNewBASEPRI;
 199:Inc/portmacro.h **** 
 200:Inc/portmacro.h ****         __asm volatile
 201:Inc/portmacro.h ****         (
 202:Inc/portmacro.h ****             "	mov %0, %1												\n"\
 203:Inc/portmacro.h ****             "	msr basepri, %0											\n"\
 204:Inc/portmacro.h ****             "	isb														\n"\
 205:Inc/portmacro.h ****             "	dsb														\n"\
 206:Inc/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 207:Inc/portmacro.h ****         );
 208:Inc/portmacro.h ****     }
 209:Inc/portmacro.h **** 
 210:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 211:Inc/portmacro.h **** 
 212:Inc/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 426              		.loc 2 212 38 view .LVU135
 427              	.LBB9:
 213:Inc/portmacro.h ****     {
 214:Inc/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 428              		.loc 2 214 9 view .LVU136
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 27


 215:Inc/portmacro.h **** 
 216:Inc/portmacro.h ****         __asm volatile
 429              		.loc 2 216 9 view .LVU137
 430              		.syntax unified
 431              	@ 216 "Inc/portmacro.h" 1
 432 0000 EFF31183 			mrs r3, basepri											
 433 0004 4FF0BF02 		mov r2, #191												
 434 0008 82F31188 		msr basepri, r2											
 435 000c BFF36F8F 		isb														
 436 0010 BFF34F8F 		dsb														
 437              	
 438              	@ 0 "" 2
 439              	.LVL46:
 217:Inc/portmacro.h ****         (
 218:Inc/portmacro.h ****             "	mrs %0, basepri											\n"\
 219:Inc/portmacro.h ****             "	mov %1, %2												\n"\
 220:Inc/portmacro.h ****             "	msr basepri, %1											\n"\
 221:Inc/portmacro.h ****             "	isb														\n"\
 222:Inc/portmacro.h ****             "	dsb														\n"\
 223:Inc/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 224:Inc/portmacro.h ****         );
 225:Inc/portmacro.h **** 
 226:Inc/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 227:Inc/portmacro.h ****          * warnings. */
 228:Inc/portmacro.h ****         return ulOriginalBASEPRI;
 440              		.loc 2 228 9 view .LVU138
 441              		.loc 2 228 9 is_stmt 0 view .LVU139
 442              		.thumb
 443              		.syntax unified
 444              	.LBE9:
 445              	.LBE8:
 525:Src/event_groups.c ****     }
 446              		.loc 1 525 9 is_stmt 1 view .LVU140
 525:Src/event_groups.c ****     }
 447              		.loc 1 525 18 is_stmt 0 view .LVU141
 448 0014 0068     		ldr	r0, [r0]
 449              	.LVL47:
 527:Src/event_groups.c **** 
 450              		.loc 1 527 5 is_stmt 1 view .LVU142
 451              	.LBB10:
 452              	.LBI10:
 229:Inc/portmacro.h ****     }
 230:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 231:Inc/portmacro.h **** 
 232:Inc/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 453              		.loc 2 232 34 view .LVU143
 454              	.LBB11:
 233:Inc/portmacro.h ****     {
 234:Inc/portmacro.h ****         __asm volatile
 455              		.loc 2 234 9 view .LVU144
 456              		.syntax unified
 457              	@ 234 "Inc/portmacro.h" 1
 458 0016 83F31188 			msr basepri, r3	
 459              	@ 0 "" 2
 460              	.LVL48:
 461              		.loc 2 234 9 is_stmt 0 view .LVU145
 462              		.thumb
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 28


 463              		.syntax unified
 464              	.LBE11:
 465              	.LBE10:
 529:Src/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 466              		.loc 1 529 5 is_stmt 1 view .LVU146
 530:Src/event_groups.c **** /*-----------------------------------------------------------*/
 467              		.loc 1 530 1 is_stmt 0 view .LVU147
 468 001a 7047     		bx	lr
 469              		.cfi_endproc
 470              	.LFE8:
 472              		.section	.text.xEventGroupSetBits,"ax",%progbits
 473              		.align	1
 474              		.global	xEventGroupSetBits
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 478              		.fpu softvfp
 480              	xEventGroupSetBits:
 481              	.LVL49:
 482              	.LFB9:
 535:Src/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 483              		.loc 1 535 1 is_stmt 1 view -0
 484              		.cfi_startproc
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 535:Src/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 487              		.loc 1 535 1 is_stmt 0 view .LVU149
 488 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 489              	.LCFI3:
 490              		.cfi_def_cfa_offset 24
 491              		.cfi_offset 3, -24
 492              		.cfi_offset 4, -20
 493              		.cfi_offset 5, -16
 494              		.cfi_offset 6, -12
 495              		.cfi_offset 7, -8
 496              		.cfi_offset 14, -4
 497 0002 0446     		mov	r4, r0
 498 0004 0D46     		mov	r5, r1
 536:Src/event_groups.c ****     ListItem_t const * pxListEnd;
 499              		.loc 1 536 5 is_stmt 1 view .LVU150
 537:Src/event_groups.c ****     List_t const * pxList;
 500              		.loc 1 537 5 view .LVU151
 538:Src/event_groups.c ****     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 501              		.loc 1 538 5 view .LVU152
 539:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 502              		.loc 1 539 5 view .LVU153
 503              	.LVL50:
 540:Src/event_groups.c ****     BaseType_t xMatchFound = pdFALSE;
 504              		.loc 1 540 5 view .LVU154
 541:Src/event_groups.c **** 
 505              		.loc 1 541 5 view .LVU155
 545:Src/event_groups.c ****     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 506              		.loc 1 545 32 view .LVU156
 546:Src/event_groups.c **** 
 507              		.loc 1 546 73 view .LVU157
 548:Src/event_groups.c ****     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is 
 508              		.loc 1 548 5 view .LVU158
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 29


 549:Src/event_groups.c ****     vTaskSuspendAll();
 509              		.loc 1 549 5 view .LVU159
 549:Src/event_groups.c ****     vTaskSuspendAll();
 510              		.loc 1 549 15 is_stmt 0 view .LVU160
 511 0006 00F10C06 		add	r6, r0, #12
 512              	.LVL51:
 550:Src/event_groups.c ****     {
 513              		.loc 1 550 5 is_stmt 1 view .LVU161
 514 000a FFF7FEFF 		bl	vTaskSuspendAll
 515              	.LVL52:
 552:Src/event_groups.c **** 
 516              		.loc 1 552 62 view .LVU162
 554:Src/event_groups.c **** 
 517              		.loc 1 554 9 view .LVU163
 554:Src/event_groups.c **** 
 518              		.loc 1 554 20 is_stmt 0 view .LVU164
 519 000e 2069     		ldr	r0, [r4, #16]
 520              	.LVL53:
 557:Src/event_groups.c **** 
 521              		.loc 1 557 9 is_stmt 1 view .LVU165
 557:Src/event_groups.c **** 
 522              		.loc 1 557 34 is_stmt 0 view .LVU166
 523 0010 2368     		ldr	r3, [r4]
 524 0012 2B43     		orrs	r3, r3, r5
 525 0014 2360     		str	r3, [r4]
 560:Src/event_groups.c ****         {
 526              		.loc 1 560 9 is_stmt 1 view .LVU167
 539:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 527              		.loc 1 539 17 is_stmt 0 view .LVU168
 528 0016 0027     		movs	r7, #0
 560:Src/event_groups.c ****         {
 529              		.loc 1 560 14 view .LVU169
 530 0018 0AE0     		b	.L28
 531              	.LVL54:
 532              	.L29:
 582:Src/event_groups.c ****             {
 533              		.loc 1 582 18 is_stmt 1 view .LVU170
 582:Src/event_groups.c ****             {
 534              		.loc 1 582 53 is_stmt 0 view .LVU171
 535 001a 2168     		ldr	r1, [r4]
 582:Src/event_groups.c ****             {
 536              		.loc 1 582 20 view .LVU172
 537 001c 32EA0101 		bics	r1, r2, r1
 538 0020 05D1     		bne	.L31
 582:Src/event_groups.c ****             {
 539              		.loc 1 582 20 view .LVU173
 540 0022 11E0     		b	.L30
 541              	.LVL55:
 542              	.L32:
 601:Src/event_groups.c ****                 }
 543              		.loc 1 601 45 is_stmt 1 view .LVU174
 609:Src/event_groups.c ****             }
 544              		.loc 1 609 17 view .LVU175
 609:Src/event_groups.c ****             }
 545              		.loc 1 609 75 is_stmt 0 view .LVU176
 546 0024 2168     		ldr	r1, [r4]
 609:Src/event_groups.c ****             }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 30


 547              		.loc 1 609 17 view .LVU177
 548 0026 41F00071 		orr	r1, r1, #33554432
 549 002a FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 550              	.LVL56:
 551              	.L31:
 535:Src/event_groups.c ****     ListItem_t * pxListItem, * pxNext;
 552              		.loc 1 535 1 view .LVU178
 553 002e 2846     		mov	r0, r5
 554              	.LVL57:
 555              	.L28:
 560:Src/event_groups.c ****         {
 556              		.loc 1 560 14 is_stmt 1 view .LVU179
 557 0030 B042     		cmp	r0, r6
 558 0032 0ED0     		beq	.L35
 562:Src/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 559              		.loc 1 562 13 view .LVU180
 562:Src/event_groups.c ****             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 560              		.loc 1 562 20 is_stmt 0 view .LVU181
 561 0034 4568     		ldr	r5, [r0, #4]
 562              	.LVL58:
 563:Src/event_groups.c ****             xMatchFound = pdFALSE;
 563              		.loc 1 563 13 is_stmt 1 view .LVU182
 563:Src/event_groups.c ****             xMatchFound = pdFALSE;
 564              		.loc 1 563 29 is_stmt 0 view .LVU183
 565 0036 0368     		ldr	r3, [r0]
 566              	.LVL59:
 564:Src/event_groups.c **** 
 567              		.loc 1 564 13 is_stmt 1 view .LVU184
 567:Src/event_groups.c ****             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 568              		.loc 1 567 13 view .LVU185
 568:Src/event_groups.c **** 
 569              		.loc 1 568 13 view .LVU186
 568:Src/event_groups.c **** 
 570              		.loc 1 568 29 is_stmt 0 view .LVU187
 571 0038 23F07F42 		bic	r2, r3, #-16777216
 572              	.LVL60:
 570:Src/event_groups.c ****             {
 573              		.loc 1 570 13 is_stmt 1 view .LVU188
 570:Src/event_groups.c ****             {
 574              		.loc 1 570 15 is_stmt 0 view .LVU189
 575 003c 13F0806F 		tst	r3, #67108864
 576 0040 EBD1     		bne	.L29
 573:Src/event_groups.c ****                 {
 577              		.loc 1 573 17 is_stmt 1 view .LVU190
 573:Src/event_groups.c ****                 {
 578              		.loc 1 573 52 is_stmt 0 view .LVU191
 579 0042 2168     		ldr	r1, [r4]
 573:Src/event_groups.c ****                 {
 580              		.loc 1 573 19 view .LVU192
 581 0044 1142     		tst	r1, r2
 582 0046 F2D0     		beq	.L31
 583              	.L30:
 584              	.LVL61:
 595:Src/event_groups.c ****                 {
 585              		.loc 1 595 17 is_stmt 1 view .LVU193
 595:Src/event_groups.c ****                 {
 586              		.loc 1 595 19 is_stmt 0 view .LVU194
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 31


 587 0048 13F0807F 		tst	r3, #16777216
 588 004c EAD0     		beq	.L32
 597:Src/event_groups.c ****                 }
 589              		.loc 1 597 21 is_stmt 1 view .LVU195
 597:Src/event_groups.c ****                 }
 590              		.loc 1 597 35 is_stmt 0 view .LVU196
 591 004e 1743     		orrs	r7, r7, r2
 592              	.LVL62:
 597:Src/event_groups.c ****                 }
 593              		.loc 1 597 35 view .LVU197
 594 0050 E8E7     		b	.L32
 595              	.LVL63:
 596              	.L35:
 620:Src/event_groups.c ****     }
 597              		.loc 1 620 9 is_stmt 1 view .LVU198
 620:Src/event_groups.c ****     }
 598              		.loc 1 620 34 is_stmt 0 view .LVU199
 599 0052 2368     		ldr	r3, [r4]
 600 0054 23EA0707 		bic	r7, r3, r7
 601              	.LVL64:
 620:Src/event_groups.c ****     }
 602              		.loc 1 620 34 view .LVU200
 603 0058 2760     		str	r7, [r4]
 622:Src/event_groups.c **** 
 604              		.loc 1 622 5 is_stmt 1 view .LVU201
 622:Src/event_groups.c **** 
 605              		.loc 1 622 14 is_stmt 0 view .LVU202
 606 005a FFF7FEFF 		bl	xTaskResumeAll
 607              	.LVL65:
 624:Src/event_groups.c **** }
 608              		.loc 1 624 5 is_stmt 1 view .LVU203
 625:Src/event_groups.c **** /*-----------------------------------------------------------*/
 609              		.loc 1 625 1 is_stmt 0 view .LVU204
 610 005e 2068     		ldr	r0, [r4]
 611 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 625:Src/event_groups.c **** /*-----------------------------------------------------------*/
 612              		.loc 1 625 1 view .LVU205
 613              		.cfi_endproc
 614              	.LFE9:
 616              		.section	.text.xEventGroupSync,"ax",%progbits
 617              		.align	1
 618              		.global	xEventGroupSync
 619              		.syntax unified
 620              		.thumb
 621              		.thumb_func
 622              		.fpu softvfp
 624              	xEventGroupSync:
 625              	.LVL66:
 626              	.LFB5:
 198:Src/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 627              		.loc 1 198 1 is_stmt 1 view -0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 198:Src/event_groups.c ****     EventBits_t uxOriginalBitValue, uxReturn;
 631              		.loc 1 198 1 is_stmt 0 view .LVU207
 632 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 32


 633              	.LCFI4:
 634              		.cfi_def_cfa_offset 24
 635              		.cfi_offset 4, -24
 636              		.cfi_offset 5, -20
 637              		.cfi_offset 6, -16
 638              		.cfi_offset 7, -12
 639              		.cfi_offset 8, -8
 640              		.cfi_offset 14, -4
 641 0004 0546     		mov	r5, r0
 642 0006 8846     		mov	r8, r1
 643 0008 1746     		mov	r7, r2
 644 000a 1E46     		mov	r6, r3
 199:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 645              		.loc 1 199 5 is_stmt 1 view .LVU208
 200:Src/event_groups.c ****     BaseType_t xAlreadyYielded;
 646              		.loc 1 200 5 view .LVU209
 647              	.LVL67:
 201:Src/event_groups.c ****     BaseType_t xTimeoutOccurred = pdFALSE;
 648              		.loc 1 201 5 view .LVU210
 202:Src/event_groups.c **** 
 649              		.loc 1 202 5 view .LVU211
 204:Src/event_groups.c ****     configASSERT( uxBitsToWaitFor != 0 );
 650              		.loc 1 204 77 view .LVU212
 205:Src/event_groups.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 651              		.loc 1 205 41 view .LVU213
 208:Src/event_groups.c ****         }
 652              		.loc 1 208 114 view .LVU214
 212:Src/event_groups.c ****     {
 653              		.loc 1 212 5 view .LVU215
 654 000c FFF7FEFF 		bl	vTaskSuspendAll
 655              	.LVL68:
 214:Src/event_groups.c **** 
 656              		.loc 1 214 9 view .LVU216
 214:Src/event_groups.c **** 
 657              		.loc 1 214 28 is_stmt 0 view .LVU217
 658 0010 2C68     		ldr	r4, [r5]
 659              	.LVL69:
 216:Src/event_groups.c **** 
 660              		.loc 1 216 9 is_stmt 1 view .LVU218
 216:Src/event_groups.c **** 
 661              		.loc 1 216 18 is_stmt 0 view .LVU219
 662 0012 4146     		mov	r1, r8
 663 0014 2846     		mov	r0, r5
 664 0016 FFF7FEFF 		bl	xEventGroupSetBits
 665              	.LVL70:
 218:Src/event_groups.c ****         {
 666              		.loc 1 218 9 is_stmt 1 view .LVU220
 218:Src/event_groups.c ****         {
 667              		.loc 1 218 36 is_stmt 0 view .LVU221
 668 001a 44EA0804 		orr	r4, r4, r8
 669              	.LVL71:
 218:Src/event_groups.c ****         {
 670              		.loc 1 218 11 view .LVU222
 671 001e 37EA0403 		bics	r3, r7, r4
 672 0022 18D0     		beq	.L45
 231:Src/event_groups.c ****             {
 673              		.loc 1 231 13 is_stmt 1 view .LVU223
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 33


 231:Src/event_groups.c ****             {
 674              		.loc 1 231 15 is_stmt 0 view .LVU224
 675 0024 EEB9     		cbnz	r6, .L46
 250:Src/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 676              		.loc 1 250 17 is_stmt 1 view .LVU225
 250:Src/event_groups.c ****                 xTimeoutOccurred = pdTRUE;
 677              		.loc 1 250 26 is_stmt 0 view .LVU226
 678 0026 2C68     		ldr	r4, [r5]
 679              	.LVL72:
 251:Src/event_groups.c ****             }
 680              		.loc 1 251 17 is_stmt 1 view .LVU227
 681              	.L38:
 255:Src/event_groups.c **** 
 682              		.loc 1 255 5 view .LVU228
 255:Src/event_groups.c **** 
 683              		.loc 1 255 23 is_stmt 0 view .LVU229
 684 0028 FFF7FEFF 		bl	xTaskResumeAll
 685              	.LVL73:
 257:Src/event_groups.c ****     {
 686              		.loc 1 257 5 is_stmt 1 view .LVU230
 257:Src/event_groups.c ****     {
 687              		.loc 1 257 7 is_stmt 0 view .LVU231
 688 002c 86B1     		cbz	r6, .L36
 259:Src/event_groups.c ****         {
 689              		.loc 1 259 9 is_stmt 1 view .LVU232
 259:Src/event_groups.c ****         {
 690              		.loc 1 259 11 is_stmt 0 view .LVU233
 691 002e 38B9     		cbnz	r0, .L41
 261:Src/event_groups.c ****         }
 692              		.loc 1 261 13 is_stmt 1 view .LVU234
 693 0030 164B     		ldr	r3, .L49
 694 0032 4FF08052 		mov	r2, #268435456
 695 0036 1A60     		str	r2, [r3]
 261:Src/event_groups.c ****         }
 696              		.loc 1 261 13 view .LVU235
 697              		.syntax unified
 698              	@ 261 "Src/event_groups.c" 1
 699 0038 BFF34F8F 		dsb
 700              	@ 0 "" 2
 261:Src/event_groups.c ****         }
 701              		.loc 1 261 13 view .LVU236
 702              	@ 261 "Src/event_groups.c" 1
 703 003c BFF36F8F 		isb
 704              	@ 0 "" 2
 261:Src/event_groups.c ****         }
 705              		.loc 1 261 35 view .LVU237
 706              		.thumb
 707              		.syntax unified
 708              	.L41:
 265:Src/event_groups.c ****         }
 709              		.loc 1 265 37 view .LVU238
 272:Src/event_groups.c **** 
 710              		.loc 1 272 9 view .LVU239
 272:Src/event_groups.c **** 
 711              		.loc 1 272 20 is_stmt 0 view .LVU240
 712 0040 FFF7FEFF 		bl	uxTaskResetEventItemValue
 713              	.LVL74:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 34


 272:Src/event_groups.c **** 
 714              		.loc 1 272 20 view .LVU241
 715 0044 0446     		mov	r4, r0
 716              	.LVL75:
 274:Src/event_groups.c ****         {
 717              		.loc 1 274 9 is_stmt 1 view .LVU242
 274:Src/event_groups.c ****         {
 718              		.loc 1 274 11 is_stmt 0 view .LVU243
 719 0046 10F0007F 		tst	r0, #33554432
 720 004a 12D0     		beq	.L47
 721              	.LVL76:
 722              	.L42:
 301:Src/event_groups.c **** 
 723              		.loc 1 301 9 is_stmt 1 view .LVU244
 305:Src/event_groups.c ****     }
 724              		.loc 1 305 9 view .LVU245
 305:Src/event_groups.c ****     }
 725              		.loc 1 305 18 is_stmt 0 view .LVU246
 726 004c 24F07F44 		bic	r4, r4, #-16777216
 727              	.LVL77:
 308:Src/event_groups.c **** 
 728              		.loc 1 308 5 is_stmt 1 view .LVU247
 311:Src/event_groups.c **** 
 729              		.loc 1 311 5 view .LVU248
 313:Src/event_groups.c **** }
 730              		.loc 1 313 5 view .LVU249
 731              	.L36:
 314:Src/event_groups.c **** /*-----------------------------------------------------------*/
 732              		.loc 1 314 1 is_stmt 0 view .LVU250
 733 0050 2046     		mov	r0, r4
 734 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 735              	.LVL78:
 736              	.L45:
 221:Src/event_groups.c **** 
 737              		.loc 1 221 13 is_stmt 1 view .LVU251
 225:Src/event_groups.c **** 
 738              		.loc 1 225 13 view .LVU252
 225:Src/event_groups.c **** 
 739              		.loc 1 225 38 is_stmt 0 view .LVU253
 740 0056 2B68     		ldr	r3, [r5]
 741 0058 23EA0703 		bic	r3, r3, r7
 742 005c 2B60     		str	r3, [r5]
 227:Src/event_groups.c ****         }
 743              		.loc 1 227 13 is_stmt 1 view .LVU254
 744              	.LVL79:
 227:Src/event_groups.c ****         }
 745              		.loc 1 227 26 is_stmt 0 view .LVU255
 746 005e 0026     		movs	r6, #0
 747 0060 E2E7     		b	.L38
 748              	.LVL80:
 749              	.L46:
 233:Src/event_groups.c **** 
 750              		.loc 1 233 89 is_stmt 1 view .LVU256
 238:Src/event_groups.c **** 
 751              		.loc 1 238 17 view .LVU257
 752 0062 3246     		mov	r2, r6
 753 0064 47F0A061 		orr	r1, r7, #83886080
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 35


 754 0068 281D     		adds	r0, r5, #4
 755 006a FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 756              	.LVL81:
 244:Src/event_groups.c ****             }
 757              		.loc 1 244 17 view .LVU258
 244:Src/event_groups.c ****             }
 758              		.loc 1 244 26 is_stmt 0 view .LVU259
 759 006e 0024     		movs	r4, #0
 760 0070 DAE7     		b	.L38
 761              	.LVL82:
 762              	.L47:
 277:Src/event_groups.c ****             {
 763              		.loc 1 277 13 is_stmt 1 view .LVU260
 764 0072 FFF7FEFF 		bl	vPortEnterCritical
 765              	.LVL83:
 279:Src/event_groups.c **** 
 766              		.loc 1 279 17 view .LVU261
 279:Src/event_groups.c **** 
 767              		.loc 1 279 26 is_stmt 0 view .LVU262
 768 0076 2C68     		ldr	r4, [r5]
 769              	.LVL84:
 285:Src/event_groups.c ****                 {
 770              		.loc 1 285 17 is_stmt 1 view .LVU263
 285:Src/event_groups.c ****                 {
 771              		.loc 1 285 19 is_stmt 0 view .LVU264
 772 0078 37EA0403 		bics	r3, r7, r4
 773 007c 02D0     		beq	.L48
 774              	.LVL85:
 775              	.L43:
 291:Src/event_groups.c ****                 }
 776              		.loc 1 291 45 is_stmt 1 view .LVU265
 294:Src/event_groups.c **** 
 777              		.loc 1 294 13 view .LVU266
 778 007e FFF7FEFF 		bl	vPortExitCritical
 779              	.LVL86:
 296:Src/event_groups.c ****         }
 780              		.loc 1 296 13 view .LVU267
 296:Src/event_groups.c ****         }
 781              		.loc 1 296 13 is_stmt 0 view .LVU268
 782 0082 E3E7     		b	.L42
 783              	.LVL87:
 784              	.L48:
 287:Src/event_groups.c ****                 }
 785              		.loc 1 287 21 is_stmt 1 view .LVU269
 287:Src/event_groups.c ****                 }
 786              		.loc 1 287 46 is_stmt 0 view .LVU270
 787 0084 24EA0707 		bic	r7, r4, r7
 788              	.LVL88:
 287:Src/event_groups.c ****                 }
 789              		.loc 1 287 46 view .LVU271
 790 0088 2F60     		str	r7, [r5]
 791 008a F8E7     		b	.L43
 792              	.L50:
 793              		.align	2
 794              	.L49:
 795 008c 04ED00E0 		.word	-536810236
 796              		.cfi_endproc
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 36


 797              	.LFE5:
 799              		.section	.text.vEventGroupDelete,"ax",%progbits
 800              		.align	1
 801              		.global	vEventGroupDelete
 802              		.syntax unified
 803              		.thumb
 804              		.thumb_func
 805              		.fpu softvfp
 807              	vEventGroupDelete:
 808              	.LVL89:
 809              	.LFB10:
 629:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 810              		.loc 1 629 1 is_stmt 1 view -0
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 0
 813              		@ frame_needed = 0, uses_anonymous_args = 0
 629:Src/event_groups.c ****     EventGroup_t * pxEventBits = xEventGroup;
 814              		.loc 1 629 1 is_stmt 0 view .LVU273
 815 0000 10B5     		push	{r4, lr}
 816              	.LCFI5:
 817              		.cfi_def_cfa_offset 8
 818              		.cfi_offset 4, -8
 819              		.cfi_offset 14, -4
 820 0002 0446     		mov	r4, r0
 630:Src/event_groups.c ****     const List_t * pxTasksWaitingForBits;
 821              		.loc 1 630 5 is_stmt 1 view .LVU274
 822              	.LVL90:
 631:Src/event_groups.c **** 
 823              		.loc 1 631 5 view .LVU275
 633:Src/event_groups.c **** 
 824              		.loc 1 633 32 view .LVU276
 635:Src/event_groups.c **** 
 825              		.loc 1 635 5 view .LVU277
 637:Src/event_groups.c ****     {
 826              		.loc 1 637 5 view .LVU278
 827 0004 FFF7FEFF 		bl	vTaskSuspendAll
 828              	.LVL91:
 639:Src/event_groups.c **** 
 829              		.loc 1 639 47 view .LVU279
 641:Src/event_groups.c ****         {
 830              		.loc 1 641 9 view .LVU280
 831              	.L52:
 641:Src/event_groups.c ****         {
 832              		.loc 1 641 14 view .LVU281
 641:Src/event_groups.c ****         {
 833              		.loc 1 641 16 is_stmt 0 view .LVU282
 834 0008 6368     		ldr	r3, [r4, #4]
 641:Src/event_groups.c ****         {
 835              		.loc 1 641 14 view .LVU283
 836 000a 2BB1     		cbz	r3, .L55
 645:Src/event_groups.c ****             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCK
 837              		.loc 1 645 130 is_stmt 1 view .LVU284
 646:Src/event_groups.c ****         }
 838              		.loc 1 646 13 view .LVU285
 839 000c 4FF00071 		mov	r1, #33554432
 840 0010 2069     		ldr	r0, [r4, #16]
 841 0012 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 37


 842              	.LVL92:
 843 0016 F7E7     		b	.L52
 844              	.L55:
 653:Src/event_groups.c ****             }
 845              		.loc 1 653 17 view .LVU286
 846 0018 2046     		mov	r0, r4
 847 001a FFF7FEFF 		bl	vPortFree
 848              	.LVL93:
 670:Src/event_groups.c **** }
 849              		.loc 1 670 5 view .LVU287
 670:Src/event_groups.c **** }
 850              		.loc 1 670 14 is_stmt 0 view .LVU288
 851 001e FFF7FEFF 		bl	xTaskResumeAll
 852              	.LVL94:
 671:Src/event_groups.c **** /*-----------------------------------------------------------*/
 853              		.loc 1 671 1 view .LVU289
 854 0022 10BD     		pop	{r4, pc}
 671:Src/event_groups.c **** /*-----------------------------------------------------------*/
 855              		.loc 1 671 1 view .LVU290
 856              		.cfi_endproc
 857              	.LFE10:
 859              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 860              		.align	1
 861              		.global	vEventGroupSetBitsCallback
 862              		.syntax unified
 863              		.thumb
 864              		.thumb_func
 865              		.fpu softvfp
 867              	vEventGroupSetBitsCallback:
 868              	.LVL95:
 869              	.LFB11:
 678:Src/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 870              		.loc 1 678 1 is_stmt 1 view -0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 678:Src/event_groups.c ****     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't a
 874              		.loc 1 678 1 is_stmt 0 view .LVU292
 875 0000 08B5     		push	{r3, lr}
 876              	.LCFI6:
 877              		.cfi_def_cfa_offset 8
 878              		.cfi_offset 3, -8
 879              		.cfi_offset 14, -4
 679:Src/event_groups.c **** }
 880              		.loc 1 679 5 is_stmt 1 view .LVU293
 679:Src/event_groups.c **** }
 881              		.loc 1 679 14 is_stmt 0 view .LVU294
 882 0002 FFF7FEFF 		bl	xEventGroupSetBits
 883              	.LVL96:
 680:Src/event_groups.c **** /*-----------------------------------------------------------*/
 884              		.loc 1 680 1 view .LVU295
 885 0006 08BD     		pop	{r3, pc}
 886              		.cfi_endproc
 887              	.LFE11:
 889              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 890              		.align	1
 891              		.global	vEventGroupClearBitsCallback
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 38


 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 895              		.fpu softvfp
 897              	vEventGroupClearBitsCallback:
 898              	.LVL97:
 899              	.LFB12:
 687:Src/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 900              		.loc 1 687 1 is_stmt 1 view -0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 0
 903              		@ frame_needed = 0, uses_anonymous_args = 0
 687:Src/event_groups.c ****     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can
 904              		.loc 1 687 1 is_stmt 0 view .LVU297
 905 0000 08B5     		push	{r3, lr}
 906              	.LCFI7:
 907              		.cfi_def_cfa_offset 8
 908              		.cfi_offset 3, -8
 909              		.cfi_offset 14, -4
 688:Src/event_groups.c **** }
 910              		.loc 1 688 5 is_stmt 1 view .LVU298
 688:Src/event_groups.c **** }
 911              		.loc 1 688 14 is_stmt 0 view .LVU299
 912 0002 FFF7FEFF 		bl	xEventGroupClearBits
 913              	.LVL98:
 689:Src/event_groups.c **** /*-----------------------------------------------------------*/
 914              		.loc 1 689 1 view .LVU300
 915 0006 08BD     		pop	{r3, pc}
 916              		.cfi_endproc
 917              	.LFE12:
 919              		.text
 920              	.Letext0:
 921              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 922              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 923              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 924              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\stddef.h"
 925              		.file 7 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 926              		.file 8 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
 927              		.file 9 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 928              		.file 10 "Inc/list.h"
 929              		.file 11 "Inc/event_groups.h"
 930              		.file 12 "Inc/task.h"
 931              		.file 13 "Inc/portable.h"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccnYglKO.s 			page 39


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:16     .text.prvTestWaitCondition:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:23     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:76     .text.xEventGroupCreate:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:83     .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:124    .text.xEventGroupWaitBits:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:131    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:344    .text.xEventGroupWaitBits:00000000000000b8 $d
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:349    .text.xEventGroupClearBits:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:356    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:404    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:411    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:473    .text.xEventGroupSetBits:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:480    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:617    .text.xEventGroupSync:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:624    .text.xEventGroupSync:0000000000000000 xEventGroupSync
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:795    .text.xEventGroupSync:000000000000008c $d
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:800    .text.vEventGroupDelete:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:807    .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:860    .text.vEventGroupSetBitsCallback:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:867    .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:890    .text.vEventGroupClearBitsCallback:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccnYglKO.s:897    .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
vTaskSuspendAll
vTaskPlaceOnUnorderedEventList
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskRemoveFromUnorderedEventList
vPortFree
