ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"port.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTaskExitError,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	prvTaskExitError:
  24              	.LFB5:
  25              		.file 1 "Src/port.c"
   1:Src/port.c    **** /*
   2:Src/port.c    ****  * FreeRTOS Kernel V10.4.6
   3:Src/port.c    ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Src/port.c    ****  *
   5:Src/port.c    ****  * SPDX-License-Identifier: MIT
   6:Src/port.c    ****  *
   7:Src/port.c    ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Src/port.c    ****  * this software and associated documentation files (the "Software"), to deal in
   9:Src/port.c    ****  * the Software without restriction, including without limitation the rights to
  10:Src/port.c    ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Src/port.c    ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Src/port.c    ****  * subject to the following conditions:
  13:Src/port.c    ****  *
  14:Src/port.c    ****  * The above copyright notice and this permission notice shall be included in all
  15:Src/port.c    ****  * copies or substantial portions of the Software.
  16:Src/port.c    ****  *
  17:Src/port.c    ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Src/port.c    ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Src/port.c    ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Src/port.c    ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Src/port.c    ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Src/port.c    ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Src/port.c    ****  *
  24:Src/port.c    ****  * https://www.FreeRTOS.org
  25:Src/port.c    ****  * https://github.com/FreeRTOS
  26:Src/port.c    ****  *
  27:Src/port.c    ****  */
  28:Src/port.c    **** 
  29:Src/port.c    **** /*-----------------------------------------------------------
  30:Src/port.c    **** * Implementation of functions defined in portable.h for the ARM CM3 port.
  31:Src/port.c    **** *----------------------------------------------------------*/
  32:Src/port.c    **** 
  33:Src/port.c    **** /* Scheduler includes. */
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 2


  34:Src/port.c    **** #include "FreeRTOS.h"
  35:Src/port.c    **** #include "task.h"
  36:Src/port.c    **** 
  37:Src/port.c    **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  38:Src/port.c    ****  * defined.  The value should also ensure backward compatibility.
  39:Src/port.c    ****  * FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  40:Src/port.c    **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  41:Src/port.c    ****     #define configKERNEL_INTERRUPT_PRIORITY    255
  42:Src/port.c    **** #endif
  43:Src/port.c    **** 
  44:Src/port.c    **** #ifndef configSYSTICK_CLOCK_HZ
  45:Src/port.c    ****     #define configSYSTICK_CLOCK_HZ      configCPU_CLOCK_HZ
  46:Src/port.c    ****     /* Ensure the SysTick is clocked at the same frequency as the core. */
  47:Src/port.c    ****     #define portNVIC_SYSTICK_CLK_BIT    ( 1UL << 2UL )
  48:Src/port.c    **** #else
  49:Src/port.c    **** 
  50:Src/port.c    **** /* The way the SysTick is clocked is not modified in case it is not the same
  51:Src/port.c    ****  * as the core. */
  52:Src/port.c    ****     #define portNVIC_SYSTICK_CLK_BIT    ( 0 )
  53:Src/port.c    **** #endif
  54:Src/port.c    **** 
  55:Src/port.c    **** /* Constants required to manipulate the core.  Registers first... */
  56:Src/port.c    **** #define portNVIC_SYSTICK_CTRL_REG             ( *( ( volatile uint32_t * ) 0xe000e010 ) )
  57:Src/port.c    **** #define portNVIC_SYSTICK_LOAD_REG             ( *( ( volatile uint32_t * ) 0xe000e014 ) )
  58:Src/port.c    **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG    ( *( ( volatile uint32_t * ) 0xe000e018 ) )
  59:Src/port.c    **** #define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )
  60:Src/port.c    **** /* ...then bits in the registers. */
  61:Src/port.c    **** #define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
  62:Src/port.c    **** #define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )
  63:Src/port.c    **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT       ( 1UL << 16UL )
  64:Src/port.c    **** #define portNVIC_PENDSVCLEAR_BIT              ( 1UL << 27UL )
  65:Src/port.c    **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT       ( 1UL << 25UL )
  66:Src/port.c    **** 
  67:Src/port.c    **** #define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  68:Src/port.c    **** #define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  69:Src/port.c    **** 
  70:Src/port.c    **** /* Constants required to check the validity of an interrupt priority. */
  71:Src/port.c    **** #define portFIRST_USER_INTERRUPT_NUMBER       ( 16 )
  72:Src/port.c    **** #define portNVIC_IP_REGISTERS_OFFSET_16       ( 0xE000E3F0 )
  73:Src/port.c    **** #define portAIRCR_REG                         ( *( ( volatile uint32_t * ) 0xE000ED0C ) )
  74:Src/port.c    **** #define portMAX_8_BIT_VALUE                   ( ( uint8_t ) 0xff )
  75:Src/port.c    **** #define portTOP_BIT_OF_BYTE                   ( ( uint8_t ) 0x80 )
  76:Src/port.c    **** #define portMAX_PRIGROUP_BITS                 ( ( uint8_t ) 7 )
  77:Src/port.c    **** #define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
  78:Src/port.c    **** #define portPRIGROUP_SHIFT                    ( 8UL )
  79:Src/port.c    **** 
  80:Src/port.c    **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  81:Src/port.c    **** #define portVECTACTIVE_MASK                   ( 0xFFUL )
  82:Src/port.c    **** 
  83:Src/port.c    **** /* Constants required to set up the initial stack. */
  84:Src/port.c    **** #define portINITIAL_XPSR                      ( 0x01000000UL )
  85:Src/port.c    **** 
  86:Src/port.c    **** /* The systick is a 24-bit counter. */
  87:Src/port.c    **** #define portMAX_24_BIT_NUMBER                 ( 0xffffffUL )
  88:Src/port.c    **** 
  89:Src/port.c    **** /* A fiddle factor to estimate the number of SysTick counts that would have
  90:Src/port.c    ****  * occurred while the SysTick counter is stopped during tickless idle
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 3


  91:Src/port.c    ****  * calculations. */
  92:Src/port.c    **** #define portMISSED_COUNTS_FACTOR              ( 45UL )
  93:Src/port.c    **** 
  94:Src/port.c    **** /* For strict compliance with the Cortex-M spec the task start address should
  95:Src/port.c    ****  * have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  96:Src/port.c    **** #define portSTART_ADDRESS_MASK                ( ( StackType_t ) 0xfffffffeUL )
  97:Src/port.c    **** 
  98:Src/port.c    **** /* Let the user override the pre-loading of the initial LR with the address of
  99:Src/port.c    ****  * prvTaskExitError() in case it messes up unwinding of the stack in the
 100:Src/port.c    ****  * debugger. */
 101:Src/port.c    **** #ifdef configTASK_RETURN_ADDRESS
 102:Src/port.c    ****     #define portTASK_RETURN_ADDRESS    configTASK_RETURN_ADDRESS
 103:Src/port.c    **** #else
 104:Src/port.c    ****     #define portTASK_RETURN_ADDRESS    prvTaskExitError
 105:Src/port.c    **** #endif
 106:Src/port.c    **** 
 107:Src/port.c    **** /*
 108:Src/port.c    ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 109:Src/port.c    ****  * file is weak to allow application writers to change the timer used to
 110:Src/port.c    ****  * generate the tick interrupt.
 111:Src/port.c    ****  */
 112:Src/port.c    **** void vPortSetupTimerInterrupt( void );
 113:Src/port.c    **** 
 114:Src/port.c    **** /*
 115:Src/port.c    ****  * Exception handlers.
 116:Src/port.c    ****  */
 117:Src/port.c    **** void xPortPendSVHandler( void ) __attribute__( ( naked ) );
 118:Src/port.c    **** void xPortSysTickHandler( void );
 119:Src/port.c    **** void vPortSVCHandler( void ) __attribute__( ( naked ) );
 120:Src/port.c    **** 
 121:Src/port.c    **** /*
 122:Src/port.c    ****  * Start first task is a separate function so it can be tested in isolation.
 123:Src/port.c    ****  */
 124:Src/port.c    **** static void prvPortStartFirstTask( void ) __attribute__( ( naked ) );
 125:Src/port.c    **** 
 126:Src/port.c    **** /*
 127:Src/port.c    ****  * Used to catch tasks that attempt to return from their implementing function.
 128:Src/port.c    ****  */
 129:Src/port.c    **** static void prvTaskExitError( void );
 130:Src/port.c    **** 
 131:Src/port.c    **** /*-----------------------------------------------------------*/
 132:Src/port.c    **** 
 133:Src/port.c    **** /* Each task maintains its own interrupt status in the critical nesting
 134:Src/port.c    ****  * variable. */
 135:Src/port.c    **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 136:Src/port.c    **** 
 137:Src/port.c    **** /*
 138:Src/port.c    ****  * The number of SysTick increments that make up one tick period.
 139:Src/port.c    ****  */
 140:Src/port.c    **** #if ( configUSE_TICKLESS_IDLE == 1 )
 141:Src/port.c    ****     static uint32_t ulTimerCountsForOneTick = 0;
 142:Src/port.c    **** #endif /* configUSE_TICKLESS_IDLE */
 143:Src/port.c    **** 
 144:Src/port.c    **** /*
 145:Src/port.c    ****  * The maximum number of tick periods that can be suppressed is limited by the
 146:Src/port.c    ****  * 24 bit resolution of the SysTick timer.
 147:Src/port.c    ****  */
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 4


 148:Src/port.c    **** #if ( configUSE_TICKLESS_IDLE == 1 )
 149:Src/port.c    ****     static uint32_t xMaximumPossibleSuppressedTicks = 0;
 150:Src/port.c    **** #endif /* configUSE_TICKLESS_IDLE */
 151:Src/port.c    **** 
 152:Src/port.c    **** /*
 153:Src/port.c    ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 154:Src/port.c    ****  * power functionality only.
 155:Src/port.c    ****  */
 156:Src/port.c    **** #if ( configUSE_TICKLESS_IDLE == 1 )
 157:Src/port.c    ****     static uint32_t ulStoppedTimerCompensation = 0;
 158:Src/port.c    **** #endif /* configUSE_TICKLESS_IDLE */
 159:Src/port.c    **** 
 160:Src/port.c    **** /*
 161:Src/port.c    ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 162:Src/port.c    ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 163:Src/port.c    ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 164:Src/port.c    ****  */
 165:Src/port.c    **** #if ( configASSERT_DEFINED == 1 )
 166:Src/port.c    ****     static uint8_t ucMaxSysCallPriority = 0;
 167:Src/port.c    ****     static uint32_t ulMaxPRIGROUPValue = 0;
 168:Src/port.c    ****     static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t *
 169:Src/port.c    **** #endif /* configASSERT_DEFINED */
 170:Src/port.c    **** 
 171:Src/port.c    **** /*-----------------------------------------------------------*/
 172:Src/port.c    **** 
 173:Src/port.c    **** /*
 174:Src/port.c    ****  * See header file for description.
 175:Src/port.c    ****  */
 176:Src/port.c    **** StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
 177:Src/port.c    ****                                      TaskFunction_t pxCode,
 178:Src/port.c    ****                                      void * pvParameters )
 179:Src/port.c    **** {
 180:Src/port.c    ****     /* Simulate the stack frame as it would be created by a context switch
 181:Src/port.c    ****      * interrupt. */
 182:Src/port.c    ****     pxTopOfStack--;                                                      /* Offset added to account
 183:Src/port.c    ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 184:Src/port.c    ****     pxTopOfStack--;
 185:Src/port.c    ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 186:Src/port.c    ****     pxTopOfStack--;
 187:Src/port.c    ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 188:Src/port.c    ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 189:Src/port.c    ****     *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 190:Src/port.c    ****     pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R
 191:Src/port.c    **** 
 192:Src/port.c    ****     return pxTopOfStack;
 193:Src/port.c    **** }
 194:Src/port.c    **** /*-----------------------------------------------------------*/
 195:Src/port.c    **** 
 196:Src/port.c    **** static void prvTaskExitError( void )
 197:Src/port.c    **** {
  26              		.loc 1 197 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 8
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 82B0     		sub	sp, sp, #8
  32              	.LCFI0:
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 5


  33              		.cfi_def_cfa_offset 8
 198:Src/port.c    ****     volatile uint32_t ulDummy = 0UL;
  34              		.loc 1 198 5 view .LVU1
  35              		.loc 1 198 23 is_stmt 0 view .LVU2
  36 0002 0023     		movs	r3, #0
  37 0004 0193     		str	r3, [sp, #4]
 199:Src/port.c    **** 
 200:Src/port.c    ****     /* A function that implements a task must not exit or attempt to return to
 201:Src/port.c    ****      * its caller as there is nothing to return to.  If a task wants to exit it
 202:Src/port.c    ****      * should instead call vTaskDelete( NULL ).
 203:Src/port.c    ****      *
 204:Src/port.c    ****      * Artificially force an assert() to be triggered if configASSERT() is
 205:Src/port.c    ****      * defined, then stop here so application writers can catch the error. */
 206:Src/port.c    ****     configASSERT( uxCriticalNesting == ~0UL );
  38              		.loc 1 206 46 is_stmt 1 view .LVU3
 207:Src/port.c    ****     portDISABLE_INTERRUPTS();
  39              		.loc 1 207 5 view .LVU4
  40              	.LBB12:
  41              	.LBI12:
  42              		.file 2 "Inc/portmacro.h"
   1:Inc/portmacro.h **** /*
   2:Inc/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:Inc/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Inc/portmacro.h ****  *
   5:Inc/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:Inc/portmacro.h ****  *
   7:Inc/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Inc/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:Inc/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:Inc/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Inc/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Inc/portmacro.h ****  * subject to the following conditions:
  13:Inc/portmacro.h ****  *
  14:Inc/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:Inc/portmacro.h ****  * copies or substantial portions of the Software.
  16:Inc/portmacro.h ****  *
  17:Inc/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Inc/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Inc/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Inc/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Inc/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Inc/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Inc/portmacro.h ****  *
  24:Inc/portmacro.h ****  * https://www.FreeRTOS.org
  25:Inc/portmacro.h ****  * https://github.com/FreeRTOS
  26:Inc/portmacro.h ****  *
  27:Inc/portmacro.h ****  */
  28:Inc/portmacro.h **** 
  29:Inc/portmacro.h **** 
  30:Inc/portmacro.h **** #ifndef PORTMACRO_H
  31:Inc/portmacro.h ****     #define PORTMACRO_H
  32:Inc/portmacro.h **** 
  33:Inc/portmacro.h ****     #ifdef __cplusplus
  34:Inc/portmacro.h ****         extern "C" {
  35:Inc/portmacro.h ****     #endif
  36:Inc/portmacro.h **** 
  37:Inc/portmacro.h **** /*-----------------------------------------------------------
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 6


  38:Inc/portmacro.h ****  * Port specific definitions.
  39:Inc/portmacro.h ****  *
  40:Inc/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:Inc/portmacro.h ****  * given hardware and compiler.
  42:Inc/portmacro.h ****  *
  43:Inc/portmacro.h ****  * These settings should not be altered.
  44:Inc/portmacro.h ****  *-----------------------------------------------------------
  45:Inc/portmacro.h ****  */
  46:Inc/portmacro.h **** 
  47:Inc/portmacro.h **** /* Type definitions. */
  48:Inc/portmacro.h ****     #define portCHAR          char
  49:Inc/portmacro.h ****     #define portFLOAT         float
  50:Inc/portmacro.h ****     #define portDOUBLE        double
  51:Inc/portmacro.h ****     #define portLONG          long
  52:Inc/portmacro.h ****     #define portSHORT         short
  53:Inc/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:Inc/portmacro.h ****     #define portBASE_TYPE     long
  55:Inc/portmacro.h **** 
  56:Inc/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:Inc/portmacro.h ****     typedef long             BaseType_t;
  58:Inc/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:Inc/portmacro.h **** 
  60:Inc/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:Inc/portmacro.h ****         typedef uint16_t     TickType_t;
  62:Inc/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:Inc/portmacro.h ****     #else
  64:Inc/portmacro.h ****         typedef uint32_t     TickType_t;
  65:Inc/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:Inc/portmacro.h **** 
  67:Inc/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:Inc/portmacro.h ****  * not need to be guarded with a critical section. */
  69:Inc/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:Inc/portmacro.h ****     #endif
  71:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  72:Inc/portmacro.h **** 
  73:Inc/portmacro.h **** /* Architecture specifics. */
  74:Inc/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:Inc/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:Inc/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:Inc/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  79:Inc/portmacro.h **** 
  80:Inc/portmacro.h **** /* Scheduler utilities. */
  81:Inc/portmacro.h ****     #define portYIELD()                                 \
  82:Inc/portmacro.h ****     {                                                   \
  83:Inc/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:Inc/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:Inc/portmacro.h ****                                                         \
  86:Inc/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:Inc/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:Inc/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:Inc/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:Inc/portmacro.h ****     }
  91:Inc/portmacro.h **** 
  92:Inc/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:Inc/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:Inc/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 7


  95:Inc/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  97:Inc/portmacro.h **** 
  98:Inc/portmacro.h **** /* Critical section management. */
  99:Inc/portmacro.h ****     extern void vPortEnterCritical( void );
 100:Inc/portmacro.h ****     extern void vPortExitCritical( void );
 101:Inc/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:Inc/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:Inc/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:Inc/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:Inc/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:Inc/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:Inc/portmacro.h **** 
 108:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 109:Inc/portmacro.h **** 
 110:Inc/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:Inc/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:Inc/portmacro.h ****  * (which build with all the ports) will build. */
 113:Inc/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:Inc/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 116:Inc/portmacro.h **** 
 117:Inc/portmacro.h **** /* Tickless idle/low power functionality. */
 118:Inc/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:Inc/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:Inc/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:Inc/portmacro.h ****     #endif
 122:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 123:Inc/portmacro.h **** 
 124:Inc/portmacro.h **** /* Architecture specific optimisations. */
 125:Inc/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:Inc/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:Inc/portmacro.h ****     #endif
 128:Inc/portmacro.h **** 
 129:Inc/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:Inc/portmacro.h **** 
 131:Inc/portmacro.h **** /* Generic helper function. */
 132:Inc/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:Inc/portmacro.h ****         {
 134:Inc/portmacro.h ****             uint8_t ucReturn;
 135:Inc/portmacro.h **** 
 136:Inc/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:Inc/portmacro.h **** 
 138:Inc/portmacro.h ****             return ucReturn;
 139:Inc/portmacro.h ****         }
 140:Inc/portmacro.h **** 
 141:Inc/portmacro.h **** /* Check the configuration. */
 142:Inc/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:Inc/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:Inc/portmacro.h ****         #endif
 145:Inc/portmacro.h **** 
 146:Inc/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:Inc/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:Inc/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:Inc/portmacro.h **** 
 150:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 151:Inc/portmacro.h **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 8


 152:Inc/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:Inc/portmacro.h **** 
 154:Inc/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:Inc/portmacro.h **** 
 156:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 157:Inc/portmacro.h **** 
 158:Inc/portmacro.h ****     #ifdef configASSERT
 159:Inc/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:Inc/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:Inc/portmacro.h ****     #endif
 162:Inc/portmacro.h **** 
 163:Inc/portmacro.h **** /* portNOP() is not required by this port. */
 164:Inc/portmacro.h ****     #define portNOP()
 165:Inc/portmacro.h **** 
 166:Inc/portmacro.h ****     #define portINLINE              __inline
 167:Inc/portmacro.h **** 
 168:Inc/portmacro.h ****     #ifndef portFORCE_INLINE
 169:Inc/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:Inc/portmacro.h ****     #endif
 171:Inc/portmacro.h **** 
 172:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 173:Inc/portmacro.h **** 
 174:Inc/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 175:Inc/portmacro.h ****     {
 176:Inc/portmacro.h ****         uint32_t ulCurrentInterrupt;
 177:Inc/portmacro.h ****         BaseType_t xReturn;
 178:Inc/portmacro.h **** 
 179:Inc/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 180:Inc/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 181:Inc/portmacro.h **** 
 182:Inc/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 183:Inc/portmacro.h ****         {
 184:Inc/portmacro.h ****             xReturn = pdFALSE;
 185:Inc/portmacro.h ****         }
 186:Inc/portmacro.h ****         else
 187:Inc/portmacro.h ****         {
 188:Inc/portmacro.h ****             xReturn = pdTRUE;
 189:Inc/portmacro.h ****         }
 190:Inc/portmacro.h **** 
 191:Inc/portmacro.h ****         return xReturn;
 192:Inc/portmacro.h ****     }
 193:Inc/portmacro.h **** 
 194:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 195:Inc/portmacro.h **** 
 196:Inc/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  43              		.loc 2 196 34 view .LVU5
  44              	.LBB13:
 197:Inc/portmacro.h ****     {
 198:Inc/portmacro.h ****         uint32_t ulNewBASEPRI;
  45              		.loc 2 198 9 view .LVU6
 199:Inc/portmacro.h **** 
 200:Inc/portmacro.h ****         __asm volatile
  46              		.loc 2 200 9 view .LVU7
  47              		.syntax unified
  48              	@ 200 "Inc/portmacro.h" 1
  49 0006 4FF0BF03 			mov r3, #191												
  50 000a 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 9


  51 000e BFF36F8F 		isb														
  52 0012 BFF34F8F 		dsb														
  53              	
  54              	@ 0 "" 2
  55              	.LVL0:
  56              		.thumb
  57              		.syntax unified
  58              	.L2:
  59              		.loc 2 200 9 is_stmt 0 view .LVU8
  60              	.LBE13:
  61              	.LBE12:
 208:Src/port.c    **** 
 209:Src/port.c    ****     while( ulDummy == 0 )
 210:Src/port.c    ****     {
 211:Src/port.c    ****         /* This file calls prvTaskExitError() after the scheduler has been
 212:Src/port.c    ****          * started to remove a compiler warning about the function being defined
 213:Src/port.c    ****          * but never called.  ulDummy is used purely to quieten other warnings
 214:Src/port.c    ****          * about code appearing after this function is called - making ulDummy
 215:Src/port.c    ****          * volatile makes the compiler think the function could return and
 216:Src/port.c    ****          * therefore not output an 'unreachable code' warning for code that appears
 217:Src/port.c    ****          * after it. */
 218:Src/port.c    ****     }
  62              		.loc 1 218 5 is_stmt 1 discriminator 1 view .LVU9
 209:Src/port.c    ****     {
  63              		.loc 1 209 10 discriminator 1 view .LVU10
 209:Src/port.c    ****     {
  64              		.loc 1 209 20 is_stmt 0 discriminator 1 view .LVU11
  65 0016 019B     		ldr	r3, [sp, #4]
 209:Src/port.c    ****     {
  66              		.loc 1 209 10 discriminator 1 view .LVU12
  67 0018 002B     		cmp	r3, #0
  68 001a FCD0     		beq	.L2
 219:Src/port.c    **** }
  69              		.loc 1 219 1 view .LVU13
  70 001c 02B0     		add	sp, sp, #8
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 0
  73              		@ sp needed
  74 001e 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE5:
  78              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu softvfp
  85              	prvPortStartFirstTask:
  86              	.LFB7:
 220:Src/port.c    **** /*-----------------------------------------------------------*/
 221:Src/port.c    **** 
 222:Src/port.c    **** void vPortSVCHandler( void )
 223:Src/port.c    **** {
 224:Src/port.c    ****     __asm volatile (
 225:Src/port.c    ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 226:Src/port.c    ****         "	ldr r1, [r3]					\n"/* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 227:Src/port.c    ****         "	ldr r0, [r1]					\n"/* The first item in pxCurrentTCB is the task top of stack. */
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 10


 228:Src/port.c    ****         "	ldmia r0!, {r4-r11}				\n"/* Pop the registers that are not automatically saved on except
 229:Src/port.c    ****         "	msr psp, r0						\n"/* Restore the task stack pointer. */
 230:Src/port.c    ****         "	isb								\n"
 231:Src/port.c    ****         "	mov r0, #0 						\n"
 232:Src/port.c    ****         "	msr	basepri, r0					\n"
 233:Src/port.c    ****         "	orr r14, #0xd					\n"
 234:Src/port.c    ****         "	bx r14							\n"
 235:Src/port.c    ****         "									\n"
 236:Src/port.c    ****         "	.align 4						\n"
 237:Src/port.c    ****         "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 238:Src/port.c    ****         );
 239:Src/port.c    **** }
 240:Src/port.c    **** /*-----------------------------------------------------------*/
 241:Src/port.c    **** 
 242:Src/port.c    **** static void prvPortStartFirstTask( void )
 243:Src/port.c    **** {
  87              		.loc 1 243 1 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ Naked Function: prologue and epilogue provided by programmer.
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
 244:Src/port.c    ****     __asm volatile (
  92              		.loc 1 244 5 view .LVU15
  93              		.syntax unified
  94              	@ 244 "Src/port.c" 1
  95 0000 0648     		 ldr r0, =0xE000ED08 	
  96 0002 0068     	 ldr r0, [r0] 			
  97 0004 0068     	 ldr r0, [r0] 			
  98 0006 80F30888 	 msr msp, r0			
  99 000a 62B6     	 cpsie i				
 100 000c 61B6     	 cpsie f				
 101 000e BFF34F8F 	 dsb					
 102 0012 BFF36F8F 	 isb					
 103 0016 00DF     	 svc 0					
 104 0018 00BF     	 nop					
 105 001a 000008ED 	 .ltorg				
 105      00E0
 106              	
 107              	@ 0 "" 2
 245:Src/port.c    ****         " ldr r0, =0xE000ED08 	\n"/* Use the NVIC offset register to locate the stack. */
 246:Src/port.c    ****         " ldr r0, [r0] 			\n"
 247:Src/port.c    ****         " ldr r0, [r0] 			\n"
 248:Src/port.c    ****         " msr msp, r0			\n"/* Set the msp back to the start of the stack. */
 249:Src/port.c    ****         " cpsie i				\n"/* Globally enable interrupts. */
 250:Src/port.c    ****         " cpsie f				\n"
 251:Src/port.c    ****         " dsb					\n"
 252:Src/port.c    ****         " isb					\n"
 253:Src/port.c    ****         " svc 0					\n"/* System call to start first task. */
 254:Src/port.c    ****         " nop					\n"
 255:Src/port.c    ****         " .ltorg				\n"
 256:Src/port.c    ****         );
 257:Src/port.c    **** }
 108              		.loc 1 257 1 is_stmt 0 view .LVU16
 109              		.thumb
 110              		.syntax unified
 111              		.cfi_endproc
 112              	.LFE7:
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 11


 114              		.section	.text.pxPortInitialiseStack,"ax",%progbits
 115              		.align	1
 116              		.global	pxPortInitialiseStack
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu softvfp
 122              	pxPortInitialiseStack:
 123              	.LVL1:
 124              	.LFB4:
 179:Src/port.c    ****     /* Simulate the stack frame as it would be created by a context switch
 125              		.loc 1 179 1 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
 182:Src/port.c    ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 130              		.loc 1 182 5 view .LVU18
 183:Src/port.c    ****     pxTopOfStack--;
 131              		.loc 1 183 5 view .LVU19
 183:Src/port.c    ****     pxTopOfStack--;
 132              		.loc 1 183 19 is_stmt 0 view .LVU20
 133 0000 4FF08073 		mov	r3, #16777216
 134 0004 40F8043C 		str	r3, [r0, #-4]
 184:Src/port.c    ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 135              		.loc 1 184 5 is_stmt 1 view .LVU21
 136              	.LVL2:
 185:Src/port.c    ****     pxTopOfStack--;
 137              		.loc 1 185 5 view .LVU22
 185:Src/port.c    ****     pxTopOfStack--;
 138              		.loc 1 185 48 is_stmt 0 view .LVU23
 139 0008 21F00101 		bic	r1, r1, #1
 140              	.LVL3:
 185:Src/port.c    ****     pxTopOfStack--;
 141              		.loc 1 185 19 view .LVU24
 142 000c 40F8081C 		str	r1, [r0, #-8]
 186:Src/port.c    ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 143              		.loc 1 186 5 is_stmt 1 view .LVU25
 144              	.LVL4:
 187:Src/port.c    ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 145              		.loc 1 187 5 view .LVU26
 187:Src/port.c    ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 146              		.loc 1 187 21 is_stmt 0 view .LVU27
 147 0010 034B     		ldr	r3, .L6
 187:Src/port.c    ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 148              		.loc 1 187 19 view .LVU28
 149 0012 40F80C3C 		str	r3, [r0, #-12]
 188:Src/port.c    ****     *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 150              		.loc 1 188 5 is_stmt 1 view .LVU29
 151              	.LVL5:
 189:Src/port.c    ****     pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R
 152              		.loc 1 189 5 view .LVU30
 189:Src/port.c    ****     pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R
 153              		.loc 1 189 19 is_stmt 0 view .LVU31
 154 0016 40F8202C 		str	r2, [r0, #-32]
 190:Src/port.c    **** 
 155              		.loc 1 190 5 is_stmt 1 view .LVU32
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 12


 156              	.LVL6:
 192:Src/port.c    **** }
 157              		.loc 1 192 5 view .LVU33
 193:Src/port.c    **** /*-----------------------------------------------------------*/
 158              		.loc 1 193 1 is_stmt 0 view .LVU34
 159 001a 4038     		subs	r0, r0, #64
 160              	.LVL7:
 193:Src/port.c    **** /*-----------------------------------------------------------*/
 161              		.loc 1 193 1 view .LVU35
 162 001c 7047     		bx	lr
 163              	.L7:
 164 001e 00BF     		.align	2
 165              	.L6:
 166 0020 00000000 		.word	prvTaskExitError
 167              		.cfi_endproc
 168              	.LFE4:
 170              		.section	.text.SVC_Handler,"ax",%progbits
 171              		.align	1
 172              		.global	SVC_Handler
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu softvfp
 178              	SVC_Handler:
 179              	.LFB6:
 223:Src/port.c    ****     __asm volatile (
 180              		.loc 1 223 1 is_stmt 1 view -0
 181              		.cfi_startproc
 182              		@ Naked Function: prologue and epilogue provided by programmer.
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 224:Src/port.c    ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 185              		.loc 1 224 5 view .LVU37
 186              		.syntax unified
 187              	@ 224 "Src/port.c" 1
 188 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 189 0002 1968     		ldr r1, [r3]					
 190 0004 0868     		ldr r0, [r1]					
 191 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 192 000a 80F30988 		msr psp, r0						
 193 000e BFF36F8F 		isb								
 194 0012 4FF00000 		mov r0, #0 						
 195 0016 80F31188 		msr	basepri, r0					
 196 001a 4EF00D0E 		orr r14, #0xd					
 197 001e 7047     		bx r14							
 198              										
 199              		.align 4						
 200 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 201              	
 202              	@ 0 "" 2
 239:Src/port.c    **** /*-----------------------------------------------------------*/
 203              		.loc 1 239 1 is_stmt 0 view .LVU38
 204              		.thumb
 205              		.syntax unified
 206              		.cfi_endproc
 207              	.LFE6:
 209              		.section	.text.vPortEndScheduler,"ax",%progbits
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 13


 210              		.align	1
 211              		.global	vPortEndScheduler
 212              		.syntax unified
 213              		.thumb
 214              		.thumb_func
 215              		.fpu softvfp
 217              	vPortEndScheduler:
 218              	.LFB9:
 258:Src/port.c    **** /*-----------------------------------------------------------*/
 259:Src/port.c    **** 
 260:Src/port.c    **** /*
 261:Src/port.c    ****  * See header file for description.
 262:Src/port.c    ****  */
 263:Src/port.c    **** BaseType_t xPortStartScheduler( void )
 264:Src/port.c    **** {
 265:Src/port.c    ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 266:Src/port.c    ****      * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 267:Src/port.c    ****     configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 268:Src/port.c    **** 
 269:Src/port.c    ****     #if ( configASSERT_DEFINED == 1 )
 270:Src/port.c    ****         {
 271:Src/port.c    ****             volatile uint32_t ulOriginalPriority;
 272:Src/port.c    ****             volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( 
 273:Src/port.c    ****             volatile uint8_t ucMaxPriorityValue;
 274:Src/port.c    **** 
 275:Src/port.c    ****             /* Determine the maximum priority from which ISR safe FreeRTOS API
 276:Src/port.c    ****              * functions can be called.  ISR safe functions are those that end in
 277:Src/port.c    ****              * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 278:Src/port.c    ****              * ensure interrupt entry is as fast and simple as possible.
 279:Src/port.c    ****              *
 280:Src/port.c    ****              * Save the interrupt priority value that is about to be clobbered. */
 281:Src/port.c    ****             ulOriginalPriority = *pucFirstUserPriorityRegister;
 282:Src/port.c    **** 
 283:Src/port.c    ****             /* Determine the number of priority bits available.  First write to all
 284:Src/port.c    ****              * possible bits. */
 285:Src/port.c    ****             *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 286:Src/port.c    **** 
 287:Src/port.c    ****             /* Read the value back to see how many bits stuck. */
 288:Src/port.c    ****             ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 289:Src/port.c    **** 
 290:Src/port.c    ****             /* Use the same mask on the maximum system call priority. */
 291:Src/port.c    ****             ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 292:Src/port.c    **** 
 293:Src/port.c    ****             /* Calculate the maximum acceptable priority group value for the number
 294:Src/port.c    ****              * of bits read back. */
 295:Src/port.c    ****             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 296:Src/port.c    **** 
 297:Src/port.c    ****             while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 298:Src/port.c    ****             {
 299:Src/port.c    ****                 ulMaxPRIGROUPValue--;
 300:Src/port.c    ****                 ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 301:Src/port.c    ****             }
 302:Src/port.c    **** 
 303:Src/port.c    ****             #ifdef __NVIC_PRIO_BITS
 304:Src/port.c    ****                 {
 305:Src/port.c    ****                     /* Check the CMSIS configuration that defines the number of
 306:Src/port.c    ****                      * priority bits matches the number of priority bits actually queried
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 14


 307:Src/port.c    ****                      * from the hardware. */
 308:Src/port.c    ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BIT
 309:Src/port.c    ****                 }
 310:Src/port.c    ****             #endif
 311:Src/port.c    **** 
 312:Src/port.c    ****             #ifdef configPRIO_BITS
 313:Src/port.c    ****                 {
 314:Src/port.c    ****                     /* Check the FreeRTOS configuration that defines the number of
 315:Src/port.c    ****                      * priority bits matches the number of priority bits actually queried
 316:Src/port.c    ****                      * from the hardware. */
 317:Src/port.c    ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS
 318:Src/port.c    ****                 }
 319:Src/port.c    ****             #endif
 320:Src/port.c    **** 
 321:Src/port.c    ****             /* Shift the priority group value back to its position within the AIRCR
 322:Src/port.c    ****              * register. */
 323:Src/port.c    ****             ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 324:Src/port.c    ****             ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 325:Src/port.c    **** 
 326:Src/port.c    ****             /* Restore the clobbered interrupt priority register to its original
 327:Src/port.c    ****              * value. */
 328:Src/port.c    ****             *pucFirstUserPriorityRegister = ulOriginalPriority;
 329:Src/port.c    ****         }
 330:Src/port.c    ****     #endif /* configASSERT_DEFINED */
 331:Src/port.c    **** 
 332:Src/port.c    ****     /* Make PendSV and SysTick the lowest priority interrupts. */
 333:Src/port.c    ****     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 334:Src/port.c    ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 335:Src/port.c    **** 
 336:Src/port.c    ****     /* Start the timer that generates the tick ISR.  Interrupts are disabled
 337:Src/port.c    ****      * here already. */
 338:Src/port.c    ****     vPortSetupTimerInterrupt();
 339:Src/port.c    **** 
 340:Src/port.c    ****     /* Initialise the critical nesting count ready for the first task. */
 341:Src/port.c    ****     uxCriticalNesting = 0;
 342:Src/port.c    **** 
 343:Src/port.c    ****     /* Start the first task. */
 344:Src/port.c    ****     prvPortStartFirstTask();
 345:Src/port.c    **** 
 346:Src/port.c    ****     /* Should never get here as the tasks will now be executing!  Call the task
 347:Src/port.c    ****      * exit error function to prevent compiler warnings about a static function
 348:Src/port.c    ****      * not being called in the case that the application writer overrides this
 349:Src/port.c    ****      * functionality by defining configTASK_RETURN_ADDRESS.  Call
 350:Src/port.c    ****      * vTaskSwitchContext() so link time optimisation does not remove the
 351:Src/port.c    ****      * symbol. */
 352:Src/port.c    ****     vTaskSwitchContext();
 353:Src/port.c    ****     prvTaskExitError();
 354:Src/port.c    **** 
 355:Src/port.c    ****     /* Should not get here! */
 356:Src/port.c    ****     return 0;
 357:Src/port.c    **** }
 358:Src/port.c    **** /*-----------------------------------------------------------*/
 359:Src/port.c    **** 
 360:Src/port.c    **** void vPortEndScheduler( void )
 361:Src/port.c    **** {
 219              		.loc 1 361 1 is_stmt 1 view -0
 220              		.cfi_startproc
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 15


 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 362:Src/port.c    ****     /* Not implemented in ports where there is nothing to return to.
 363:Src/port.c    ****      * Artificially force an assert. */
 364:Src/port.c    ****     configASSERT( uxCriticalNesting == 1000UL );
 224              		.loc 1 364 48 view .LVU40
 365:Src/port.c    **** }
 225              		.loc 1 365 1 is_stmt 0 view .LVU41
 226 0000 7047     		bx	lr
 227              		.cfi_endproc
 228              	.LFE9:
 230              		.section	.text.vPortEnterCritical,"ax",%progbits
 231              		.align	1
 232              		.global	vPortEnterCritical
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu softvfp
 238              	vPortEnterCritical:
 239              	.LFB10:
 366:Src/port.c    **** /*-----------------------------------------------------------*/
 367:Src/port.c    **** 
 368:Src/port.c    **** void vPortEnterCritical( void )
 369:Src/port.c    **** {
 240              		.loc 1 369 1 is_stmt 1 view -0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 370:Src/port.c    ****     portDISABLE_INTERRUPTS();
 245              		.loc 1 370 5 view .LVU43
 246              	.LBB14:
 247              	.LBI14:
 196:Inc/portmacro.h ****     {
 248              		.loc 2 196 34 view .LVU44
 249              	.LBB15:
 198:Inc/portmacro.h **** 
 250              		.loc 2 198 9 view .LVU45
 251              		.loc 2 200 9 view .LVU46
 252              		.syntax unified
 253              	@ 200 "Inc/portmacro.h" 1
 254 0000 4FF0BF03 			mov r3, #191												
 255 0004 83F31188 		msr basepri, r3											
 256 0008 BFF36F8F 		isb														
 257 000c BFF34F8F 		dsb														
 258              	
 259              	@ 0 "" 2
 260              		.thumb
 261              		.syntax unified
 262              	.LBE15:
 263              	.LBE14:
 371:Src/port.c    ****     uxCriticalNesting++;
 264              		.loc 1 371 5 view .LVU47
 265              		.loc 1 371 22 is_stmt 0 view .LVU48
 266 0010 024A     		ldr	r2, .L11
 267 0012 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 16


 268 0014 0133     		adds	r3, r3, #1
 269 0016 1360     		str	r3, [r2]
 372:Src/port.c    **** 
 373:Src/port.c    ****     /* This is not the interrupt safe version of the enter critical function so
 374:Src/port.c    ****      * assert() if it is being called from an interrupt context.  Only API
 375:Src/port.c    ****      * functions that end in "FromISR" can be used in an interrupt.  Only assert if
 376:Src/port.c    ****      * the critical nesting count is 1 to protect against recursive calls if the
 377:Src/port.c    ****      * assert function also uses a critical section. */
 378:Src/port.c    ****     if( uxCriticalNesting == 1 )
 270              		.loc 1 378 5 is_stmt 1 view .LVU49
 379:Src/port.c    ****     {
 380:Src/port.c    ****         configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 271              		.loc 1 380 77 view .LVU50
 381:Src/port.c    ****     }
 382:Src/port.c    **** }
 272              		.loc 1 382 1 is_stmt 0 view .LVU51
 273 0018 7047     		bx	lr
 274              	.L12:
 275 001a 00BF     		.align	2
 276              	.L11:
 277 001c 00000000 		.word	.LANCHOR0
 278              		.cfi_endproc
 279              	.LFE10:
 281              		.section	.text.vPortExitCritical,"ax",%progbits
 282              		.align	1
 283              		.global	vPortExitCritical
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 287              		.fpu softvfp
 289              	vPortExitCritical:
 290              	.LFB11:
 383:Src/port.c    **** /*-----------------------------------------------------------*/
 384:Src/port.c    **** 
 385:Src/port.c    **** void vPortExitCritical( void )
 386:Src/port.c    **** {
 291              		.loc 1 386 1 is_stmt 1 view -0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 387:Src/port.c    ****     configASSERT( uxCriticalNesting );
 296              		.loc 1 387 38 view .LVU53
 388:Src/port.c    ****     uxCriticalNesting--;
 297              		.loc 1 388 5 view .LVU54
 298              		.loc 1 388 22 is_stmt 0 view .LVU55
 299 0000 034A     		ldr	r2, .L15
 300 0002 1368     		ldr	r3, [r2]
 301 0004 013B     		subs	r3, r3, #1
 302 0006 1360     		str	r3, [r2]
 389:Src/port.c    **** 
 390:Src/port.c    ****     if( uxCriticalNesting == 0 )
 303              		.loc 1 390 5 is_stmt 1 view .LVU56
 304              		.loc 1 390 7 is_stmt 0 view .LVU57
 305 0008 0BB9     		cbnz	r3, .L13
 391:Src/port.c    ****     {
 392:Src/port.c    ****         portENABLE_INTERRUPTS();
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 17


 306              		.loc 1 392 9 is_stmt 1 view .LVU58
 307              	.LVL8:
 308              	.LBB16:
 309              	.LBI16:
 201:Inc/portmacro.h ****         (
 202:Inc/portmacro.h ****             "	mov %0, %1												\n"\
 203:Inc/portmacro.h ****             "	msr basepri, %0											\n"\
 204:Inc/portmacro.h ****             "	isb														\n"\
 205:Inc/portmacro.h ****             "	dsb														\n"\
 206:Inc/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 207:Inc/portmacro.h ****         );
 208:Inc/portmacro.h ****     }
 209:Inc/portmacro.h **** 
 210:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 211:Inc/portmacro.h **** 
 212:Inc/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 213:Inc/portmacro.h ****     {
 214:Inc/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 215:Inc/portmacro.h **** 
 216:Inc/portmacro.h ****         __asm volatile
 217:Inc/portmacro.h ****         (
 218:Inc/portmacro.h ****             "	mrs %0, basepri											\n"\
 219:Inc/portmacro.h ****             "	mov %1, %2												\n"\
 220:Inc/portmacro.h ****             "	msr basepri, %1											\n"\
 221:Inc/portmacro.h ****             "	isb														\n"\
 222:Inc/portmacro.h ****             "	dsb														\n"\
 223:Inc/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 224:Inc/portmacro.h ****         );
 225:Inc/portmacro.h **** 
 226:Inc/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 227:Inc/portmacro.h ****          * warnings. */
 228:Inc/portmacro.h ****         return ulOriginalBASEPRI;
 229:Inc/portmacro.h ****     }
 230:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 231:Inc/portmacro.h **** 
 232:Inc/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 310              		.loc 2 232 34 view .LVU59
 311              	.LBB17:
 233:Inc/portmacro.h ****     {
 234:Inc/portmacro.h ****         __asm volatile
 312              		.loc 2 234 9 view .LVU60
 313              		.syntax unified
 314              	@ 234 "Inc/portmacro.h" 1
 315 000a 83F31188 			msr basepri, r3	
 316              	@ 0 "" 2
 317              	.LVL9:
 318              		.thumb
 319              		.syntax unified
 320              	.L13:
 321              		.loc 2 234 9 is_stmt 0 view .LVU61
 322              	.LBE17:
 323              	.LBE16:
 393:Src/port.c    ****     }
 394:Src/port.c    **** }
 324              		.loc 1 394 1 view .LVU62
 325 000e 7047     		bx	lr
 326              	.L16:
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 18


 327              		.align	2
 328              	.L15:
 329 0010 00000000 		.word	.LANCHOR0
 330              		.cfi_endproc
 331              	.LFE11:
 333              		.section	.text.PendSV_Handler,"ax",%progbits
 334              		.align	1
 335              		.global	PendSV_Handler
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 339              		.fpu softvfp
 341              	PendSV_Handler:
 342              	.LFB12:
 395:Src/port.c    **** /*-----------------------------------------------------------*/
 396:Src/port.c    **** 
 397:Src/port.c    **** void xPortPendSVHandler( void )
 398:Src/port.c    **** {
 343              		.loc 1 398 1 is_stmt 1 view -0
 344              		.cfi_startproc
 345              		@ Naked Function: prologue and epilogue provided by programmer.
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 399:Src/port.c    ****     /* This is a naked function. */
 400:Src/port.c    **** 
 401:Src/port.c    ****     __asm volatile
 348              		.loc 1 401 5 view .LVU64
 349              		.syntax unified
 350              	@ 401 "Src/port.c" 1
 351 0000 EFF30980 			mrs r0, psp							
 352 0004 BFF36F8F 		isb									
 353              											
 354 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 355 000a 1A68     		ldr	r2, [r3]						
 356              											
 357 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 358 0010 1060     		str r0, [r2]						
 359              											
 360 0012 2DE90840 		stmdb sp!, {r3, r14}				
 361 0016 4FF0BF00 		mov r0, #191							
 362 001a 80F31188 		msr basepri, r0						
 363 001e FFF7FEFF 		bl vTaskSwitchContext				
 364 0022 4FF00000 		mov r0, #0							
 365 0026 80F31188 		msr basepri, r0						
 366 002a BDE80840 		ldmia sp!, {r3, r14}				
 367              											
 368 002e 1968     		ldr r1, [r3]						
 369 0030 0868     		ldr r0, [r1]						
 370 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 371 0036 80F30988 		msr psp, r0							
 372 003a BFF36F8F 		isb									
 373 003e 7047     		bx r14								
 374              											
 375              		.align 4							
 376 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 377              	
 378              	@ 0 "" 2
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 19


 402:Src/port.c    ****     (
 403:Src/port.c    ****         "	mrs r0, psp							\n"
 404:Src/port.c    ****         "	isb									\n"
 405:Src/port.c    ****         "										\n"
 406:Src/port.c    ****         "	ldr	r3, pxCurrentTCBConst			\n"/* Get the location of the current TCB. */
 407:Src/port.c    ****         "	ldr	r2, [r3]						\n"
 408:Src/port.c    ****         "										\n"
 409:Src/port.c    ****         "	stmdb r0!, {r4-r11}					\n"/* Save the remaining registers. */
 410:Src/port.c    ****         "	str r0, [r2]						\n"/* Save the new top of stack into the first member of the TCB. */
 411:Src/port.c    ****         "										\n"
 412:Src/port.c    ****         "	stmdb sp!, {r3, r14}				\n"
 413:Src/port.c    ****         "	mov r0, %0							\n"
 414:Src/port.c    ****         "	msr basepri, r0						\n"
 415:Src/port.c    ****         "	bl vTaskSwitchContext				\n"
 416:Src/port.c    ****         "	mov r0, #0							\n"
 417:Src/port.c    ****         "	msr basepri, r0						\n"
 418:Src/port.c    ****         "	ldmia sp!, {r3, r14}				\n"
 419:Src/port.c    ****         "										\n"/* Restore the context, including the critical nesting count. */
 420:Src/port.c    ****         "	ldr r1, [r3]						\n"
 421:Src/port.c    ****         "	ldr r0, [r1]						\n"/* The first item in pxCurrentTCB is the task top of stack. */
 422:Src/port.c    ****         "	ldmia r0!, {r4-r11}					\n"/* Pop the registers. */
 423:Src/port.c    ****         "	msr psp, r0							\n"
 424:Src/port.c    ****         "	isb									\n"
 425:Src/port.c    ****         "	bx r14								\n"
 426:Src/port.c    ****         "										\n"
 427:Src/port.c    ****         "	.align 4							\n"
 428:Src/port.c    ****         "pxCurrentTCBConst: .word pxCurrentTCB	\n"
 429:Src/port.c    ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 430:Src/port.c    ****     );
 431:Src/port.c    **** }
 379              		.loc 1 431 1 is_stmt 0 view .LVU65
 380              		.thumb
 381              		.syntax unified
 382              		.cfi_endproc
 383              	.LFE12:
 385              		.section	.text.SysTick_Handler,"ax",%progbits
 386              		.align	1
 387              		.global	SysTick_Handler
 388              		.syntax unified
 389              		.thumb
 390              		.thumb_func
 391              		.fpu softvfp
 393              	SysTick_Handler:
 394              	.LFB13:
 432:Src/port.c    **** /*-----------------------------------------------------------*/
 433:Src/port.c    **** 
 434:Src/port.c    **** void xPortSysTickHandler( void )
 435:Src/port.c    **** {
 395              		.loc 1 435 1 is_stmt 1 view -0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 0
 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399 0000 08B5     		push	{r3, lr}
 400              	.LCFI2:
 401              		.cfi_def_cfa_offset 8
 402              		.cfi_offset 3, -8
 403              		.cfi_offset 14, -4
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 20


 436:Src/port.c    ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 437:Src/port.c    ****      * executes all interrupts must be unmasked.  There is therefore no need to
 438:Src/port.c    ****      * save and then restore the interrupt mask value as its value is already
 439:Src/port.c    ****      * known. */
 440:Src/port.c    ****     portDISABLE_INTERRUPTS();
 404              		.loc 1 440 5 view .LVU67
 405              	.LBB18:
 406              	.LBI18:
 196:Inc/portmacro.h ****     {
 407              		.loc 2 196 34 view .LVU68
 408              	.LBB19:
 198:Inc/portmacro.h **** 
 409              		.loc 2 198 9 view .LVU69
 200:Inc/portmacro.h ****         (
 410              		.loc 2 200 9 view .LVU70
 411              		.syntax unified
 412              	@ 200 "Inc/portmacro.h" 1
 413 0002 4FF0BF03 			mov r3, #191												
 414 0006 83F31188 		msr basepri, r3											
 415 000a BFF36F8F 		isb														
 416 000e BFF34F8F 		dsb														
 417              	
 418              	@ 0 "" 2
 419              		.thumb
 420              		.syntax unified
 421              	.LBE19:
 422              	.LBE18:
 441:Src/port.c    ****     {
 442:Src/port.c    ****         /* Increment the RTOS tick. */
 443:Src/port.c    ****         if( xTaskIncrementTick() != pdFALSE )
 423              		.loc 1 443 9 view .LVU71
 424              		.loc 1 443 13 is_stmt 0 view .LVU72
 425 0012 FFF7FEFF 		bl	xTaskIncrementTick
 426              	.LVL10:
 427              		.loc 1 443 11 view .LVU73
 428 0016 18B1     		cbz	r0, .L19
 444:Src/port.c    ****         {
 445:Src/port.c    ****             /* A context switch is required.  Context switching is performed in
 446:Src/port.c    ****              * the PendSV interrupt.  Pend the PendSV interrupt. */
 447:Src/port.c    ****             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 429              		.loc 1 447 13 is_stmt 1 view .LVU74
 430              		.loc 1 447 35 is_stmt 0 view .LVU75
 431 0018 034B     		ldr	r3, .L21
 432 001a 4FF08052 		mov	r2, #268435456
 433 001e 1A60     		str	r2, [r3]
 434              	.L19:
 448:Src/port.c    ****         }
 449:Src/port.c    ****     }
 450:Src/port.c    ****     portENABLE_INTERRUPTS();
 435              		.loc 1 450 5 is_stmt 1 view .LVU76
 436              	.LVL11:
 437              	.LBB20:
 438              	.LBI20:
 232:Inc/portmacro.h ****     {
 439              		.loc 2 232 34 view .LVU77
 440              	.LBB21:
 441              		.loc 2 234 9 view .LVU78
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 21


 442 0020 0023     		movs	r3, #0
 443              		.syntax unified
 444              	@ 234 "Inc/portmacro.h" 1
 445 0022 83F31188 			msr basepri, r3	
 446              	@ 0 "" 2
 447              	.LVL12:
 448              		.loc 2 234 9 is_stmt 0 view .LVU79
 449              		.thumb
 450              		.syntax unified
 451              	.LBE21:
 452              	.LBE20:
 451:Src/port.c    **** }
 453              		.loc 1 451 1 view .LVU80
 454 0026 08BD     		pop	{r3, pc}
 455              	.L22:
 456              		.align	2
 457              	.L21:
 458 0028 04ED00E0 		.word	-536810236
 459              		.cfi_endproc
 460              	.LFE13:
 462              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 463              		.align	1
 464              		.weak	vPortSetupTimerInterrupt
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu softvfp
 470              	vPortSetupTimerInterrupt:
 471              	.LFB14:
 452:Src/port.c    **** /*-----------------------------------------------------------*/
 453:Src/port.c    **** 
 454:Src/port.c    **** #if ( configUSE_TICKLESS_IDLE == 1 )
 455:Src/port.c    **** 
 456:Src/port.c    ****     __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 457:Src/port.c    ****     {
 458:Src/port.c    ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 459:Src/port.c    ****         TickType_t xModifiableIdleTime;
 460:Src/port.c    **** 
 461:Src/port.c    ****         /* Make sure the SysTick reload value does not overflow the counter. */
 462:Src/port.c    ****         if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 463:Src/port.c    ****         {
 464:Src/port.c    ****             xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 465:Src/port.c    ****         }
 466:Src/port.c    **** 
 467:Src/port.c    ****         /* Stop the SysTick momentarily.  The time the SysTick is stopped for
 468:Src/port.c    ****          * is accounted for as best it can be, but using the tickless mode will
 469:Src/port.c    ****          * inevitably result in some tiny drift of the time maintained by the
 470:Src/port.c    ****          * kernel with respect to calendar time. */
 471:Src/port.c    ****         portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 472:Src/port.c    **** 
 473:Src/port.c    ****         /* Calculate the reload value required to wait xExpectedIdleTime
 474:Src/port.c    ****          * tick periods.  -1 is used because this code will execute part way
 475:Src/port.c    ****          * through one of the tick periods. */
 476:Src/port.c    ****         ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpecte
 477:Src/port.c    **** 
 478:Src/port.c    ****         if( ulReloadValue > ulStoppedTimerCompensation )
 479:Src/port.c    ****         {
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 22


 480:Src/port.c    ****             ulReloadValue -= ulStoppedTimerCompensation;
 481:Src/port.c    ****         }
 482:Src/port.c    **** 
 483:Src/port.c    ****         /* Enter a critical section but don't use the taskENTER_CRITICAL()
 484:Src/port.c    ****          * method as that will mask interrupts that should exit sleep mode. */
 485:Src/port.c    ****         __asm volatile ( "cpsid i" ::: "memory" );
 486:Src/port.c    ****         __asm volatile ( "dsb" );
 487:Src/port.c    ****         __asm volatile ( "isb" );
 488:Src/port.c    **** 
 489:Src/port.c    ****         /* If a context switch is pending or a task is waiting for the scheduler
 490:Src/port.c    ****          * to be unsuspended then abandon the low power entry. */
 491:Src/port.c    ****         if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 492:Src/port.c    ****         {
 493:Src/port.c    ****             /* Restart from whatever is left in the count register to complete
 494:Src/port.c    ****              * this tick period. */
 495:Src/port.c    ****             portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 496:Src/port.c    **** 
 497:Src/port.c    ****             /* Restart SysTick. */
 498:Src/port.c    ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 499:Src/port.c    **** 
 500:Src/port.c    ****             /* Reset the reload register to the value required for normal tick
 501:Src/port.c    ****              * periods. */
 502:Src/port.c    ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 503:Src/port.c    **** 
 504:Src/port.c    ****             /* Re-enable interrupts - see comments above the cpsid instruction()
 505:Src/port.c    ****              * above. */
 506:Src/port.c    ****             __asm volatile ( "cpsie i" ::: "memory" );
 507:Src/port.c    ****         }
 508:Src/port.c    ****         else
 509:Src/port.c    ****         {
 510:Src/port.c    ****             /* Set the new reload value. */
 511:Src/port.c    ****             portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 512:Src/port.c    **** 
 513:Src/port.c    ****             /* Clear the SysTick count flag and set the count value back to
 514:Src/port.c    ****              * zero. */
 515:Src/port.c    ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 516:Src/port.c    **** 
 517:Src/port.c    ****             /* Restart SysTick. */
 518:Src/port.c    ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 519:Src/port.c    **** 
 520:Src/port.c    ****             /* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 521:Src/port.c    ****              * set its parameter to 0 to indicate that its implementation contains
 522:Src/port.c    ****              * its own wait for interrupt or wait for event instruction, and so wfi
 523:Src/port.c    ****              * should not be executed again.  However, the original expected idle
 524:Src/port.c    ****              * time variable must remain unmodified, so a copy is taken. */
 525:Src/port.c    ****             xModifiableIdleTime = xExpectedIdleTime;
 526:Src/port.c    ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 527:Src/port.c    **** 
 528:Src/port.c    ****             if( xModifiableIdleTime > 0 )
 529:Src/port.c    ****             {
 530:Src/port.c    ****                 __asm volatile ( "dsb" ::: "memory" );
 531:Src/port.c    ****                 __asm volatile ( "wfi" );
 532:Src/port.c    ****                 __asm volatile ( "isb" );
 533:Src/port.c    ****             }
 534:Src/port.c    **** 
 535:Src/port.c    ****             configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 536:Src/port.c    **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 23


 537:Src/port.c    ****             /* Re-enable interrupts to allow the interrupt that brought the MCU
 538:Src/port.c    ****              * out of sleep mode to execute immediately.  see comments above
 539:Src/port.c    ****              * __disable_interrupt() call above. */
 540:Src/port.c    ****             __asm volatile ( "cpsie i" ::: "memory" );
 541:Src/port.c    ****             __asm volatile ( "dsb" );
 542:Src/port.c    ****             __asm volatile ( "isb" );
 543:Src/port.c    **** 
 544:Src/port.c    ****             /* Disable interrupts again because the clock is about to be stopped
 545:Src/port.c    ****              * and interrupts that execute while the clock is stopped will increase
 546:Src/port.c    ****              * any slippage between the time maintained by the RTOS and calendar
 547:Src/port.c    ****              * time. */
 548:Src/port.c    ****             __asm volatile ( "cpsid i" ::: "memory" );
 549:Src/port.c    ****             __asm volatile ( "dsb" );
 550:Src/port.c    ****             __asm volatile ( "isb" );
 551:Src/port.c    **** 
 552:Src/port.c    ****             /* Disable the SysTick clock without reading the
 553:Src/port.c    ****              * portNVIC_SYSTICK_CTRL_REG register to ensure the
 554:Src/port.c    ****              * portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 555:Src/port.c    ****              * the time the SysTick is stopped for is accounted for as best it can
 556:Src/port.c    ****              * be, but using the tickless mode will inevitably result in some tiny
 557:Src/port.c    ****              * drift of the time maintained by the kernel with respect to calendar
 558:Src/port.c    ****              * time*/
 559:Src/port.c    ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 560:Src/port.c    **** 
 561:Src/port.c    ****             /* Determine if the SysTick clock has already counted to zero and
 562:Src/port.c    ****              * been set back to the current reload value (the reload back being
 563:Src/port.c    ****              * correct for the entire expected idle time) or if the SysTick is yet
 564:Src/port.c    ****              * to count to zero (in which case an interrupt other than the SysTick
 565:Src/port.c    ****              * must have brought the system out of sleep mode). */
 566:Src/port.c    ****             if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 567:Src/port.c    ****             {
 568:Src/port.c    ****                 uint32_t ulCalculatedLoadValue;
 569:Src/port.c    **** 
 570:Src/port.c    ****                 /* The tick interrupt is already pending, and the SysTick count
 571:Src/port.c    ****                  * reloaded with ulReloadValue.  Reset the
 572:Src/port.c    ****                  * portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 573:Src/port.c    ****                  * period. */
 574:Src/port.c    ****                 ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portN
 575:Src/port.c    **** 
 576:Src/port.c    ****                 /* Don't allow a tiny value, or values that have somehow
 577:Src/port.c    ****                  * underflowed because the post sleep hook did something
 578:Src/port.c    ****                  * that took too long. */
 579:Src/port.c    ****                 if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadVal
 580:Src/port.c    ****                 {
 581:Src/port.c    ****                     ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 582:Src/port.c    ****                 }
 583:Src/port.c    **** 
 584:Src/port.c    ****                 portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 585:Src/port.c    **** 
 586:Src/port.c    ****                 /* As the pending tick will be processed as soon as this
 587:Src/port.c    ****                  * function exits, the tick value maintained by the tick is stepped
 588:Src/port.c    ****                  * forward by one less than the time spent waiting. */
 589:Src/port.c    ****                 ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 590:Src/port.c    ****             }
 591:Src/port.c    ****             else
 592:Src/port.c    ****             {
 593:Src/port.c    ****                 /* Something other than the tick interrupt ended the sleep.
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 24


 594:Src/port.c    ****                  * Work out how long the sleep lasted rounded to complete tick
 595:Src/port.c    ****                  * periods (not the ulReload value which accounted for part
 596:Src/port.c    ****                  * ticks). */
 597:Src/port.c    ****                 ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - po
 598:Src/port.c    **** 
 599:Src/port.c    ****                 /* How many complete tick periods passed while the processor
 600:Src/port.c    ****                  * was waiting? */
 601:Src/port.c    ****                 ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 602:Src/port.c    **** 
 603:Src/port.c    ****                 /* The reload value is set to whatever fraction of a single tick
 604:Src/port.c    ****                  * period remains. */
 605:Src/port.c    ****                 portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOne
 606:Src/port.c    ****             }
 607:Src/port.c    **** 
 608:Src/port.c    ****             /* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 609:Src/port.c    ****              * again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 610:Src/port.c    ****              * value. */
 611:Src/port.c    ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 612:Src/port.c    ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 613:Src/port.c    ****             vTaskStepTick( ulCompleteTickPeriods );
 614:Src/port.c    ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 615:Src/port.c    **** 
 616:Src/port.c    ****             /* Exit with interrupts enabled. */
 617:Src/port.c    ****             __asm volatile ( "cpsie i" ::: "memory" );
 618:Src/port.c    ****         }
 619:Src/port.c    ****     }
 620:Src/port.c    **** 
 621:Src/port.c    **** #endif /* configUSE_TICKLESS_IDLE */
 622:Src/port.c    **** /*-----------------------------------------------------------*/
 623:Src/port.c    **** 
 624:Src/port.c    **** /*
 625:Src/port.c    ****  * Setup the systick timer to generate the tick interrupts at the required
 626:Src/port.c    ****  * frequency.
 627:Src/port.c    ****  */
 628:Src/port.c    **** __attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
 629:Src/port.c    **** {
 472              		.loc 1 629 1 is_stmt 1 view -0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 630:Src/port.c    ****     /* Calculate the constants required to configure the tick interrupt. */
 631:Src/port.c    ****     #if ( configUSE_TICKLESS_IDLE == 1 )
 632:Src/port.c    ****         {
 633:Src/port.c    ****             ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 634:Src/port.c    ****             xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 635:Src/port.c    ****             ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSY
 636:Src/port.c    ****         }
 637:Src/port.c    ****     #endif /* configUSE_TICKLESS_IDLE */
 638:Src/port.c    **** 
 639:Src/port.c    ****     /* Stop and clear the SysTick. */
 640:Src/port.c    ****     portNVIC_SYSTICK_CTRL_REG = 0UL;
 477              		.loc 1 640 5 view .LVU82
 478              		.loc 1 640 31 is_stmt 0 view .LVU83
 479 0000 054B     		ldr	r3, .L24
 480 0002 0022     		movs	r2, #0
 481 0004 1A60     		str	r2, [r3]
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 25


 641:Src/port.c    ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 482              		.loc 1 641 5 is_stmt 1 view .LVU84
 483              		.loc 1 641 40 is_stmt 0 view .LVU85
 484 0006 0549     		ldr	r1, .L24+4
 485 0008 0A60     		str	r2, [r1]
 642:Src/port.c    **** 
 643:Src/port.c    ****     /* Configure SysTick to interrupt at the requested rate. */
 644:Src/port.c    ****     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 486              		.loc 1 644 5 is_stmt 1 view .LVU86
 487              		.loc 1 644 31 is_stmt 0 view .LVU87
 488 000a 054A     		ldr	r2, .L24+8
 489 000c 45F6BF51 		movw	r1, #23999
 490 0010 1160     		str	r1, [r2]
 645:Src/port.c    ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 491              		.loc 1 645 5 is_stmt 1 view .LVU88
 492              		.loc 1 645 31 is_stmt 0 view .LVU89
 493 0012 0722     		movs	r2, #7
 494 0014 1A60     		str	r2, [r3]
 646:Src/port.c    **** }
 495              		.loc 1 646 1 view .LVU90
 496 0016 7047     		bx	lr
 497              	.L25:
 498              		.align	2
 499              	.L24:
 500 0018 10E000E0 		.word	-536813552
 501 001c 18E000E0 		.word	-536813544
 502 0020 14E000E0 		.word	-536813548
 503              		.cfi_endproc
 504              	.LFE14:
 506              		.section	.text.xPortStartScheduler,"ax",%progbits
 507              		.align	1
 508              		.global	xPortStartScheduler
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 512              		.fpu softvfp
 514              	xPortStartScheduler:
 515              	.LFB8:
 264:Src/port.c    ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 516              		.loc 1 264 1 is_stmt 1 view -0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 0
 519              		@ frame_needed = 0, uses_anonymous_args = 0
 520 0000 10B5     		push	{r4, lr}
 521              	.LCFI3:
 522              		.cfi_def_cfa_offset 8
 523              		.cfi_offset 4, -8
 524              		.cfi_offset 14, -4
 267:Src/port.c    **** 
 525              		.loc 1 267 57 view .LVU92
 333:Src/port.c    ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 526              		.loc 1 333 5 view .LVU93
 333:Src/port.c    ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 527              		.loc 1 333 24 is_stmt 0 view .LVU94
 528 0002 0B4B     		ldr	r3, .L28
 529 0004 1A68     		ldr	r2, [r3]
 530 0006 42F47F02 		orr	r2, r2, #16711680
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 26


 531 000a 1A60     		str	r2, [r3]
 334:Src/port.c    **** 
 532              		.loc 1 334 5 is_stmt 1 view .LVU95
 334:Src/port.c    **** 
 533              		.loc 1 334 24 is_stmt 0 view .LVU96
 534 000c 1A68     		ldr	r2, [r3]
 535 000e 42F07F42 		orr	r2, r2, #-16777216
 536 0012 1A60     		str	r2, [r3]
 338:Src/port.c    **** 
 537              		.loc 1 338 5 is_stmt 1 view .LVU97
 538 0014 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 539              	.LVL13:
 341:Src/port.c    **** 
 540              		.loc 1 341 5 view .LVU98
 341:Src/port.c    **** 
 541              		.loc 1 341 23 is_stmt 0 view .LVU99
 542 0018 0024     		movs	r4, #0
 543 001a 064B     		ldr	r3, .L28+4
 544 001c 1C60     		str	r4, [r3]
 344:Src/port.c    **** 
 545              		.loc 1 344 5 is_stmt 1 view .LVU100
 546 001e FFF7FEFF 		bl	prvPortStartFirstTask
 547              	.LVL14:
 352:Src/port.c    ****     prvTaskExitError();
 548              		.loc 1 352 5 view .LVU101
 549 0022 FFF7FEFF 		bl	vTaskSwitchContext
 550              	.LVL15:
 353:Src/port.c    **** 
 551              		.loc 1 353 5 view .LVU102
 552 0026 FFF7FEFF 		bl	prvTaskExitError
 553              	.LVL16:
 356:Src/port.c    **** }
 554              		.loc 1 356 5 view .LVU103
 357:Src/port.c    **** /*-----------------------------------------------------------*/
 555              		.loc 1 357 1 is_stmt 0 view .LVU104
 556 002a 2046     		mov	r0, r4
 557 002c 10BD     		pop	{r4, pc}
 558              	.L29:
 559 002e 00BF     		.align	2
 560              	.L28:
 561 0030 20ED00E0 		.word	-536810208
 562 0034 00000000 		.word	.LANCHOR0
 563              		.cfi_endproc
 564              	.LFE8:
 566              		.section	.data.uxCriticalNesting,"aw"
 567              		.align	2
 568              		.set	.LANCHOR0,. + 0
 571              	uxCriticalNesting:
 572 0000 AAAAAAAA 		.word	-1431655766
 573              		.text
 574              	.Letext0:
 575              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 576              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 577              		.file 5 "Inc/projdefs.h"
 578              		.file 6 "Inc/task.h"
ARM GAS  C:\Users\User\AppData\Local\Temp\cc74uada.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
C:\Users\User\AppData\Local\Temp\cc74uada.s:16     .text.prvTaskExitError:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cc74uada.s:23     .text.prvTaskExitError:0000000000000000 prvTaskExitError
C:\Users\User\AppData\Local\Temp\cc74uada.s:79     .text.prvPortStartFirstTask:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cc74uada.s:85     .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
C:\Users\User\AppData\Local\Temp\cc74uada.s:105    .text.prvPortStartFirstTask:000000000000001a $d
C:\Users\User\AppData\Local\Temp\cc74uada.s:105    .text.prvPortStartFirstTask:000000000000001c $d
C:\Users\User\AppData\Local\Temp\cc74uada.s:115    .text.pxPortInitialiseStack:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cc74uada.s:122    .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
C:\Users\User\AppData\Local\Temp\cc74uada.s:166    .text.pxPortInitialiseStack:0000000000000020 $d
C:\Users\User\AppData\Local\Temp\cc74uada.s:171    .text.SVC_Handler:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cc74uada.s:178    .text.SVC_Handler:0000000000000000 SVC_Handler
C:\Users\User\AppData\Local\Temp\cc74uada.s:200    .text.SVC_Handler:0000000000000020 pxCurrentTCBConst2
C:\Users\User\AppData\Local\Temp\cc74uada.s:200    .text.SVC_Handler:0000000000000020 $d
C:\Users\User\AppData\Local\Temp\cc74uada.s:210    .text.vPortEndScheduler:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cc74uada.s:217    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
C:\Users\User\AppData\Local\Temp\cc74uada.s:231    .text.vPortEnterCritical:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cc74uada.s:238    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
C:\Users\User\AppData\Local\Temp\cc74uada.s:277    .text.vPortEnterCritical:000000000000001c $d
C:\Users\User\AppData\Local\Temp\cc74uada.s:282    .text.vPortExitCritical:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cc74uada.s:289    .text.vPortExitCritical:0000000000000000 vPortExitCritical
C:\Users\User\AppData\Local\Temp\cc74uada.s:329    .text.vPortExitCritical:0000000000000010 $d
C:\Users\User\AppData\Local\Temp\cc74uada.s:334    .text.PendSV_Handler:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cc74uada.s:341    .text.PendSV_Handler:0000000000000000 PendSV_Handler
C:\Users\User\AppData\Local\Temp\cc74uada.s:376    .text.PendSV_Handler:0000000000000040 pxCurrentTCBConst
C:\Users\User\AppData\Local\Temp\cc74uada.s:376    .text.PendSV_Handler:0000000000000040 $d
C:\Users\User\AppData\Local\Temp\cc74uada.s:386    .text.SysTick_Handler:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cc74uada.s:393    .text.SysTick_Handler:0000000000000000 SysTick_Handler
C:\Users\User\AppData\Local\Temp\cc74uada.s:458    .text.SysTick_Handler:0000000000000028 $d
C:\Users\User\AppData\Local\Temp\cc74uada.s:463    .text.vPortSetupTimerInterrupt:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cc74uada.s:470    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
C:\Users\User\AppData\Local\Temp\cc74uada.s:500    .text.vPortSetupTimerInterrupt:0000000000000018 $d
C:\Users\User\AppData\Local\Temp\cc74uada.s:507    .text.xPortStartScheduler:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cc74uada.s:514    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
C:\Users\User\AppData\Local\Temp\cc74uada.s:561    .text.xPortStartScheduler:0000000000000030 $d
C:\Users\User\AppData\Local\Temp\cc74uada.s:567    .data.uxCriticalNesting:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cc74uada.s:571    .data.uxCriticalNesting:0000000000000000 uxCriticalNesting

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
