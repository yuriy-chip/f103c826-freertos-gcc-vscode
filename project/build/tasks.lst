ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"tasks.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	prvTaskIsTaskSuspended:
  24              	.LVL0:
  25              	.LFB14:
  26              		.file 1 "Src/tasks.c"
   1:Src/tasks.c   **** /*
   2:Src/tasks.c   ****  * FreeRTOS Kernel V10.4.6
   3:Src/tasks.c   ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Src/tasks.c   ****  *
   5:Src/tasks.c   ****  * SPDX-License-Identifier: MIT
   6:Src/tasks.c   ****  *
   7:Src/tasks.c   ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Src/tasks.c   ****  * this software and associated documentation files (the "Software"), to deal in
   9:Src/tasks.c   ****  * the Software without restriction, including without limitation the rights to
  10:Src/tasks.c   ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Src/tasks.c   ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Src/tasks.c   ****  * subject to the following conditions:
  13:Src/tasks.c   ****  *
  14:Src/tasks.c   ****  * The above copyright notice and this permission notice shall be included in all
  15:Src/tasks.c   ****  * copies or substantial portions of the Software.
  16:Src/tasks.c   ****  *
  17:Src/tasks.c   ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Src/tasks.c   ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Src/tasks.c   ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Src/tasks.c   ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Src/tasks.c   ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Src/tasks.c   ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Src/tasks.c   ****  *
  24:Src/tasks.c   ****  * https://www.FreeRTOS.org
  25:Src/tasks.c   ****  * https://github.com/FreeRTOS
  26:Src/tasks.c   ****  *
  27:Src/tasks.c   ****  */
  28:Src/tasks.c   **** 
  29:Src/tasks.c   **** /* Standard includes. */
  30:Src/tasks.c   **** #include <stdlib.h>
  31:Src/tasks.c   **** #include <string.h>
  32:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 2


  33:Src/tasks.c   **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:Src/tasks.c   ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:Src/tasks.c   ****  * task.h is included from an application file. */
  36:Src/tasks.c   **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:Src/tasks.c   **** 
  38:Src/tasks.c   **** /* FreeRTOS includes. */
  39:Src/tasks.c   **** #include "FreeRTOS.h"
  40:Src/tasks.c   **** #include "task.h"
  41:Src/tasks.c   **** #include "timers.h"
  42:Src/tasks.c   **** #include "stack_macros.h"
  43:Src/tasks.c   **** 
  44:Src/tasks.c   **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:Src/tasks.c   ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:Src/tasks.c   ****  * for the header files above, but not in this file, in order to generate the
  47:Src/tasks.c   ****  * correct privileged Vs unprivileged linkage and placement. */
  48:Src/tasks.c   **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:Src/tasks.c   **** 
  50:Src/tasks.c   **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:Src/tasks.c   ****  * functions but without including stdio.h here. */
  52:Src/tasks.c   **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:Src/tasks.c   **** 
  54:Src/tasks.c   **** /* At the bottom of this file are two optional functions that can be used
  55:Src/tasks.c   ****  * to generate human readable text from the raw data generated by the
  56:Src/tasks.c   ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  57:Src/tasks.c   ****  * for convenience only, and are NOT considered part of the kernel. */
  58:Src/tasks.c   ****     #include <stdio.h>
  59:Src/tasks.c   **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  60:Src/tasks.c   **** 
  61:Src/tasks.c   **** #if ( configUSE_PREEMPTION == 0 )
  62:Src/tasks.c   **** 
  63:Src/tasks.c   **** /* If the cooperative scheduler is being used then a yield should not be
  64:Src/tasks.c   ****  * performed just because a higher priority task has been woken. */
  65:Src/tasks.c   ****     #define taskYIELD_IF_USING_PREEMPTION()
  66:Src/tasks.c   **** #else
  67:Src/tasks.c   ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  68:Src/tasks.c   **** #endif
  69:Src/tasks.c   **** 
  70:Src/tasks.c   **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  71:Src/tasks.c   **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  72:Src/tasks.c   **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  73:Src/tasks.c   **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  74:Src/tasks.c   **** 
  75:Src/tasks.c   **** /*
  76:Src/tasks.c   ****  * The value used to fill the stack of a task when the task is created.  This
  77:Src/tasks.c   ****  * is used purely for checking the high water mark for tasks.
  78:Src/tasks.c   ****  */
  79:Src/tasks.c   **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  80:Src/tasks.c   **** 
  81:Src/tasks.c   **** /* Bits used to record how a task's stack and TCB were allocated. */
  82:Src/tasks.c   **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  83:Src/tasks.c   **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  84:Src/tasks.c   **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  85:Src/tasks.c   **** 
  86:Src/tasks.c   **** /* If any of the following are set then task stacks are filled with a known
  87:Src/tasks.c   ****  * value so the high water mark can be determined.  If none of the following are
  88:Src/tasks.c   ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  89:Src/tasks.c   **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 3


  90:Src/tasks.c   ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  91:Src/tasks.c   **** #else
  92:Src/tasks.c   ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  93:Src/tasks.c   **** #endif
  94:Src/tasks.c   **** 
  95:Src/tasks.c   **** /*
  96:Src/tasks.c   ****  * Macros used by vListTask to indicate which state a task is in.
  97:Src/tasks.c   ****  */
  98:Src/tasks.c   **** #define tskRUNNING_CHAR      ( 'X' )
  99:Src/tasks.c   **** #define tskBLOCKED_CHAR      ( 'B' )
 100:Src/tasks.c   **** #define tskREADY_CHAR        ( 'R' )
 101:Src/tasks.c   **** #define tskDELETED_CHAR      ( 'D' )
 102:Src/tasks.c   **** #define tskSUSPENDED_CHAR    ( 'S' )
 103:Src/tasks.c   **** 
 104:Src/tasks.c   **** /*
 105:Src/tasks.c   ****  * Some kernel aware debuggers require the data the debugger needs access to to
 106:Src/tasks.c   ****  * be global, rather than file scope.
 107:Src/tasks.c   ****  */
 108:Src/tasks.c   **** #ifdef portREMOVE_STATIC_QUALIFIER
 109:Src/tasks.c   ****     #define static
 110:Src/tasks.c   **** #endif
 111:Src/tasks.c   **** 
 112:Src/tasks.c   **** /* The name allocated to the Idle task.  This can be overridden by defining
 113:Src/tasks.c   ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 114:Src/tasks.c   **** #ifndef configIDLE_TASK_NAME
 115:Src/tasks.c   ****     #define configIDLE_TASK_NAME    "IDLE"
 116:Src/tasks.c   **** #endif
 117:Src/tasks.c   **** 
 118:Src/tasks.c   **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 119:Src/tasks.c   **** 
 120:Src/tasks.c   **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 121:Src/tasks.c   ****  * performed in a generic way that is not optimised to any particular
 122:Src/tasks.c   ****  * microcontroller architecture. */
 123:Src/tasks.c   **** 
 124:Src/tasks.c   **** /* uxTopReadyPriority holds the priority of the highest priority ready
 125:Src/tasks.c   ****  * state task. */
 126:Src/tasks.c   ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 127:Src/tasks.c   ****     {                                               \
 128:Src/tasks.c   ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 129:Src/tasks.c   ****         {                                           \
 130:Src/tasks.c   ****             uxTopReadyPriority = ( uxPriority );    \
 131:Src/tasks.c   ****         }                                           \
 132:Src/tasks.c   ****     } /* taskRECORD_READY_PRIORITY */
 133:Src/tasks.c   **** 
 134:Src/tasks.c   **** /*-----------------------------------------------------------*/
 135:Src/tasks.c   **** 
 136:Src/tasks.c   ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 137:Src/tasks.c   ****     {                                                                         \
 138:Src/tasks.c   ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 139:Src/tasks.c   ****                                                                               \
 140:Src/tasks.c   ****         /* Find the highest priority queue that contains ready tasks. */      \
 141:Src/tasks.c   ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 142:Src/tasks.c   ****         {                                                                     \
 143:Src/tasks.c   ****             configASSERT( uxTopPriority );                                    \
 144:Src/tasks.c   ****             --uxTopPriority;                                                  \
 145:Src/tasks.c   ****         }                                                                     \
 146:Src/tasks.c   ****                                                                               \
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 4


 147:Src/tasks.c   ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 148:Src/tasks.c   ****          * the  same priority get an equal share of the processor time. */                    \
 149:Src/tasks.c   ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 150:Src/tasks.c   ****         uxTopReadyPriority = uxTopPriority;                                                   \
 151:Src/tasks.c   ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 152:Src/tasks.c   **** 
 153:Src/tasks.c   **** /*-----------------------------------------------------------*/
 154:Src/tasks.c   **** 
 155:Src/tasks.c   **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 156:Src/tasks.c   ****  * they are only required when a port optimised method of task selection is
 157:Src/tasks.c   ****  * being used. */
 158:Src/tasks.c   ****     #define taskRESET_READY_PRIORITY( uxPriority )
 159:Src/tasks.c   ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 160:Src/tasks.c   **** 
 161:Src/tasks.c   **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 162:Src/tasks.c   **** 
 163:Src/tasks.c   **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 164:Src/tasks.c   ****  * performed in a way that is tailored to the particular microcontroller
 165:Src/tasks.c   ****  * architecture being used. */
 166:Src/tasks.c   **** 
 167:Src/tasks.c   **** /* A port optimised version is provided.  Call the port defined macros. */
 168:Src/tasks.c   ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( uxPriority, uxTop
 169:Src/tasks.c   **** 
 170:Src/tasks.c   **** /*-----------------------------------------------------------*/
 171:Src/tasks.c   **** 
 172:Src/tasks.c   ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 173:Src/tasks.c   ****     {                                                                                           \
 174:Src/tasks.c   ****         UBaseType_t uxTopPriority;                                                              \
 175:Src/tasks.c   ****                                                                                                 \
 176:Src/tasks.c   ****         /* Find the highest priority list that contains ready tasks. */                         \
 177:Src/tasks.c   ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 178:Src/tasks.c   ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 179:Src/tasks.c   ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 180:Src/tasks.c   ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 181:Src/tasks.c   **** 
 182:Src/tasks.c   **** /*-----------------------------------------------------------*/
 183:Src/tasks.c   **** 
 184:Src/tasks.c   **** /* A port optimised version is provided, call it only if the TCB being reset
 185:Src/tasks.c   ****  * is being referenced from a ready list.  If it is referenced from a delayed
 186:Src/tasks.c   ****  * or suspended list then it won't be in a ready list. */
 187:Src/tasks.c   ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 188:Src/tasks.c   ****     {                                                                                              
 189:Src/tasks.c   ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 190:Src/tasks.c   ****         {                                                                                          
 191:Src/tasks.c   ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 192:Src/tasks.c   ****         }                                                                                          
 193:Src/tasks.c   ****     }
 194:Src/tasks.c   **** 
 195:Src/tasks.c   **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 196:Src/tasks.c   **** 
 197:Src/tasks.c   **** /*-----------------------------------------------------------*/
 198:Src/tasks.c   **** 
 199:Src/tasks.c   **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 200:Src/tasks.c   ****  * count overflows. */
 201:Src/tasks.c   **** #define taskSWITCH_DELAYED_LISTS()                                                \
 202:Src/tasks.c   ****     {                                                                             \
 203:Src/tasks.c   ****         List_t * pxTemp;                                                          \
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 5


 204:Src/tasks.c   ****                                                                                   \
 205:Src/tasks.c   ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 206:Src/tasks.c   ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 207:Src/tasks.c   ****                                                                                   \
 208:Src/tasks.c   ****         pxTemp = pxDelayedTaskList;                                               \
 209:Src/tasks.c   ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 210:Src/tasks.c   ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 211:Src/tasks.c   ****         xNumOfOverflows++;                                                        \
 212:Src/tasks.c   ****         prvResetNextTaskUnblockTime();                                            \
 213:Src/tasks.c   ****     }
 214:Src/tasks.c   **** 
 215:Src/tasks.c   **** /*-----------------------------------------------------------*/
 216:Src/tasks.c   **** 
 217:Src/tasks.c   **** /*
 218:Src/tasks.c   ****  * Place the task represented by pxTCB into the appropriate ready list for
 219:Src/tasks.c   ****  * the task.  It is inserted at the end of the list.
 220:Src/tasks.c   ****  */
 221:Src/tasks.c   **** #define prvAddTaskToReadyList( pxTCB )                                                             
 222:Src/tasks.c   ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 223:Src/tasks.c   ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 224:Src/tasks.c   ****     listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 225:Src/tasks.c   ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 226:Src/tasks.c   **** /*-----------------------------------------------------------*/
 227:Src/tasks.c   **** 
 228:Src/tasks.c   **** /*
 229:Src/tasks.c   ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 230:Src/tasks.c   ****  * where NULL is used to indicate that the handle of the currently executing
 231:Src/tasks.c   ****  * task should be used in place of the parameter.  This macro simply checks to
 232:Src/tasks.c   ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 233:Src/tasks.c   ****  */
 234:Src/tasks.c   **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 235:Src/tasks.c   **** 
 236:Src/tasks.c   **** /* The item value of the event list item is normally used to hold the priority
 237:Src/tasks.c   ****  * of the task to which it belongs (coded to allow it to be held in reverse
 238:Src/tasks.c   ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 239:Src/tasks.c   ****  * is important its value is not updated due to a task priority change while it is
 240:Src/tasks.c   ****  * being used for another purpose.  The following bit definition is used to inform
 241:Src/tasks.c   ****  * the scheduler that the value should not be changed - in which case it is the
 242:Src/tasks.c   ****  * responsibility of whichever module is using the value to ensure it gets set back
 243:Src/tasks.c   ****  * to its original value when it is released. */
 244:Src/tasks.c   **** #if ( configUSE_16_BIT_TICKS == 1 )
 245:Src/tasks.c   ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 246:Src/tasks.c   **** #else
 247:Src/tasks.c   ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 248:Src/tasks.c   **** #endif
 249:Src/tasks.c   **** 
 250:Src/tasks.c   **** /*
 251:Src/tasks.c   ****  * Task control block.  A task control block (TCB) is allocated for each task,
 252:Src/tasks.c   ****  * and stores task state information, including a pointer to the task's context
 253:Src/tasks.c   ****  * (the task's run time environment, including register values)
 254:Src/tasks.c   ****  */
 255:Src/tasks.c   **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 256:Src/tasks.c   **** {
 257:Src/tasks.c   ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 258:Src/tasks.c   **** 
 259:Src/tasks.c   ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 260:Src/tasks.c   ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 6


 261:Src/tasks.c   ****     #endif
 262:Src/tasks.c   **** 
 263:Src/tasks.c   ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 264:Src/tasks.c   ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 265:Src/tasks.c   ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 266:Src/tasks.c   ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 267:Src/tasks.c   ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 268:Src/tasks.c   **** 
 269:Src/tasks.c   ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 270:Src/tasks.c   ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 271:Src/tasks.c   ****     #endif
 272:Src/tasks.c   **** 
 273:Src/tasks.c   ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 274:Src/tasks.c   ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 275:Src/tasks.c   ****     #endif
 276:Src/tasks.c   **** 
 277:Src/tasks.c   ****     #if ( configUSE_TRACE_FACILITY == 1 )
 278:Src/tasks.c   ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 279:Src/tasks.c   ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 280:Src/tasks.c   ****     #endif
 281:Src/tasks.c   **** 
 282:Src/tasks.c   ****     #if ( configUSE_MUTEXES == 1 )
 283:Src/tasks.c   ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 284:Src/tasks.c   ****         UBaseType_t uxMutexesHeld;
 285:Src/tasks.c   ****     #endif
 286:Src/tasks.c   **** 
 287:Src/tasks.c   ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 288:Src/tasks.c   ****         TaskHookFunction_t pxTaskTag;
 289:Src/tasks.c   ****     #endif
 290:Src/tasks.c   **** 
 291:Src/tasks.c   ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 292:Src/tasks.c   ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 293:Src/tasks.c   ****     #endif
 294:Src/tasks.c   **** 
 295:Src/tasks.c   ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 296:Src/tasks.c   ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /*< Stores the amount of time the task has sp
 297:Src/tasks.c   ****     #endif
 298:Src/tasks.c   **** 
 299:Src/tasks.c   ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 300:Src/tasks.c   **** 
 301:Src/tasks.c   ****         /* Allocate a Newlib reent structure that is specific to this task.
 302:Src/tasks.c   ****          * Note Newlib support has been included by popular demand, but is not
 303:Src/tasks.c   ****          * used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 304:Src/tasks.c   ****          * responsible for resulting newlib operation.  User must be familiar with
 305:Src/tasks.c   ****          * newlib and must provide system-wide implementations of the necessary
 306:Src/tasks.c   ****          * stubs. Be warned that (at the time of writing) the current newlib design
 307:Src/tasks.c   ****          * implements a system-wide malloc() that must be provided with locks.
 308:Src/tasks.c   ****          *
 309:Src/tasks.c   ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 310:Src/tasks.c   ****          * for additional information. */
 311:Src/tasks.c   ****         struct  _reent xNewLib_reent;
 312:Src/tasks.c   ****     #endif
 313:Src/tasks.c   **** 
 314:Src/tasks.c   ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 315:Src/tasks.c   ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 316:Src/tasks.c   ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 317:Src/tasks.c   ****     #endif
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 7


 318:Src/tasks.c   **** 
 319:Src/tasks.c   ****     /* See the comments in FreeRTOS.h with the definition of
 320:Src/tasks.c   ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 321:Src/tasks.c   ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 322:Src/tasks.c   ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 323:Src/tasks.c   ****     #endif
 324:Src/tasks.c   **** 
 325:Src/tasks.c   ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 326:Src/tasks.c   ****         uint8_t ucDelayAborted;
 327:Src/tasks.c   ****     #endif
 328:Src/tasks.c   **** 
 329:Src/tasks.c   ****     #if ( configUSE_POSIX_ERRNO == 1 )
 330:Src/tasks.c   ****         int iTaskErrno;
 331:Src/tasks.c   ****     #endif
 332:Src/tasks.c   **** } tskTCB;
 333:Src/tasks.c   **** 
 334:Src/tasks.c   **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 335:Src/tasks.c   ****  * below to enable the use of older kernel aware debuggers. */
 336:Src/tasks.c   **** typedef tskTCB TCB_t;
 337:Src/tasks.c   **** 
 338:Src/tasks.c   **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 339:Src/tasks.c   ****  * which static variables must be declared volatile. */
 340:Src/tasks.c   **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 341:Src/tasks.c   **** 
 342:Src/tasks.c   **** /* Lists for ready and blocked tasks. --------------------
 343:Src/tasks.c   ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 344:Src/tasks.c   ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 345:Src/tasks.c   ****  * the static qualifier. */
 346:Src/tasks.c   **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 347:Src/tasks.c   **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 348:Src/tasks.c   **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 349:Src/tasks.c   **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 350:Src/tasks.c   **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 351:Src/tasks.c   **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 352:Src/tasks.c   **** 
 353:Src/tasks.c   **** #if ( INCLUDE_vTaskDelete == 1 )
 354:Src/tasks.c   **** 
 355:Src/tasks.c   ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 356:Src/tasks.c   ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 357:Src/tasks.c   **** 
 358:Src/tasks.c   **** #endif
 359:Src/tasks.c   **** 
 360:Src/tasks.c   **** #if ( INCLUDE_vTaskSuspend == 1 )
 361:Src/tasks.c   **** 
 362:Src/tasks.c   ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 363:Src/tasks.c   **** 
 364:Src/tasks.c   **** #endif
 365:Src/tasks.c   **** 
 366:Src/tasks.c   **** /* Global POSIX errno. Its value is changed upon context switching to match
 367:Src/tasks.c   ****  * the errno of the currently running task. */
 368:Src/tasks.c   **** #if ( configUSE_POSIX_ERRNO == 1 )
 369:Src/tasks.c   ****     int FreeRTOS_errno = 0;
 370:Src/tasks.c   **** #endif
 371:Src/tasks.c   **** 
 372:Src/tasks.c   **** /* Other file private variables. --------------------------------*/
 373:Src/tasks.c   **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 374:Src/tasks.c   **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 8


 375:Src/tasks.c   **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 376:Src/tasks.c   **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 377:Src/tasks.c   **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 378:Src/tasks.c   **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 379:Src/tasks.c   **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 380:Src/tasks.c   **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 381:Src/tasks.c   **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 382:Src/tasks.c   **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 383:Src/tasks.c   **** 
 384:Src/tasks.c   **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 385:Src/tasks.c   ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 386:Src/tasks.c   ****  * to determine the number of priority lists to read back from the remote target. */
 387:Src/tasks.c   **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 388:Src/tasks.c   **** 
 389:Src/tasks.c   **** /* Context switches are held pending while the scheduler is suspended.  Also,
 390:Src/tasks.c   ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 391:Src/tasks.c   ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 392:Src/tasks.c   ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 393:Src/tasks.c   ****  * moves the task's event list item into the xPendingReadyList, ready for the
 394:Src/tasks.c   ****  * kernel to move the task from the pending ready list into the real ready list
 395:Src/tasks.c   ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 396:Src/tasks.c   ****  * accessed from a critical section. */
 397:Src/tasks.c   **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 398:Src/tasks.c   **** 
 399:Src/tasks.c   **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 400:Src/tasks.c   **** 
 401:Src/tasks.c   **** /* Do not move these variables to function scope as doing so prevents the
 402:Src/tasks.c   ****  * code working with debuggers that need to remove the static qualifier. */
 403:Src/tasks.c   ****     PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime = 0UL;    /*< Holds the
 404:Src/tasks.c   ****     PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime = 0UL; /*< Holds the
 405:Src/tasks.c   **** 
 406:Src/tasks.c   **** #endif
 407:Src/tasks.c   **** 
 408:Src/tasks.c   **** /*lint -restore */
 409:Src/tasks.c   **** 
 410:Src/tasks.c   **** /*-----------------------------------------------------------*/
 411:Src/tasks.c   **** 
 412:Src/tasks.c   **** /* File private functions. --------------------------------*/
 413:Src/tasks.c   **** 
 414:Src/tasks.c   **** /**
 415:Src/tasks.c   ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 416:Src/tasks.c   ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 417:Src/tasks.c   ****  * is in any other state.
 418:Src/tasks.c   ****  */
 419:Src/tasks.c   **** #if ( INCLUDE_vTaskSuspend == 1 )
 420:Src/tasks.c   **** 
 421:Src/tasks.c   ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 422:Src/tasks.c   **** 
 423:Src/tasks.c   **** #endif /* INCLUDE_vTaskSuspend */
 424:Src/tasks.c   **** 
 425:Src/tasks.c   **** /*
 426:Src/tasks.c   ****  * Utility to ready all the lists used by the scheduler.  This is called
 427:Src/tasks.c   ****  * automatically upon the creation of the first task.
 428:Src/tasks.c   ****  */
 429:Src/tasks.c   **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 430:Src/tasks.c   **** 
 431:Src/tasks.c   **** /*
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 9


 432:Src/tasks.c   ****  * The idle task, which as all tasks is implemented as a never ending loop.
 433:Src/tasks.c   ****  * The idle task is automatically created and added to the ready lists upon
 434:Src/tasks.c   ****  * creation of the first user task.
 435:Src/tasks.c   ****  *
 436:Src/tasks.c   ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 437:Src/tasks.c   ****  * language extensions.  The equivalent prototype for this function is:
 438:Src/tasks.c   ****  *
 439:Src/tasks.c   ****  * void prvIdleTask( void *pvParameters );
 440:Src/tasks.c   ****  *
 441:Src/tasks.c   ****  */
 442:Src/tasks.c   **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 443:Src/tasks.c   **** 
 444:Src/tasks.c   **** /*
 445:Src/tasks.c   ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 446:Src/tasks.c   ****  * including the stack pointed to by the TCB.
 447:Src/tasks.c   ****  *
 448:Src/tasks.c   ****  * This does not free memory allocated by the task itself (i.e. memory
 449:Src/tasks.c   ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 450:Src/tasks.c   ****  */
 451:Src/tasks.c   **** #if ( INCLUDE_vTaskDelete == 1 )
 452:Src/tasks.c   **** 
 453:Src/tasks.c   ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 454:Src/tasks.c   **** 
 455:Src/tasks.c   **** #endif
 456:Src/tasks.c   **** 
 457:Src/tasks.c   **** /*
 458:Src/tasks.c   ****  * Used only by the idle task.  This checks to see if anything has been placed
 459:Src/tasks.c   ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 460:Src/tasks.c   ****  * and its TCB deleted.
 461:Src/tasks.c   ****  */
 462:Src/tasks.c   **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 463:Src/tasks.c   **** 
 464:Src/tasks.c   **** /*
 465:Src/tasks.c   ****  * The currently executing task is entering the Blocked state.  Add the task to
 466:Src/tasks.c   ****  * either the current or the overflow delayed task list.
 467:Src/tasks.c   ****  */
 468:Src/tasks.c   **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 469:Src/tasks.c   ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 470:Src/tasks.c   **** 
 471:Src/tasks.c   **** /*
 472:Src/tasks.c   ****  * Fills an TaskStatus_t structure with information on each task that is
 473:Src/tasks.c   ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 474:Src/tasks.c   ****  * a suspended list, etc.).
 475:Src/tasks.c   ****  *
 476:Src/tasks.c   ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 477:Src/tasks.c   ****  * NORMAL APPLICATION CODE.
 478:Src/tasks.c   ****  */
 479:Src/tasks.c   **** #if ( configUSE_TRACE_FACILITY == 1 )
 480:Src/tasks.c   **** 
 481:Src/tasks.c   ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 482:Src/tasks.c   ****                                                      List_t * pxList,
 483:Src/tasks.c   ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 484:Src/tasks.c   **** 
 485:Src/tasks.c   **** #endif
 486:Src/tasks.c   **** 
 487:Src/tasks.c   **** /*
 488:Src/tasks.c   ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 10


 489:Src/tasks.c   ****  * the task if it is found, or NULL if the task is not found.
 490:Src/tasks.c   ****  */
 491:Src/tasks.c   **** #if ( INCLUDE_xTaskGetHandle == 1 )
 492:Src/tasks.c   **** 
 493:Src/tasks.c   ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 494:Src/tasks.c   ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 495:Src/tasks.c   **** 
 496:Src/tasks.c   **** #endif
 497:Src/tasks.c   **** 
 498:Src/tasks.c   **** /*
 499:Src/tasks.c   ****  * When a task is created, the stack of the task is filled with a known value.
 500:Src/tasks.c   ****  * This function determines the 'high water mark' of the task stack by
 501:Src/tasks.c   ****  * determining how much of the stack remains at the original preset value.
 502:Src/tasks.c   ****  */
 503:Src/tasks.c   **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 504:Src/tasks.c   **** 
 505:Src/tasks.c   ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 506:Src/tasks.c   **** 
 507:Src/tasks.c   **** #endif
 508:Src/tasks.c   **** 
 509:Src/tasks.c   **** /*
 510:Src/tasks.c   ****  * Return the amount of time, in ticks, that will pass before the kernel will
 511:Src/tasks.c   ****  * next move a task from the Blocked state to the Running state.
 512:Src/tasks.c   ****  *
 513:Src/tasks.c   ****  * This conditional compilation should use inequality to 0, not equality to 1.
 514:Src/tasks.c   ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 515:Src/tasks.c   ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 516:Src/tasks.c   ****  * set to a value other than 1.
 517:Src/tasks.c   ****  */
 518:Src/tasks.c   **** #if ( configUSE_TICKLESS_IDLE != 0 )
 519:Src/tasks.c   **** 
 520:Src/tasks.c   ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 521:Src/tasks.c   **** 
 522:Src/tasks.c   **** #endif
 523:Src/tasks.c   **** 
 524:Src/tasks.c   **** /*
 525:Src/tasks.c   ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 526:Src/tasks.c   ****  * will exit the Blocked state.
 527:Src/tasks.c   ****  */
 528:Src/tasks.c   **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 529:Src/tasks.c   **** 
 530:Src/tasks.c   **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 531:Src/tasks.c   **** 
 532:Src/tasks.c   **** /*
 533:Src/tasks.c   ****  * Helper function used to pad task names with spaces when printing out
 534:Src/tasks.c   ****  * human readable tables of task information.
 535:Src/tasks.c   ****  */
 536:Src/tasks.c   ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 537:Src/tasks.c   ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 538:Src/tasks.c   **** 
 539:Src/tasks.c   **** #endif
 540:Src/tasks.c   **** 
 541:Src/tasks.c   **** /*
 542:Src/tasks.c   ****  * Called after a Task_t structure has been allocated either statically or
 543:Src/tasks.c   ****  * dynamically to fill in the structure's members.
 544:Src/tasks.c   ****  */
 545:Src/tasks.c   **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 11


 546:Src/tasks.c   ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 547:Src/tasks.c   ****                                   const uint32_t ulStackDepth,
 548:Src/tasks.c   ****                                   void * const pvParameters,
 549:Src/tasks.c   ****                                   UBaseType_t uxPriority,
 550:Src/tasks.c   ****                                   TaskHandle_t * const pxCreatedTask,
 551:Src/tasks.c   ****                                   TCB_t * pxNewTCB,
 552:Src/tasks.c   ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:Src/tasks.c   **** 
 554:Src/tasks.c   **** /*
 555:Src/tasks.c   ****  * Called after a new task has been created and initialised to place the task
 556:Src/tasks.c   ****  * under the control of the scheduler.
 557:Src/tasks.c   ****  */
 558:Src/tasks.c   **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 559:Src/tasks.c   **** 
 560:Src/tasks.c   **** /*
 561:Src/tasks.c   ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:Src/tasks.c   ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:Src/tasks.c   ****  * called by the function.
 564:Src/tasks.c   ****  */
 565:Src/tasks.c   **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:Src/tasks.c   **** 
 567:Src/tasks.c   ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:Src/tasks.c   **** 
 569:Src/tasks.c   **** #endif
 570:Src/tasks.c   **** 
 571:Src/tasks.c   **** /*-----------------------------------------------------------*/
 572:Src/tasks.c   **** 
 573:Src/tasks.c   **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:Src/tasks.c   **** 
 575:Src/tasks.c   ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 576:Src/tasks.c   ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 577:Src/tasks.c   ****                                     const uint32_t ulStackDepth,
 578:Src/tasks.c   ****                                     void * const pvParameters,
 579:Src/tasks.c   ****                                     UBaseType_t uxPriority,
 580:Src/tasks.c   ****                                     StackType_t * const puxStackBuffer,
 581:Src/tasks.c   ****                                     StaticTask_t * const pxTaskBuffer )
 582:Src/tasks.c   ****     {
 583:Src/tasks.c   ****         TCB_t * pxNewTCB;
 584:Src/tasks.c   ****         TaskHandle_t xReturn;
 585:Src/tasks.c   **** 
 586:Src/tasks.c   ****         configASSERT( puxStackBuffer != NULL );
 587:Src/tasks.c   ****         configASSERT( pxTaskBuffer != NULL );
 588:Src/tasks.c   **** 
 589:Src/tasks.c   ****         #if ( configASSERT_DEFINED == 1 )
 590:Src/tasks.c   ****             {
 591:Src/tasks.c   ****                 /* Sanity check that the size of the structure used to declare a
 592:Src/tasks.c   ****                  * variable of type StaticTask_t equals the size of the real task
 593:Src/tasks.c   ****                  * structure. */
 594:Src/tasks.c   ****                 volatile size_t xSize = sizeof( StaticTask_t );
 595:Src/tasks.c   ****                 configASSERT( xSize == sizeof( TCB_t ) );
 596:Src/tasks.c   ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 597:Src/tasks.c   ****             }
 598:Src/tasks.c   ****         #endif /* configASSERT_DEFINED */
 599:Src/tasks.c   **** 
 600:Src/tasks.c   ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Src/tasks.c   ****         {
 602:Src/tasks.c   ****             /* The memory used for the task's TCB and stack are passed into this
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 12


 603:Src/tasks.c   ****              * function - use them. */
 604:Src/tasks.c   ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 605:Src/tasks.c   ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Src/tasks.c   **** 
 607:Src/tasks.c   ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 608:Src/tasks.c   ****                 {
 609:Src/tasks.c   ****                     /* Tasks can be created statically or dynamically, so note this
 610:Src/tasks.c   ****                      * task was created statically in case the task is later deleted. */
 611:Src/tasks.c   ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Src/tasks.c   ****                 }
 613:Src/tasks.c   ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 614:Src/tasks.c   **** 
 615:Src/tasks.c   ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 616:Src/tasks.c   ****             prvAddNewTaskToReadyList( pxNewTCB );
 617:Src/tasks.c   ****         }
 618:Src/tasks.c   ****         else
 619:Src/tasks.c   ****         {
 620:Src/tasks.c   ****             xReturn = NULL;
 621:Src/tasks.c   ****         }
 622:Src/tasks.c   **** 
 623:Src/tasks.c   ****         return xReturn;
 624:Src/tasks.c   ****     }
 625:Src/tasks.c   **** 
 626:Src/tasks.c   **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Src/tasks.c   **** /*-----------------------------------------------------------*/
 628:Src/tasks.c   **** 
 629:Src/tasks.c   **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:Src/tasks.c   **** 
 631:Src/tasks.c   ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 632:Src/tasks.c   ****                                             TaskHandle_t * pxCreatedTask )
 633:Src/tasks.c   ****     {
 634:Src/tasks.c   ****         TCB_t * pxNewTCB;
 635:Src/tasks.c   ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 636:Src/tasks.c   **** 
 637:Src/tasks.c   ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 638:Src/tasks.c   ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 639:Src/tasks.c   **** 
 640:Src/tasks.c   ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 641:Src/tasks.c   ****         {
 642:Src/tasks.c   ****             /* Allocate space for the TCB.  Where the memory comes from depends
 643:Src/tasks.c   ****              * on the implementation of the port malloc function and whether or
 644:Src/tasks.c   ****              * not static allocation is being used. */
 645:Src/tasks.c   ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 646:Src/tasks.c   **** 
 647:Src/tasks.c   ****             /* Store the stack location in the TCB. */
 648:Src/tasks.c   ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Src/tasks.c   **** 
 650:Src/tasks.c   ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 651:Src/tasks.c   ****                 {
 652:Src/tasks.c   ****                     /* Tasks can be created statically or dynamically, so note this
 653:Src/tasks.c   ****                      * task was created statically in case the task is later deleted. */
 654:Src/tasks.c   ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 655:Src/tasks.c   ****                 }
 656:Src/tasks.c   ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 657:Src/tasks.c   **** 
 658:Src/tasks.c   ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 659:Src/tasks.c   ****                                   pxTaskDefinition->pcName,
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 13


 660:Src/tasks.c   ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 661:Src/tasks.c   ****                                   pxTaskDefinition->pvParameters,
 662:Src/tasks.c   ****                                   pxTaskDefinition->uxPriority,
 663:Src/tasks.c   ****                                   pxCreatedTask, pxNewTCB,
 664:Src/tasks.c   ****                                   pxTaskDefinition->xRegions );
 665:Src/tasks.c   **** 
 666:Src/tasks.c   ****             prvAddNewTaskToReadyList( pxNewTCB );
 667:Src/tasks.c   ****             xReturn = pdPASS;
 668:Src/tasks.c   ****         }
 669:Src/tasks.c   **** 
 670:Src/tasks.c   ****         return xReturn;
 671:Src/tasks.c   ****     }
 672:Src/tasks.c   **** 
 673:Src/tasks.c   **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 674:Src/tasks.c   **** /*-----------------------------------------------------------*/
 675:Src/tasks.c   **** 
 676:Src/tasks.c   **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 677:Src/tasks.c   **** 
 678:Src/tasks.c   ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 679:Src/tasks.c   ****                                       TaskHandle_t * pxCreatedTask )
 680:Src/tasks.c   ****     {
 681:Src/tasks.c   ****         TCB_t * pxNewTCB;
 682:Src/tasks.c   ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 683:Src/tasks.c   **** 
 684:Src/tasks.c   ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 685:Src/tasks.c   **** 
 686:Src/tasks.c   ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 687:Src/tasks.c   ****         {
 688:Src/tasks.c   ****             /* Allocate space for the TCB.  Where the memory comes from depends
 689:Src/tasks.c   ****              * on the implementation of the port malloc function and whether or
 690:Src/tasks.c   ****              * not static allocation is being used. */
 691:Src/tasks.c   ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 692:Src/tasks.c   **** 
 693:Src/tasks.c   ****             if( pxNewTCB != NULL )
 694:Src/tasks.c   ****             {
 695:Src/tasks.c   ****                 /* Store the stack location in the TCB. */
 696:Src/tasks.c   ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 697:Src/tasks.c   **** 
 698:Src/tasks.c   ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 699:Src/tasks.c   ****                     {
 700:Src/tasks.c   ****                         /* Tasks can be created statically or dynamically, so note
 701:Src/tasks.c   ****                          * this task had a statically allocated stack in case it is
 702:Src/tasks.c   ****                          * later deleted.  The TCB was allocated dynamically. */
 703:Src/tasks.c   ****                         pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 704:Src/tasks.c   ****                     }
 705:Src/tasks.c   ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 706:Src/tasks.c   **** 
 707:Src/tasks.c   ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 708:Src/tasks.c   ****                                       pxTaskDefinition->pcName,
 709:Src/tasks.c   ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 710:Src/tasks.c   ****                                       pxTaskDefinition->pvParameters,
 711:Src/tasks.c   ****                                       pxTaskDefinition->uxPriority,
 712:Src/tasks.c   ****                                       pxCreatedTask, pxNewTCB,
 713:Src/tasks.c   ****                                       pxTaskDefinition->xRegions );
 714:Src/tasks.c   **** 
 715:Src/tasks.c   ****                 prvAddNewTaskToReadyList( pxNewTCB );
 716:Src/tasks.c   ****                 xReturn = pdPASS;
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 14


 717:Src/tasks.c   ****             }
 718:Src/tasks.c   ****         }
 719:Src/tasks.c   **** 
 720:Src/tasks.c   ****         return xReturn;
 721:Src/tasks.c   ****     }
 722:Src/tasks.c   **** 
 723:Src/tasks.c   **** #endif /* portUSING_MPU_WRAPPERS */
 724:Src/tasks.c   **** /*-----------------------------------------------------------*/
 725:Src/tasks.c   **** 
 726:Src/tasks.c   **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 727:Src/tasks.c   **** 
 728:Src/tasks.c   ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 729:Src/tasks.c   ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 730:Src/tasks.c   ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 731:Src/tasks.c   ****                             void * const pvParameters,
 732:Src/tasks.c   ****                             UBaseType_t uxPriority,
 733:Src/tasks.c   ****                             TaskHandle_t * const pxCreatedTask )
 734:Src/tasks.c   ****     {
 735:Src/tasks.c   ****         TCB_t * pxNewTCB;
 736:Src/tasks.c   ****         BaseType_t xReturn;
 737:Src/tasks.c   **** 
 738:Src/tasks.c   ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 739:Src/tasks.c   ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 740:Src/tasks.c   ****          * the TCB then the stack. */
 741:Src/tasks.c   ****         #if ( portSTACK_GROWTH > 0 )
 742:Src/tasks.c   ****             {
 743:Src/tasks.c   ****                 /* Allocate space for the TCB.  Where the memory comes from depends on
 744:Src/tasks.c   ****                  * the implementation of the port malloc function and whether or not static
 745:Src/tasks.c   ****                  * allocation is being used. */
 746:Src/tasks.c   ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 747:Src/tasks.c   **** 
 748:Src/tasks.c   ****                 if( pxNewTCB != NULL )
 749:Src/tasks.c   ****                 {
 750:Src/tasks.c   ****                     /* Allocate space for the stack used by the task being created.
 751:Src/tasks.c   ****                      * The base of the stack memory stored in the TCB so the task can
 752:Src/tasks.c   ****                      * be deleted later if required. */
 753:Src/tasks.c   ****                     pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) usStack
 754:Src/tasks.c   **** 
 755:Src/tasks.c   ****                     if( pxNewTCB->pxStack == NULL )
 756:Src/tasks.c   ****                     {
 757:Src/tasks.c   ****                         /* Could not allocate the stack.  Delete the allocated TCB. */
 758:Src/tasks.c   ****                         vPortFree( pxNewTCB );
 759:Src/tasks.c   ****                         pxNewTCB = NULL;
 760:Src/tasks.c   ****                     }
 761:Src/tasks.c   ****                 }
 762:Src/tasks.c   ****             }
 763:Src/tasks.c   ****         #else /* portSTACK_GROWTH */
 764:Src/tasks.c   ****             {
 765:Src/tasks.c   ****                 StackType_t * pxStack;
 766:Src/tasks.c   **** 
 767:Src/tasks.c   ****                 /* Allocate space for the stack used by the task being created. */
 768:Src/tasks.c   ****                 pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 769:Src/tasks.c   **** 
 770:Src/tasks.c   ****                 if( pxStack != NULL )
 771:Src/tasks.c   ****                 {
 772:Src/tasks.c   ****                     /* Allocate space for the TCB. */
 773:Src/tasks.c   ****                     pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 Al
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 15


 774:Src/tasks.c   **** 
 775:Src/tasks.c   ****                     if( pxNewTCB != NULL )
 776:Src/tasks.c   ****                     {
 777:Src/tasks.c   ****                         /* Store the stack location in the TCB. */
 778:Src/tasks.c   ****                         pxNewTCB->pxStack = pxStack;
 779:Src/tasks.c   ****                     }
 780:Src/tasks.c   ****                     else
 781:Src/tasks.c   ****                     {
 782:Src/tasks.c   ****                         /* The stack cannot be used as the TCB was not created.  Free
 783:Src/tasks.c   ****                          * it again. */
 784:Src/tasks.c   ****                         vPortFreeStack( pxStack );
 785:Src/tasks.c   ****                     }
 786:Src/tasks.c   ****                 }
 787:Src/tasks.c   ****                 else
 788:Src/tasks.c   ****                 {
 789:Src/tasks.c   ****                     pxNewTCB = NULL;
 790:Src/tasks.c   ****                 }
 791:Src/tasks.c   ****             }
 792:Src/tasks.c   ****         #endif /* portSTACK_GROWTH */
 793:Src/tasks.c   **** 
 794:Src/tasks.c   ****         if( pxNewTCB != NULL )
 795:Src/tasks.c   ****         {
 796:Src/tasks.c   ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 797:Src/tasks.c   ****                 {
 798:Src/tasks.c   ****                     /* Tasks can be created statically or dynamically, so note this
 799:Src/tasks.c   ****                      * task was created dynamically in case it is later deleted. */
 800:Src/tasks.c   ****                     pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801:Src/tasks.c   ****                 }
 802:Src/tasks.c   ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 803:Src/tasks.c   **** 
 804:Src/tasks.c   ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 805:Src/tasks.c   ****             prvAddNewTaskToReadyList( pxNewTCB );
 806:Src/tasks.c   ****             xReturn = pdPASS;
 807:Src/tasks.c   ****         }
 808:Src/tasks.c   ****         else
 809:Src/tasks.c   ****         {
 810:Src/tasks.c   ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 811:Src/tasks.c   ****         }
 812:Src/tasks.c   **** 
 813:Src/tasks.c   ****         return xReturn;
 814:Src/tasks.c   ****     }
 815:Src/tasks.c   **** 
 816:Src/tasks.c   **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 817:Src/tasks.c   **** /*-----------------------------------------------------------*/
 818:Src/tasks.c   **** 
 819:Src/tasks.c   **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 820:Src/tasks.c   ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 821:Src/tasks.c   ****                                   const uint32_t ulStackDepth,
 822:Src/tasks.c   ****                                   void * const pvParameters,
 823:Src/tasks.c   ****                                   UBaseType_t uxPriority,
 824:Src/tasks.c   ****                                   TaskHandle_t * const pxCreatedTask,
 825:Src/tasks.c   ****                                   TCB_t * pxNewTCB,
 826:Src/tasks.c   ****                                   const MemoryRegion_t * const xRegions )
 827:Src/tasks.c   **** {
 828:Src/tasks.c   ****     StackType_t * pxTopOfStack;
 829:Src/tasks.c   ****     UBaseType_t x;
 830:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 16


 831:Src/tasks.c   ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 832:Src/tasks.c   ****         /* Should the task be created in privileged mode? */
 833:Src/tasks.c   ****         BaseType_t xRunPrivileged;
 834:Src/tasks.c   **** 
 835:Src/tasks.c   ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 836:Src/tasks.c   ****         {
 837:Src/tasks.c   ****             xRunPrivileged = pdTRUE;
 838:Src/tasks.c   ****         }
 839:Src/tasks.c   ****         else
 840:Src/tasks.c   ****         {
 841:Src/tasks.c   ****             xRunPrivileged = pdFALSE;
 842:Src/tasks.c   ****         }
 843:Src/tasks.c   ****         uxPriority &= ~portPRIVILEGE_BIT;
 844:Src/tasks.c   ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 845:Src/tasks.c   **** 
 846:Src/tasks.c   ****     /* Avoid dependency on memset() if it is not required. */
 847:Src/tasks.c   ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 848:Src/tasks.c   ****         {
 849:Src/tasks.c   ****             /* Fill the stack with a known value to assist debugging. */
 850:Src/tasks.c   ****             ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth
 851:Src/tasks.c   ****         }
 852:Src/tasks.c   ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 853:Src/tasks.c   **** 
 854:Src/tasks.c   ****     /* Calculate the top of stack address.  This depends on whether the stack
 855:Src/tasks.c   ****      * grows from high memory to low (as per the 80x86) or vice versa.
 856:Src/tasks.c   ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 857:Src/tasks.c   ****      * by the port. */
 858:Src/tasks.c   ****     #if ( portSTACK_GROWTH < 0 )
 859:Src/tasks.c   ****         {
 860:Src/tasks.c   ****             pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 861:Src/tasks.c   ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 862:Src/tasks.c   **** 
 863:Src/tasks.c   ****             /* Check the alignment of the calculated top of stack is correct. */
 864:Src/tasks.c   ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) po
 865:Src/tasks.c   **** 
 866:Src/tasks.c   ****             #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 867:Src/tasks.c   ****                 {
 868:Src/tasks.c   ****                     /* Also record the stack's high address, which may assist
 869:Src/tasks.c   ****                      * debugging. */
 870:Src/tasks.c   ****                     pxNewTCB->pxEndOfStack = pxTopOfStack;
 871:Src/tasks.c   ****                 }
 872:Src/tasks.c   ****             #endif /* configRECORD_STACK_HIGH_ADDRESS */
 873:Src/tasks.c   ****         }
 874:Src/tasks.c   ****     #else /* portSTACK_GROWTH */
 875:Src/tasks.c   ****         {
 876:Src/tasks.c   ****             pxTopOfStack = pxNewTCB->pxStack;
 877:Src/tasks.c   **** 
 878:Src/tasks.c   ****             /* Check the alignment of the stack buffer is correct. */
 879:Src/tasks.c   ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE
 880:Src/tasks.c   **** 
 881:Src/tasks.c   ****             /* The other extreme of the stack space is required if stack checking is
 882:Src/tasks.c   ****              * performed. */
 883:Src/tasks.c   ****             pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 884:Src/tasks.c   ****         }
 885:Src/tasks.c   ****     #endif /* portSTACK_GROWTH */
 886:Src/tasks.c   **** 
 887:Src/tasks.c   ****     /* Store the task name in the TCB. */
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 17


 888:Src/tasks.c   ****     if( pcName != NULL )
 889:Src/tasks.c   ****     {
 890:Src/tasks.c   ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 891:Src/tasks.c   ****         {
 892:Src/tasks.c   ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 893:Src/tasks.c   **** 
 894:Src/tasks.c   ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 895:Src/tasks.c   ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 896:Src/tasks.c   ****              * string is not accessible (extremely unlikely). */
 897:Src/tasks.c   ****             if( pcName[ x ] == ( char ) 0x00 )
 898:Src/tasks.c   ****             {
 899:Src/tasks.c   ****                 break;
 900:Src/tasks.c   ****             }
 901:Src/tasks.c   ****             else
 902:Src/tasks.c   ****             {
 903:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
 904:Src/tasks.c   ****             }
 905:Src/tasks.c   ****         }
 906:Src/tasks.c   **** 
 907:Src/tasks.c   ****         /* Ensure the name string is terminated in the case that the string length
 908:Src/tasks.c   ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 909:Src/tasks.c   ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 910:Src/tasks.c   ****     }
 911:Src/tasks.c   ****     else
 912:Src/tasks.c   ****     {
 913:Src/tasks.c   ****         /* The task has not been given a name, so just ensure there is a NULL
 914:Src/tasks.c   ****          * terminator when it is read out. */
 915:Src/tasks.c   ****         pxNewTCB->pcTaskName[ 0 ] = 0x00;
 916:Src/tasks.c   ****     }
 917:Src/tasks.c   **** 
 918:Src/tasks.c   ****     /* This is used as an array index so must ensure it's not too large. */
 919:Src/tasks.c   ****     configASSERT( uxPriority < configMAX_PRIORITIES );
 920:Src/tasks.c   **** 
 921:Src/tasks.c   ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 922:Src/tasks.c   ****     {
 923:Src/tasks.c   ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 924:Src/tasks.c   ****     }
 925:Src/tasks.c   ****     else
 926:Src/tasks.c   ****     {
 927:Src/tasks.c   ****         mtCOVERAGE_TEST_MARKER();
 928:Src/tasks.c   ****     }
 929:Src/tasks.c   **** 
 930:Src/tasks.c   ****     pxNewTCB->uxPriority = uxPriority;
 931:Src/tasks.c   ****     #if ( configUSE_MUTEXES == 1 )
 932:Src/tasks.c   ****         {
 933:Src/tasks.c   ****             pxNewTCB->uxBasePriority = uxPriority;
 934:Src/tasks.c   ****             pxNewTCB->uxMutexesHeld = 0;
 935:Src/tasks.c   ****         }
 936:Src/tasks.c   ****     #endif /* configUSE_MUTEXES */
 937:Src/tasks.c   **** 
 938:Src/tasks.c   ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 939:Src/tasks.c   ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 940:Src/tasks.c   **** 
 941:Src/tasks.c   ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:Src/tasks.c   ****      * back to  the containing TCB from a generic item in a list. */
 943:Src/tasks.c   ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 944:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 18


 945:Src/tasks.c   ****     /* Event lists are always in priority order. */
 946:Src/tasks.c   ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 947:Src/tasks.c   ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 948:Src/tasks.c   **** 
 949:Src/tasks.c   ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:Src/tasks.c   ****         {
 951:Src/tasks.c   ****             pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:Src/tasks.c   ****         }
 953:Src/tasks.c   ****     #endif /* portCRITICAL_NESTING_IN_TCB */
 954:Src/tasks.c   **** 
 955:Src/tasks.c   ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:Src/tasks.c   ****         {
 957:Src/tasks.c   ****             pxNewTCB->pxTaskTag = NULL;
 958:Src/tasks.c   ****         }
 959:Src/tasks.c   ****     #endif /* configUSE_APPLICATION_TASK_TAG */
 960:Src/tasks.c   **** 
 961:Src/tasks.c   ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:Src/tasks.c   ****         {
 963:Src/tasks.c   ****             pxNewTCB->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 964:Src/tasks.c   ****         }
 965:Src/tasks.c   ****     #endif /* configGENERATE_RUN_TIME_STATS */
 966:Src/tasks.c   **** 
 967:Src/tasks.c   ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 968:Src/tasks.c   ****         {
 969:Src/tasks.c   ****             vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ul
 970:Src/tasks.c   ****         }
 971:Src/tasks.c   ****     #else
 972:Src/tasks.c   ****         {
 973:Src/tasks.c   ****             /* Avoid compiler warning about unreferenced parameter. */
 974:Src/tasks.c   ****             ( void ) xRegions;
 975:Src/tasks.c   ****         }
 976:Src/tasks.c   ****     #endif
 977:Src/tasks.c   **** 
 978:Src/tasks.c   ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:Src/tasks.c   ****         {
 980:Src/tasks.c   ****             memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNe
 981:Src/tasks.c   ****         }
 982:Src/tasks.c   ****     #endif
 983:Src/tasks.c   **** 
 984:Src/tasks.c   ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 985:Src/tasks.c   ****         {
 986:Src/tasks.c   ****             memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotif
 987:Src/tasks.c   ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 988:Src/tasks.c   ****         }
 989:Src/tasks.c   ****     #endif
 990:Src/tasks.c   **** 
 991:Src/tasks.c   ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 992:Src/tasks.c   ****         {
 993:Src/tasks.c   ****             /* Initialise this task's Newlib reent structure.
 994:Src/tasks.c   ****              * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 995:Src/tasks.c   ****              * for additional information. */
 996:Src/tasks.c   ****             _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 997:Src/tasks.c   ****         }
 998:Src/tasks.c   ****     #endif
 999:Src/tasks.c   **** 
1000:Src/tasks.c   ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
1001:Src/tasks.c   ****         {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 19


1002:Src/tasks.c   ****             pxNewTCB->ucDelayAborted = pdFALSE;
1003:Src/tasks.c   ****         }
1004:Src/tasks.c   ****     #endif
1005:Src/tasks.c   **** 
1006:Src/tasks.c   ****     /* Initialize the TCB stack to look as if the task was already running,
1007:Src/tasks.c   ****      * but had been interrupted by the scheduler.  The return address is set
1008:Src/tasks.c   ****      * to the start of the task function. Once the stack has been initialised
1009:Src/tasks.c   ****      * the top of stack variable is updated. */
1010:Src/tasks.c   ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1011:Src/tasks.c   ****         {
1012:Src/tasks.c   ****             /* If the port has capability to detect stack overflow,
1013:Src/tasks.c   ****              * pass the stack end address to the stack initialization
1014:Src/tasks.c   ****              * function as well. */
1015:Src/tasks.c   ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1016:Src/tasks.c   ****                 {
1017:Src/tasks.c   ****                     #if ( portSTACK_GROWTH < 0 )
1018:Src/tasks.c   ****                         {
1019:Src/tasks.c   ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1020:Src/tasks.c   ****                         }
1021:Src/tasks.c   ****                     #else /* portSTACK_GROWTH */
1022:Src/tasks.c   ****                         {
1023:Src/tasks.c   ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1024:Src/tasks.c   ****                         }
1025:Src/tasks.c   ****                     #endif /* portSTACK_GROWTH */
1026:Src/tasks.c   ****                 }
1027:Src/tasks.c   ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1028:Src/tasks.c   ****                 {
1029:Src/tasks.c   ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1030:Src/tasks.c   ****                 }
1031:Src/tasks.c   ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1032:Src/tasks.c   ****         }
1033:Src/tasks.c   ****     #else /* portUSING_MPU_WRAPPERS */
1034:Src/tasks.c   ****         {
1035:Src/tasks.c   ****             /* If the port has capability to detect stack overflow,
1036:Src/tasks.c   ****              * pass the stack end address to the stack initialization
1037:Src/tasks.c   ****              * function as well. */
1038:Src/tasks.c   ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1039:Src/tasks.c   ****                 {
1040:Src/tasks.c   ****                     #if ( portSTACK_GROWTH < 0 )
1041:Src/tasks.c   ****                         {
1042:Src/tasks.c   ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1043:Src/tasks.c   ****                         }
1044:Src/tasks.c   ****                     #else /* portSTACK_GROWTH */
1045:Src/tasks.c   ****                         {
1046:Src/tasks.c   ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1047:Src/tasks.c   ****                         }
1048:Src/tasks.c   ****                     #endif /* portSTACK_GROWTH */
1049:Src/tasks.c   ****                 }
1050:Src/tasks.c   ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1051:Src/tasks.c   ****                 {
1052:Src/tasks.c   ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1053:Src/tasks.c   ****                 }
1054:Src/tasks.c   ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1055:Src/tasks.c   ****         }
1056:Src/tasks.c   ****     #endif /* portUSING_MPU_WRAPPERS */
1057:Src/tasks.c   **** 
1058:Src/tasks.c   ****     if( pxCreatedTask != NULL )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 20


1059:Src/tasks.c   ****     {
1060:Src/tasks.c   ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1061:Src/tasks.c   ****          * change the created task's priority, delete the created task, etc.*/
1062:Src/tasks.c   ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1063:Src/tasks.c   ****     }
1064:Src/tasks.c   ****     else
1065:Src/tasks.c   ****     {
1066:Src/tasks.c   ****         mtCOVERAGE_TEST_MARKER();
1067:Src/tasks.c   ****     }
1068:Src/tasks.c   **** }
1069:Src/tasks.c   **** /*-----------------------------------------------------------*/
1070:Src/tasks.c   **** 
1071:Src/tasks.c   **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1072:Src/tasks.c   **** {
1073:Src/tasks.c   ****     /* Ensure interrupts don't access the task lists while the lists are being
1074:Src/tasks.c   ****      * updated. */
1075:Src/tasks.c   ****     taskENTER_CRITICAL();
1076:Src/tasks.c   ****     {
1077:Src/tasks.c   ****         uxCurrentNumberOfTasks++;
1078:Src/tasks.c   **** 
1079:Src/tasks.c   ****         if( pxCurrentTCB == NULL )
1080:Src/tasks.c   ****         {
1081:Src/tasks.c   ****             /* There are no other tasks, or all the other tasks are in
1082:Src/tasks.c   ****              * the suspended state - make this the current task. */
1083:Src/tasks.c   ****             pxCurrentTCB = pxNewTCB;
1084:Src/tasks.c   **** 
1085:Src/tasks.c   ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1086:Src/tasks.c   ****             {
1087:Src/tasks.c   ****                 /* This is the first task to be created so do the preliminary
1088:Src/tasks.c   ****                  * initialisation required.  We will not recover if this call
1089:Src/tasks.c   ****                  * fails, but we will report the failure. */
1090:Src/tasks.c   ****                 prvInitialiseTaskLists();
1091:Src/tasks.c   ****             }
1092:Src/tasks.c   ****             else
1093:Src/tasks.c   ****             {
1094:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
1095:Src/tasks.c   ****             }
1096:Src/tasks.c   ****         }
1097:Src/tasks.c   ****         else
1098:Src/tasks.c   ****         {
1099:Src/tasks.c   ****             /* If the scheduler is not already running, make this task the
1100:Src/tasks.c   ****              * current task if it is the highest priority task to be created
1101:Src/tasks.c   ****              * so far. */
1102:Src/tasks.c   ****             if( xSchedulerRunning == pdFALSE )
1103:Src/tasks.c   ****             {
1104:Src/tasks.c   ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1105:Src/tasks.c   ****                 {
1106:Src/tasks.c   ****                     pxCurrentTCB = pxNewTCB;
1107:Src/tasks.c   ****                 }
1108:Src/tasks.c   ****                 else
1109:Src/tasks.c   ****                 {
1110:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
1111:Src/tasks.c   ****                 }
1112:Src/tasks.c   ****             }
1113:Src/tasks.c   ****             else
1114:Src/tasks.c   ****             {
1115:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 21


1116:Src/tasks.c   ****             }
1117:Src/tasks.c   ****         }
1118:Src/tasks.c   **** 
1119:Src/tasks.c   ****         uxTaskNumber++;
1120:Src/tasks.c   **** 
1121:Src/tasks.c   ****         #if ( configUSE_TRACE_FACILITY == 1 )
1122:Src/tasks.c   ****             {
1123:Src/tasks.c   ****                 /* Add a counter into the TCB for tracing only. */
1124:Src/tasks.c   ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:Src/tasks.c   ****             }
1126:Src/tasks.c   ****         #endif /* configUSE_TRACE_FACILITY */
1127:Src/tasks.c   ****         traceTASK_CREATE( pxNewTCB );
1128:Src/tasks.c   **** 
1129:Src/tasks.c   ****         prvAddTaskToReadyList( pxNewTCB );
1130:Src/tasks.c   **** 
1131:Src/tasks.c   ****         portSETUP_TCB( pxNewTCB );
1132:Src/tasks.c   ****     }
1133:Src/tasks.c   ****     taskEXIT_CRITICAL();
1134:Src/tasks.c   **** 
1135:Src/tasks.c   ****     if( xSchedulerRunning != pdFALSE )
1136:Src/tasks.c   ****     {
1137:Src/tasks.c   ****         /* If the created task is of a higher priority than the current task
1138:Src/tasks.c   ****          * then it should run now. */
1139:Src/tasks.c   ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1140:Src/tasks.c   ****         {
1141:Src/tasks.c   ****             taskYIELD_IF_USING_PREEMPTION();
1142:Src/tasks.c   ****         }
1143:Src/tasks.c   ****         else
1144:Src/tasks.c   ****         {
1145:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
1146:Src/tasks.c   ****         }
1147:Src/tasks.c   ****     }
1148:Src/tasks.c   ****     else
1149:Src/tasks.c   ****     {
1150:Src/tasks.c   ****         mtCOVERAGE_TEST_MARKER();
1151:Src/tasks.c   ****     }
1152:Src/tasks.c   **** }
1153:Src/tasks.c   **** /*-----------------------------------------------------------*/
1154:Src/tasks.c   **** 
1155:Src/tasks.c   **** #if ( INCLUDE_vTaskDelete == 1 )
1156:Src/tasks.c   **** 
1157:Src/tasks.c   ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:Src/tasks.c   ****     {
1159:Src/tasks.c   ****         TCB_t * pxTCB;
1160:Src/tasks.c   **** 
1161:Src/tasks.c   ****         taskENTER_CRITICAL();
1162:Src/tasks.c   ****         {
1163:Src/tasks.c   ****             /* If null is passed in here then it is the calling task that is
1164:Src/tasks.c   ****              * being deleted. */
1165:Src/tasks.c   ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1166:Src/tasks.c   **** 
1167:Src/tasks.c   ****             /* Remove task from the ready/delayed list. */
1168:Src/tasks.c   ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1169:Src/tasks.c   ****             {
1170:Src/tasks.c   ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:Src/tasks.c   ****             }
1172:Src/tasks.c   ****             else
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 22


1173:Src/tasks.c   ****             {
1174:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
1175:Src/tasks.c   ****             }
1176:Src/tasks.c   **** 
1177:Src/tasks.c   ****             /* Is the task waiting on an event also? */
1178:Src/tasks.c   ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1179:Src/tasks.c   ****             {
1180:Src/tasks.c   ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1181:Src/tasks.c   ****             }
1182:Src/tasks.c   ****             else
1183:Src/tasks.c   ****             {
1184:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
1185:Src/tasks.c   ****             }
1186:Src/tasks.c   **** 
1187:Src/tasks.c   ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1188:Src/tasks.c   ****              * detect that the task lists need re-generating.  This is done before
1189:Src/tasks.c   ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:Src/tasks.c   ****              * not return. */
1191:Src/tasks.c   ****             uxTaskNumber++;
1192:Src/tasks.c   **** 
1193:Src/tasks.c   ****             if( pxTCB == pxCurrentTCB )
1194:Src/tasks.c   ****             {
1195:Src/tasks.c   ****                 /* A task is deleting itself.  This cannot complete within the
1196:Src/tasks.c   ****                  * task itself, as a context switch to another task is required.
1197:Src/tasks.c   ****                  * Place the task in the termination list.  The idle task will
1198:Src/tasks.c   ****                  * check the termination list and free up any memory allocated by
1199:Src/tasks.c   ****                  * the scheduler for the TCB and stack of the deleted task. */
1200:Src/tasks.c   ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1201:Src/tasks.c   **** 
1202:Src/tasks.c   ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1203:Src/tasks.c   ****                  * there is a task that has been deleted and that it should therefore
1204:Src/tasks.c   ****                  * check the xTasksWaitingTermination list. */
1205:Src/tasks.c   ****                 ++uxDeletedTasksWaitingCleanUp;
1206:Src/tasks.c   **** 
1207:Src/tasks.c   ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1208:Src/tasks.c   ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1209:Src/tasks.c   ****                 traceTASK_DELETE( pxTCB );
1210:Src/tasks.c   **** 
1211:Src/tasks.c   ****                 /* The pre-delete hook is primarily for the Windows simulator,
1212:Src/tasks.c   ****                  * in which Windows specific clean up operations are performed,
1213:Src/tasks.c   ****                  * after which it is not possible to yield away from this task -
1214:Src/tasks.c   ****                  * hence xYieldPending is used to latch that a context switch is
1215:Src/tasks.c   ****                  * required. */
1216:Src/tasks.c   ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1217:Src/tasks.c   ****             }
1218:Src/tasks.c   ****             else
1219:Src/tasks.c   ****             {
1220:Src/tasks.c   ****                 --uxCurrentNumberOfTasks;
1221:Src/tasks.c   ****                 traceTASK_DELETE( pxTCB );
1222:Src/tasks.c   **** 
1223:Src/tasks.c   ****                 /* Reset the next expected unblock time in case it referred to
1224:Src/tasks.c   ****                  * the task that has just been deleted. */
1225:Src/tasks.c   ****                 prvResetNextTaskUnblockTime();
1226:Src/tasks.c   ****             }
1227:Src/tasks.c   ****         }
1228:Src/tasks.c   ****         taskEXIT_CRITICAL();
1229:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 23


1230:Src/tasks.c   ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
1231:Src/tasks.c   ****          * critical section. If a task deletes itself, prvDeleteTCB is called
1232:Src/tasks.c   ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
1233:Src/tasks.c   ****         if( pxTCB != pxCurrentTCB )
1234:Src/tasks.c   ****         {
1235:Src/tasks.c   ****             prvDeleteTCB( pxTCB );
1236:Src/tasks.c   ****         }
1237:Src/tasks.c   **** 
1238:Src/tasks.c   ****         /* Force a reschedule if it is the currently running task that has just
1239:Src/tasks.c   ****          * been deleted. */
1240:Src/tasks.c   ****         if( xSchedulerRunning != pdFALSE )
1241:Src/tasks.c   ****         {
1242:Src/tasks.c   ****             if( pxTCB == pxCurrentTCB )
1243:Src/tasks.c   ****             {
1244:Src/tasks.c   ****                 configASSERT( uxSchedulerSuspended == 0 );
1245:Src/tasks.c   ****                 portYIELD_WITHIN_API();
1246:Src/tasks.c   ****             }
1247:Src/tasks.c   ****             else
1248:Src/tasks.c   ****             {
1249:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
1250:Src/tasks.c   ****             }
1251:Src/tasks.c   ****         }
1252:Src/tasks.c   ****     }
1253:Src/tasks.c   **** 
1254:Src/tasks.c   **** #endif /* INCLUDE_vTaskDelete */
1255:Src/tasks.c   **** /*-----------------------------------------------------------*/
1256:Src/tasks.c   **** 
1257:Src/tasks.c   **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1258:Src/tasks.c   **** 
1259:Src/tasks.c   ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1260:Src/tasks.c   ****                                 const TickType_t xTimeIncrement )
1261:Src/tasks.c   ****     {
1262:Src/tasks.c   ****         TickType_t xTimeToWake;
1263:Src/tasks.c   ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1264:Src/tasks.c   **** 
1265:Src/tasks.c   ****         configASSERT( pxPreviousWakeTime );
1266:Src/tasks.c   ****         configASSERT( ( xTimeIncrement > 0U ) );
1267:Src/tasks.c   ****         configASSERT( uxSchedulerSuspended == 0 );
1268:Src/tasks.c   **** 
1269:Src/tasks.c   ****         vTaskSuspendAll();
1270:Src/tasks.c   ****         {
1271:Src/tasks.c   ****             /* Minor optimisation.  The tick count cannot change in this
1272:Src/tasks.c   ****              * block. */
1273:Src/tasks.c   ****             const TickType_t xConstTickCount = xTickCount;
1274:Src/tasks.c   **** 
1275:Src/tasks.c   ****             /* Generate the tick time at which the task wants to wake. */
1276:Src/tasks.c   ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1277:Src/tasks.c   **** 
1278:Src/tasks.c   ****             if( xConstTickCount < *pxPreviousWakeTime )
1279:Src/tasks.c   ****             {
1280:Src/tasks.c   ****                 /* The tick count has overflowed since this function was
1281:Src/tasks.c   ****                  * lasted called.  In this case the only time we should ever
1282:Src/tasks.c   ****                  * actually delay is if the wake time has also  overflowed,
1283:Src/tasks.c   ****                  * and the wake time is greater than the tick time.  When this
1284:Src/tasks.c   ****                  * is the case it is as if neither time had overflowed. */
1285:Src/tasks.c   ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1286:Src/tasks.c   ****                 {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 24


1287:Src/tasks.c   ****                     xShouldDelay = pdTRUE;
1288:Src/tasks.c   ****                 }
1289:Src/tasks.c   ****                 else
1290:Src/tasks.c   ****                 {
1291:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
1292:Src/tasks.c   ****                 }
1293:Src/tasks.c   ****             }
1294:Src/tasks.c   ****             else
1295:Src/tasks.c   ****             {
1296:Src/tasks.c   ****                 /* The tick time has not overflowed.  In this case we will
1297:Src/tasks.c   ****                  * delay if either the wake time has overflowed, and/or the
1298:Src/tasks.c   ****                  * tick time is less than the wake time. */
1299:Src/tasks.c   ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1300:Src/tasks.c   ****                 {
1301:Src/tasks.c   ****                     xShouldDelay = pdTRUE;
1302:Src/tasks.c   ****                 }
1303:Src/tasks.c   ****                 else
1304:Src/tasks.c   ****                 {
1305:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
1306:Src/tasks.c   ****                 }
1307:Src/tasks.c   ****             }
1308:Src/tasks.c   **** 
1309:Src/tasks.c   ****             /* Update the wake time ready for the next call. */
1310:Src/tasks.c   ****             *pxPreviousWakeTime = xTimeToWake;
1311:Src/tasks.c   **** 
1312:Src/tasks.c   ****             if( xShouldDelay != pdFALSE )
1313:Src/tasks.c   ****             {
1314:Src/tasks.c   ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1315:Src/tasks.c   **** 
1316:Src/tasks.c   ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1317:Src/tasks.c   ****                  * the time to wake, so subtract the current tick count. */
1318:Src/tasks.c   ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1319:Src/tasks.c   ****             }
1320:Src/tasks.c   ****             else
1321:Src/tasks.c   ****             {
1322:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
1323:Src/tasks.c   ****             }
1324:Src/tasks.c   ****         }
1325:Src/tasks.c   ****         xAlreadyYielded = xTaskResumeAll();
1326:Src/tasks.c   **** 
1327:Src/tasks.c   ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1328:Src/tasks.c   ****          * have put ourselves to sleep. */
1329:Src/tasks.c   ****         if( xAlreadyYielded == pdFALSE )
1330:Src/tasks.c   ****         {
1331:Src/tasks.c   ****             portYIELD_WITHIN_API();
1332:Src/tasks.c   ****         }
1333:Src/tasks.c   ****         else
1334:Src/tasks.c   ****         {
1335:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
1336:Src/tasks.c   ****         }
1337:Src/tasks.c   **** 
1338:Src/tasks.c   ****         return xShouldDelay;
1339:Src/tasks.c   ****     }
1340:Src/tasks.c   **** 
1341:Src/tasks.c   **** #endif /* INCLUDE_xTaskDelayUntil */
1342:Src/tasks.c   **** /*-----------------------------------------------------------*/
1343:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 25


1344:Src/tasks.c   **** #if ( INCLUDE_vTaskDelay == 1 )
1345:Src/tasks.c   **** 
1346:Src/tasks.c   ****     void vTaskDelay( const TickType_t xTicksToDelay )
1347:Src/tasks.c   ****     {
1348:Src/tasks.c   ****         BaseType_t xAlreadyYielded = pdFALSE;
1349:Src/tasks.c   **** 
1350:Src/tasks.c   ****         /* A delay time of zero just forces a reschedule. */
1351:Src/tasks.c   ****         if( xTicksToDelay > ( TickType_t ) 0U )
1352:Src/tasks.c   ****         {
1353:Src/tasks.c   ****             configASSERT( uxSchedulerSuspended == 0 );
1354:Src/tasks.c   ****             vTaskSuspendAll();
1355:Src/tasks.c   ****             {
1356:Src/tasks.c   ****                 traceTASK_DELAY();
1357:Src/tasks.c   **** 
1358:Src/tasks.c   ****                 /* A task that is removed from the event list while the
1359:Src/tasks.c   ****                  * scheduler is suspended will not get placed in the ready
1360:Src/tasks.c   ****                  * list or removed from the blocked list until the scheduler
1361:Src/tasks.c   ****                  * is resumed.
1362:Src/tasks.c   ****                  *
1363:Src/tasks.c   ****                  * This task cannot be in an event list as it is the currently
1364:Src/tasks.c   ****                  * executing task. */
1365:Src/tasks.c   ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1366:Src/tasks.c   ****             }
1367:Src/tasks.c   ****             xAlreadyYielded = xTaskResumeAll();
1368:Src/tasks.c   ****         }
1369:Src/tasks.c   ****         else
1370:Src/tasks.c   ****         {
1371:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
1372:Src/tasks.c   ****         }
1373:Src/tasks.c   **** 
1374:Src/tasks.c   ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1375:Src/tasks.c   ****          * have put ourselves to sleep. */
1376:Src/tasks.c   ****         if( xAlreadyYielded == pdFALSE )
1377:Src/tasks.c   ****         {
1378:Src/tasks.c   ****             portYIELD_WITHIN_API();
1379:Src/tasks.c   ****         }
1380:Src/tasks.c   ****         else
1381:Src/tasks.c   ****         {
1382:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
1383:Src/tasks.c   ****         }
1384:Src/tasks.c   ****     }
1385:Src/tasks.c   **** 
1386:Src/tasks.c   **** #endif /* INCLUDE_vTaskDelay */
1387:Src/tasks.c   **** /*-----------------------------------------------------------*/
1388:Src/tasks.c   **** 
1389:Src/tasks.c   **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1390:Src/tasks.c   **** 
1391:Src/tasks.c   ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1392:Src/tasks.c   ****     {
1393:Src/tasks.c   ****         eTaskState eReturn;
1394:Src/tasks.c   ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
1395:Src/tasks.c   ****         const TCB_t * const pxTCB = xTask;
1396:Src/tasks.c   **** 
1397:Src/tasks.c   ****         configASSERT( pxTCB );
1398:Src/tasks.c   **** 
1399:Src/tasks.c   ****         if( pxTCB == pxCurrentTCB )
1400:Src/tasks.c   ****         {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 26


1401:Src/tasks.c   ****             /* The task calling this function is querying its own state. */
1402:Src/tasks.c   ****             eReturn = eRunning;
1403:Src/tasks.c   ****         }
1404:Src/tasks.c   ****         else
1405:Src/tasks.c   ****         {
1406:Src/tasks.c   ****             taskENTER_CRITICAL();
1407:Src/tasks.c   ****             {
1408:Src/tasks.c   ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1409:Src/tasks.c   ****                 pxDelayedList = pxDelayedTaskList;
1410:Src/tasks.c   ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1411:Src/tasks.c   ****             }
1412:Src/tasks.c   ****             taskEXIT_CRITICAL();
1413:Src/tasks.c   **** 
1414:Src/tasks.c   ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1415:Src/tasks.c   ****             {
1416:Src/tasks.c   ****                 /* The task being queried is referenced from one of the Blocked
1417:Src/tasks.c   ****                  * lists. */
1418:Src/tasks.c   ****                 eReturn = eBlocked;
1419:Src/tasks.c   ****             }
1420:Src/tasks.c   **** 
1421:Src/tasks.c   ****             #if ( INCLUDE_vTaskSuspend == 1 )
1422:Src/tasks.c   ****                 else if( pxStateList == &xSuspendedTaskList )
1423:Src/tasks.c   ****                 {
1424:Src/tasks.c   ****                     /* The task being queried is referenced from the suspended
1425:Src/tasks.c   ****                      * list.  Is it genuinely suspended or is it blocked
1426:Src/tasks.c   ****                      * indefinitely? */
1427:Src/tasks.c   ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1428:Src/tasks.c   ****                     {
1429:Src/tasks.c   ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1430:Src/tasks.c   ****                             {
1431:Src/tasks.c   ****                                 BaseType_t x;
1432:Src/tasks.c   **** 
1433:Src/tasks.c   ****                                 /* The task does not appear on the event list item of
1434:Src/tasks.c   ****                                  * and of the RTOS objects, but could still be in the
1435:Src/tasks.c   ****                                  * blocked state if it is waiting on its notification
1436:Src/tasks.c   ****                                  * rather than waiting on an object.  If not, is
1437:Src/tasks.c   ****                                  * suspended. */
1438:Src/tasks.c   ****                                 eReturn = eSuspended;
1439:Src/tasks.c   **** 
1440:Src/tasks.c   ****                                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1441:Src/tasks.c   ****                                 {
1442:Src/tasks.c   ****                                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1443:Src/tasks.c   ****                                     {
1444:Src/tasks.c   ****                                         eReturn = eBlocked;
1445:Src/tasks.c   ****                                         break;
1446:Src/tasks.c   ****                                     }
1447:Src/tasks.c   ****                                 }
1448:Src/tasks.c   ****                             }
1449:Src/tasks.c   ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1450:Src/tasks.c   ****                             {
1451:Src/tasks.c   ****                                 eReturn = eSuspended;
1452:Src/tasks.c   ****                             }
1453:Src/tasks.c   ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1454:Src/tasks.c   ****                     }
1455:Src/tasks.c   ****                     else
1456:Src/tasks.c   ****                     {
1457:Src/tasks.c   ****                         eReturn = eBlocked;
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 27


1458:Src/tasks.c   ****                     }
1459:Src/tasks.c   ****                 }
1460:Src/tasks.c   ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1461:Src/tasks.c   **** 
1462:Src/tasks.c   ****             #if ( INCLUDE_vTaskDelete == 1 )
1463:Src/tasks.c   ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1464:Src/tasks.c   ****                 {
1465:Src/tasks.c   ****                     /* The task being queried is referenced from the deleted
1466:Src/tasks.c   ****                      * tasks list, or it is not referenced from any lists at
1467:Src/tasks.c   ****                      * all. */
1468:Src/tasks.c   ****                     eReturn = eDeleted;
1469:Src/tasks.c   ****                 }
1470:Src/tasks.c   ****             #endif
1471:Src/tasks.c   **** 
1472:Src/tasks.c   ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1473:Src/tasks.c   ****             {
1474:Src/tasks.c   ****                 /* If the task is not in any other state, it must be in the
1475:Src/tasks.c   ****                  * Ready (including pending ready) state. */
1476:Src/tasks.c   ****                 eReturn = eReady;
1477:Src/tasks.c   ****             }
1478:Src/tasks.c   ****         }
1479:Src/tasks.c   **** 
1480:Src/tasks.c   ****         return eReturn;
1481:Src/tasks.c   ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1482:Src/tasks.c   **** 
1483:Src/tasks.c   **** #endif /* INCLUDE_eTaskGetState */
1484:Src/tasks.c   **** /*-----------------------------------------------------------*/
1485:Src/tasks.c   **** 
1486:Src/tasks.c   **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1487:Src/tasks.c   **** 
1488:Src/tasks.c   ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1489:Src/tasks.c   ****     {
1490:Src/tasks.c   ****         TCB_t const * pxTCB;
1491:Src/tasks.c   ****         UBaseType_t uxReturn;
1492:Src/tasks.c   **** 
1493:Src/tasks.c   ****         taskENTER_CRITICAL();
1494:Src/tasks.c   ****         {
1495:Src/tasks.c   ****             /* If null is passed in here then it is the priority of the task
1496:Src/tasks.c   ****              * that called uxTaskPriorityGet() that is being queried. */
1497:Src/tasks.c   ****             pxTCB = prvGetTCBFromHandle( xTask );
1498:Src/tasks.c   ****             uxReturn = pxTCB->uxPriority;
1499:Src/tasks.c   ****         }
1500:Src/tasks.c   ****         taskEXIT_CRITICAL();
1501:Src/tasks.c   **** 
1502:Src/tasks.c   ****         return uxReturn;
1503:Src/tasks.c   ****     }
1504:Src/tasks.c   **** 
1505:Src/tasks.c   **** #endif /* INCLUDE_uxTaskPriorityGet */
1506:Src/tasks.c   **** /*-----------------------------------------------------------*/
1507:Src/tasks.c   **** 
1508:Src/tasks.c   **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1509:Src/tasks.c   **** 
1510:Src/tasks.c   ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1511:Src/tasks.c   ****     {
1512:Src/tasks.c   ****         TCB_t const * pxTCB;
1513:Src/tasks.c   ****         UBaseType_t uxReturn, uxSavedInterruptState;
1514:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 28


1515:Src/tasks.c   ****         /* RTOS ports that support interrupt nesting have the concept of a
1516:Src/tasks.c   ****          * maximum  system call (or maximum API call) interrupt priority.
1517:Src/tasks.c   ****          * Interrupts that are  above the maximum system call priority are keep
1518:Src/tasks.c   ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1519:Src/tasks.c   ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1520:Src/tasks.c   ****          * is defined in FreeRTOSConfig.h then
1521:Src/tasks.c   ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1522:Src/tasks.c   ****          * failure if a FreeRTOS API function is called from an interrupt that has
1523:Src/tasks.c   ****          * been assigned a priority above the configured maximum system call
1524:Src/tasks.c   ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1525:Src/tasks.c   ****          * from interrupts  that have been assigned a priority at or (logically)
1526:Src/tasks.c   ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1527:Src/tasks.c   ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1528:Src/tasks.c   ****          * simple as possible.  More information (albeit Cortex-M specific) is
1529:Src/tasks.c   ****          * provided on the following link:
1530:Src/tasks.c   ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1531:Src/tasks.c   ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1532:Src/tasks.c   **** 
1533:Src/tasks.c   ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1534:Src/tasks.c   ****         {
1535:Src/tasks.c   ****             /* If null is passed in here then it is the priority of the calling
1536:Src/tasks.c   ****              * task that is being queried. */
1537:Src/tasks.c   ****             pxTCB = prvGetTCBFromHandle( xTask );
1538:Src/tasks.c   ****             uxReturn = pxTCB->uxPriority;
1539:Src/tasks.c   ****         }
1540:Src/tasks.c   ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1541:Src/tasks.c   **** 
1542:Src/tasks.c   ****         return uxReturn;
1543:Src/tasks.c   ****     }
1544:Src/tasks.c   **** 
1545:Src/tasks.c   **** #endif /* INCLUDE_uxTaskPriorityGet */
1546:Src/tasks.c   **** /*-----------------------------------------------------------*/
1547:Src/tasks.c   **** 
1548:Src/tasks.c   **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1549:Src/tasks.c   **** 
1550:Src/tasks.c   ****     void vTaskPrioritySet( TaskHandle_t xTask,
1551:Src/tasks.c   ****                            UBaseType_t uxNewPriority )
1552:Src/tasks.c   ****     {
1553:Src/tasks.c   ****         TCB_t * pxTCB;
1554:Src/tasks.c   ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1555:Src/tasks.c   ****         BaseType_t xYieldRequired = pdFALSE;
1556:Src/tasks.c   **** 
1557:Src/tasks.c   ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
1558:Src/tasks.c   **** 
1559:Src/tasks.c   ****         /* Ensure the new priority is valid. */
1560:Src/tasks.c   ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1561:Src/tasks.c   ****         {
1562:Src/tasks.c   ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1563:Src/tasks.c   ****         }
1564:Src/tasks.c   ****         else
1565:Src/tasks.c   ****         {
1566:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
1567:Src/tasks.c   ****         }
1568:Src/tasks.c   **** 
1569:Src/tasks.c   ****         taskENTER_CRITICAL();
1570:Src/tasks.c   ****         {
1571:Src/tasks.c   ****             /* If null is passed in here then it is the priority of the calling
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 29


1572:Src/tasks.c   ****              * task that is being changed. */
1573:Src/tasks.c   ****             pxTCB = prvGetTCBFromHandle( xTask );
1574:Src/tasks.c   **** 
1575:Src/tasks.c   ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1576:Src/tasks.c   **** 
1577:Src/tasks.c   ****             #if ( configUSE_MUTEXES == 1 )
1578:Src/tasks.c   ****                 {
1579:Src/tasks.c   ****                     uxCurrentBasePriority = pxTCB->uxBasePriority;
1580:Src/tasks.c   ****                 }
1581:Src/tasks.c   ****             #else
1582:Src/tasks.c   ****                 {
1583:Src/tasks.c   ****                     uxCurrentBasePriority = pxTCB->uxPriority;
1584:Src/tasks.c   ****                 }
1585:Src/tasks.c   ****             #endif
1586:Src/tasks.c   **** 
1587:Src/tasks.c   ****             if( uxCurrentBasePriority != uxNewPriority )
1588:Src/tasks.c   ****             {
1589:Src/tasks.c   ****                 /* The priority change may have readied a task of higher
1590:Src/tasks.c   ****                  * priority than the calling task. */
1591:Src/tasks.c   ****                 if( uxNewPriority > uxCurrentBasePriority )
1592:Src/tasks.c   ****                 {
1593:Src/tasks.c   ****                     if( pxTCB != pxCurrentTCB )
1594:Src/tasks.c   ****                     {
1595:Src/tasks.c   ****                         /* The priority of a task other than the currently
1596:Src/tasks.c   ****                          * running task is being raised.  Is the priority being
1597:Src/tasks.c   ****                          * raised above that of the running task? */
1598:Src/tasks.c   ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
1599:Src/tasks.c   ****                         {
1600:Src/tasks.c   ****                             xYieldRequired = pdTRUE;
1601:Src/tasks.c   ****                         }
1602:Src/tasks.c   ****                         else
1603:Src/tasks.c   ****                         {
1604:Src/tasks.c   ****                             mtCOVERAGE_TEST_MARKER();
1605:Src/tasks.c   ****                         }
1606:Src/tasks.c   ****                     }
1607:Src/tasks.c   ****                     else
1608:Src/tasks.c   ****                     {
1609:Src/tasks.c   ****                         /* The priority of the running task is being raised,
1610:Src/tasks.c   ****                          * but the running task must already be the highest
1611:Src/tasks.c   ****                          * priority task able to run so no yield is required. */
1612:Src/tasks.c   ****                     }
1613:Src/tasks.c   ****                 }
1614:Src/tasks.c   ****                 else if( pxTCB == pxCurrentTCB )
1615:Src/tasks.c   ****                 {
1616:Src/tasks.c   ****                     /* Setting the priority of the running task down means
1617:Src/tasks.c   ****                      * there may now be another task of higher priority that
1618:Src/tasks.c   ****                      * is ready to execute. */
1619:Src/tasks.c   ****                     xYieldRequired = pdTRUE;
1620:Src/tasks.c   ****                 }
1621:Src/tasks.c   ****                 else
1622:Src/tasks.c   ****                 {
1623:Src/tasks.c   ****                     /* Setting the priority of any other task down does not
1624:Src/tasks.c   ****                      * require a yield as the running task must be above the
1625:Src/tasks.c   ****                      * new priority of the task being modified. */
1626:Src/tasks.c   ****                 }
1627:Src/tasks.c   **** 
1628:Src/tasks.c   ****                 /* Remember the ready list the task might be referenced from
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 30


1629:Src/tasks.c   ****                  * before its uxPriority member is changed so the
1630:Src/tasks.c   ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1631:Src/tasks.c   ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1632:Src/tasks.c   **** 
1633:Src/tasks.c   ****                 #if ( configUSE_MUTEXES == 1 )
1634:Src/tasks.c   ****                     {
1635:Src/tasks.c   ****                         /* Only change the priority being used if the task is not
1636:Src/tasks.c   ****                          * currently using an inherited priority. */
1637:Src/tasks.c   ****                         if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1638:Src/tasks.c   ****                         {
1639:Src/tasks.c   ****                             pxTCB->uxPriority = uxNewPriority;
1640:Src/tasks.c   ****                         }
1641:Src/tasks.c   ****                         else
1642:Src/tasks.c   ****                         {
1643:Src/tasks.c   ****                             mtCOVERAGE_TEST_MARKER();
1644:Src/tasks.c   ****                         }
1645:Src/tasks.c   **** 
1646:Src/tasks.c   ****                         /* The base priority gets set whatever. */
1647:Src/tasks.c   ****                         pxTCB->uxBasePriority = uxNewPriority;
1648:Src/tasks.c   ****                     }
1649:Src/tasks.c   ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1650:Src/tasks.c   ****                     {
1651:Src/tasks.c   ****                         pxTCB->uxPriority = uxNewPriority;
1652:Src/tasks.c   ****                     }
1653:Src/tasks.c   ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1654:Src/tasks.c   **** 
1655:Src/tasks.c   ****                 /* Only reset the event list item value if the value is not
1656:Src/tasks.c   ****                  * being used for anything else. */
1657:Src/tasks.c   ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1658:Src/tasks.c   ****                 {
1659:Src/tasks.c   ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1660:Src/tasks.c   ****                 }
1661:Src/tasks.c   ****                 else
1662:Src/tasks.c   ****                 {
1663:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
1664:Src/tasks.c   ****                 }
1665:Src/tasks.c   **** 
1666:Src/tasks.c   ****                 /* If the task is in the blocked or suspended list we need do
1667:Src/tasks.c   ****                  * nothing more than change its priority variable. However, if
1668:Src/tasks.c   ****                  * the task is in a ready list it needs to be removed and placed
1669:Src/tasks.c   ****                  * in the list appropriate to its new priority. */
1670:Src/tasks.c   ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
1671:Src/tasks.c   ****                 {
1672:Src/tasks.c   ****                     /* The task is currently in its ready list - remove before
1673:Src/tasks.c   ****                      * adding it to its new ready list.  As we are in a critical
1674:Src/tasks.c   ****                      * section we can do this even if the scheduler is suspended. */
1675:Src/tasks.c   ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1676:Src/tasks.c   ****                     {
1677:Src/tasks.c   ****                         /* It is known that the task is in its ready list so
1678:Src/tasks.c   ****                          * there is no need to check again and the port level
1679:Src/tasks.c   ****                          * reset macro can be called directly. */
1680:Src/tasks.c   ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1681:Src/tasks.c   ****                     }
1682:Src/tasks.c   ****                     else
1683:Src/tasks.c   ****                     {
1684:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
1685:Src/tasks.c   ****                     }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 31


1686:Src/tasks.c   **** 
1687:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
1688:Src/tasks.c   ****                 }
1689:Src/tasks.c   ****                 else
1690:Src/tasks.c   ****                 {
1691:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
1692:Src/tasks.c   ****                 }
1693:Src/tasks.c   **** 
1694:Src/tasks.c   ****                 if( xYieldRequired != pdFALSE )
1695:Src/tasks.c   ****                 {
1696:Src/tasks.c   ****                     taskYIELD_IF_USING_PREEMPTION();
1697:Src/tasks.c   ****                 }
1698:Src/tasks.c   ****                 else
1699:Src/tasks.c   ****                 {
1700:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
1701:Src/tasks.c   ****                 }
1702:Src/tasks.c   **** 
1703:Src/tasks.c   ****                 /* Remove compiler warning about unused variables when the port
1704:Src/tasks.c   ****                  * optimised task selection is not being used. */
1705:Src/tasks.c   ****                 ( void ) uxPriorityUsedOnEntry;
1706:Src/tasks.c   ****             }
1707:Src/tasks.c   ****         }
1708:Src/tasks.c   ****         taskEXIT_CRITICAL();
1709:Src/tasks.c   ****     }
1710:Src/tasks.c   **** 
1711:Src/tasks.c   **** #endif /* INCLUDE_vTaskPrioritySet */
1712:Src/tasks.c   **** /*-----------------------------------------------------------*/
1713:Src/tasks.c   **** 
1714:Src/tasks.c   **** #if ( INCLUDE_vTaskSuspend == 1 )
1715:Src/tasks.c   **** 
1716:Src/tasks.c   ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1717:Src/tasks.c   ****     {
1718:Src/tasks.c   ****         TCB_t * pxTCB;
1719:Src/tasks.c   **** 
1720:Src/tasks.c   ****         taskENTER_CRITICAL();
1721:Src/tasks.c   ****         {
1722:Src/tasks.c   ****             /* If null is passed in here then it is the running task that is
1723:Src/tasks.c   ****              * being suspended. */
1724:Src/tasks.c   ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1725:Src/tasks.c   **** 
1726:Src/tasks.c   ****             traceTASK_SUSPEND( pxTCB );
1727:Src/tasks.c   **** 
1728:Src/tasks.c   ****             /* Remove task from the ready/delayed list and place in the
1729:Src/tasks.c   ****              * suspended list. */
1730:Src/tasks.c   ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1731:Src/tasks.c   ****             {
1732:Src/tasks.c   ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1733:Src/tasks.c   ****             }
1734:Src/tasks.c   ****             else
1735:Src/tasks.c   ****             {
1736:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
1737:Src/tasks.c   ****             }
1738:Src/tasks.c   **** 
1739:Src/tasks.c   ****             /* Is the task waiting on an event also? */
1740:Src/tasks.c   ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1741:Src/tasks.c   ****             {
1742:Src/tasks.c   ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 32


1743:Src/tasks.c   ****             }
1744:Src/tasks.c   ****             else
1745:Src/tasks.c   ****             {
1746:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
1747:Src/tasks.c   ****             }
1748:Src/tasks.c   **** 
1749:Src/tasks.c   ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1750:Src/tasks.c   **** 
1751:Src/tasks.c   ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1752:Src/tasks.c   ****                 {
1753:Src/tasks.c   ****                     BaseType_t x;
1754:Src/tasks.c   **** 
1755:Src/tasks.c   ****                     for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1756:Src/tasks.c   ****                     {
1757:Src/tasks.c   ****                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1758:Src/tasks.c   ****                         {
1759:Src/tasks.c   ****                             /* The task was blocked to wait for a notification, but is
1760:Src/tasks.c   ****                              * now suspended, so no notification was received. */
1761:Src/tasks.c   ****                             pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1762:Src/tasks.c   ****                         }
1763:Src/tasks.c   ****                     }
1764:Src/tasks.c   ****                 }
1765:Src/tasks.c   ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1766:Src/tasks.c   ****         }
1767:Src/tasks.c   ****         taskEXIT_CRITICAL();
1768:Src/tasks.c   **** 
1769:Src/tasks.c   ****         if( xSchedulerRunning != pdFALSE )
1770:Src/tasks.c   ****         {
1771:Src/tasks.c   ****             /* Reset the next expected unblock time in case it referred to the
1772:Src/tasks.c   ****              * task that is now in the Suspended state. */
1773:Src/tasks.c   ****             taskENTER_CRITICAL();
1774:Src/tasks.c   ****             {
1775:Src/tasks.c   ****                 prvResetNextTaskUnblockTime();
1776:Src/tasks.c   ****             }
1777:Src/tasks.c   ****             taskEXIT_CRITICAL();
1778:Src/tasks.c   ****         }
1779:Src/tasks.c   ****         else
1780:Src/tasks.c   ****         {
1781:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
1782:Src/tasks.c   ****         }
1783:Src/tasks.c   **** 
1784:Src/tasks.c   ****         if( pxTCB == pxCurrentTCB )
1785:Src/tasks.c   ****         {
1786:Src/tasks.c   ****             if( xSchedulerRunning != pdFALSE )
1787:Src/tasks.c   ****             {
1788:Src/tasks.c   ****                 /* The current task has just been suspended. */
1789:Src/tasks.c   ****                 configASSERT( uxSchedulerSuspended == 0 );
1790:Src/tasks.c   ****                 portYIELD_WITHIN_API();
1791:Src/tasks.c   ****             }
1792:Src/tasks.c   ****             else
1793:Src/tasks.c   ****             {
1794:Src/tasks.c   ****                 /* The scheduler is not running, but the task that was pointed
1795:Src/tasks.c   ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1796:Src/tasks.c   ****                  * must be adjusted to point to a different task. */
1797:Src/tasks.c   ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1798:Src/tasks.c   ****                 {
1799:Src/tasks.c   ****                     /* No other tasks are ready, so set pxCurrentTCB back to
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 33


1800:Src/tasks.c   ****                      * NULL so when the next task is created pxCurrentTCB will
1801:Src/tasks.c   ****                      * be set to point to it no matter what its relative priority
1802:Src/tasks.c   ****                      * is. */
1803:Src/tasks.c   ****                     pxCurrentTCB = NULL;
1804:Src/tasks.c   ****                 }
1805:Src/tasks.c   ****                 else
1806:Src/tasks.c   ****                 {
1807:Src/tasks.c   ****                     vTaskSwitchContext();
1808:Src/tasks.c   ****                 }
1809:Src/tasks.c   ****             }
1810:Src/tasks.c   ****         }
1811:Src/tasks.c   ****         else
1812:Src/tasks.c   ****         {
1813:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
1814:Src/tasks.c   ****         }
1815:Src/tasks.c   ****     }
1816:Src/tasks.c   **** 
1817:Src/tasks.c   **** #endif /* INCLUDE_vTaskSuspend */
1818:Src/tasks.c   **** /*-----------------------------------------------------------*/
1819:Src/tasks.c   **** 
1820:Src/tasks.c   **** #if ( INCLUDE_vTaskSuspend == 1 )
1821:Src/tasks.c   **** 
1822:Src/tasks.c   ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1823:Src/tasks.c   ****     {
  27              		.loc 1 1823 5 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
1824:Src/tasks.c   ****         BaseType_t xReturn = pdFALSE;
  32              		.loc 1 1824 9 view .LVU1
1825:Src/tasks.c   ****         const TCB_t * const pxTCB = xTask;
  33              		.loc 1 1825 9 view .LVU2
1826:Src/tasks.c   **** 
1827:Src/tasks.c   ****         /* Accesses xPendingReadyList so must be called from a critical
1828:Src/tasks.c   ****          * section. */
1829:Src/tasks.c   **** 
1830:Src/tasks.c   ****         /* It does not make sense to check if the calling task is suspended. */
1831:Src/tasks.c   ****         configASSERT( xTask );
  34              		.loc 1 1831 30 view .LVU3
1832:Src/tasks.c   **** 
1833:Src/tasks.c   ****         /* Is the task being resumed actually in the suspended list? */
1834:Src/tasks.c   ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1834 9 view .LVU4
  36              		.loc 1 1834 13 is_stmt 0 view .LVU5
  37 0000 4269     		ldr	r2, [r0, #20]
  38              		.loc 1 1834 11 view .LVU6
  39 0002 084B     		ldr	r3, .L7
  40 0004 9A42     		cmp	r2, r3
  41 0006 01D0     		beq	.L6
1824:Src/tasks.c   ****         const TCB_t * const pxTCB = xTask;
  42              		.loc 1 1824 20 view .LVU7
  43 0008 0020     		movs	r0, #0
  44              	.LVL1:
1824:Src/tasks.c   ****         const TCB_t * const pxTCB = xTask;
  45              		.loc 1 1824 20 view .LVU8
  46 000a 7047     		bx	lr
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 34


  47              	.LVL2:
  48              	.L6:
1835:Src/tasks.c   ****         {
1836:Src/tasks.c   ****             /* Has the task already been resumed from within an ISR? */
1837:Src/tasks.c   ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
  49              		.loc 1 1837 13 is_stmt 1 view .LVU9
  50              		.loc 1 1837 17 is_stmt 0 view .LVU10
  51 000c 836A     		ldr	r3, [r0, #40]
  52              		.loc 1 1837 15 view .LVU11
  53 000e 064A     		ldr	r2, .L7+4
  54 0010 9342     		cmp	r3, r2
  55 0012 02D0     		beq	.L4
1838:Src/tasks.c   ****             {
1839:Src/tasks.c   ****                 /* Is it in the suspended list because it is in the Suspended
1840:Src/tasks.c   ****                  * state, or because is is blocked with no timeout? */
1841:Src/tasks.c   ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
  56              		.loc 1 1841 17 is_stmt 1 view .LVU12
  57              		.loc 1 1841 19 is_stmt 0 view .LVU13
  58 0014 1BB1     		cbz	r3, .L5
1824:Src/tasks.c   ****         const TCB_t * const pxTCB = xTask;
  59              		.loc 1 1824 20 view .LVU14
  60 0016 0020     		movs	r0, #0
  61              	.LVL3:
1824:Src/tasks.c   ****         const TCB_t * const pxTCB = xTask;
  62              		.loc 1 1824 20 view .LVU15
  63 0018 7047     		bx	lr
  64              	.LVL4:
  65              	.L4:
1824:Src/tasks.c   ****         const TCB_t * const pxTCB = xTask;
  66              		.loc 1 1824 20 view .LVU16
  67 001a 0020     		movs	r0, #0
  68              	.LVL5:
1824:Src/tasks.c   ****         const TCB_t * const pxTCB = xTask;
  69              		.loc 1 1824 20 view .LVU17
  70 001c 7047     		bx	lr
  71              	.LVL6:
  72              	.L5:
1842:Src/tasks.c   ****                 {
1843:Src/tasks.c   ****                     xReturn = pdTRUE;
  73              		.loc 1 1843 29 view .LVU18
  74 001e 0120     		movs	r0, #1
  75              	.LVL7:
1844:Src/tasks.c   ****                 }
1845:Src/tasks.c   ****                 else
1846:Src/tasks.c   ****                 {
1847:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
1848:Src/tasks.c   ****                 }
1849:Src/tasks.c   ****             }
1850:Src/tasks.c   ****             else
1851:Src/tasks.c   ****             {
1852:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
1853:Src/tasks.c   ****             }
1854:Src/tasks.c   ****         }
1855:Src/tasks.c   ****         else
1856:Src/tasks.c   ****         {
1857:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
  76              		.loc 1 1857 37 is_stmt 1 view .LVU19
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 35


1858:Src/tasks.c   ****         }
1859:Src/tasks.c   **** 
1860:Src/tasks.c   ****         return xReturn;
  77              		.loc 1 1860 9 view .LVU20
1861:Src/tasks.c   ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  78              		.loc 1 1861 5 is_stmt 0 view .LVU21
  79 0020 7047     		bx	lr
  80              	.L8:
  81 0022 00BF     		.align	2
  82              	.L7:
  83 0024 00000000 		.word	.LANCHOR0
  84 0028 00000000 		.word	.LANCHOR1
  85              		.cfi_endproc
  86              	.LFE14:
  88              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  89              		.align	1
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu softvfp
  95              	prvResetNextTaskUnblockTime:
  96              	.LFB40:
1862:Src/tasks.c   **** 
1863:Src/tasks.c   **** #endif /* INCLUDE_vTaskSuspend */
1864:Src/tasks.c   **** /*-----------------------------------------------------------*/
1865:Src/tasks.c   **** 
1866:Src/tasks.c   **** #if ( INCLUDE_vTaskSuspend == 1 )
1867:Src/tasks.c   **** 
1868:Src/tasks.c   ****     void vTaskResume( TaskHandle_t xTaskToResume )
1869:Src/tasks.c   ****     {
1870:Src/tasks.c   ****         TCB_t * const pxTCB = xTaskToResume;
1871:Src/tasks.c   **** 
1872:Src/tasks.c   ****         /* It does not make sense to resume the calling task. */
1873:Src/tasks.c   ****         configASSERT( xTaskToResume );
1874:Src/tasks.c   **** 
1875:Src/tasks.c   ****         /* The parameter cannot be NULL as it is impossible to resume the
1876:Src/tasks.c   ****          * currently executing task. */
1877:Src/tasks.c   ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1878:Src/tasks.c   ****         {
1879:Src/tasks.c   ****             taskENTER_CRITICAL();
1880:Src/tasks.c   ****             {
1881:Src/tasks.c   ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1882:Src/tasks.c   ****                 {
1883:Src/tasks.c   ****                     traceTASK_RESUME( pxTCB );
1884:Src/tasks.c   **** 
1885:Src/tasks.c   ****                     /* The ready list can be accessed even if the scheduler is
1886:Src/tasks.c   ****                      * suspended because this is inside a critical section. */
1887:Src/tasks.c   ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1888:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
1889:Src/tasks.c   **** 
1890:Src/tasks.c   ****                     /* A higher priority task may have just been resumed. */
1891:Src/tasks.c   ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1892:Src/tasks.c   ****                     {
1893:Src/tasks.c   ****                         /* This yield may not cause the task just resumed to run,
1894:Src/tasks.c   ****                          * but will leave the lists in the correct state for the
1895:Src/tasks.c   ****                          * next yield. */
1896:Src/tasks.c   ****                         taskYIELD_IF_USING_PREEMPTION();
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 36


1897:Src/tasks.c   ****                     }
1898:Src/tasks.c   ****                     else
1899:Src/tasks.c   ****                     {
1900:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
1901:Src/tasks.c   ****                     }
1902:Src/tasks.c   ****                 }
1903:Src/tasks.c   ****                 else
1904:Src/tasks.c   ****                 {
1905:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
1906:Src/tasks.c   ****                 }
1907:Src/tasks.c   ****             }
1908:Src/tasks.c   ****             taskEXIT_CRITICAL();
1909:Src/tasks.c   ****         }
1910:Src/tasks.c   ****         else
1911:Src/tasks.c   ****         {
1912:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
1913:Src/tasks.c   ****         }
1914:Src/tasks.c   ****     }
1915:Src/tasks.c   **** 
1916:Src/tasks.c   **** #endif /* INCLUDE_vTaskSuspend */
1917:Src/tasks.c   **** 
1918:Src/tasks.c   **** /*-----------------------------------------------------------*/
1919:Src/tasks.c   **** 
1920:Src/tasks.c   **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1921:Src/tasks.c   **** 
1922:Src/tasks.c   ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1923:Src/tasks.c   ****     {
1924:Src/tasks.c   ****         BaseType_t xYieldRequired = pdFALSE;
1925:Src/tasks.c   ****         TCB_t * const pxTCB = xTaskToResume;
1926:Src/tasks.c   ****         UBaseType_t uxSavedInterruptStatus;
1927:Src/tasks.c   **** 
1928:Src/tasks.c   ****         configASSERT( xTaskToResume );
1929:Src/tasks.c   **** 
1930:Src/tasks.c   ****         /* RTOS ports that support interrupt nesting have the concept of a
1931:Src/tasks.c   ****          * maximum  system call (or maximum API call) interrupt priority.
1932:Src/tasks.c   ****          * Interrupts that are  above the maximum system call priority are keep
1933:Src/tasks.c   ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1934:Src/tasks.c   ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1935:Src/tasks.c   ****          * is defined in FreeRTOSConfig.h then
1936:Src/tasks.c   ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1937:Src/tasks.c   ****          * failure if a FreeRTOS API function is called from an interrupt that has
1938:Src/tasks.c   ****          * been assigned a priority above the configured maximum system call
1939:Src/tasks.c   ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1940:Src/tasks.c   ****          * from interrupts  that have been assigned a priority at or (logically)
1941:Src/tasks.c   ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1942:Src/tasks.c   ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1943:Src/tasks.c   ****          * simple as possible.  More information (albeit Cortex-M specific) is
1944:Src/tasks.c   ****          * provided on the following link:
1945:Src/tasks.c   ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1946:Src/tasks.c   ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1947:Src/tasks.c   **** 
1948:Src/tasks.c   ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1949:Src/tasks.c   ****         {
1950:Src/tasks.c   ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1951:Src/tasks.c   ****             {
1952:Src/tasks.c   ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1953:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 37


1954:Src/tasks.c   ****                 /* Check the ready lists can be accessed. */
1955:Src/tasks.c   ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1956:Src/tasks.c   ****                 {
1957:Src/tasks.c   ****                     /* Ready lists can be accessed so move the task from the
1958:Src/tasks.c   ****                      * suspended list to the ready list directly. */
1959:Src/tasks.c   ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1960:Src/tasks.c   ****                     {
1961:Src/tasks.c   ****                         xYieldRequired = pdTRUE;
1962:Src/tasks.c   **** 
1963:Src/tasks.c   ****                         /* Mark that a yield is pending in case the user is not
1964:Src/tasks.c   ****                          * using the return value to initiate a context switch
1965:Src/tasks.c   ****                          * from the ISR using portYIELD_FROM_ISR. */
1966:Src/tasks.c   ****                         xYieldPending = pdTRUE;
1967:Src/tasks.c   ****                     }
1968:Src/tasks.c   ****                     else
1969:Src/tasks.c   ****                     {
1970:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
1971:Src/tasks.c   ****                     }
1972:Src/tasks.c   **** 
1973:Src/tasks.c   ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1974:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
1975:Src/tasks.c   ****                 }
1976:Src/tasks.c   ****                 else
1977:Src/tasks.c   ****                 {
1978:Src/tasks.c   ****                     /* The delayed or ready lists cannot be accessed so the task
1979:Src/tasks.c   ****                      * is held in the pending ready list until the scheduler is
1980:Src/tasks.c   ****                      * unsuspended. */
1981:Src/tasks.c   ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1982:Src/tasks.c   ****                 }
1983:Src/tasks.c   ****             }
1984:Src/tasks.c   ****             else
1985:Src/tasks.c   ****             {
1986:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
1987:Src/tasks.c   ****             }
1988:Src/tasks.c   ****         }
1989:Src/tasks.c   ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1990:Src/tasks.c   **** 
1991:Src/tasks.c   ****         return xYieldRequired;
1992:Src/tasks.c   ****     }
1993:Src/tasks.c   **** 
1994:Src/tasks.c   **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1995:Src/tasks.c   **** /*-----------------------------------------------------------*/
1996:Src/tasks.c   **** 
1997:Src/tasks.c   **** void vTaskStartScheduler( void )
1998:Src/tasks.c   **** {
1999:Src/tasks.c   ****     BaseType_t xReturn;
2000:Src/tasks.c   **** 
2001:Src/tasks.c   ****     /* Add the idle task at the lowest priority. */
2002:Src/tasks.c   ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
2003:Src/tasks.c   ****         {
2004:Src/tasks.c   ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
2005:Src/tasks.c   ****             StackType_t * pxIdleTaskStackBuffer = NULL;
2006:Src/tasks.c   ****             uint32_t ulIdleTaskStackSize;
2007:Src/tasks.c   **** 
2008:Src/tasks.c   ****             /* The Idle task is created using user provided RAM - obtain the
2009:Src/tasks.c   ****              * address of the RAM then create the idle task. */
2010:Src/tasks.c   ****             vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTas
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 38


2011:Src/tasks.c   ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
2012:Src/tasks.c   ****                                                  configIDLE_TASK_NAME,
2013:Src/tasks.c   ****                                                  ulIdleTaskStackSize,
2014:Src/tasks.c   ****                                                  ( void * ) NULL,       /*lint !e961.  The cast is 
2015:Src/tasks.c   ****                                                  portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIO
2016:Src/tasks.c   ****                                                  pxIdleTaskStackBuffer,
2017:Src/tasks.c   ****                                                  pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exceptio
2018:Src/tasks.c   **** 
2019:Src/tasks.c   ****             if( xIdleTaskHandle != NULL )
2020:Src/tasks.c   ****             {
2021:Src/tasks.c   ****                 xReturn = pdPASS;
2022:Src/tasks.c   ****             }
2023:Src/tasks.c   ****             else
2024:Src/tasks.c   ****             {
2025:Src/tasks.c   ****                 xReturn = pdFAIL;
2026:Src/tasks.c   ****             }
2027:Src/tasks.c   ****         }
2028:Src/tasks.c   ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2029:Src/tasks.c   ****         {
2030:Src/tasks.c   ****             /* The Idle task is being created using dynamically allocated RAM. */
2031:Src/tasks.c   ****             xReturn = xTaskCreate( prvIdleTask,
2032:Src/tasks.c   ****                                    configIDLE_TASK_NAME,
2033:Src/tasks.c   ****                                    configMINIMAL_STACK_SIZE,
2034:Src/tasks.c   ****                                    ( void * ) NULL,
2035:Src/tasks.c   ****                                    portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVIL
2036:Src/tasks.c   ****                                    &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as i
2037:Src/tasks.c   ****         }
2038:Src/tasks.c   ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2039:Src/tasks.c   **** 
2040:Src/tasks.c   ****     #if ( configUSE_TIMERS == 1 )
2041:Src/tasks.c   ****         {
2042:Src/tasks.c   ****             if( xReturn == pdPASS )
2043:Src/tasks.c   ****             {
2044:Src/tasks.c   ****                 xReturn = xTimerCreateTimerTask();
2045:Src/tasks.c   ****             }
2046:Src/tasks.c   ****             else
2047:Src/tasks.c   ****             {
2048:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
2049:Src/tasks.c   ****             }
2050:Src/tasks.c   ****         }
2051:Src/tasks.c   ****     #endif /* configUSE_TIMERS */
2052:Src/tasks.c   **** 
2053:Src/tasks.c   ****     if( xReturn == pdPASS )
2054:Src/tasks.c   ****     {
2055:Src/tasks.c   ****         /* freertos_tasks_c_additions_init() should only be called if the user
2056:Src/tasks.c   ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2057:Src/tasks.c   ****          * the only macro called by the function. */
2058:Src/tasks.c   ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2059:Src/tasks.c   ****             {
2060:Src/tasks.c   ****                 freertos_tasks_c_additions_init();
2061:Src/tasks.c   ****             }
2062:Src/tasks.c   ****         #endif
2063:Src/tasks.c   **** 
2064:Src/tasks.c   ****         /* Interrupts are turned off here, to ensure a tick does not occur
2065:Src/tasks.c   ****          * before or during the call to xPortStartScheduler().  The stacks of
2066:Src/tasks.c   ****          * the created tasks contain a status word with interrupts switched on
2067:Src/tasks.c   ****          * so interrupts will automatically get re-enabled when the first task
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 39


2068:Src/tasks.c   ****          * starts to run. */
2069:Src/tasks.c   ****         portDISABLE_INTERRUPTS();
2070:Src/tasks.c   **** 
2071:Src/tasks.c   ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
2072:Src/tasks.c   ****             {
2073:Src/tasks.c   ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
2074:Src/tasks.c   ****                  * structure specific to the task that will run first.
2075:Src/tasks.c   ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2076:Src/tasks.c   ****                  * for additional information. */
2077:Src/tasks.c   ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2078:Src/tasks.c   ****             }
2079:Src/tasks.c   ****         #endif /* configUSE_NEWLIB_REENTRANT */
2080:Src/tasks.c   **** 
2081:Src/tasks.c   ****         xNextTaskUnblockTime = portMAX_DELAY;
2082:Src/tasks.c   ****         xSchedulerRunning = pdTRUE;
2083:Src/tasks.c   ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2084:Src/tasks.c   **** 
2085:Src/tasks.c   ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2086:Src/tasks.c   ****          * macro must be defined to configure the timer/counter used to generate
2087:Src/tasks.c   ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2088:Src/tasks.c   ****          * is set to 0 and the following line fails to build then ensure you do not
2089:Src/tasks.c   ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2090:Src/tasks.c   ****          * FreeRTOSConfig.h file. */
2091:Src/tasks.c   ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2092:Src/tasks.c   **** 
2093:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
2094:Src/tasks.c   **** 
2095:Src/tasks.c   ****         /* Setting up the timer tick is hardware specific and thus in the
2096:Src/tasks.c   ****          * portable interface. */
2097:Src/tasks.c   ****         if( xPortStartScheduler() != pdFALSE )
2098:Src/tasks.c   ****         {
2099:Src/tasks.c   ****             /* Should not reach here as if the scheduler is running the
2100:Src/tasks.c   ****              * function will not return. */
2101:Src/tasks.c   ****         }
2102:Src/tasks.c   ****         else
2103:Src/tasks.c   ****         {
2104:Src/tasks.c   ****             /* Should only reach here if a task calls xTaskEndScheduler(). */
2105:Src/tasks.c   ****         }
2106:Src/tasks.c   ****     }
2107:Src/tasks.c   ****     else
2108:Src/tasks.c   ****     {
2109:Src/tasks.c   ****         /* This line will only be reached if the kernel could not be started,
2110:Src/tasks.c   ****          * because there was not enough FreeRTOS heap to create the idle task
2111:Src/tasks.c   ****          * or the timer task. */
2112:Src/tasks.c   ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2113:Src/tasks.c   ****     }
2114:Src/tasks.c   **** 
2115:Src/tasks.c   ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2116:Src/tasks.c   ****      * meaning xIdleTaskHandle is not used anywhere else. */
2117:Src/tasks.c   ****     ( void ) xIdleTaskHandle;
2118:Src/tasks.c   **** 
2119:Src/tasks.c   ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2120:Src/tasks.c   ****      * from getting optimized out as it is no longer used by the kernel. */
2121:Src/tasks.c   ****     ( void ) uxTopUsedPriority;
2122:Src/tasks.c   **** }
2123:Src/tasks.c   **** /*-----------------------------------------------------------*/
2124:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 40


2125:Src/tasks.c   **** void vTaskEndScheduler( void )
2126:Src/tasks.c   **** {
2127:Src/tasks.c   ****     /* Stop the scheduler interrupts and call the portable scheduler end
2128:Src/tasks.c   ****      * routine so the original ISRs can be restored if necessary.  The port
2129:Src/tasks.c   ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2130:Src/tasks.c   ****     portDISABLE_INTERRUPTS();
2131:Src/tasks.c   ****     xSchedulerRunning = pdFALSE;
2132:Src/tasks.c   ****     vPortEndScheduler();
2133:Src/tasks.c   **** }
2134:Src/tasks.c   **** /*----------------------------------------------------------*/
2135:Src/tasks.c   **** 
2136:Src/tasks.c   **** void vTaskSuspendAll( void )
2137:Src/tasks.c   **** {
2138:Src/tasks.c   ****     /* A critical section is not required as the variable is of type
2139:Src/tasks.c   ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2140:Src/tasks.c   ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2141:Src/tasks.c   ****      * https://goo.gl/wu4acr */
2142:Src/tasks.c   **** 
2143:Src/tasks.c   ****     /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
2144:Src/tasks.c   ****      * do not otherwise exhibit real time behaviour. */
2145:Src/tasks.c   ****     portSOFTWARE_BARRIER();
2146:Src/tasks.c   **** 
2147:Src/tasks.c   ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2148:Src/tasks.c   ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2149:Src/tasks.c   ****     ++uxSchedulerSuspended;
2150:Src/tasks.c   **** 
2151:Src/tasks.c   ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2152:Src/tasks.c   ****      * the above increment elsewhere. */
2153:Src/tasks.c   ****     portMEMORY_BARRIER();
2154:Src/tasks.c   **** }
2155:Src/tasks.c   **** /*----------------------------------------------------------*/
2156:Src/tasks.c   **** 
2157:Src/tasks.c   **** #if ( configUSE_TICKLESS_IDLE != 0 )
2158:Src/tasks.c   **** 
2159:Src/tasks.c   ****     static TickType_t prvGetExpectedIdleTime( void )
2160:Src/tasks.c   ****     {
2161:Src/tasks.c   ****         TickType_t xReturn;
2162:Src/tasks.c   ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2163:Src/tasks.c   **** 
2164:Src/tasks.c   ****         /* uxHigherPriorityReadyTasks takes care of the case where
2165:Src/tasks.c   ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2166:Src/tasks.c   ****          * task that are in the Ready state, even though the idle task is
2167:Src/tasks.c   ****          * running. */
2168:Src/tasks.c   ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2169:Src/tasks.c   ****             {
2170:Src/tasks.c   ****                 if( uxTopReadyPriority > tskIDLE_PRIORITY )
2171:Src/tasks.c   ****                 {
2172:Src/tasks.c   ****                     uxHigherPriorityReadyTasks = pdTRUE;
2173:Src/tasks.c   ****                 }
2174:Src/tasks.c   ****             }
2175:Src/tasks.c   ****         #else
2176:Src/tasks.c   ****             {
2177:Src/tasks.c   ****                 const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2178:Src/tasks.c   **** 
2179:Src/tasks.c   ****                 /* When port optimised task selection is used the uxTopReadyPriority
2180:Src/tasks.c   ****                  * variable is used as a bit map.  If bits other than the least
2181:Src/tasks.c   ****                  * significant bit are set then there are tasks that have a priority
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 41


2182:Src/tasks.c   ****                  * above the idle priority that are in the Ready state.  This takes
2183:Src/tasks.c   ****                  * care of the case where the co-operative scheduler is in use. */
2184:Src/tasks.c   ****                 if( uxTopReadyPriority > uxLeastSignificantBit )
2185:Src/tasks.c   ****                 {
2186:Src/tasks.c   ****                     uxHigherPriorityReadyTasks = pdTRUE;
2187:Src/tasks.c   ****                 }
2188:Src/tasks.c   ****             }
2189:Src/tasks.c   ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2190:Src/tasks.c   **** 
2191:Src/tasks.c   ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2192:Src/tasks.c   ****         {
2193:Src/tasks.c   ****             xReturn = 0;
2194:Src/tasks.c   ****         }
2195:Src/tasks.c   ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2196:Src/tasks.c   ****         {
2197:Src/tasks.c   ****             /* There are other idle priority tasks in the ready state.  If
2198:Src/tasks.c   ****              * time slicing is used then the very next tick interrupt must be
2199:Src/tasks.c   ****              * processed. */
2200:Src/tasks.c   ****             xReturn = 0;
2201:Src/tasks.c   ****         }
2202:Src/tasks.c   ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2203:Src/tasks.c   ****         {
2204:Src/tasks.c   ****             /* There are tasks in the Ready state that have a priority above the
2205:Src/tasks.c   ****              * idle priority.  This path can only be reached if
2206:Src/tasks.c   ****              * configUSE_PREEMPTION is 0. */
2207:Src/tasks.c   ****             xReturn = 0;
2208:Src/tasks.c   ****         }
2209:Src/tasks.c   ****         else
2210:Src/tasks.c   ****         {
2211:Src/tasks.c   ****             xReturn = xNextTaskUnblockTime - xTickCount;
2212:Src/tasks.c   ****         }
2213:Src/tasks.c   **** 
2214:Src/tasks.c   ****         return xReturn;
2215:Src/tasks.c   ****     }
2216:Src/tasks.c   **** 
2217:Src/tasks.c   **** #endif /* configUSE_TICKLESS_IDLE */
2218:Src/tasks.c   **** /*----------------------------------------------------------*/
2219:Src/tasks.c   **** 
2220:Src/tasks.c   **** BaseType_t xTaskResumeAll( void )
2221:Src/tasks.c   **** {
2222:Src/tasks.c   ****     TCB_t * pxTCB = NULL;
2223:Src/tasks.c   ****     BaseType_t xAlreadyYielded = pdFALSE;
2224:Src/tasks.c   **** 
2225:Src/tasks.c   ****     /* If uxSchedulerSuspended is zero then this function does not match a
2226:Src/tasks.c   ****      * previous call to vTaskSuspendAll(). */
2227:Src/tasks.c   ****     configASSERT( uxSchedulerSuspended );
2228:Src/tasks.c   **** 
2229:Src/tasks.c   ****     /* It is possible that an ISR caused a task to be removed from an event
2230:Src/tasks.c   ****      * list while the scheduler was suspended.  If this was the case then the
2231:Src/tasks.c   ****      * removed task will have been added to the xPendingReadyList.  Once the
2232:Src/tasks.c   ****      * scheduler has been resumed it is safe to move all the pending ready
2233:Src/tasks.c   ****      * tasks from this list into their appropriate ready list. */
2234:Src/tasks.c   ****     taskENTER_CRITICAL();
2235:Src/tasks.c   ****     {
2236:Src/tasks.c   ****         --uxSchedulerSuspended;
2237:Src/tasks.c   **** 
2238:Src/tasks.c   ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 42


2239:Src/tasks.c   ****         {
2240:Src/tasks.c   ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2241:Src/tasks.c   ****             {
2242:Src/tasks.c   ****                 /* Move any readied tasks from the pending list into the
2243:Src/tasks.c   ****                  * appropriate ready list. */
2244:Src/tasks.c   ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2245:Src/tasks.c   ****                 {
2246:Src/tasks.c   ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2247:Src/tasks.c   ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2248:Src/tasks.c   ****                     portMEMORY_BARRIER();
2249:Src/tasks.c   ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2250:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
2251:Src/tasks.c   **** 
2252:Src/tasks.c   ****                     /* If the moved task has a priority higher than or equal to
2253:Src/tasks.c   ****                      * the current task then a yield must be performed. */
2254:Src/tasks.c   ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2255:Src/tasks.c   ****                     {
2256:Src/tasks.c   ****                         xYieldPending = pdTRUE;
2257:Src/tasks.c   ****                     }
2258:Src/tasks.c   ****                     else
2259:Src/tasks.c   ****                     {
2260:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
2261:Src/tasks.c   ****                     }
2262:Src/tasks.c   ****                 }
2263:Src/tasks.c   **** 
2264:Src/tasks.c   ****                 if( pxTCB != NULL )
2265:Src/tasks.c   ****                 {
2266:Src/tasks.c   ****                     /* A task was unblocked while the scheduler was suspended,
2267:Src/tasks.c   ****                      * which may have prevented the next unblock time from being
2268:Src/tasks.c   ****                      * re-calculated, in which case re-calculate it now.  Mainly
2269:Src/tasks.c   ****                      * important for low power tickless implementations, where
2270:Src/tasks.c   ****                      * this can prevent an unnecessary exit from low power
2271:Src/tasks.c   ****                      * state. */
2272:Src/tasks.c   ****                     prvResetNextTaskUnblockTime();
2273:Src/tasks.c   ****                 }
2274:Src/tasks.c   **** 
2275:Src/tasks.c   ****                 /* If any ticks occurred while the scheduler was suspended then
2276:Src/tasks.c   ****                  * they should be processed now.  This ensures the tick count does
2277:Src/tasks.c   ****                  * not  slip, and that any delayed tasks are resumed at the correct
2278:Src/tasks.c   ****                  * time. */
2279:Src/tasks.c   ****                 {
2280:Src/tasks.c   ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2281:Src/tasks.c   **** 
2282:Src/tasks.c   ****                     if( xPendedCounts > ( TickType_t ) 0U )
2283:Src/tasks.c   ****                     {
2284:Src/tasks.c   ****                         do
2285:Src/tasks.c   ****                         {
2286:Src/tasks.c   ****                             if( xTaskIncrementTick() != pdFALSE )
2287:Src/tasks.c   ****                             {
2288:Src/tasks.c   ****                                 xYieldPending = pdTRUE;
2289:Src/tasks.c   ****                             }
2290:Src/tasks.c   ****                             else
2291:Src/tasks.c   ****                             {
2292:Src/tasks.c   ****                                 mtCOVERAGE_TEST_MARKER();
2293:Src/tasks.c   ****                             }
2294:Src/tasks.c   **** 
2295:Src/tasks.c   ****                             --xPendedCounts;
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 43


2296:Src/tasks.c   ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2297:Src/tasks.c   **** 
2298:Src/tasks.c   ****                         xPendedTicks = 0;
2299:Src/tasks.c   ****                     }
2300:Src/tasks.c   ****                     else
2301:Src/tasks.c   ****                     {
2302:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
2303:Src/tasks.c   ****                     }
2304:Src/tasks.c   ****                 }
2305:Src/tasks.c   **** 
2306:Src/tasks.c   ****                 if( xYieldPending != pdFALSE )
2307:Src/tasks.c   ****                 {
2308:Src/tasks.c   ****                     #if ( configUSE_PREEMPTION != 0 )
2309:Src/tasks.c   ****                         {
2310:Src/tasks.c   ****                             xAlreadyYielded = pdTRUE;
2311:Src/tasks.c   ****                         }
2312:Src/tasks.c   ****                     #endif
2313:Src/tasks.c   ****                     taskYIELD_IF_USING_PREEMPTION();
2314:Src/tasks.c   ****                 }
2315:Src/tasks.c   ****                 else
2316:Src/tasks.c   ****                 {
2317:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
2318:Src/tasks.c   ****                 }
2319:Src/tasks.c   ****             }
2320:Src/tasks.c   ****         }
2321:Src/tasks.c   ****         else
2322:Src/tasks.c   ****         {
2323:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
2324:Src/tasks.c   ****         }
2325:Src/tasks.c   ****     }
2326:Src/tasks.c   ****     taskEXIT_CRITICAL();
2327:Src/tasks.c   **** 
2328:Src/tasks.c   ****     return xAlreadyYielded;
2329:Src/tasks.c   **** }
2330:Src/tasks.c   **** /*-----------------------------------------------------------*/
2331:Src/tasks.c   **** 
2332:Src/tasks.c   **** TickType_t xTaskGetTickCount( void )
2333:Src/tasks.c   **** {
2334:Src/tasks.c   ****     TickType_t xTicks;
2335:Src/tasks.c   **** 
2336:Src/tasks.c   ****     /* Critical section required if running on a 16 bit processor. */
2337:Src/tasks.c   ****     portTICK_TYPE_ENTER_CRITICAL();
2338:Src/tasks.c   ****     {
2339:Src/tasks.c   ****         xTicks = xTickCount;
2340:Src/tasks.c   ****     }
2341:Src/tasks.c   ****     portTICK_TYPE_EXIT_CRITICAL();
2342:Src/tasks.c   **** 
2343:Src/tasks.c   ****     return xTicks;
2344:Src/tasks.c   **** }
2345:Src/tasks.c   **** /*-----------------------------------------------------------*/
2346:Src/tasks.c   **** 
2347:Src/tasks.c   **** TickType_t xTaskGetTickCountFromISR( void )
2348:Src/tasks.c   **** {
2349:Src/tasks.c   ****     TickType_t xReturn;
2350:Src/tasks.c   ****     UBaseType_t uxSavedInterruptStatus;
2351:Src/tasks.c   **** 
2352:Src/tasks.c   ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 44


2353:Src/tasks.c   ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2354:Src/tasks.c   ****      * above the maximum system call priority are kept permanently enabled, even
2355:Src/tasks.c   ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2356:Src/tasks.c   ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2357:Src/tasks.c   ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2358:Src/tasks.c   ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2359:Src/tasks.c   ****      * assigned a priority above the configured maximum system call priority.
2360:Src/tasks.c   ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2361:Src/tasks.c   ****      * that have been assigned a priority at or (logically) below the maximum
2362:Src/tasks.c   ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2363:Src/tasks.c   ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2364:Src/tasks.c   ****      * More information (albeit Cortex-M specific) is provided on the following
2365:Src/tasks.c   ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2366:Src/tasks.c   ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2367:Src/tasks.c   **** 
2368:Src/tasks.c   ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2369:Src/tasks.c   ****     {
2370:Src/tasks.c   ****         xReturn = xTickCount;
2371:Src/tasks.c   ****     }
2372:Src/tasks.c   ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2373:Src/tasks.c   **** 
2374:Src/tasks.c   ****     return xReturn;
2375:Src/tasks.c   **** }
2376:Src/tasks.c   **** /*-----------------------------------------------------------*/
2377:Src/tasks.c   **** 
2378:Src/tasks.c   **** UBaseType_t uxTaskGetNumberOfTasks( void )
2379:Src/tasks.c   **** {
2380:Src/tasks.c   ****     /* A critical section is not required because the variables are of type
2381:Src/tasks.c   ****      * BaseType_t. */
2382:Src/tasks.c   ****     return uxCurrentNumberOfTasks;
2383:Src/tasks.c   **** }
2384:Src/tasks.c   **** /*-----------------------------------------------------------*/
2385:Src/tasks.c   **** 
2386:Src/tasks.c   **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2387:Src/tasks.c   **** {
2388:Src/tasks.c   ****     TCB_t * pxTCB;
2389:Src/tasks.c   **** 
2390:Src/tasks.c   ****     /* If null is passed in here then the name of the calling task is being
2391:Src/tasks.c   ****      * queried. */
2392:Src/tasks.c   ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2393:Src/tasks.c   ****     configASSERT( pxTCB );
2394:Src/tasks.c   ****     return &( pxTCB->pcTaskName[ 0 ] );
2395:Src/tasks.c   **** }
2396:Src/tasks.c   **** /*-----------------------------------------------------------*/
2397:Src/tasks.c   **** 
2398:Src/tasks.c   **** #if ( INCLUDE_xTaskGetHandle == 1 )
2399:Src/tasks.c   **** 
2400:Src/tasks.c   ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2401:Src/tasks.c   ****                                                      const char pcNameToQuery[] )
2402:Src/tasks.c   ****     {
2403:Src/tasks.c   ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
2404:Src/tasks.c   ****         UBaseType_t x;
2405:Src/tasks.c   ****         char cNextChar;
2406:Src/tasks.c   ****         BaseType_t xBreakLoop;
2407:Src/tasks.c   **** 
2408:Src/tasks.c   ****         /* This function is called with the scheduler suspended. */
2409:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 45


2410:Src/tasks.c   ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2411:Src/tasks.c   ****         {
2412:Src/tasks.c   ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2413:Src/tasks.c   **** 
2414:Src/tasks.c   ****             do
2415:Src/tasks.c   ****             {
2416:Src/tasks.c   ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2417:Src/tasks.c   **** 
2418:Src/tasks.c   ****                 /* Check each character in the name looking for a match or
2419:Src/tasks.c   ****                  * mismatch. */
2420:Src/tasks.c   ****                 xBreakLoop = pdFALSE;
2421:Src/tasks.c   **** 
2422:Src/tasks.c   ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2423:Src/tasks.c   ****                 {
2424:Src/tasks.c   ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2425:Src/tasks.c   **** 
2426:Src/tasks.c   ****                     if( cNextChar != pcNameToQuery[ x ] )
2427:Src/tasks.c   ****                     {
2428:Src/tasks.c   ****                         /* Characters didn't match. */
2429:Src/tasks.c   ****                         xBreakLoop = pdTRUE;
2430:Src/tasks.c   ****                     }
2431:Src/tasks.c   ****                     else if( cNextChar == ( char ) 0x00 )
2432:Src/tasks.c   ****                     {
2433:Src/tasks.c   ****                         /* Both strings terminated, a match must have been
2434:Src/tasks.c   ****                          * found. */
2435:Src/tasks.c   ****                         pxReturn = pxNextTCB;
2436:Src/tasks.c   ****                         xBreakLoop = pdTRUE;
2437:Src/tasks.c   ****                     }
2438:Src/tasks.c   ****                     else
2439:Src/tasks.c   ****                     {
2440:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
2441:Src/tasks.c   ****                     }
2442:Src/tasks.c   **** 
2443:Src/tasks.c   ****                     if( xBreakLoop != pdFALSE )
2444:Src/tasks.c   ****                     {
2445:Src/tasks.c   ****                         break;
2446:Src/tasks.c   ****                     }
2447:Src/tasks.c   ****                 }
2448:Src/tasks.c   **** 
2449:Src/tasks.c   ****                 if( pxReturn != NULL )
2450:Src/tasks.c   ****                 {
2451:Src/tasks.c   ****                     /* The handle has been found. */
2452:Src/tasks.c   ****                     break;
2453:Src/tasks.c   ****                 }
2454:Src/tasks.c   ****             } while( pxNextTCB != pxFirstTCB );
2455:Src/tasks.c   ****         }
2456:Src/tasks.c   ****         else
2457:Src/tasks.c   ****         {
2458:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
2459:Src/tasks.c   ****         }
2460:Src/tasks.c   **** 
2461:Src/tasks.c   ****         return pxReturn;
2462:Src/tasks.c   ****     }
2463:Src/tasks.c   **** 
2464:Src/tasks.c   **** #endif /* INCLUDE_xTaskGetHandle */
2465:Src/tasks.c   **** /*-----------------------------------------------------------*/
2466:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 46


2467:Src/tasks.c   **** #if ( INCLUDE_xTaskGetHandle == 1 )
2468:Src/tasks.c   **** 
2469:Src/tasks.c   ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2470:Src/tasks.c   ****     {
2471:Src/tasks.c   ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2472:Src/tasks.c   ****         TCB_t * pxTCB;
2473:Src/tasks.c   **** 
2474:Src/tasks.c   ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2475:Src/tasks.c   ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2476:Src/tasks.c   **** 
2477:Src/tasks.c   ****         vTaskSuspendAll();
2478:Src/tasks.c   ****         {
2479:Src/tasks.c   ****             /* Search the ready lists. */
2480:Src/tasks.c   ****             do
2481:Src/tasks.c   ****             {
2482:Src/tasks.c   ****                 uxQueue--;
2483:Src/tasks.c   ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2484:Src/tasks.c   **** 
2485:Src/tasks.c   ****                 if( pxTCB != NULL )
2486:Src/tasks.c   ****                 {
2487:Src/tasks.c   ****                     /* Found the handle. */
2488:Src/tasks.c   ****                     break;
2489:Src/tasks.c   ****                 }
2490:Src/tasks.c   ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2491:Src/tasks.c   **** 
2492:Src/tasks.c   ****             /* Search the delayed lists. */
2493:Src/tasks.c   ****             if( pxTCB == NULL )
2494:Src/tasks.c   ****             {
2495:Src/tasks.c   ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2496:Src/tasks.c   ****             }
2497:Src/tasks.c   **** 
2498:Src/tasks.c   ****             if( pxTCB == NULL )
2499:Src/tasks.c   ****             {
2500:Src/tasks.c   ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2501:Src/tasks.c   ****             }
2502:Src/tasks.c   **** 
2503:Src/tasks.c   ****             #if ( INCLUDE_vTaskSuspend == 1 )
2504:Src/tasks.c   ****                 {
2505:Src/tasks.c   ****                     if( pxTCB == NULL )
2506:Src/tasks.c   ****                     {
2507:Src/tasks.c   ****                         /* Search the suspended list. */
2508:Src/tasks.c   ****                         pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuer
2509:Src/tasks.c   ****                     }
2510:Src/tasks.c   ****                 }
2511:Src/tasks.c   ****             #endif
2512:Src/tasks.c   **** 
2513:Src/tasks.c   ****             #if ( INCLUDE_vTaskDelete == 1 )
2514:Src/tasks.c   ****                 {
2515:Src/tasks.c   ****                     if( pxTCB == NULL )
2516:Src/tasks.c   ****                     {
2517:Src/tasks.c   ****                         /* Search the deleted list. */
2518:Src/tasks.c   ****                         pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcName
2519:Src/tasks.c   ****                     }
2520:Src/tasks.c   ****                 }
2521:Src/tasks.c   ****             #endif
2522:Src/tasks.c   ****         }
2523:Src/tasks.c   ****         ( void ) xTaskResumeAll();
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 47


2524:Src/tasks.c   **** 
2525:Src/tasks.c   ****         return pxTCB;
2526:Src/tasks.c   ****     }
2527:Src/tasks.c   **** 
2528:Src/tasks.c   **** #endif /* INCLUDE_xTaskGetHandle */
2529:Src/tasks.c   **** /*-----------------------------------------------------------*/
2530:Src/tasks.c   **** 
2531:Src/tasks.c   **** #if ( configUSE_TRACE_FACILITY == 1 )
2532:Src/tasks.c   **** 
2533:Src/tasks.c   ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2534:Src/tasks.c   ****                                       const UBaseType_t uxArraySize,
2535:Src/tasks.c   ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
2536:Src/tasks.c   ****     {
2537:Src/tasks.c   ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2538:Src/tasks.c   **** 
2539:Src/tasks.c   ****         vTaskSuspendAll();
2540:Src/tasks.c   ****         {
2541:Src/tasks.c   ****             /* Is there a space in the array for each task in the system? */
2542:Src/tasks.c   ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2543:Src/tasks.c   ****             {
2544:Src/tasks.c   ****                 /* Fill in an TaskStatus_t structure with information on each
2545:Src/tasks.c   ****                  * task in the Ready state. */
2546:Src/tasks.c   ****                 do
2547:Src/tasks.c   ****                 {
2548:Src/tasks.c   ****                     uxQueue--;
2549:Src/tasks.c   ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2550:Src/tasks.c   ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2551:Src/tasks.c   **** 
2552:Src/tasks.c   ****                 /* Fill in an TaskStatus_t structure with information on each
2553:Src/tasks.c   ****                  * task in the Blocked state. */
2554:Src/tasks.c   ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2555:Src/tasks.c   ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2556:Src/tasks.c   **** 
2557:Src/tasks.c   ****                 #if ( INCLUDE_vTaskDelete == 1 )
2558:Src/tasks.c   ****                     {
2559:Src/tasks.c   ****                         /* Fill in an TaskStatus_t structure with information on
2560:Src/tasks.c   ****                          * each task that has been deleted but not yet cleaned up. */
2561:Src/tasks.c   ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2562:Src/tasks.c   ****                     }
2563:Src/tasks.c   ****                 #endif
2564:Src/tasks.c   **** 
2565:Src/tasks.c   ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2566:Src/tasks.c   ****                     {
2567:Src/tasks.c   ****                         /* Fill in an TaskStatus_t structure with information on
2568:Src/tasks.c   ****                          * each task in the Suspended state. */
2569:Src/tasks.c   ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2570:Src/tasks.c   ****                     }
2571:Src/tasks.c   ****                 #endif
2572:Src/tasks.c   **** 
2573:Src/tasks.c   ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2574:Src/tasks.c   ****                     {
2575:Src/tasks.c   ****                         if( pulTotalRunTime != NULL )
2576:Src/tasks.c   ****                         {
2577:Src/tasks.c   ****                             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2578:Src/tasks.c   ****                                 portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2579:Src/tasks.c   ****                             #else
2580:Src/tasks.c   ****                                 *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 48


2581:Src/tasks.c   ****                             #endif
2582:Src/tasks.c   ****                         }
2583:Src/tasks.c   ****                     }
2584:Src/tasks.c   ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2585:Src/tasks.c   ****                     {
2586:Src/tasks.c   ****                         if( pulTotalRunTime != NULL )
2587:Src/tasks.c   ****                         {
2588:Src/tasks.c   ****                             *pulTotalRunTime = 0;
2589:Src/tasks.c   ****                         }
2590:Src/tasks.c   ****                     }
2591:Src/tasks.c   ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2592:Src/tasks.c   ****             }
2593:Src/tasks.c   ****             else
2594:Src/tasks.c   ****             {
2595:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
2596:Src/tasks.c   ****             }
2597:Src/tasks.c   ****         }
2598:Src/tasks.c   ****         ( void ) xTaskResumeAll();
2599:Src/tasks.c   **** 
2600:Src/tasks.c   ****         return uxTask;
2601:Src/tasks.c   ****     }
2602:Src/tasks.c   **** 
2603:Src/tasks.c   **** #endif /* configUSE_TRACE_FACILITY */
2604:Src/tasks.c   **** /*----------------------------------------------------------*/
2605:Src/tasks.c   **** 
2606:Src/tasks.c   **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2607:Src/tasks.c   **** 
2608:Src/tasks.c   ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2609:Src/tasks.c   ****     {
2610:Src/tasks.c   ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2611:Src/tasks.c   ****          * started, then xIdleTaskHandle will be NULL. */
2612:Src/tasks.c   ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2613:Src/tasks.c   ****         return xIdleTaskHandle;
2614:Src/tasks.c   ****     }
2615:Src/tasks.c   **** 
2616:Src/tasks.c   **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2617:Src/tasks.c   **** /*----------------------------------------------------------*/
2618:Src/tasks.c   **** 
2619:Src/tasks.c   **** /* This conditional compilation should use inequality to 0, not equality to 1.
2620:Src/tasks.c   ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2621:Src/tasks.c   ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2622:Src/tasks.c   ****  * 1. */
2623:Src/tasks.c   **** #if ( configUSE_TICKLESS_IDLE != 0 )
2624:Src/tasks.c   **** 
2625:Src/tasks.c   ****     void vTaskStepTick( const TickType_t xTicksToJump )
2626:Src/tasks.c   ****     {
2627:Src/tasks.c   ****         /* Correct the tick count value after a period during which the tick
2628:Src/tasks.c   ****          * was suppressed.  Note this does *not* call the tick hook function for
2629:Src/tasks.c   ****          * each stepped tick. */
2630:Src/tasks.c   ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2631:Src/tasks.c   ****         xTickCount += xTicksToJump;
2632:Src/tasks.c   ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2633:Src/tasks.c   ****     }
2634:Src/tasks.c   **** 
2635:Src/tasks.c   **** #endif /* configUSE_TICKLESS_IDLE */
2636:Src/tasks.c   **** /*----------------------------------------------------------*/
2637:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 49


2638:Src/tasks.c   **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2639:Src/tasks.c   **** {
2640:Src/tasks.c   ****     BaseType_t xYieldOccurred;
2641:Src/tasks.c   **** 
2642:Src/tasks.c   ****     /* Must not be called with the scheduler suspended as the implementation
2643:Src/tasks.c   ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2644:Src/tasks.c   ****     configASSERT( uxSchedulerSuspended == 0 );
2645:Src/tasks.c   **** 
2646:Src/tasks.c   ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2647:Src/tasks.c   ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2648:Src/tasks.c   ****     vTaskSuspendAll();
2649:Src/tasks.c   ****     xPendedTicks += xTicksToCatchUp;
2650:Src/tasks.c   ****     xYieldOccurred = xTaskResumeAll();
2651:Src/tasks.c   **** 
2652:Src/tasks.c   ****     return xYieldOccurred;
2653:Src/tasks.c   **** }
2654:Src/tasks.c   **** /*----------------------------------------------------------*/
2655:Src/tasks.c   **** 
2656:Src/tasks.c   **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2657:Src/tasks.c   **** 
2658:Src/tasks.c   ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2659:Src/tasks.c   ****     {
2660:Src/tasks.c   ****         TCB_t * pxTCB = xTask;
2661:Src/tasks.c   ****         BaseType_t xReturn;
2662:Src/tasks.c   **** 
2663:Src/tasks.c   ****         configASSERT( pxTCB );
2664:Src/tasks.c   **** 
2665:Src/tasks.c   ****         vTaskSuspendAll();
2666:Src/tasks.c   ****         {
2667:Src/tasks.c   ****             /* A task can only be prematurely removed from the Blocked state if
2668:Src/tasks.c   ****              * it is actually in the Blocked state. */
2669:Src/tasks.c   ****             if( eTaskGetState( xTask ) == eBlocked )
2670:Src/tasks.c   ****             {
2671:Src/tasks.c   ****                 xReturn = pdPASS;
2672:Src/tasks.c   **** 
2673:Src/tasks.c   ****                 /* Remove the reference to the task from the blocked list.  An
2674:Src/tasks.c   ****                  * interrupt won't touch the xStateListItem because the
2675:Src/tasks.c   ****                  * scheduler is suspended. */
2676:Src/tasks.c   ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2677:Src/tasks.c   **** 
2678:Src/tasks.c   ****                 /* Is the task waiting on an event also?  If so remove it from
2679:Src/tasks.c   ****                  * the event list too.  Interrupts can touch the event list item,
2680:Src/tasks.c   ****                  * even though the scheduler is suspended, so a critical section
2681:Src/tasks.c   ****                  * is used. */
2682:Src/tasks.c   ****                 taskENTER_CRITICAL();
2683:Src/tasks.c   ****                 {
2684:Src/tasks.c   ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2685:Src/tasks.c   ****                     {
2686:Src/tasks.c   ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2687:Src/tasks.c   **** 
2688:Src/tasks.c   ****                         /* This lets the task know it was forcibly removed from the
2689:Src/tasks.c   ****                          * blocked state so it should not re-evaluate its block time and
2690:Src/tasks.c   ****                          * then block again. */
2691:Src/tasks.c   ****                         pxTCB->ucDelayAborted = pdTRUE;
2692:Src/tasks.c   ****                     }
2693:Src/tasks.c   ****                     else
2694:Src/tasks.c   ****                     {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 50


2695:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
2696:Src/tasks.c   ****                     }
2697:Src/tasks.c   ****                 }
2698:Src/tasks.c   ****                 taskEXIT_CRITICAL();
2699:Src/tasks.c   **** 
2700:Src/tasks.c   ****                 /* Place the unblocked task into the appropriate ready list. */
2701:Src/tasks.c   ****                 prvAddTaskToReadyList( pxTCB );
2702:Src/tasks.c   **** 
2703:Src/tasks.c   ****                 /* A task being unblocked cannot cause an immediate context
2704:Src/tasks.c   ****                  * switch if preemption is turned off. */
2705:Src/tasks.c   ****                 #if ( configUSE_PREEMPTION == 1 )
2706:Src/tasks.c   ****                     {
2707:Src/tasks.c   ****                         /* Preemption is on, but a context switch should only be
2708:Src/tasks.c   ****                          * performed if the unblocked task has a priority that is
2709:Src/tasks.c   ****                          * higher than the currently executing task. */
2710:Src/tasks.c   ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2711:Src/tasks.c   ****                         {
2712:Src/tasks.c   ****                             /* Pend the yield to be performed when the scheduler
2713:Src/tasks.c   ****                              * is unsuspended. */
2714:Src/tasks.c   ****                             xYieldPending = pdTRUE;
2715:Src/tasks.c   ****                         }
2716:Src/tasks.c   ****                         else
2717:Src/tasks.c   ****                         {
2718:Src/tasks.c   ****                             mtCOVERAGE_TEST_MARKER();
2719:Src/tasks.c   ****                         }
2720:Src/tasks.c   ****                     }
2721:Src/tasks.c   ****                 #endif /* configUSE_PREEMPTION */
2722:Src/tasks.c   ****             }
2723:Src/tasks.c   ****             else
2724:Src/tasks.c   ****             {
2725:Src/tasks.c   ****                 xReturn = pdFAIL;
2726:Src/tasks.c   ****             }
2727:Src/tasks.c   ****         }
2728:Src/tasks.c   ****         ( void ) xTaskResumeAll();
2729:Src/tasks.c   **** 
2730:Src/tasks.c   ****         return xReturn;
2731:Src/tasks.c   ****     }
2732:Src/tasks.c   **** 
2733:Src/tasks.c   **** #endif /* INCLUDE_xTaskAbortDelay */
2734:Src/tasks.c   **** /*----------------------------------------------------------*/
2735:Src/tasks.c   **** 
2736:Src/tasks.c   **** BaseType_t xTaskIncrementTick( void )
2737:Src/tasks.c   **** {
2738:Src/tasks.c   ****     TCB_t * pxTCB;
2739:Src/tasks.c   ****     TickType_t xItemValue;
2740:Src/tasks.c   ****     BaseType_t xSwitchRequired = pdFALSE;
2741:Src/tasks.c   **** 
2742:Src/tasks.c   ****     /* Called by the portable layer each time a tick interrupt occurs.
2743:Src/tasks.c   ****      * Increments the tick then checks to see if the new tick value will cause any
2744:Src/tasks.c   ****      * tasks to be unblocked. */
2745:Src/tasks.c   ****     traceTASK_INCREMENT_TICK( xTickCount );
2746:Src/tasks.c   **** 
2747:Src/tasks.c   ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2748:Src/tasks.c   ****     {
2749:Src/tasks.c   ****         /* Minor optimisation.  The tick count cannot change in this
2750:Src/tasks.c   ****          * block. */
2751:Src/tasks.c   ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 51


2752:Src/tasks.c   **** 
2753:Src/tasks.c   ****         /* Increment the RTOS tick, switching the delayed and overflowed
2754:Src/tasks.c   ****          * delayed lists if it wraps to 0. */
2755:Src/tasks.c   ****         xTickCount = xConstTickCount;
2756:Src/tasks.c   **** 
2757:Src/tasks.c   ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2758:Src/tasks.c   ****         {
2759:Src/tasks.c   ****             taskSWITCH_DELAYED_LISTS();
2760:Src/tasks.c   ****         }
2761:Src/tasks.c   ****         else
2762:Src/tasks.c   ****         {
2763:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
2764:Src/tasks.c   ****         }
2765:Src/tasks.c   **** 
2766:Src/tasks.c   ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2767:Src/tasks.c   ****          * the  queue in the order of their wake time - meaning once one task
2768:Src/tasks.c   ****          * has been found whose block time has not expired there is no need to
2769:Src/tasks.c   ****          * look any further down the list. */
2770:Src/tasks.c   ****         if( xConstTickCount >= xNextTaskUnblockTime )
2771:Src/tasks.c   ****         {
2772:Src/tasks.c   ****             for( ; ; )
2773:Src/tasks.c   ****             {
2774:Src/tasks.c   ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2775:Src/tasks.c   ****                 {
2776:Src/tasks.c   ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2777:Src/tasks.c   ****                      * to the maximum possible value so it is extremely
2778:Src/tasks.c   ****                      * unlikely that the
2779:Src/tasks.c   ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2780:Src/tasks.c   ****                      * next time through. */
2781:Src/tasks.c   ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
2782:Src/tasks.c   ****                     break;
2783:Src/tasks.c   ****                 }
2784:Src/tasks.c   ****                 else
2785:Src/tasks.c   ****                 {
2786:Src/tasks.c   ****                     /* The delayed list is not empty, get the value of the
2787:Src/tasks.c   ****                      * item at the head of the delayed list.  This is the time
2788:Src/tasks.c   ****                      * at which the task at the head of the delayed list must
2789:Src/tasks.c   ****                      * be removed from the Blocked state. */
2790:Src/tasks.c   ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
2791:Src/tasks.c   ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2792:Src/tasks.c   **** 
2793:Src/tasks.c   ****                     if( xConstTickCount < xItemValue )
2794:Src/tasks.c   ****                     {
2795:Src/tasks.c   ****                         /* It is not time to unblock this item yet, but the
2796:Src/tasks.c   ****                          * item value is the time at which the task at the head
2797:Src/tasks.c   ****                          * of the blocked list must be removed from the Blocked
2798:Src/tasks.c   ****                          * state -  so record the item value in
2799:Src/tasks.c   ****                          * xNextTaskUnblockTime. */
2800:Src/tasks.c   ****                         xNextTaskUnblockTime = xItemValue;
2801:Src/tasks.c   ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
2802:Src/tasks.c   ****                     }
2803:Src/tasks.c   ****                     else
2804:Src/tasks.c   ****                     {
2805:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
2806:Src/tasks.c   ****                     }
2807:Src/tasks.c   **** 
2808:Src/tasks.c   ****                     /* It is time to remove the item from the Blocked state. */
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 52


2809:Src/tasks.c   ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2810:Src/tasks.c   **** 
2811:Src/tasks.c   ****                     /* Is the task waiting on an event also?  If so remove
2812:Src/tasks.c   ****                      * it from the event list. */
2813:Src/tasks.c   ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2814:Src/tasks.c   ****                     {
2815:Src/tasks.c   ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2816:Src/tasks.c   ****                     }
2817:Src/tasks.c   ****                     else
2818:Src/tasks.c   ****                     {
2819:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
2820:Src/tasks.c   ****                     }
2821:Src/tasks.c   **** 
2822:Src/tasks.c   ****                     /* Place the unblocked task into the appropriate ready
2823:Src/tasks.c   ****                      * list. */
2824:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
2825:Src/tasks.c   **** 
2826:Src/tasks.c   ****                     /* A task being unblocked cannot cause an immediate
2827:Src/tasks.c   ****                      * context switch if preemption is turned off. */
2828:Src/tasks.c   ****                     #if ( configUSE_PREEMPTION == 1 )
2829:Src/tasks.c   ****                         {
2830:Src/tasks.c   ****                             /* Preemption is on, but a context switch should
2831:Src/tasks.c   ****                              * only be performed if the unblocked task has a
2832:Src/tasks.c   ****                              * priority that is equal to or higher than the
2833:Src/tasks.c   ****                              * currently executing task. */
2834:Src/tasks.c   ****                             if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2835:Src/tasks.c   ****                             {
2836:Src/tasks.c   ****                                 xSwitchRequired = pdTRUE;
2837:Src/tasks.c   ****                             }
2838:Src/tasks.c   ****                             else
2839:Src/tasks.c   ****                             {
2840:Src/tasks.c   ****                                 mtCOVERAGE_TEST_MARKER();
2841:Src/tasks.c   ****                             }
2842:Src/tasks.c   ****                         }
2843:Src/tasks.c   ****                     #endif /* configUSE_PREEMPTION */
2844:Src/tasks.c   ****                 }
2845:Src/tasks.c   ****             }
2846:Src/tasks.c   ****         }
2847:Src/tasks.c   **** 
2848:Src/tasks.c   ****         /* Tasks of equal priority to the currently running task will share
2849:Src/tasks.c   ****          * processing time (time slice) if preemption is on, and the application
2850:Src/tasks.c   ****          * writer has not explicitly turned time slicing off. */
2851:Src/tasks.c   ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2852:Src/tasks.c   ****             {
2853:Src/tasks.c   ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
2854:Src/tasks.c   ****                 {
2855:Src/tasks.c   ****                     xSwitchRequired = pdTRUE;
2856:Src/tasks.c   ****                 }
2857:Src/tasks.c   ****                 else
2858:Src/tasks.c   ****                 {
2859:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
2860:Src/tasks.c   ****                 }
2861:Src/tasks.c   ****             }
2862:Src/tasks.c   ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2863:Src/tasks.c   **** 
2864:Src/tasks.c   ****         #if ( configUSE_TICK_HOOK == 1 )
2865:Src/tasks.c   ****             {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 53


2866:Src/tasks.c   ****                 /* Guard against the tick hook being called when the pended tick
2867:Src/tasks.c   ****                  * count is being unwound (when the scheduler is being unlocked). */
2868:Src/tasks.c   ****                 if( xPendedTicks == ( TickType_t ) 0 )
2869:Src/tasks.c   ****                 {
2870:Src/tasks.c   ****                     vApplicationTickHook();
2871:Src/tasks.c   ****                 }
2872:Src/tasks.c   ****                 else
2873:Src/tasks.c   ****                 {
2874:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
2875:Src/tasks.c   ****                 }
2876:Src/tasks.c   ****             }
2877:Src/tasks.c   ****         #endif /* configUSE_TICK_HOOK */
2878:Src/tasks.c   **** 
2879:Src/tasks.c   ****         #if ( configUSE_PREEMPTION == 1 )
2880:Src/tasks.c   ****             {
2881:Src/tasks.c   ****                 if( xYieldPending != pdFALSE )
2882:Src/tasks.c   ****                 {
2883:Src/tasks.c   ****                     xSwitchRequired = pdTRUE;
2884:Src/tasks.c   ****                 }
2885:Src/tasks.c   ****                 else
2886:Src/tasks.c   ****                 {
2887:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
2888:Src/tasks.c   ****                 }
2889:Src/tasks.c   ****             }
2890:Src/tasks.c   ****         #endif /* configUSE_PREEMPTION */
2891:Src/tasks.c   ****     }
2892:Src/tasks.c   ****     else
2893:Src/tasks.c   ****     {
2894:Src/tasks.c   ****         ++xPendedTicks;
2895:Src/tasks.c   **** 
2896:Src/tasks.c   ****         /* The tick hook gets called at regular intervals, even if the
2897:Src/tasks.c   ****          * scheduler is locked. */
2898:Src/tasks.c   ****         #if ( configUSE_TICK_HOOK == 1 )
2899:Src/tasks.c   ****             {
2900:Src/tasks.c   ****                 vApplicationTickHook();
2901:Src/tasks.c   ****             }
2902:Src/tasks.c   ****         #endif
2903:Src/tasks.c   ****     }
2904:Src/tasks.c   **** 
2905:Src/tasks.c   ****     return xSwitchRequired;
2906:Src/tasks.c   **** }
2907:Src/tasks.c   **** /*-----------------------------------------------------------*/
2908:Src/tasks.c   **** 
2909:Src/tasks.c   **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2910:Src/tasks.c   **** 
2911:Src/tasks.c   ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2912:Src/tasks.c   ****                                      TaskHookFunction_t pxHookFunction )
2913:Src/tasks.c   ****     {
2914:Src/tasks.c   ****         TCB_t * xTCB;
2915:Src/tasks.c   **** 
2916:Src/tasks.c   ****         /* If xTask is NULL then it is the task hook of the calling task that is
2917:Src/tasks.c   ****          * getting set. */
2918:Src/tasks.c   ****         if( xTask == NULL )
2919:Src/tasks.c   ****         {
2920:Src/tasks.c   ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2921:Src/tasks.c   ****         }
2922:Src/tasks.c   ****         else
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 54


2923:Src/tasks.c   ****         {
2924:Src/tasks.c   ****             xTCB = xTask;
2925:Src/tasks.c   ****         }
2926:Src/tasks.c   **** 
2927:Src/tasks.c   ****         /* Save the hook function in the TCB.  A critical section is required as
2928:Src/tasks.c   ****          * the value can be accessed from an interrupt. */
2929:Src/tasks.c   ****         taskENTER_CRITICAL();
2930:Src/tasks.c   ****         {
2931:Src/tasks.c   ****             xTCB->pxTaskTag = pxHookFunction;
2932:Src/tasks.c   ****         }
2933:Src/tasks.c   ****         taskEXIT_CRITICAL();
2934:Src/tasks.c   ****     }
2935:Src/tasks.c   **** 
2936:Src/tasks.c   **** #endif /* configUSE_APPLICATION_TASK_TAG */
2937:Src/tasks.c   **** /*-----------------------------------------------------------*/
2938:Src/tasks.c   **** 
2939:Src/tasks.c   **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2940:Src/tasks.c   **** 
2941:Src/tasks.c   ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2942:Src/tasks.c   ****     {
2943:Src/tasks.c   ****         TCB_t * pxTCB;
2944:Src/tasks.c   ****         TaskHookFunction_t xReturn;
2945:Src/tasks.c   **** 
2946:Src/tasks.c   ****         /* If xTask is NULL then set the calling task's hook. */
2947:Src/tasks.c   ****         pxTCB = prvGetTCBFromHandle( xTask );
2948:Src/tasks.c   **** 
2949:Src/tasks.c   ****         /* Save the hook function in the TCB.  A critical section is required as
2950:Src/tasks.c   ****          * the value can be accessed from an interrupt. */
2951:Src/tasks.c   ****         taskENTER_CRITICAL();
2952:Src/tasks.c   ****         {
2953:Src/tasks.c   ****             xReturn = pxTCB->pxTaskTag;
2954:Src/tasks.c   ****         }
2955:Src/tasks.c   ****         taskEXIT_CRITICAL();
2956:Src/tasks.c   **** 
2957:Src/tasks.c   ****         return xReturn;
2958:Src/tasks.c   ****     }
2959:Src/tasks.c   **** 
2960:Src/tasks.c   **** #endif /* configUSE_APPLICATION_TASK_TAG */
2961:Src/tasks.c   **** /*-----------------------------------------------------------*/
2962:Src/tasks.c   **** 
2963:Src/tasks.c   **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2964:Src/tasks.c   **** 
2965:Src/tasks.c   ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2966:Src/tasks.c   ****     {
2967:Src/tasks.c   ****         TCB_t * pxTCB;
2968:Src/tasks.c   ****         TaskHookFunction_t xReturn;
2969:Src/tasks.c   ****         UBaseType_t uxSavedInterruptStatus;
2970:Src/tasks.c   **** 
2971:Src/tasks.c   ****         /* If xTask is NULL then set the calling task's hook. */
2972:Src/tasks.c   ****         pxTCB = prvGetTCBFromHandle( xTask );
2973:Src/tasks.c   **** 
2974:Src/tasks.c   ****         /* Save the hook function in the TCB.  A critical section is required as
2975:Src/tasks.c   ****          * the value can be accessed from an interrupt. */
2976:Src/tasks.c   ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2977:Src/tasks.c   ****         {
2978:Src/tasks.c   ****             xReturn = pxTCB->pxTaskTag;
2979:Src/tasks.c   ****         }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 55


2980:Src/tasks.c   ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2981:Src/tasks.c   **** 
2982:Src/tasks.c   ****         return xReturn;
2983:Src/tasks.c   ****     }
2984:Src/tasks.c   **** 
2985:Src/tasks.c   **** #endif /* configUSE_APPLICATION_TASK_TAG */
2986:Src/tasks.c   **** /*-----------------------------------------------------------*/
2987:Src/tasks.c   **** 
2988:Src/tasks.c   **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2989:Src/tasks.c   **** 
2990:Src/tasks.c   ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2991:Src/tasks.c   ****                                              void * pvParameter )
2992:Src/tasks.c   ****     {
2993:Src/tasks.c   ****         TCB_t * xTCB;
2994:Src/tasks.c   ****         BaseType_t xReturn;
2995:Src/tasks.c   **** 
2996:Src/tasks.c   ****         /* If xTask is NULL then we are calling our own task hook. */
2997:Src/tasks.c   ****         if( xTask == NULL )
2998:Src/tasks.c   ****         {
2999:Src/tasks.c   ****             xTCB = pxCurrentTCB;
3000:Src/tasks.c   ****         }
3001:Src/tasks.c   ****         else
3002:Src/tasks.c   ****         {
3003:Src/tasks.c   ****             xTCB = xTask;
3004:Src/tasks.c   ****         }
3005:Src/tasks.c   **** 
3006:Src/tasks.c   ****         if( xTCB->pxTaskTag != NULL )
3007:Src/tasks.c   ****         {
3008:Src/tasks.c   ****             xReturn = xTCB->pxTaskTag( pvParameter );
3009:Src/tasks.c   ****         }
3010:Src/tasks.c   ****         else
3011:Src/tasks.c   ****         {
3012:Src/tasks.c   ****             xReturn = pdFAIL;
3013:Src/tasks.c   ****         }
3014:Src/tasks.c   **** 
3015:Src/tasks.c   ****         return xReturn;
3016:Src/tasks.c   ****     }
3017:Src/tasks.c   **** 
3018:Src/tasks.c   **** #endif /* configUSE_APPLICATION_TASK_TAG */
3019:Src/tasks.c   **** /*-----------------------------------------------------------*/
3020:Src/tasks.c   **** 
3021:Src/tasks.c   **** void vTaskSwitchContext( void )
3022:Src/tasks.c   **** {
3023:Src/tasks.c   ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
3024:Src/tasks.c   ****     {
3025:Src/tasks.c   ****         /* The scheduler is currently suspended - do not allow a context
3026:Src/tasks.c   ****          * switch. */
3027:Src/tasks.c   ****         xYieldPending = pdTRUE;
3028:Src/tasks.c   ****     }
3029:Src/tasks.c   ****     else
3030:Src/tasks.c   ****     {
3031:Src/tasks.c   ****         xYieldPending = pdFALSE;
3032:Src/tasks.c   ****         traceTASK_SWITCHED_OUT();
3033:Src/tasks.c   **** 
3034:Src/tasks.c   ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3035:Src/tasks.c   ****             {
3036:Src/tasks.c   ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 56


3037:Src/tasks.c   ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3038:Src/tasks.c   ****                 #else
3039:Src/tasks.c   ****                     ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3040:Src/tasks.c   ****                 #endif
3041:Src/tasks.c   **** 
3042:Src/tasks.c   ****                 /* Add the amount of time the task has been running to the
3043:Src/tasks.c   ****                  * accumulated time so far.  The time the task started running was
3044:Src/tasks.c   ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3045:Src/tasks.c   ****                  * protection here so count values are only valid until the timer
3046:Src/tasks.c   ****                  * overflows.  The guard against negative values is to protect
3047:Src/tasks.c   ****                  * against suspect run time stat counter implementations - which
3048:Src/tasks.c   ****                  * are provided by the application, not the kernel. */
3049:Src/tasks.c   ****                 if( ulTotalRunTime > ulTaskSwitchedInTime )
3050:Src/tasks.c   ****                 {
3051:Src/tasks.c   ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3052:Src/tasks.c   ****                 }
3053:Src/tasks.c   ****                 else
3054:Src/tasks.c   ****                 {
3055:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
3056:Src/tasks.c   ****                 }
3057:Src/tasks.c   **** 
3058:Src/tasks.c   ****                 ulTaskSwitchedInTime = ulTotalRunTime;
3059:Src/tasks.c   ****             }
3060:Src/tasks.c   ****         #endif /* configGENERATE_RUN_TIME_STATS */
3061:Src/tasks.c   **** 
3062:Src/tasks.c   ****         /* Check for stack overflow, if configured. */
3063:Src/tasks.c   ****         taskCHECK_FOR_STACK_OVERFLOW();
3064:Src/tasks.c   **** 
3065:Src/tasks.c   ****         /* Before the currently running task is switched out, save its errno. */
3066:Src/tasks.c   ****         #if ( configUSE_POSIX_ERRNO == 1 )
3067:Src/tasks.c   ****             {
3068:Src/tasks.c   ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3069:Src/tasks.c   ****             }
3070:Src/tasks.c   ****         #endif
3071:Src/tasks.c   **** 
3072:Src/tasks.c   ****         /* Select a new task to run using either the generic C or port
3073:Src/tasks.c   ****          * optimised asm code. */
3074:Src/tasks.c   ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3075:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
3076:Src/tasks.c   **** 
3077:Src/tasks.c   ****         /* After the new task is switched in, update the global errno. */
3078:Src/tasks.c   ****         #if ( configUSE_POSIX_ERRNO == 1 )
3079:Src/tasks.c   ****             {
3080:Src/tasks.c   ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3081:Src/tasks.c   ****             }
3082:Src/tasks.c   ****         #endif
3083:Src/tasks.c   **** 
3084:Src/tasks.c   ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3085:Src/tasks.c   ****             {
3086:Src/tasks.c   ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
3087:Src/tasks.c   ****                  * structure specific to this task.
3088:Src/tasks.c   ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3089:Src/tasks.c   ****                  * for additional information. */
3090:Src/tasks.c   ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3091:Src/tasks.c   ****             }
3092:Src/tasks.c   ****         #endif /* configUSE_NEWLIB_REENTRANT */
3093:Src/tasks.c   ****     }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 57


3094:Src/tasks.c   **** }
3095:Src/tasks.c   **** /*-----------------------------------------------------------*/
3096:Src/tasks.c   **** 
3097:Src/tasks.c   **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3098:Src/tasks.c   ****                             const TickType_t xTicksToWait )
3099:Src/tasks.c   **** {
3100:Src/tasks.c   ****     configASSERT( pxEventList );
3101:Src/tasks.c   **** 
3102:Src/tasks.c   ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3103:Src/tasks.c   ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3104:Src/tasks.c   **** 
3105:Src/tasks.c   ****     /* Place the event list item of the TCB in the appropriate event list.
3106:Src/tasks.c   ****      * This is placed in the list in priority order so the highest priority task
3107:Src/tasks.c   ****      * is the first to be woken by the event.
3108:Src/tasks.c   ****      *
3109:Src/tasks.c   ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
3110:Src/tasks.c   ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
3111:Src/tasks.c   ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
3112:Src/tasks.c   ****      * Therefore, the event list is sorted in descending priority order.
3113:Src/tasks.c   ****      *
3114:Src/tasks.c   ****      * The queue that contains the event list is locked, preventing
3115:Src/tasks.c   ****      * simultaneous access from interrupts. */
3116:Src/tasks.c   ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3117:Src/tasks.c   **** 
3118:Src/tasks.c   ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3119:Src/tasks.c   **** }
3120:Src/tasks.c   **** /*-----------------------------------------------------------*/
3121:Src/tasks.c   **** 
3122:Src/tasks.c   **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3123:Src/tasks.c   ****                                      const TickType_t xItemValue,
3124:Src/tasks.c   ****                                      const TickType_t xTicksToWait )
3125:Src/tasks.c   **** {
3126:Src/tasks.c   ****     configASSERT( pxEventList );
3127:Src/tasks.c   **** 
3128:Src/tasks.c   ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3129:Src/tasks.c   ****      * the event groups implementation. */
3130:Src/tasks.c   ****     configASSERT( uxSchedulerSuspended != 0 );
3131:Src/tasks.c   **** 
3132:Src/tasks.c   ****     /* Store the item value in the event list item.  It is safe to access the
3133:Src/tasks.c   ****      * event list item here as interrupts won't access the event list item of a
3134:Src/tasks.c   ****      * task that is not in the Blocked state. */
3135:Src/tasks.c   ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3136:Src/tasks.c   **** 
3137:Src/tasks.c   ****     /* Place the event list item of the TCB at the end of the appropriate event
3138:Src/tasks.c   ****      * list.  It is safe to access the event list here because it is part of an
3139:Src/tasks.c   ****      * event group implementation - and interrupts don't access event groups
3140:Src/tasks.c   ****      * directly (instead they access them indirectly by pending function calls to
3141:Src/tasks.c   ****      * the task level). */
3142:Src/tasks.c   ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3143:Src/tasks.c   **** 
3144:Src/tasks.c   ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3145:Src/tasks.c   **** }
3146:Src/tasks.c   **** /*-----------------------------------------------------------*/
3147:Src/tasks.c   **** 
3148:Src/tasks.c   **** #if ( configUSE_TIMERS == 1 )
3149:Src/tasks.c   **** 
3150:Src/tasks.c   ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 58


3151:Src/tasks.c   ****                                           TickType_t xTicksToWait,
3152:Src/tasks.c   ****                                           const BaseType_t xWaitIndefinitely )
3153:Src/tasks.c   ****     {
3154:Src/tasks.c   ****         configASSERT( pxEventList );
3155:Src/tasks.c   **** 
3156:Src/tasks.c   ****         /* This function should not be called by application code hence the
3157:Src/tasks.c   ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3158:Src/tasks.c   ****          * designed for use by kernel code, and has special calling requirements -
3159:Src/tasks.c   ****          * it should be called with the scheduler suspended. */
3160:Src/tasks.c   **** 
3161:Src/tasks.c   **** 
3162:Src/tasks.c   ****         /* Place the event list item of the TCB in the appropriate event list.
3163:Src/tasks.c   ****          * In this case it is assume that this is the only task that is going to
3164:Src/tasks.c   ****          * be waiting on this event list, so the faster vListInsertEnd() function
3165:Src/tasks.c   ****          * can be used in place of vListInsert. */
3166:Src/tasks.c   ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3167:Src/tasks.c   **** 
3168:Src/tasks.c   ****         /* If the task should block indefinitely then set the block time to a
3169:Src/tasks.c   ****          * value that will be recognised as an indefinite delay inside the
3170:Src/tasks.c   ****          * prvAddCurrentTaskToDelayedList() function. */
3171:Src/tasks.c   ****         if( xWaitIndefinitely != pdFALSE )
3172:Src/tasks.c   ****         {
3173:Src/tasks.c   ****             xTicksToWait = portMAX_DELAY;
3174:Src/tasks.c   ****         }
3175:Src/tasks.c   **** 
3176:Src/tasks.c   ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3177:Src/tasks.c   ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3178:Src/tasks.c   ****     }
3179:Src/tasks.c   **** 
3180:Src/tasks.c   **** #endif /* configUSE_TIMERS */
3181:Src/tasks.c   **** /*-----------------------------------------------------------*/
3182:Src/tasks.c   **** 
3183:Src/tasks.c   **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3184:Src/tasks.c   **** {
3185:Src/tasks.c   ****     TCB_t * pxUnblockedTCB;
3186:Src/tasks.c   ****     BaseType_t xReturn;
3187:Src/tasks.c   **** 
3188:Src/tasks.c   ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3189:Src/tasks.c   ****      * called from a critical section within an ISR. */
3190:Src/tasks.c   **** 
3191:Src/tasks.c   ****     /* The event list is sorted in priority order, so the first in the list can
3192:Src/tasks.c   ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3193:Src/tasks.c   ****      * the delayed list, and add it to the ready list.
3194:Src/tasks.c   ****      *
3195:Src/tasks.c   ****      * If an event is for a queue that is locked then this function will never
3196:Src/tasks.c   ****      * get called - the lock count on the queue will get modified instead.  This
3197:Src/tasks.c   ****      * means exclusive access to the event list is guaranteed here.
3198:Src/tasks.c   ****      *
3199:Src/tasks.c   ****      * This function assumes that a check has already been made to ensure that
3200:Src/tasks.c   ****      * pxEventList is not empty. */
3201:Src/tasks.c   ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3202:Src/tasks.c   ****     configASSERT( pxUnblockedTCB );
3203:Src/tasks.c   ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
3204:Src/tasks.c   **** 
3205:Src/tasks.c   ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3206:Src/tasks.c   ****     {
3207:Src/tasks.c   ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 59


3208:Src/tasks.c   ****         prvAddTaskToReadyList( pxUnblockedTCB );
3209:Src/tasks.c   **** 
3210:Src/tasks.c   ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3211:Src/tasks.c   ****             {
3212:Src/tasks.c   ****                 /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3213:Src/tasks.c   ****                  * might be set to the blocked task's time out time.  If the task is
3214:Src/tasks.c   ****                  * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3215:Src/tasks.c   ****                  * normally left unchanged, because it is automatically reset to a new
3216:Src/tasks.c   ****                  * value when the tick count equals xNextTaskUnblockTime.  However if
3217:Src/tasks.c   ****                  * tickless idling is used it might be more important to enter sleep mode
3218:Src/tasks.c   ****                  * at the earliest possible time - so reset xNextTaskUnblockTime here to
3219:Src/tasks.c   ****                  * ensure it is updated at the earliest possible time. */
3220:Src/tasks.c   ****                 prvResetNextTaskUnblockTime();
3221:Src/tasks.c   ****             }
3222:Src/tasks.c   ****         #endif
3223:Src/tasks.c   ****     }
3224:Src/tasks.c   ****     else
3225:Src/tasks.c   ****     {
3226:Src/tasks.c   ****         /* The delayed and ready lists cannot be accessed, so hold this task
3227:Src/tasks.c   ****          * pending until the scheduler is resumed. */
3228:Src/tasks.c   ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3229:Src/tasks.c   ****     }
3230:Src/tasks.c   **** 
3231:Src/tasks.c   ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3232:Src/tasks.c   ****     {
3233:Src/tasks.c   ****         /* Return true if the task removed from the event list has a higher
3234:Src/tasks.c   ****          * priority than the calling task.  This allows the calling task to know if
3235:Src/tasks.c   ****          * it should force a context switch now. */
3236:Src/tasks.c   ****         xReturn = pdTRUE;
3237:Src/tasks.c   **** 
3238:Src/tasks.c   ****         /* Mark that a yield is pending in case the user is not using the
3239:Src/tasks.c   ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3240:Src/tasks.c   ****         xYieldPending = pdTRUE;
3241:Src/tasks.c   ****     }
3242:Src/tasks.c   ****     else
3243:Src/tasks.c   ****     {
3244:Src/tasks.c   ****         xReturn = pdFALSE;
3245:Src/tasks.c   ****     }
3246:Src/tasks.c   **** 
3247:Src/tasks.c   ****     return xReturn;
3248:Src/tasks.c   **** }
3249:Src/tasks.c   **** /*-----------------------------------------------------------*/
3250:Src/tasks.c   **** 
3251:Src/tasks.c   **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3252:Src/tasks.c   ****                                         const TickType_t xItemValue )
3253:Src/tasks.c   **** {
3254:Src/tasks.c   ****     TCB_t * pxUnblockedTCB;
3255:Src/tasks.c   **** 
3256:Src/tasks.c   ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3257:Src/tasks.c   ****      * the event flags implementation. */
3258:Src/tasks.c   ****     configASSERT( uxSchedulerSuspended != pdFALSE );
3259:Src/tasks.c   **** 
3260:Src/tasks.c   ****     /* Store the new item value in the event list. */
3261:Src/tasks.c   ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3262:Src/tasks.c   **** 
3263:Src/tasks.c   ****     /* Remove the event list form the event flag.  Interrupts do not access
3264:Src/tasks.c   ****      * event flags. */
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 60


3265:Src/tasks.c   ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3266:Src/tasks.c   ****     configASSERT( pxUnblockedTCB );
3267:Src/tasks.c   ****     listREMOVE_ITEM( pxEventListItem );
3268:Src/tasks.c   **** 
3269:Src/tasks.c   ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3270:Src/tasks.c   ****         {
3271:Src/tasks.c   ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3272:Src/tasks.c   ****              * might be set to the blocked task's time out time.  If the task is
3273:Src/tasks.c   ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3274:Src/tasks.c   ****              * normally left unchanged, because it is automatically reset to a new
3275:Src/tasks.c   ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3276:Src/tasks.c   ****              * tickless idling is used it might be more important to enter sleep mode
3277:Src/tasks.c   ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3278:Src/tasks.c   ****              * ensure it is updated at the earliest possible time. */
3279:Src/tasks.c   ****             prvResetNextTaskUnblockTime();
3280:Src/tasks.c   ****         }
3281:Src/tasks.c   ****     #endif
3282:Src/tasks.c   **** 
3283:Src/tasks.c   ****     /* Remove the task from the delayed list and add it to the ready list.  The
3284:Src/tasks.c   ****      * scheduler is suspended so interrupts will not be accessing the ready
3285:Src/tasks.c   ****      * lists. */
3286:Src/tasks.c   ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3287:Src/tasks.c   ****     prvAddTaskToReadyList( pxUnblockedTCB );
3288:Src/tasks.c   **** 
3289:Src/tasks.c   ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3290:Src/tasks.c   ****     {
3291:Src/tasks.c   ****         /* The unblocked task has a priority above that of the calling task, so
3292:Src/tasks.c   ****          * a context switch is required.  This function is called with the
3293:Src/tasks.c   ****          * scheduler suspended so xYieldPending is set so the context switch
3294:Src/tasks.c   ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3295:Src/tasks.c   ****         xYieldPending = pdTRUE;
3296:Src/tasks.c   ****     }
3297:Src/tasks.c   **** }
3298:Src/tasks.c   **** /*-----------------------------------------------------------*/
3299:Src/tasks.c   **** 
3300:Src/tasks.c   **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3301:Src/tasks.c   **** {
3302:Src/tasks.c   ****     configASSERT( pxTimeOut );
3303:Src/tasks.c   ****     taskENTER_CRITICAL();
3304:Src/tasks.c   ****     {
3305:Src/tasks.c   ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3306:Src/tasks.c   ****         pxTimeOut->xTimeOnEntering = xTickCount;
3307:Src/tasks.c   ****     }
3308:Src/tasks.c   ****     taskEXIT_CRITICAL();
3309:Src/tasks.c   **** }
3310:Src/tasks.c   **** /*-----------------------------------------------------------*/
3311:Src/tasks.c   **** 
3312:Src/tasks.c   **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3313:Src/tasks.c   **** {
3314:Src/tasks.c   ****     /* For internal use only as it does not use a critical section. */
3315:Src/tasks.c   ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3316:Src/tasks.c   ****     pxTimeOut->xTimeOnEntering = xTickCount;
3317:Src/tasks.c   **** }
3318:Src/tasks.c   **** /*-----------------------------------------------------------*/
3319:Src/tasks.c   **** 
3320:Src/tasks.c   **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3321:Src/tasks.c   ****                                  TickType_t * const pxTicksToWait )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 61


3322:Src/tasks.c   **** {
3323:Src/tasks.c   ****     BaseType_t xReturn;
3324:Src/tasks.c   **** 
3325:Src/tasks.c   ****     configASSERT( pxTimeOut );
3326:Src/tasks.c   ****     configASSERT( pxTicksToWait );
3327:Src/tasks.c   **** 
3328:Src/tasks.c   ****     taskENTER_CRITICAL();
3329:Src/tasks.c   ****     {
3330:Src/tasks.c   ****         /* Minor optimisation.  The tick count cannot change in this block. */
3331:Src/tasks.c   ****         const TickType_t xConstTickCount = xTickCount;
3332:Src/tasks.c   ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3333:Src/tasks.c   **** 
3334:Src/tasks.c   ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3335:Src/tasks.c   ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3336:Src/tasks.c   ****             {
3337:Src/tasks.c   ****                 /* The delay was aborted, which is not the same as a time out,
3338:Src/tasks.c   ****                  * but has the same result. */
3339:Src/tasks.c   ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3340:Src/tasks.c   ****                 xReturn = pdTRUE;
3341:Src/tasks.c   ****             }
3342:Src/tasks.c   ****             else
3343:Src/tasks.c   ****         #endif
3344:Src/tasks.c   **** 
3345:Src/tasks.c   ****         #if ( INCLUDE_vTaskSuspend == 1 )
3346:Src/tasks.c   ****             if( *pxTicksToWait == portMAX_DELAY )
3347:Src/tasks.c   ****             {
3348:Src/tasks.c   ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3349:Src/tasks.c   ****                  * specified is the maximum block time then the task should block
3350:Src/tasks.c   ****                  * indefinitely, and therefore never time out. */
3351:Src/tasks.c   ****                 xReturn = pdFALSE;
3352:Src/tasks.c   ****             }
3353:Src/tasks.c   ****             else
3354:Src/tasks.c   ****         #endif
3355:Src/tasks.c   **** 
3356:Src/tasks.c   ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3357:Src/tasks.c   ****         {
3358:Src/tasks.c   ****             /* The tick count is greater than the time at which
3359:Src/tasks.c   ****              * vTaskSetTimeout() was called, but has also overflowed since
3360:Src/tasks.c   ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3361:Src/tasks.c   ****              * around and gone past again. This passed since vTaskSetTimeout()
3362:Src/tasks.c   ****              * was called. */
3363:Src/tasks.c   ****             xReturn = pdTRUE;
3364:Src/tasks.c   ****             *pxTicksToWait = ( TickType_t ) 0;
3365:Src/tasks.c   ****         }
3366:Src/tasks.c   ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3367:Src/tasks.c   ****         {
3368:Src/tasks.c   ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3369:Src/tasks.c   ****             *pxTicksToWait -= xElapsedTime;
3370:Src/tasks.c   ****             vTaskInternalSetTimeOutState( pxTimeOut );
3371:Src/tasks.c   ****             xReturn = pdFALSE;
3372:Src/tasks.c   ****         }
3373:Src/tasks.c   ****         else
3374:Src/tasks.c   ****         {
3375:Src/tasks.c   ****             *pxTicksToWait = ( TickType_t ) 0;
3376:Src/tasks.c   ****             xReturn = pdTRUE;
3377:Src/tasks.c   ****         }
3378:Src/tasks.c   ****     }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 62


3379:Src/tasks.c   ****     taskEXIT_CRITICAL();
3380:Src/tasks.c   **** 
3381:Src/tasks.c   ****     return xReturn;
3382:Src/tasks.c   **** }
3383:Src/tasks.c   **** /*-----------------------------------------------------------*/
3384:Src/tasks.c   **** 
3385:Src/tasks.c   **** void vTaskMissedYield( void )
3386:Src/tasks.c   **** {
3387:Src/tasks.c   ****     xYieldPending = pdTRUE;
3388:Src/tasks.c   **** }
3389:Src/tasks.c   **** /*-----------------------------------------------------------*/
3390:Src/tasks.c   **** 
3391:Src/tasks.c   **** #if ( configUSE_TRACE_FACILITY == 1 )
3392:Src/tasks.c   **** 
3393:Src/tasks.c   ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3394:Src/tasks.c   ****     {
3395:Src/tasks.c   ****         UBaseType_t uxReturn;
3396:Src/tasks.c   ****         TCB_t const * pxTCB;
3397:Src/tasks.c   **** 
3398:Src/tasks.c   ****         if( xTask != NULL )
3399:Src/tasks.c   ****         {
3400:Src/tasks.c   ****             pxTCB = xTask;
3401:Src/tasks.c   ****             uxReturn = pxTCB->uxTaskNumber;
3402:Src/tasks.c   ****         }
3403:Src/tasks.c   ****         else
3404:Src/tasks.c   ****         {
3405:Src/tasks.c   ****             uxReturn = 0U;
3406:Src/tasks.c   ****         }
3407:Src/tasks.c   **** 
3408:Src/tasks.c   ****         return uxReturn;
3409:Src/tasks.c   ****     }
3410:Src/tasks.c   **** 
3411:Src/tasks.c   **** #endif /* configUSE_TRACE_FACILITY */
3412:Src/tasks.c   **** /*-----------------------------------------------------------*/
3413:Src/tasks.c   **** 
3414:Src/tasks.c   **** #if ( configUSE_TRACE_FACILITY == 1 )
3415:Src/tasks.c   **** 
3416:Src/tasks.c   ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3417:Src/tasks.c   ****                              const UBaseType_t uxHandle )
3418:Src/tasks.c   ****     {
3419:Src/tasks.c   ****         TCB_t * pxTCB;
3420:Src/tasks.c   **** 
3421:Src/tasks.c   ****         if( xTask != NULL )
3422:Src/tasks.c   ****         {
3423:Src/tasks.c   ****             pxTCB = xTask;
3424:Src/tasks.c   ****             pxTCB->uxTaskNumber = uxHandle;
3425:Src/tasks.c   ****         }
3426:Src/tasks.c   ****     }
3427:Src/tasks.c   **** 
3428:Src/tasks.c   **** #endif /* configUSE_TRACE_FACILITY */
3429:Src/tasks.c   **** 
3430:Src/tasks.c   **** /*
3431:Src/tasks.c   ****  * -----------------------------------------------------------
3432:Src/tasks.c   ****  * The Idle task.
3433:Src/tasks.c   ****  * ----------------------------------------------------------
3434:Src/tasks.c   ****  *
3435:Src/tasks.c   ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 63


3436:Src/tasks.c   ****  * language extensions.  The equivalent prototype for this function is:
3437:Src/tasks.c   ****  *
3438:Src/tasks.c   ****  * void prvIdleTask( void *pvParameters );
3439:Src/tasks.c   ****  *
3440:Src/tasks.c   ****  */
3441:Src/tasks.c   **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3442:Src/tasks.c   **** {
3443:Src/tasks.c   ****     /* Stop warnings. */
3444:Src/tasks.c   ****     ( void ) pvParameters;
3445:Src/tasks.c   **** 
3446:Src/tasks.c   ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3447:Src/tasks.c   ****      * SCHEDULER IS STARTED. **/
3448:Src/tasks.c   **** 
3449:Src/tasks.c   ****     /* In case a task that has a secure context deletes itself, in which case
3450:Src/tasks.c   ****      * the idle task is responsible for deleting the task's secure context, if
3451:Src/tasks.c   ****      * any. */
3452:Src/tasks.c   ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3453:Src/tasks.c   **** 
3454:Src/tasks.c   ****     for( ; ; )
3455:Src/tasks.c   ****     {
3456:Src/tasks.c   ****         /* See if any tasks have deleted themselves - if so then the idle task
3457:Src/tasks.c   ****          * is responsible for freeing the deleted task's TCB and stack. */
3458:Src/tasks.c   ****         prvCheckTasksWaitingTermination();
3459:Src/tasks.c   **** 
3460:Src/tasks.c   ****         #if ( configUSE_PREEMPTION == 0 )
3461:Src/tasks.c   ****             {
3462:Src/tasks.c   ****                 /* If we are not using preemption we keep forcing a task switch to
3463:Src/tasks.c   ****                  * see if any other task has become available.  If we are using
3464:Src/tasks.c   ****                  * preemption we don't need to do this as any task becoming available
3465:Src/tasks.c   ****                  * will automatically get the processor anyway. */
3466:Src/tasks.c   ****                 taskYIELD();
3467:Src/tasks.c   ****             }
3468:Src/tasks.c   ****         #endif /* configUSE_PREEMPTION */
3469:Src/tasks.c   **** 
3470:Src/tasks.c   ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3471:Src/tasks.c   ****             {
3472:Src/tasks.c   ****                 /* When using preemption tasks of equal priority will be
3473:Src/tasks.c   ****                  * timesliced.  If a task that is sharing the idle priority is ready
3474:Src/tasks.c   ****                  * to run then the idle task should yield before the end of the
3475:Src/tasks.c   ****                  * timeslice.
3476:Src/tasks.c   ****                  *
3477:Src/tasks.c   ****                  * A critical region is not required here as we are just reading from
3478:Src/tasks.c   ****                  * the list, and an occasional incorrect value will not matter.  If
3479:Src/tasks.c   ****                  * the ready list at the idle priority contains more than one task
3480:Src/tasks.c   ****                  * then a task other than the idle task is ready to execute. */
3481:Src/tasks.c   ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
3482:Src/tasks.c   ****                 {
3483:Src/tasks.c   ****                     taskYIELD();
3484:Src/tasks.c   ****                 }
3485:Src/tasks.c   ****                 else
3486:Src/tasks.c   ****                 {
3487:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
3488:Src/tasks.c   ****                 }
3489:Src/tasks.c   ****             }
3490:Src/tasks.c   ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3491:Src/tasks.c   **** 
3492:Src/tasks.c   ****         #if ( configUSE_IDLE_HOOK == 1 )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 64


3493:Src/tasks.c   ****             {
3494:Src/tasks.c   ****                 extern void vApplicationIdleHook( void );
3495:Src/tasks.c   **** 
3496:Src/tasks.c   ****                 /* Call the user defined function from within the idle task.  This
3497:Src/tasks.c   ****                  * allows the application designer to add background functionality
3498:Src/tasks.c   ****                  * without the overhead of a separate task.
3499:Src/tasks.c   ****                  * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3500:Src/tasks.c   ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
3501:Src/tasks.c   ****                 vApplicationIdleHook();
3502:Src/tasks.c   ****             }
3503:Src/tasks.c   ****         #endif /* configUSE_IDLE_HOOK */
3504:Src/tasks.c   **** 
3505:Src/tasks.c   ****         /* This conditional compilation should use inequality to 0, not equality
3506:Src/tasks.c   ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3507:Src/tasks.c   ****          * user defined low power mode  implementations require
3508:Src/tasks.c   ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3509:Src/tasks.c   ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3510:Src/tasks.c   ****             {
3511:Src/tasks.c   ****                 TickType_t xExpectedIdleTime;
3512:Src/tasks.c   **** 
3513:Src/tasks.c   ****                 /* It is not desirable to suspend then resume the scheduler on
3514:Src/tasks.c   ****                  * each iteration of the idle task.  Therefore, a preliminary
3515:Src/tasks.c   ****                  * test of the expected idle time is performed without the
3516:Src/tasks.c   ****                  * scheduler suspended.  The result here is not necessarily
3517:Src/tasks.c   ****                  * valid. */
3518:Src/tasks.c   ****                 xExpectedIdleTime = prvGetExpectedIdleTime();
3519:Src/tasks.c   **** 
3520:Src/tasks.c   ****                 if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3521:Src/tasks.c   ****                 {
3522:Src/tasks.c   ****                     vTaskSuspendAll();
3523:Src/tasks.c   ****                     {
3524:Src/tasks.c   ****                         /* Now the scheduler is suspended, the expected idle
3525:Src/tasks.c   ****                          * time can be sampled again, and this time its value can
3526:Src/tasks.c   ****                          * be used. */
3527:Src/tasks.c   ****                         configASSERT( xNextTaskUnblockTime >= xTickCount );
3528:Src/tasks.c   ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
3529:Src/tasks.c   **** 
3530:Src/tasks.c   ****                         /* Define the following macro to set xExpectedIdleTime to 0
3531:Src/tasks.c   ****                          * if the application does not want
3532:Src/tasks.c   ****                          * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3533:Src/tasks.c   ****                         configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3534:Src/tasks.c   **** 
3535:Src/tasks.c   ****                         if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3536:Src/tasks.c   ****                         {
3537:Src/tasks.c   ****                             traceLOW_POWER_IDLE_BEGIN();
3538:Src/tasks.c   ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3539:Src/tasks.c   ****                             traceLOW_POWER_IDLE_END();
3540:Src/tasks.c   ****                         }
3541:Src/tasks.c   ****                         else
3542:Src/tasks.c   ****                         {
3543:Src/tasks.c   ****                             mtCOVERAGE_TEST_MARKER();
3544:Src/tasks.c   ****                         }
3545:Src/tasks.c   ****                     }
3546:Src/tasks.c   ****                     ( void ) xTaskResumeAll();
3547:Src/tasks.c   ****                 }
3548:Src/tasks.c   ****                 else
3549:Src/tasks.c   ****                 {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 65


3550:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
3551:Src/tasks.c   ****                 }
3552:Src/tasks.c   ****             }
3553:Src/tasks.c   ****         #endif /* configUSE_TICKLESS_IDLE */
3554:Src/tasks.c   ****     }
3555:Src/tasks.c   **** }
3556:Src/tasks.c   **** /*-----------------------------------------------------------*/
3557:Src/tasks.c   **** 
3558:Src/tasks.c   **** #if ( configUSE_TICKLESS_IDLE != 0 )
3559:Src/tasks.c   **** 
3560:Src/tasks.c   ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3561:Src/tasks.c   ****     {
3562:Src/tasks.c   ****         /* The idle task exists in addition to the application tasks. */
3563:Src/tasks.c   ****         const UBaseType_t uxNonApplicationTasks = 1;
3564:Src/tasks.c   ****         eSleepModeStatus eReturn = eStandardSleep;
3565:Src/tasks.c   **** 
3566:Src/tasks.c   ****         /* This function must be called from a critical section. */
3567:Src/tasks.c   **** 
3568:Src/tasks.c   ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3569:Src/tasks.c   ****         {
3570:Src/tasks.c   ****             /* A task was made ready while the scheduler was suspended. */
3571:Src/tasks.c   ****             eReturn = eAbortSleep;
3572:Src/tasks.c   ****         }
3573:Src/tasks.c   ****         else if( xYieldPending != pdFALSE )
3574:Src/tasks.c   ****         {
3575:Src/tasks.c   ****             /* A yield was pended while the scheduler was suspended. */
3576:Src/tasks.c   ****             eReturn = eAbortSleep;
3577:Src/tasks.c   ****         }
3578:Src/tasks.c   ****         else if( xPendedTicks != 0 )
3579:Src/tasks.c   ****         {
3580:Src/tasks.c   ****             /* A tick interrupt has already occurred but was held pending
3581:Src/tasks.c   ****              * because the scheduler is suspended. */
3582:Src/tasks.c   ****             eReturn = eAbortSleep;
3583:Src/tasks.c   ****         }
3584:Src/tasks.c   ****         else
3585:Src/tasks.c   ****         {
3586:Src/tasks.c   ****             /* If all the tasks are in the suspended list (which might mean they
3587:Src/tasks.c   ****              * have an infinite block time rather than actually being suspended)
3588:Src/tasks.c   ****              * then it is safe to turn all clocks off and just wait for external
3589:Src/tasks.c   ****              * interrupts. */
3590:Src/tasks.c   ****             if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonA
3591:Src/tasks.c   ****             {
3592:Src/tasks.c   ****                 eReturn = eNoTasksWaitingTimeout;
3593:Src/tasks.c   ****             }
3594:Src/tasks.c   ****             else
3595:Src/tasks.c   ****             {
3596:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
3597:Src/tasks.c   ****             }
3598:Src/tasks.c   ****         }
3599:Src/tasks.c   **** 
3600:Src/tasks.c   ****         return eReturn;
3601:Src/tasks.c   ****     }
3602:Src/tasks.c   **** 
3603:Src/tasks.c   **** #endif /* configUSE_TICKLESS_IDLE */
3604:Src/tasks.c   **** /*-----------------------------------------------------------*/
3605:Src/tasks.c   **** 
3606:Src/tasks.c   **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 66


3607:Src/tasks.c   **** 
3608:Src/tasks.c   ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3609:Src/tasks.c   ****                                             BaseType_t xIndex,
3610:Src/tasks.c   ****                                             void * pvValue )
3611:Src/tasks.c   ****     {
3612:Src/tasks.c   ****         TCB_t * pxTCB;
3613:Src/tasks.c   **** 
3614:Src/tasks.c   ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3615:Src/tasks.c   ****         {
3616:Src/tasks.c   ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3617:Src/tasks.c   ****             configASSERT( pxTCB != NULL );
3618:Src/tasks.c   ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3619:Src/tasks.c   ****         }
3620:Src/tasks.c   ****     }
3621:Src/tasks.c   **** 
3622:Src/tasks.c   **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3623:Src/tasks.c   **** /*-----------------------------------------------------------*/
3624:Src/tasks.c   **** 
3625:Src/tasks.c   **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3626:Src/tasks.c   **** 
3627:Src/tasks.c   ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3628:Src/tasks.c   ****                                                BaseType_t xIndex )
3629:Src/tasks.c   ****     {
3630:Src/tasks.c   ****         void * pvReturn = NULL;
3631:Src/tasks.c   ****         TCB_t * pxTCB;
3632:Src/tasks.c   **** 
3633:Src/tasks.c   ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3634:Src/tasks.c   ****         {
3635:Src/tasks.c   ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3636:Src/tasks.c   ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3637:Src/tasks.c   ****         }
3638:Src/tasks.c   ****         else
3639:Src/tasks.c   ****         {
3640:Src/tasks.c   ****             pvReturn = NULL;
3641:Src/tasks.c   ****         }
3642:Src/tasks.c   **** 
3643:Src/tasks.c   ****         return pvReturn;
3644:Src/tasks.c   ****     }
3645:Src/tasks.c   **** 
3646:Src/tasks.c   **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3647:Src/tasks.c   **** /*-----------------------------------------------------------*/
3648:Src/tasks.c   **** 
3649:Src/tasks.c   **** #if ( portUSING_MPU_WRAPPERS == 1 )
3650:Src/tasks.c   **** 
3651:Src/tasks.c   ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3652:Src/tasks.c   ****                                   const MemoryRegion_t * const xRegions )
3653:Src/tasks.c   ****     {
3654:Src/tasks.c   ****         TCB_t * pxTCB;
3655:Src/tasks.c   **** 
3656:Src/tasks.c   ****         /* If null is passed in here then we are modifying the MPU settings of
3657:Src/tasks.c   ****          * the calling task. */
3658:Src/tasks.c   ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3659:Src/tasks.c   **** 
3660:Src/tasks.c   ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3661:Src/tasks.c   ****     }
3662:Src/tasks.c   **** 
3663:Src/tasks.c   **** #endif /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 67


3664:Src/tasks.c   **** /*-----------------------------------------------------------*/
3665:Src/tasks.c   **** 
3666:Src/tasks.c   **** static void prvInitialiseTaskLists( void )
3667:Src/tasks.c   **** {
3668:Src/tasks.c   ****     UBaseType_t uxPriority;
3669:Src/tasks.c   **** 
3670:Src/tasks.c   ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3671:Src/tasks.c   ****     {
3672:Src/tasks.c   ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3673:Src/tasks.c   ****     }
3674:Src/tasks.c   **** 
3675:Src/tasks.c   ****     vListInitialise( &xDelayedTaskList1 );
3676:Src/tasks.c   ****     vListInitialise( &xDelayedTaskList2 );
3677:Src/tasks.c   ****     vListInitialise( &xPendingReadyList );
3678:Src/tasks.c   **** 
3679:Src/tasks.c   ****     #if ( INCLUDE_vTaskDelete == 1 )
3680:Src/tasks.c   ****         {
3681:Src/tasks.c   ****             vListInitialise( &xTasksWaitingTermination );
3682:Src/tasks.c   ****         }
3683:Src/tasks.c   ****     #endif /* INCLUDE_vTaskDelete */
3684:Src/tasks.c   **** 
3685:Src/tasks.c   ****     #if ( INCLUDE_vTaskSuspend == 1 )
3686:Src/tasks.c   ****         {
3687:Src/tasks.c   ****             vListInitialise( &xSuspendedTaskList );
3688:Src/tasks.c   ****         }
3689:Src/tasks.c   ****     #endif /* INCLUDE_vTaskSuspend */
3690:Src/tasks.c   **** 
3691:Src/tasks.c   ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3692:Src/tasks.c   ****      * using list2. */
3693:Src/tasks.c   ****     pxDelayedTaskList = &xDelayedTaskList1;
3694:Src/tasks.c   ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3695:Src/tasks.c   **** }
3696:Src/tasks.c   **** /*-----------------------------------------------------------*/
3697:Src/tasks.c   **** 
3698:Src/tasks.c   **** static void prvCheckTasksWaitingTermination( void )
3699:Src/tasks.c   **** {
3700:Src/tasks.c   ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3701:Src/tasks.c   **** 
3702:Src/tasks.c   ****     #if ( INCLUDE_vTaskDelete == 1 )
3703:Src/tasks.c   ****         {
3704:Src/tasks.c   ****             TCB_t * pxTCB;
3705:Src/tasks.c   **** 
3706:Src/tasks.c   ****             /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3707:Src/tasks.c   ****              * being called too often in the idle task. */
3708:Src/tasks.c   ****             while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3709:Src/tasks.c   ****             {
3710:Src/tasks.c   ****                 taskENTER_CRITICAL();
3711:Src/tasks.c   ****                 {
3712:Src/tasks.c   ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e
3713:Src/tasks.c   ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3714:Src/tasks.c   ****                     --uxCurrentNumberOfTasks;
3715:Src/tasks.c   ****                     --uxDeletedTasksWaitingCleanUp;
3716:Src/tasks.c   ****                 }
3717:Src/tasks.c   ****                 taskEXIT_CRITICAL();
3718:Src/tasks.c   **** 
3719:Src/tasks.c   ****                 prvDeleteTCB( pxTCB );
3720:Src/tasks.c   ****             }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 68


3721:Src/tasks.c   ****         }
3722:Src/tasks.c   ****     #endif /* INCLUDE_vTaskDelete */
3723:Src/tasks.c   **** }
3724:Src/tasks.c   **** /*-----------------------------------------------------------*/
3725:Src/tasks.c   **** 
3726:Src/tasks.c   **** #if ( configUSE_TRACE_FACILITY == 1 )
3727:Src/tasks.c   **** 
3728:Src/tasks.c   ****     void vTaskGetInfo( TaskHandle_t xTask,
3729:Src/tasks.c   ****                        TaskStatus_t * pxTaskStatus,
3730:Src/tasks.c   ****                        BaseType_t xGetFreeStackSpace,
3731:Src/tasks.c   ****                        eTaskState eState )
3732:Src/tasks.c   ****     {
3733:Src/tasks.c   ****         TCB_t * pxTCB;
3734:Src/tasks.c   **** 
3735:Src/tasks.c   ****         /* xTask is NULL then get the state of the calling task. */
3736:Src/tasks.c   ****         pxTCB = prvGetTCBFromHandle( xTask );
3737:Src/tasks.c   **** 
3738:Src/tasks.c   ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3739:Src/tasks.c   ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3740:Src/tasks.c   ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3741:Src/tasks.c   ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3742:Src/tasks.c   ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3743:Src/tasks.c   **** 
3744:Src/tasks.c   ****         #if ( configUSE_MUTEXES == 1 )
3745:Src/tasks.c   ****             {
3746:Src/tasks.c   ****                 pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3747:Src/tasks.c   ****             }
3748:Src/tasks.c   ****         #else
3749:Src/tasks.c   ****             {
3750:Src/tasks.c   ****                 pxTaskStatus->uxBasePriority = 0;
3751:Src/tasks.c   ****             }
3752:Src/tasks.c   ****         #endif
3753:Src/tasks.c   **** 
3754:Src/tasks.c   ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3755:Src/tasks.c   ****             {
3756:Src/tasks.c   ****                 pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3757:Src/tasks.c   ****             }
3758:Src/tasks.c   ****         #else
3759:Src/tasks.c   ****             {
3760:Src/tasks.c   ****                 pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
3761:Src/tasks.c   ****             }
3762:Src/tasks.c   ****         #endif
3763:Src/tasks.c   **** 
3764:Src/tasks.c   ****         /* Obtaining the task state is a little fiddly, so is only done if the
3765:Src/tasks.c   ****          * value of eState passed into this function is eInvalid - otherwise the
3766:Src/tasks.c   ****          * state is just set to whatever is passed in. */
3767:Src/tasks.c   ****         if( eState != eInvalid )
3768:Src/tasks.c   ****         {
3769:Src/tasks.c   ****             if( pxTCB == pxCurrentTCB )
3770:Src/tasks.c   ****             {
3771:Src/tasks.c   ****                 pxTaskStatus->eCurrentState = eRunning;
3772:Src/tasks.c   ****             }
3773:Src/tasks.c   ****             else
3774:Src/tasks.c   ****             {
3775:Src/tasks.c   ****                 pxTaskStatus->eCurrentState = eState;
3776:Src/tasks.c   **** 
3777:Src/tasks.c   ****                 #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 69


3778:Src/tasks.c   ****                     {
3779:Src/tasks.c   ****                         /* If the task is in the suspended list then there is a
3780:Src/tasks.c   ****                          *  chance it is actually just blocked indefinitely - so really
3781:Src/tasks.c   ****                          *  it should be reported as being in the Blocked state. */
3782:Src/tasks.c   ****                         if( eState == eSuspended )
3783:Src/tasks.c   ****                         {
3784:Src/tasks.c   ****                             vTaskSuspendAll();
3785:Src/tasks.c   ****                             {
3786:Src/tasks.c   ****                                 if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3787:Src/tasks.c   ****                                 {
3788:Src/tasks.c   ****                                     pxTaskStatus->eCurrentState = eBlocked;
3789:Src/tasks.c   ****                                 }
3790:Src/tasks.c   ****                             }
3791:Src/tasks.c   ****                             ( void ) xTaskResumeAll();
3792:Src/tasks.c   ****                         }
3793:Src/tasks.c   ****                     }
3794:Src/tasks.c   ****                 #endif /* INCLUDE_vTaskSuspend */
3795:Src/tasks.c   ****             }
3796:Src/tasks.c   ****         }
3797:Src/tasks.c   ****         else
3798:Src/tasks.c   ****         {
3799:Src/tasks.c   ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3800:Src/tasks.c   ****         }
3801:Src/tasks.c   **** 
3802:Src/tasks.c   ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3803:Src/tasks.c   ****          * parameter is provided to allow it to be skipped. */
3804:Src/tasks.c   ****         if( xGetFreeStackSpace != pdFALSE )
3805:Src/tasks.c   ****         {
3806:Src/tasks.c   ****             #if ( portSTACK_GROWTH > 0 )
3807:Src/tasks.c   ****                 {
3808:Src/tasks.c   ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3809:Src/tasks.c   ****                 }
3810:Src/tasks.c   ****             #else
3811:Src/tasks.c   ****                 {
3812:Src/tasks.c   ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3813:Src/tasks.c   ****                 }
3814:Src/tasks.c   ****             #endif
3815:Src/tasks.c   ****         }
3816:Src/tasks.c   ****         else
3817:Src/tasks.c   ****         {
3818:Src/tasks.c   ****             pxTaskStatus->usStackHighWaterMark = 0;
3819:Src/tasks.c   ****         }
3820:Src/tasks.c   ****     }
3821:Src/tasks.c   **** 
3822:Src/tasks.c   **** #endif /* configUSE_TRACE_FACILITY */
3823:Src/tasks.c   **** /*-----------------------------------------------------------*/
3824:Src/tasks.c   **** 
3825:Src/tasks.c   **** #if ( configUSE_TRACE_FACILITY == 1 )
3826:Src/tasks.c   **** 
3827:Src/tasks.c   ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3828:Src/tasks.c   ****                                                      List_t * pxList,
3829:Src/tasks.c   ****                                                      eTaskState eState )
3830:Src/tasks.c   ****     {
3831:Src/tasks.c   ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
3832:Src/tasks.c   ****         UBaseType_t uxTask = 0;
3833:Src/tasks.c   **** 
3834:Src/tasks.c   ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 70


3835:Src/tasks.c   ****         {
3836:Src/tasks.c   ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3837:Src/tasks.c   **** 
3838:Src/tasks.c   ****             /* Populate an TaskStatus_t structure within the
3839:Src/tasks.c   ****              * pxTaskStatusArray array for each task that is referenced from
3840:Src/tasks.c   ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3841:Src/tasks.c   ****              * meaning of each TaskStatus_t structure member. */
3842:Src/tasks.c   ****             do
3843:Src/tasks.c   ****             {
3844:Src/tasks.c   ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3845:Src/tasks.c   ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3846:Src/tasks.c   ****                 uxTask++;
3847:Src/tasks.c   ****             } while( pxNextTCB != pxFirstTCB );
3848:Src/tasks.c   ****         }
3849:Src/tasks.c   ****         else
3850:Src/tasks.c   ****         {
3851:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
3852:Src/tasks.c   ****         }
3853:Src/tasks.c   **** 
3854:Src/tasks.c   ****         return uxTask;
3855:Src/tasks.c   ****     }
3856:Src/tasks.c   **** 
3857:Src/tasks.c   **** #endif /* configUSE_TRACE_FACILITY */
3858:Src/tasks.c   **** /*-----------------------------------------------------------*/
3859:Src/tasks.c   **** 
3860:Src/tasks.c   **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3861:Src/tasks.c   **** 
3862:Src/tasks.c   ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3863:Src/tasks.c   ****     {
3864:Src/tasks.c   ****         uint32_t ulCount = 0U;
3865:Src/tasks.c   **** 
3866:Src/tasks.c   ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3867:Src/tasks.c   ****         {
3868:Src/tasks.c   ****             pucStackByte -= portSTACK_GROWTH;
3869:Src/tasks.c   ****             ulCount++;
3870:Src/tasks.c   ****         }
3871:Src/tasks.c   **** 
3872:Src/tasks.c   ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
3873:Src/tasks.c   **** 
3874:Src/tasks.c   ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
3875:Src/tasks.c   ****     }
3876:Src/tasks.c   **** 
3877:Src/tasks.c   **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3878:Src/tasks.c   **** /*-----------------------------------------------------------*/
3879:Src/tasks.c   **** 
3880:Src/tasks.c   **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3881:Src/tasks.c   **** 
3882:Src/tasks.c   **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3883:Src/tasks.c   ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3884:Src/tasks.c   ****  * user to determine the return type.  It gets around the problem of the value
3885:Src/tasks.c   ****  * overflowing on 8-bit types without breaking backward compatibility for
3886:Src/tasks.c   ****  * applications that expect an 8-bit return type. */
3887:Src/tasks.c   ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3888:Src/tasks.c   ****     {
3889:Src/tasks.c   ****         TCB_t * pxTCB;
3890:Src/tasks.c   ****         uint8_t * pucEndOfStack;
3891:Src/tasks.c   ****         configSTACK_DEPTH_TYPE uxReturn;
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 71


3892:Src/tasks.c   **** 
3893:Src/tasks.c   ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3894:Src/tasks.c   ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3895:Src/tasks.c   ****          * allows the user to determine the return type.  It gets around the
3896:Src/tasks.c   ****          * problem of the value overflowing on 8-bit types without breaking
3897:Src/tasks.c   ****          * backward compatibility for applications that expect an 8-bit return
3898:Src/tasks.c   ****          * type. */
3899:Src/tasks.c   **** 
3900:Src/tasks.c   ****         pxTCB = prvGetTCBFromHandle( xTask );
3901:Src/tasks.c   **** 
3902:Src/tasks.c   ****         #if portSTACK_GROWTH < 0
3903:Src/tasks.c   ****             {
3904:Src/tasks.c   ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3905:Src/tasks.c   ****             }
3906:Src/tasks.c   ****         #else
3907:Src/tasks.c   ****             {
3908:Src/tasks.c   ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3909:Src/tasks.c   ****             }
3910:Src/tasks.c   ****         #endif
3911:Src/tasks.c   **** 
3912:Src/tasks.c   ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3913:Src/tasks.c   **** 
3914:Src/tasks.c   ****         return uxReturn;
3915:Src/tasks.c   ****     }
3916:Src/tasks.c   **** 
3917:Src/tasks.c   **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3918:Src/tasks.c   **** /*-----------------------------------------------------------*/
3919:Src/tasks.c   **** 
3920:Src/tasks.c   **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3921:Src/tasks.c   **** 
3922:Src/tasks.c   ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3923:Src/tasks.c   ****     {
3924:Src/tasks.c   ****         TCB_t * pxTCB;
3925:Src/tasks.c   ****         uint8_t * pucEndOfStack;
3926:Src/tasks.c   ****         UBaseType_t uxReturn;
3927:Src/tasks.c   **** 
3928:Src/tasks.c   ****         pxTCB = prvGetTCBFromHandle( xTask );
3929:Src/tasks.c   **** 
3930:Src/tasks.c   ****         #if portSTACK_GROWTH < 0
3931:Src/tasks.c   ****             {
3932:Src/tasks.c   ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3933:Src/tasks.c   ****             }
3934:Src/tasks.c   ****         #else
3935:Src/tasks.c   ****             {
3936:Src/tasks.c   ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3937:Src/tasks.c   ****             }
3938:Src/tasks.c   ****         #endif
3939:Src/tasks.c   **** 
3940:Src/tasks.c   ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3941:Src/tasks.c   **** 
3942:Src/tasks.c   ****         return uxReturn;
3943:Src/tasks.c   ****     }
3944:Src/tasks.c   **** 
3945:Src/tasks.c   **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3946:Src/tasks.c   **** /*-----------------------------------------------------------*/
3947:Src/tasks.c   **** 
3948:Src/tasks.c   **** #if ( INCLUDE_vTaskDelete == 1 )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 72


3949:Src/tasks.c   **** 
3950:Src/tasks.c   ****     static void prvDeleteTCB( TCB_t * pxTCB )
3951:Src/tasks.c   ****     {
3952:Src/tasks.c   ****         /* This call is required specifically for the TriCore port.  It must be
3953:Src/tasks.c   ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3954:Src/tasks.c   ****          * want to allocate and clean RAM statically. */
3955:Src/tasks.c   ****         portCLEAN_UP_TCB( pxTCB );
3956:Src/tasks.c   **** 
3957:Src/tasks.c   ****         /* Free up the memory allocated by the scheduler for the task.  It is up
3958:Src/tasks.c   ****          * to the task to free any memory allocated at the application level.
3959:Src/tasks.c   ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3960:Src/tasks.c   ****          * for additional information. */
3961:Src/tasks.c   ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3962:Src/tasks.c   ****             {
3963:Src/tasks.c   ****                 _reclaim_reent( &( pxTCB->xNewLib_reent ) );
3964:Src/tasks.c   ****             }
3965:Src/tasks.c   ****         #endif /* configUSE_NEWLIB_REENTRANT */
3966:Src/tasks.c   **** 
3967:Src/tasks.c   ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3968:Src/tasks.c   ****             {
3969:Src/tasks.c   ****                 /* The task can only have been allocated dynamically - free both
3970:Src/tasks.c   ****                  * the stack and TCB. */
3971:Src/tasks.c   ****                 vPortFreeStack( pxTCB->pxStack );
3972:Src/tasks.c   ****                 vPortFree( pxTCB );
3973:Src/tasks.c   ****             }
3974:Src/tasks.c   ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3975:Src/tasks.c   ****             {
3976:Src/tasks.c   ****                 /* The task could have been allocated statically or dynamically, so
3977:Src/tasks.c   ****                  * check what was statically allocated before trying to free the
3978:Src/tasks.c   ****                  * memory. */
3979:Src/tasks.c   ****                 if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3980:Src/tasks.c   ****                 {
3981:Src/tasks.c   ****                     /* Both the stack and TCB were allocated dynamically, so both
3982:Src/tasks.c   ****                      * must be freed. */
3983:Src/tasks.c   ****                     vPortFreeStack( pxTCB->pxStack );
3984:Src/tasks.c   ****                     vPortFree( pxTCB );
3985:Src/tasks.c   ****                 }
3986:Src/tasks.c   ****                 else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3987:Src/tasks.c   ****                 {
3988:Src/tasks.c   ****                     /* Only the stack was statically allocated, so the TCB is the
3989:Src/tasks.c   ****                      * only memory that must be freed. */
3990:Src/tasks.c   ****                     vPortFree( pxTCB );
3991:Src/tasks.c   ****                 }
3992:Src/tasks.c   ****                 else
3993:Src/tasks.c   ****                 {
3994:Src/tasks.c   ****                     /* Neither the stack nor the TCB were allocated dynamically, so
3995:Src/tasks.c   ****                      * nothing needs to be freed. */
3996:Src/tasks.c   ****                     configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND
3997:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
3998:Src/tasks.c   ****                 }
3999:Src/tasks.c   ****             }
4000:Src/tasks.c   ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
4001:Src/tasks.c   ****     }
4002:Src/tasks.c   **** 
4003:Src/tasks.c   **** #endif /* INCLUDE_vTaskDelete */
4004:Src/tasks.c   **** /*-----------------------------------------------------------*/
4005:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 73


4006:Src/tasks.c   **** static void prvResetNextTaskUnblockTime( void )
4007:Src/tasks.c   **** {
  97              		.loc 1 4007 1 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
4008:Src/tasks.c   ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 102              		.loc 1 4008 5 view .LVU23
 103              		.loc 1 4008 9 is_stmt 0 view .LVU24
 104 0000 074B     		ldr	r3, .L12
 105 0002 1B68     		ldr	r3, [r3]
 106 0004 1B68     		ldr	r3, [r3]
 107              		.loc 1 4008 7 view .LVU25
 108 0006 23B9     		cbnz	r3, .L10
4009:Src/tasks.c   ****     {
4010:Src/tasks.c   ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4011:Src/tasks.c   ****          * the maximum possible value so it is  extremely unlikely that the
4012:Src/tasks.c   ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4013:Src/tasks.c   ****          * there is an item in the delayed list. */
4014:Src/tasks.c   ****         xNextTaskUnblockTime = portMAX_DELAY;
 109              		.loc 1 4014 9 is_stmt 1 view .LVU26
 110              		.loc 1 4014 30 is_stmt 0 view .LVU27
 111 0008 064B     		ldr	r3, .L12+4
 112 000a 4FF0FF32 		mov	r2, #-1
 113 000e 1A60     		str	r2, [r3]
 114 0010 7047     		bx	lr
 115              	.L10:
4015:Src/tasks.c   ****     }
4016:Src/tasks.c   ****     else
4017:Src/tasks.c   ****     {
4018:Src/tasks.c   ****         /* The new current delayed list is not empty, get the value of
4019:Src/tasks.c   ****          * the item at the head of the delayed list.  This is the time at
4020:Src/tasks.c   ****          * which the task at the head of the delayed list should be removed
4021:Src/tasks.c   ****          * from the Blocked state. */
4022:Src/tasks.c   ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 116              		.loc 1 4022 9 is_stmt 1 view .LVU28
 117              		.loc 1 4022 32 is_stmt 0 view .LVU29
 118 0012 034B     		ldr	r3, .L12
 119 0014 1B68     		ldr	r3, [r3]
 120 0016 DB68     		ldr	r3, [r3, #12]
 121 0018 1A68     		ldr	r2, [r3]
 122              		.loc 1 4022 30 view .LVU30
 123 001a 024B     		ldr	r3, .L12+4
 124 001c 1A60     		str	r2, [r3]
4023:Src/tasks.c   ****     }
4024:Src/tasks.c   **** }
 125              		.loc 1 4024 1 view .LVU31
 126 001e 7047     		bx	lr
 127              	.L13:
 128              		.align	2
 129              	.L12:
 130 0020 00000000 		.word	.LANCHOR2
 131 0024 00000000 		.word	.LANCHOR3
 132              		.cfi_endproc
 133              	.LFE40:
 135              		.section	.text.prvDeleteTCB,"ax",%progbits
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 74


 136              		.align	1
 137              		.syntax unified
 138              		.thumb
 139              		.thumb_func
 140              		.fpu softvfp
 142              	prvDeleteTCB:
 143              	.LVL8:
 144              	.LFB39:
3951:Src/tasks.c   ****         /* This call is required specifically for the TriCore port.  It must be
 145              		.loc 1 3951 5 is_stmt 1 view -0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
3951:Src/tasks.c   ****         /* This call is required specifically for the TriCore port.  It must be
 149              		.loc 1 3951 5 is_stmt 0 view .LVU33
 150 0000 10B5     		push	{r4, lr}
 151              	.LCFI0:
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 4, -8
 154              		.cfi_offset 14, -4
 155 0002 0446     		mov	r4, r0
3955:Src/tasks.c   **** 
 156              		.loc 1 3955 9 is_stmt 1 view .LVU34
3971:Src/tasks.c   ****                 vPortFree( pxTCB );
 157              		.loc 1 3971 17 view .LVU35
 158 0004 006B     		ldr	r0, [r0, #48]
 159              	.LVL9:
3971:Src/tasks.c   ****                 vPortFree( pxTCB );
 160              		.loc 1 3971 17 is_stmt 0 view .LVU36
 161 0006 FFF7FEFF 		bl	vPortFree
 162              	.LVL10:
3972:Src/tasks.c   ****             }
 163              		.loc 1 3972 17 is_stmt 1 view .LVU37
 164 000a 2046     		mov	r0, r4
 165 000c FFF7FEFF 		bl	vPortFree
 166              	.LVL11:
4001:Src/tasks.c   **** 
 167              		.loc 1 4001 5 is_stmt 0 view .LVU38
 168 0010 10BD     		pop	{r4, pc}
4001:Src/tasks.c   **** 
 169              		.loc 1 4001 5 view .LVU39
 170              		.cfi_endproc
 171              	.LFE39:
 173              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 174              		.align	1
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 178              		.fpu softvfp
 180              	prvInitialiseNewTask:
 181              	.LVL12:
 182              	.LFB5:
 827:Src/tasks.c   ****     StackType_t * pxTopOfStack;
 183              		.loc 1 827 1 is_stmt 1 view -0
 184              		.cfi_startproc
 185              		@ args = 16, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 75


 827:Src/tasks.c   ****     StackType_t * pxTopOfStack;
 187              		.loc 1 827 1 is_stmt 0 view .LVU41
 188 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 189              	.LCFI1:
 190              		.cfi_def_cfa_offset 32
 191              		.cfi_offset 4, -32
 192              		.cfi_offset 5, -28
 193              		.cfi_offset 6, -24
 194              		.cfi_offset 7, -20
 195              		.cfi_offset 8, -16
 196              		.cfi_offset 9, -12
 197              		.cfi_offset 10, -8
 198              		.cfi_offset 14, -4
 199 0004 8046     		mov	r8, r0
 200 0006 9946     		mov	r9, r3
 201 0008 089E     		ldr	r6, [sp, #32]
 202 000a DDF824A0 		ldr	r10, [sp, #36]
 203 000e 0A9C     		ldr	r4, [sp, #40]
 828:Src/tasks.c   ****     UBaseType_t x;
 204              		.loc 1 828 5 is_stmt 1 view .LVU42
 829:Src/tasks.c   **** 
 205              		.loc 1 829 5 view .LVU43
 860:Src/tasks.c   ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 206              		.loc 1 860 13 view .LVU44
 860:Src/tasks.c   ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 207              		.loc 1 860 39 is_stmt 0 view .LVU45
 208 0010 276B     		ldr	r7, [r4, #48]
 860:Src/tasks.c   ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 209              		.loc 1 860 48 view .LVU46
 210 0012 02F18042 		add	r2, r2, #1073741824
 211              	.LVL13:
 860:Src/tasks.c   ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 212              		.loc 1 860 48 view .LVU47
 213 0016 013A     		subs	r2, r2, #1
 214              	.LVL14:
 860:Src/tasks.c   ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 215              		.loc 1 860 26 view .LVU48
 216 0018 07EB8207 		add	r7, r7, r2, lsl #2
 217              	.LVL15:
 861:Src/tasks.c   **** 
 218              		.loc 1 861 13 is_stmt 1 view .LVU49
 861:Src/tasks.c   **** 
 219              		.loc 1 861 91 is_stmt 0 view .LVU50
 220 001c 27F00707 		bic	r7, r7, #7
 221              	.LVL16:
 864:Src/tasks.c   **** 
 222              		.loc 1 864 134 is_stmt 1 view .LVU51
 888:Src/tasks.c   ****     {
 223              		.loc 1 888 5 view .LVU52
 888:Src/tasks.c   ****     {
 224              		.loc 1 888 7 is_stmt 0 view .LVU53
 225 0020 79B3     		cbz	r1, .L28
 226 0022 0D46     		mov	r5, r1
 890:Src/tasks.c   ****         {
 227              		.loc 1 890 16 view .LVU54
 228 0024 0022     		movs	r2, #0
 229              	.LVL17:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 76


 230              	.L17:
 890:Src/tasks.c   ****         {
 231              		.loc 1 890 37 is_stmt 1 discriminator 1 view .LVU55
 890:Src/tasks.c   ****         {
 232              		.loc 1 890 9 is_stmt 0 discriminator 1 view .LVU56
 233 0026 0F2A     		cmp	r2, #15
 234 0028 07D8     		bhi	.L19
 892:Src/tasks.c   **** 
 235              		.loc 1 892 13 is_stmt 1 view .LVU57
 892:Src/tasks.c   **** 
 236              		.loc 1 892 47 is_stmt 0 view .LVU58
 237 002a A95C     		ldrb	r1, [r5, r2]	@ zero_extendqisi2
 892:Src/tasks.c   **** 
 238              		.loc 1 892 39 view .LVU59
 239 002c A318     		adds	r3, r4, r2
 240 002e 83F83410 		strb	r1, [r3, #52]
 897:Src/tasks.c   ****             {
 241              		.loc 1 897 13 is_stmt 1 view .LVU60
 897:Src/tasks.c   ****             {
 242              		.loc 1 897 23 is_stmt 0 view .LVU61
 243 0032 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 897:Src/tasks.c   ****             {
 244              		.loc 1 897 15 view .LVU62
 245 0034 0BB1     		cbz	r3, .L19
 903:Src/tasks.c   ****             }
 246              		.loc 1 903 41 is_stmt 1 discriminator 2 view .LVU63
 890:Src/tasks.c   ****         {
 247              		.loc 1 890 82 discriminator 2 view .LVU64
 890:Src/tasks.c   ****         {
 248              		.loc 1 890 83 is_stmt 0 discriminator 2 view .LVU65
 249 0036 0132     		adds	r2, r2, #1
 250              	.LVL18:
 890:Src/tasks.c   ****         {
 251              		.loc 1 890 83 discriminator 2 view .LVU66
 252 0038 F5E7     		b	.L17
 253              	.L19:
 909:Src/tasks.c   ****     }
 254              		.loc 1 909 9 is_stmt 1 view .LVU67
 909:Src/tasks.c   ****     }
 255              		.loc 1 909 61 is_stmt 0 view .LVU68
 256 003a 0023     		movs	r3, #0
 257 003c 84F84330 		strb	r3, [r4, #67]
 258              	.LVL19:
 259              	.L21:
 919:Src/tasks.c   **** 
 260              		.loc 1 919 54 is_stmt 1 view .LVU69
 921:Src/tasks.c   ****     {
 261              		.loc 1 921 5 view .LVU70
 921:Src/tasks.c   ****     {
 262              		.loc 1 921 7 is_stmt 0 view .LVU71
 263 0040 042E     		cmp	r6, #4
 264 0042 00D9     		bls	.L22
 923:Src/tasks.c   ****     }
 265              		.loc 1 923 20 view .LVU72
 266 0044 0426     		movs	r6, #4
 267              	.L22:
 268              	.LVL20:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 77


 927:Src/tasks.c   ****     }
 269              		.loc 1 927 33 is_stmt 1 view .LVU73
 930:Src/tasks.c   ****     #if ( configUSE_MUTEXES == 1 )
 270              		.loc 1 930 5 view .LVU74
 930:Src/tasks.c   ****     #if ( configUSE_MUTEXES == 1 )
 271              		.loc 1 930 26 is_stmt 0 view .LVU75
 272 0046 E662     		str	r6, [r4, #44]
 938:Src/tasks.c   ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 273              		.loc 1 938 5 is_stmt 1 view .LVU76
 274 0048 201D     		adds	r0, r4, #4
 275              	.LVL21:
 938:Src/tasks.c   ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 276              		.loc 1 938 5 is_stmt 0 view .LVU77
 277 004a FFF7FEFF 		bl	vListInitialiseItem
 278              	.LVL22:
 939:Src/tasks.c   **** 
 279              		.loc 1 939 5 is_stmt 1 view .LVU78
 280 004e 04F11800 		add	r0, r4, #24
 281 0052 FFF7FEFF 		bl	vListInitialiseItem
 282              	.LVL23:
 943:Src/tasks.c   **** 
 283              		.loc 1 943 5 view .LVU79
 284 0056 2461     		str	r4, [r4, #16]
 946:Src/tasks.c   ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 285              		.loc 1 946 5 view .LVU80
 286 0058 C6F10506 		rsb	r6, r6, #5
 287              	.LVL24:
 946:Src/tasks.c   ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 288              		.loc 1 946 5 is_stmt 0 view .LVU81
 289 005c A661     		str	r6, [r4, #24]
 947:Src/tasks.c   **** 
 290              		.loc 1 947 5 is_stmt 1 view .LVU82
 291 005e 6462     		str	r4, [r4, #36]
 974:Src/tasks.c   ****         }
 292              		.loc 1 974 13 view .LVU83
 986:Src/tasks.c   ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 293              		.loc 1 986 13 view .LVU84
 294 0060 0023     		movs	r3, #0
 295 0062 6364     		str	r3, [r4, #68]	@ unaligned
 987:Src/tasks.c   ****         }
 296              		.loc 1 987 13 view .LVU85
 297 0064 84F84830 		strb	r3, [r4, #72]
1052:Src/tasks.c   ****                 }
 298              		.loc 1 1052 21 view .LVU86
1052:Src/tasks.c   ****                 }
 299              		.loc 1 1052 46 is_stmt 0 view .LVU87
 300 0068 4A46     		mov	r2, r9
 301 006a 4146     		mov	r1, r8
 302 006c 3846     		mov	r0, r7
 303 006e FFF7FEFF 		bl	pxPortInitialiseStack
 304              	.LVL25:
1052:Src/tasks.c   ****                 }
 305              		.loc 1 1052 44 view .LVU88
 306 0072 2060     		str	r0, [r4]
1058:Src/tasks.c   ****     {
 307              		.loc 1 1058 5 is_stmt 1 view .LVU89
1058:Src/tasks.c   ****     {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 78


 308              		.loc 1 1058 7 is_stmt 0 view .LVU90
 309 0074 BAF1000F 		cmp	r10, #0
 310 0078 01D0     		beq	.L16
1062:Src/tasks.c   ****     }
 311              		.loc 1 1062 9 is_stmt 1 view .LVU91
1062:Src/tasks.c   ****     }
 312              		.loc 1 1062 24 is_stmt 0 view .LVU92
 313 007a CAF80040 		str	r4, [r10]
1066:Src/tasks.c   ****     }
 314              		.loc 1 1066 33 is_stmt 1 view .LVU93
 315              	.L16:
1068:Src/tasks.c   **** /*-----------------------------------------------------------*/
 316              		.loc 1 1068 1 is_stmt 0 view .LVU94
 317 007e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 318              	.LVL26:
 319              	.L28:
 915:Src/tasks.c   ****     }
 320              		.loc 1 915 9 is_stmt 1 view .LVU95
 915:Src/tasks.c   ****     }
 321              		.loc 1 915 35 is_stmt 0 view .LVU96
 322 0082 0023     		movs	r3, #0
 323              	.LVL27:
 915:Src/tasks.c   ****     }
 324              		.loc 1 915 35 view .LVU97
 325 0084 84F83430 		strb	r3, [r4, #52]
 326 0088 DAE7     		b	.L21
 327              		.cfi_endproc
 328              	.LFE5:
 330              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 331              		.align	1
 332              		.syntax unified
 333              		.thumb
 334              		.thumb_func
 335              		.fpu softvfp
 337              	prvInitialiseTaskLists:
 338              	.LFB37:
3667:Src/tasks.c   ****     UBaseType_t uxPriority;
 339              		.loc 1 3667 1 is_stmt 1 view -0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343 0000 38B5     		push	{r3, r4, r5, lr}
 344              	.LCFI2:
 345              		.cfi_def_cfa_offset 16
 346              		.cfi_offset 3, -16
 347              		.cfi_offset 4, -12
 348              		.cfi_offset 5, -8
 349              		.cfi_offset 14, -4
3668:Src/tasks.c   **** 
 350              		.loc 1 3668 5 view .LVU99
3670:Src/tasks.c   ****     {
 351              		.loc 1 3670 5 view .LVU100
 352              	.LVL28:
3670:Src/tasks.c   ****     {
 353              		.loc 1 3670 21 is_stmt 0 view .LVU101
 354 0002 0024     		movs	r4, #0
 355              	.LVL29:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 79


 356              	.L30:
3670:Src/tasks.c   ****     {
 357              		.loc 1 3670 43 is_stmt 1 discriminator 1 view .LVU102
3670:Src/tasks.c   ****     {
 358              		.loc 1 3670 5 is_stmt 0 discriminator 1 view .LVU103
 359 0004 042C     		cmp	r4, #4
 360 0006 08D8     		bhi	.L33
3672:Src/tasks.c   ****     }
 361              		.loc 1 3672 9 is_stmt 1 discriminator 3 view .LVU104
 362 0008 04EB8402 		add	r2, r4, r4, lsl #2
 363 000c 9300     		lsls	r3, r2, #2
 364 000e 0E48     		ldr	r0, .L34
 365 0010 1844     		add	r0, r0, r3
 366 0012 FFF7FEFF 		bl	vListInitialise
 367              	.LVL30:
3670:Src/tasks.c   ****     {
 368              		.loc 1 3670 94 discriminator 3 view .LVU105
3670:Src/tasks.c   ****     {
 369              		.loc 1 3670 104 is_stmt 0 discriminator 3 view .LVU106
 370 0016 0134     		adds	r4, r4, #1
 371              	.LVL31:
3670:Src/tasks.c   ****     {
 372              		.loc 1 3670 104 discriminator 3 view .LVU107
 373 0018 F4E7     		b	.L30
 374              	.L33:
3675:Src/tasks.c   ****     vListInitialise( &xDelayedTaskList2 );
 375              		.loc 1 3675 5 is_stmt 1 view .LVU108
 376 001a 0C4D     		ldr	r5, .L34+4
 377 001c 2846     		mov	r0, r5
 378 001e FFF7FEFF 		bl	vListInitialise
 379              	.LVL32:
3676:Src/tasks.c   ****     vListInitialise( &xPendingReadyList );
 380              		.loc 1 3676 5 view .LVU109
 381 0022 0B4C     		ldr	r4, .L34+8
 382              	.LVL33:
3676:Src/tasks.c   ****     vListInitialise( &xPendingReadyList );
 383              		.loc 1 3676 5 is_stmt 0 view .LVU110
 384 0024 2046     		mov	r0, r4
 385 0026 FFF7FEFF 		bl	vListInitialise
 386              	.LVL34:
3677:Src/tasks.c   **** 
 387              		.loc 1 3677 5 is_stmt 1 view .LVU111
 388 002a 0A48     		ldr	r0, .L34+12
 389 002c FFF7FEFF 		bl	vListInitialise
 390              	.LVL35:
3681:Src/tasks.c   ****         }
 391              		.loc 1 3681 13 view .LVU112
 392 0030 0948     		ldr	r0, .L34+16
 393 0032 FFF7FEFF 		bl	vListInitialise
 394              	.LVL36:
3687:Src/tasks.c   ****         }
 395              		.loc 1 3687 13 view .LVU113
 396 0036 0948     		ldr	r0, .L34+20
 397 0038 FFF7FEFF 		bl	vListInitialise
 398              	.LVL37:
3693:Src/tasks.c   ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 399              		.loc 1 3693 5 view .LVU114
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 80


3693:Src/tasks.c   ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 400              		.loc 1 3693 23 is_stmt 0 view .LVU115
 401 003c 084B     		ldr	r3, .L34+24
 402 003e 1D60     		str	r5, [r3]
3694:Src/tasks.c   **** }
 403              		.loc 1 3694 5 is_stmt 1 view .LVU116
3694:Src/tasks.c   **** }
 404              		.loc 1 3694 31 is_stmt 0 view .LVU117
 405 0040 084B     		ldr	r3, .L34+28
 406 0042 1C60     		str	r4, [r3]
3695:Src/tasks.c   **** /*-----------------------------------------------------------*/
 407              		.loc 1 3695 1 view .LVU118
 408 0044 38BD     		pop	{r3, r4, r5, pc}
 409              	.L35:
 410 0046 00BF     		.align	2
 411              	.L34:
 412 0048 00000000 		.word	.LANCHOR4
 413 004c 00000000 		.word	.LANCHOR5
 414 0050 00000000 		.word	.LANCHOR6
 415 0054 00000000 		.word	.LANCHOR1
 416 0058 00000000 		.word	.LANCHOR7
 417 005c 00000000 		.word	.LANCHOR0
 418 0060 00000000 		.word	.LANCHOR2
 419 0064 00000000 		.word	.LANCHOR8
 420              		.cfi_endproc
 421              	.LFE37:
 423              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 424              		.align	1
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 428              		.fpu softvfp
 430              	prvAddNewTaskToReadyList:
 431              	.LVL38:
 432              	.LFB6:
1072:Src/tasks.c   ****     /* Ensure interrupts don't access the task lists while the lists are being
 433              		.loc 1 1072 1 is_stmt 1 view -0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
1072:Src/tasks.c   ****     /* Ensure interrupts don't access the task lists while the lists are being
 437              		.loc 1 1072 1 is_stmt 0 view .LVU120
 438 0000 10B5     		push	{r4, lr}
 439              	.LCFI3:
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 4, -8
 442              		.cfi_offset 14, -4
 443 0002 0446     		mov	r4, r0
1075:Src/tasks.c   ****     {
 444              		.loc 1 1075 5 is_stmt 1 view .LVU121
 445 0004 FFF7FEFF 		bl	vPortEnterCritical
 446              	.LVL39:
1077:Src/tasks.c   **** 
 447              		.loc 1 1077 9 view .LVU122
1077:Src/tasks.c   **** 
 448              		.loc 1 1077 31 is_stmt 0 view .LVU123
 449 0008 274A     		ldr	r2, .L44
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 81


 450 000a 1368     		ldr	r3, [r2]
 451 000c 0133     		adds	r3, r3, #1
 452 000e 1360     		str	r3, [r2]
1079:Src/tasks.c   ****         {
 453              		.loc 1 1079 9 is_stmt 1 view .LVU124
1079:Src/tasks.c   ****         {
 454              		.loc 1 1079 26 is_stmt 0 view .LVU125
 455 0010 264B     		ldr	r3, .L44+4
 456 0012 1B68     		ldr	r3, [r3]
1079:Src/tasks.c   ****         {
 457              		.loc 1 1079 11 view .LVU126
 458 0014 5BB1     		cbz	r3, .L42
1102:Src/tasks.c   ****             {
 459              		.loc 1 1102 13 is_stmt 1 view .LVU127
1102:Src/tasks.c   ****             {
 460              		.loc 1 1102 35 is_stmt 0 view .LVU128
 461 0016 264B     		ldr	r3, .L44+8
 462 0018 1B68     		ldr	r3, [r3]
1102:Src/tasks.c   ****             {
 463              		.loc 1 1102 15 view .LVU129
 464 001a 6BB9     		cbnz	r3, .L38
1104:Src/tasks.c   ****                 {
 465              		.loc 1 1104 17 is_stmt 1 view .LVU130
1104:Src/tasks.c   ****                 {
 466              		.loc 1 1104 33 is_stmt 0 view .LVU131
 467 001c 234B     		ldr	r3, .L44+4
 468 001e 1B68     		ldr	r3, [r3]
 469 0020 DA6A     		ldr	r2, [r3, #44]
1104:Src/tasks.c   ****                 {
 470              		.loc 1 1104 57 view .LVU132
 471 0022 E36A     		ldr	r3, [r4, #44]
1104:Src/tasks.c   ****                 {
 472              		.loc 1 1104 19 view .LVU133
 473 0024 9A42     		cmp	r2, r3
 474 0026 07D8     		bhi	.L38
1106:Src/tasks.c   ****                 }
 475              		.loc 1 1106 21 is_stmt 1 view .LVU134
1106:Src/tasks.c   ****                 }
 476              		.loc 1 1106 34 is_stmt 0 view .LVU135
 477 0028 204B     		ldr	r3, .L44+4
 478 002a 1C60     		str	r4, [r3]
 479 002c 04E0     		b	.L38
 480              	.L42:
1083:Src/tasks.c   **** 
 481              		.loc 1 1083 13 is_stmt 1 view .LVU136
1083:Src/tasks.c   **** 
 482              		.loc 1 1083 26 is_stmt 0 view .LVU137
 483 002e 1F4B     		ldr	r3, .L44+4
 484 0030 1C60     		str	r4, [r3]
1085:Src/tasks.c   ****             {
 485              		.loc 1 1085 13 is_stmt 1 view .LVU138
1085:Src/tasks.c   ****             {
 486              		.loc 1 1085 40 is_stmt 0 view .LVU139
 487 0032 1368     		ldr	r3, [r2]
1085:Src/tasks.c   ****             {
 488              		.loc 1 1085 15 view .LVU140
 489 0034 012B     		cmp	r3, #1
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 82


 490 0036 34D0     		beq	.L43
 491              	.L38:
1115:Src/tasks.c   ****             }
 492              		.loc 1 1115 41 is_stmt 1 view .LVU141
1119:Src/tasks.c   **** 
 493              		.loc 1 1119 9 view .LVU142
1119:Src/tasks.c   **** 
 494              		.loc 1 1119 21 is_stmt 0 view .LVU143
 495 0038 1E4A     		ldr	r2, .L44+12
 496 003a 1368     		ldr	r3, [r2]
 497 003c 0133     		adds	r3, r3, #1
 498 003e 1360     		str	r3, [r2]
1127:Src/tasks.c   **** 
 499              		.loc 1 1127 37 is_stmt 1 view .LVU144
1129:Src/tasks.c   **** 
 500              		.loc 1 1129 9 view .LVU145
1129:Src/tasks.c   **** 
 501              		.loc 1 1129 9 view .LVU146
 502 0040 E36A     		ldr	r3, [r4, #44]
 503 0042 1D4A     		ldr	r2, .L44+16
 504 0044 1268     		ldr	r2, [r2]
 505 0046 9342     		cmp	r3, r2
 506 0048 01D9     		bls	.L39
1129:Src/tasks.c   **** 
 507              		.loc 1 1129 9 discriminator 1 view .LVU147
 508 004a 1B4A     		ldr	r2, .L44+16
 509 004c 1360     		str	r3, [r2]
 510              	.L39:
1129:Src/tasks.c   **** 
 511              		.loc 1 1129 9 discriminator 3 view .LVU148
 512              	.LBB29:
1129:Src/tasks.c   **** 
 513              		.loc 1 1129 9 discriminator 3 view .LVU149
 514 004e 1B4A     		ldr	r2, .L44+20
 515 0050 03EB8303 		add	r3, r3, r3, lsl #2
 516 0054 02EB8303 		add	r3, r2, r3, lsl #2
 517 0058 5B68     		ldr	r3, [r3, #4]
 518              	.LVL40:
1129:Src/tasks.c   **** 
 519              		.loc 1 1129 9 discriminator 3 view .LVU150
1129:Src/tasks.c   **** 
 520              		.loc 1 1129 9 discriminator 3 view .LVU151
1129:Src/tasks.c   **** 
 521              		.loc 1 1129 9 discriminator 3 view .LVU152
 522 005a A360     		str	r3, [r4, #8]
1129:Src/tasks.c   **** 
 523              		.loc 1 1129 9 discriminator 3 view .LVU153
 524 005c 9868     		ldr	r0, [r3, #8]
 525 005e E060     		str	r0, [r4, #12]
1129:Src/tasks.c   **** 
 526              		.loc 1 1129 9 discriminator 3 view .LVU154
 527 0060 211D     		adds	r1, r4, #4
 528 0062 4160     		str	r1, [r0, #4]
1129:Src/tasks.c   **** 
 529              		.loc 1 1129 9 discriminator 3 view .LVU155
 530 0064 9960     		str	r1, [r3, #8]
1129:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 83


 531              		.loc 1 1129 9 discriminator 3 view .LVU156
 532 0066 E36A     		ldr	r3, [r4, #44]
 533              	.LVL41:
1129:Src/tasks.c   **** 
 534              		.loc 1 1129 9 is_stmt 0 discriminator 3 view .LVU157
 535 0068 03EB8301 		add	r1, r3, r3, lsl #2
 536 006c 8800     		lsls	r0, r1, #2
 537 006e 02EB8101 		add	r1, r2, r1, lsl #2
 538 0072 6161     		str	r1, [r4, #20]
1129:Src/tasks.c   **** 
 539              		.loc 1 1129 9 is_stmt 1 discriminator 3 view .LVU158
 540 0074 1158     		ldr	r1, [r2, r0]
 541 0076 0131     		adds	r1, r1, #1
 542 0078 1150     		str	r1, [r2, r0]
 543              	.LBE29:
1129:Src/tasks.c   **** 
 544              		.loc 1 1129 9 discriminator 3 view .LVU159
1129:Src/tasks.c   **** 
 545              		.loc 1 1129 42 discriminator 3 view .LVU160
1131:Src/tasks.c   ****     }
 546              		.loc 1 1131 9 discriminator 3 view .LVU161
1133:Src/tasks.c   **** 
 547              		.loc 1 1133 5 discriminator 3 view .LVU162
 548 007a FFF7FEFF 		bl	vPortExitCritical
 549              	.LVL42:
1135:Src/tasks.c   ****     {
 550              		.loc 1 1135 5 discriminator 3 view .LVU163
1135:Src/tasks.c   ****     {
 551              		.loc 1 1135 27 is_stmt 0 discriminator 3 view .LVU164
 552 007e 0C4B     		ldr	r3, .L44+8
 553 0080 1B68     		ldr	r3, [r3]
1135:Src/tasks.c   ****     {
 554              		.loc 1 1135 7 discriminator 3 view .LVU165
 555 0082 6BB1     		cbz	r3, .L36
1139:Src/tasks.c   ****         {
 556              		.loc 1 1139 9 is_stmt 1 view .LVU166
1139:Src/tasks.c   ****         {
 557              		.loc 1 1139 25 is_stmt 0 view .LVU167
 558 0084 094B     		ldr	r3, .L44+4
 559 0086 1B68     		ldr	r3, [r3]
 560 0088 DA6A     		ldr	r2, [r3, #44]
1139:Src/tasks.c   ****         {
 561              		.loc 1 1139 48 view .LVU168
 562 008a E36A     		ldr	r3, [r4, #44]
1139:Src/tasks.c   ****         {
 563              		.loc 1 1139 11 view .LVU169
 564 008c 9A42     		cmp	r2, r3
 565 008e 07D2     		bcs	.L36
1141:Src/tasks.c   ****         }
 566              		.loc 1 1141 13 is_stmt 1 view .LVU170
 567 0090 0B4B     		ldr	r3, .L44+24
 568 0092 4FF08052 		mov	r2, #268435456
 569 0096 1A60     		str	r2, [r3]
1141:Src/tasks.c   ****         }
 570              		.loc 1 1141 13 view .LVU171
 571              		.syntax unified
 572              	@ 1141 "Src/tasks.c" 1
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 84


 573 0098 BFF34F8F 		dsb
 574              	@ 0 "" 2
1141:Src/tasks.c   ****         }
 575              		.loc 1 1141 13 view .LVU172
 576              	@ 1141 "Src/tasks.c" 1
 577 009c BFF36F8F 		isb
 578              	@ 0 "" 2
1141:Src/tasks.c   ****         }
 579              		.loc 1 1141 44 view .LVU173
1150:Src/tasks.c   ****     }
 580              		.loc 1 1150 33 view .LVU174
 581              		.thumb
 582              		.syntax unified
 583              	.L36:
1152:Src/tasks.c   **** /*-----------------------------------------------------------*/
 584              		.loc 1 1152 1 is_stmt 0 view .LVU175
 585 00a0 10BD     		pop	{r4, pc}
 586              	.LVL43:
 587              	.L43:
1090:Src/tasks.c   ****             }
 588              		.loc 1 1090 17 is_stmt 1 view .LVU176
 589 00a2 FFF7FEFF 		bl	prvInitialiseTaskLists
 590              	.LVL44:
 591 00a6 C7E7     		b	.L38
 592              	.L45:
 593              		.align	2
 594              	.L44:
 595 00a8 00000000 		.word	.LANCHOR9
 596 00ac 00000000 		.word	.LANCHOR10
 597 00b0 00000000 		.word	.LANCHOR11
 598 00b4 00000000 		.word	.LANCHOR12
 599 00b8 00000000 		.word	.LANCHOR13
 600 00bc 00000000 		.word	.LANCHOR4
 601 00c0 04ED00E0 		.word	-536810236
 602              		.cfi_endproc
 603              	.LFE6:
 605              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 606              		.align	1
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu softvfp
 612              	prvCheckTasksWaitingTermination:
 613              	.LFB38:
3699:Src/tasks.c   ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 614              		.loc 1 3699 1 view -0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              	.LBB30:
3704:Src/tasks.c   **** 
 619              		.loc 1 3704 13 view .LVU178
3708:Src/tasks.c   ****             {
 620              		.loc 1 3708 13 view .LVU179
3708:Src/tasks.c   ****             {
 621              		.loc 1 3708 18 view .LVU180
3708:Src/tasks.c   ****             {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 85


 622              		.loc 1 3708 49 is_stmt 0 view .LVU181
 623 0000 0F4B     		ldr	r3, .L53
 624 0002 1B68     		ldr	r3, [r3]
3708:Src/tasks.c   ****             {
 625              		.loc 1 3708 18 view .LVU182
 626 0004 D3B1     		cbz	r3, .L52
 627              	.LBE30:
3699:Src/tasks.c   ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 628              		.loc 1 3699 1 view .LVU183
 629 0006 10B5     		push	{r4, lr}
 630              	.LCFI4:
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 4, -8
 633              		.cfi_offset 14, -4
 634              	.L48:
 635              	.LBB31:
3710:Src/tasks.c   ****                 {
 636              		.loc 1 3710 17 is_stmt 1 view .LVU184
 637 0008 FFF7FEFF 		bl	vPortEnterCritical
 638              	.LVL45:
3712:Src/tasks.c   ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 639              		.loc 1 3712 21 view .LVU185
3712:Src/tasks.c   ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 640              		.loc 1 3712 29 is_stmt 0 view .LVU186
 641 000c 0D4B     		ldr	r3, .L53+4
 642 000e DB68     		ldr	r3, [r3, #12]
3712:Src/tasks.c   ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 643              		.loc 1 3712 27 view .LVU187
 644 0010 DC68     		ldr	r4, [r3, #12]
 645              	.LVL46:
3713:Src/tasks.c   ****                     --uxCurrentNumberOfTasks;
 646              		.loc 1 3713 21 is_stmt 1 view .LVU188
3713:Src/tasks.c   ****                     --uxCurrentNumberOfTasks;
 647              		.loc 1 3713 30 is_stmt 0 view .LVU189
 648 0012 201D     		adds	r0, r4, #4
 649 0014 FFF7FEFF 		bl	uxListRemove
 650              	.LVL47:
3714:Src/tasks.c   ****                     --uxDeletedTasksWaitingCleanUp;
 651              		.loc 1 3714 21 is_stmt 1 view .LVU190
 652 0018 0B4A     		ldr	r2, .L53+8
 653 001a 1368     		ldr	r3, [r2]
 654 001c 013B     		subs	r3, r3, #1
 655 001e 1360     		str	r3, [r2]
3715:Src/tasks.c   ****                 }
 656              		.loc 1 3715 21 view .LVU191
 657 0020 074A     		ldr	r2, .L53
 658 0022 1368     		ldr	r3, [r2]
 659 0024 013B     		subs	r3, r3, #1
 660 0026 1360     		str	r3, [r2]
3717:Src/tasks.c   **** 
 661              		.loc 1 3717 17 view .LVU192
 662 0028 FFF7FEFF 		bl	vPortExitCritical
 663              	.LVL48:
3719:Src/tasks.c   ****             }
 664              		.loc 1 3719 17 view .LVU193
 665 002c 2046     		mov	r0, r4
 666 002e FFF7FEFF 		bl	prvDeleteTCB
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 86


 667              	.LVL49:
3708:Src/tasks.c   ****             {
 668              		.loc 1 3708 18 view .LVU194
3708:Src/tasks.c   ****             {
 669              		.loc 1 3708 49 is_stmt 0 view .LVU195
 670 0032 034B     		ldr	r3, .L53
 671 0034 1B68     		ldr	r3, [r3]
3708:Src/tasks.c   ****             {
 672              		.loc 1 3708 18 view .LVU196
 673 0036 002B     		cmp	r3, #0
 674 0038 E6D1     		bne	.L48
 675              	.LBE31:
3723:Src/tasks.c   **** /*-----------------------------------------------------------*/
 676              		.loc 1 3723 1 view .LVU197
 677 003a 10BD     		pop	{r4, pc}
 678              	.LVL50:
 679              	.L52:
 680              	.LCFI5:
 681              		.cfi_def_cfa_offset 0
 682              		.cfi_restore 4
 683              		.cfi_restore 14
3723:Src/tasks.c   **** /*-----------------------------------------------------------*/
 684              		.loc 1 3723 1 view .LVU198
 685 003c 7047     		bx	lr
 686              	.L54:
 687 003e 00BF     		.align	2
 688              	.L53:
 689 0040 00000000 		.word	.LANCHOR14
 690 0044 00000000 		.word	.LANCHOR7
 691 0048 00000000 		.word	.LANCHOR9
 692              		.cfi_endproc
 693              	.LFE38:
 695              		.section	.text.prvIdleTask,"ax",%progbits
 696              		.align	1
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 700              		.fpu softvfp
 702              	prvIdleTask:
 703              	.LFB36:
3442:Src/tasks.c   ****     /* Stop warnings. */
 704              		.loc 1 3442 1 is_stmt 1 view -0
 705              		.cfi_startproc
 706              		@ Volatile: function does not return.
 707              		@ args = 0, pretend = 0, frame = 0
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 709              	.LVL51:
3442:Src/tasks.c   ****     /* Stop warnings. */
 710              		.loc 1 3442 1 is_stmt 0 view .LVU200
 711 0000 08B5     		push	{r3, lr}
 712              	.LCFI6:
 713              		.cfi_def_cfa_offset 8
 714              		.cfi_offset 3, -8
 715              		.cfi_offset 14, -4
 716              	.LVL52:
 717              	.L56:
3444:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 87


 718              		.loc 1 3444 5 is_stmt 1 view .LVU201
3452:Src/tasks.c   **** 
 719              		.loc 1 3452 67 view .LVU202
3454:Src/tasks.c   ****     {
 720              		.loc 1 3454 5 view .LVU203
3458:Src/tasks.c   **** 
 721              		.loc 1 3458 9 view .LVU204
 722 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 723              	.LVL53:
3481:Src/tasks.c   ****                 {
 724              		.loc 1 3481 17 view .LVU205
3481:Src/tasks.c   ****                 {
 725              		.loc 1 3481 21 is_stmt 0 view .LVU206
 726 0006 064B     		ldr	r3, .L59
 727 0008 1B68     		ldr	r3, [r3]
3481:Src/tasks.c   ****                 {
 728              		.loc 1 3481 19 view .LVU207
 729 000a 012B     		cmp	r3, #1
 730 000c F9D9     		bls	.L56
3483:Src/tasks.c   ****                 }
 731              		.loc 1 3483 21 is_stmt 1 view .LVU208
 732 000e 054B     		ldr	r3, .L59+4
 733 0010 4FF08052 		mov	r2, #268435456
 734 0014 1A60     		str	r2, [r3]
3483:Src/tasks.c   ****                 }
 735              		.loc 1 3483 21 view .LVU209
 736              		.syntax unified
 737              	@ 3483 "Src/tasks.c" 1
 738 0016 BFF34F8F 		dsb
 739              	@ 0 "" 2
3483:Src/tasks.c   ****                 }
 740              		.loc 1 3483 21 view .LVU210
 741              	@ 3483 "Src/tasks.c" 1
 742 001a BFF36F8F 		isb
 743              	@ 0 "" 2
3483:Src/tasks.c   ****                 }
 744              		.loc 1 3483 32 view .LVU211
 745              		.thumb
 746              		.syntax unified
 747 001e F0E7     		b	.L56
 748              	.L60:
 749              		.align	2
 750              	.L59:
 751 0020 00000000 		.word	.LANCHOR4
 752 0024 04ED00E0 		.word	-536810236
 753              		.cfi_endproc
 754              	.LFE36:
 756              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 757              		.align	1
 758              		.syntax unified
 759              		.thumb
 760              		.thumb_func
 761              		.fpu softvfp
 763              	prvAddCurrentTaskToDelayedList:
 764              	.LVL54:
 765              	.LFB51:
4025:Src/tasks.c   **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 88


4026:Src/tasks.c   **** 
4027:Src/tasks.c   **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4028:Src/tasks.c   **** 
4029:Src/tasks.c   ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4030:Src/tasks.c   ****     {
4031:Src/tasks.c   ****         TaskHandle_t xReturn;
4032:Src/tasks.c   **** 
4033:Src/tasks.c   ****         /* A critical section is not required as this is not called from
4034:Src/tasks.c   ****          * an interrupt and the current TCB will always be the same for any
4035:Src/tasks.c   ****          * individual execution thread. */
4036:Src/tasks.c   ****         xReturn = pxCurrentTCB;
4037:Src/tasks.c   **** 
4038:Src/tasks.c   ****         return xReturn;
4039:Src/tasks.c   ****     }
4040:Src/tasks.c   **** 
4041:Src/tasks.c   **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4042:Src/tasks.c   **** /*-----------------------------------------------------------*/
4043:Src/tasks.c   **** 
4044:Src/tasks.c   **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4045:Src/tasks.c   **** 
4046:Src/tasks.c   ****     BaseType_t xTaskGetSchedulerState( void )
4047:Src/tasks.c   ****     {
4048:Src/tasks.c   ****         BaseType_t xReturn;
4049:Src/tasks.c   **** 
4050:Src/tasks.c   ****         if( xSchedulerRunning == pdFALSE )
4051:Src/tasks.c   ****         {
4052:Src/tasks.c   ****             xReturn = taskSCHEDULER_NOT_STARTED;
4053:Src/tasks.c   ****         }
4054:Src/tasks.c   ****         else
4055:Src/tasks.c   ****         {
4056:Src/tasks.c   ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4057:Src/tasks.c   ****             {
4058:Src/tasks.c   ****                 xReturn = taskSCHEDULER_RUNNING;
4059:Src/tasks.c   ****             }
4060:Src/tasks.c   ****             else
4061:Src/tasks.c   ****             {
4062:Src/tasks.c   ****                 xReturn = taskSCHEDULER_SUSPENDED;
4063:Src/tasks.c   ****             }
4064:Src/tasks.c   ****         }
4065:Src/tasks.c   **** 
4066:Src/tasks.c   ****         return xReturn;
4067:Src/tasks.c   ****     }
4068:Src/tasks.c   **** 
4069:Src/tasks.c   **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4070:Src/tasks.c   **** /*-----------------------------------------------------------*/
4071:Src/tasks.c   **** 
4072:Src/tasks.c   **** #if ( configUSE_MUTEXES == 1 )
4073:Src/tasks.c   **** 
4074:Src/tasks.c   ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4075:Src/tasks.c   ****     {
4076:Src/tasks.c   ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4077:Src/tasks.c   ****         BaseType_t xReturn = pdFALSE;
4078:Src/tasks.c   **** 
4079:Src/tasks.c   ****         /* If the mutex was given back by an interrupt while the queue was
4080:Src/tasks.c   ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4081:Src/tasks.c   ****          * needed as interrupts can no longer use mutexes? */
4082:Src/tasks.c   ****         if( pxMutexHolder != NULL )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 89


4083:Src/tasks.c   ****         {
4084:Src/tasks.c   ****             /* If the holder of the mutex has a priority below the priority of
4085:Src/tasks.c   ****              * the task attempting to obtain the mutex then it will temporarily
4086:Src/tasks.c   ****              * inherit the priority of the task attempting to obtain the mutex. */
4087:Src/tasks.c   ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4088:Src/tasks.c   ****             {
4089:Src/tasks.c   ****                 /* Adjust the mutex holder state to account for its new
4090:Src/tasks.c   ****                  * priority.  Only reset the event list item value if the value is
4091:Src/tasks.c   ****                  * not being used for anything else. */
4092:Src/tasks.c   ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4093:Src/tasks.c   ****                 {
4094:Src/tasks.c   ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4095:Src/tasks.c   ****                 }
4096:Src/tasks.c   ****                 else
4097:Src/tasks.c   ****                 {
4098:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
4099:Src/tasks.c   ****                 }
4100:Src/tasks.c   **** 
4101:Src/tasks.c   ****                 /* If the task being modified is in the ready state it will need
4102:Src/tasks.c   ****                  * to be moved into a new list. */
4103:Src/tasks.c   ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4104:Src/tasks.c   ****                 {
4105:Src/tasks.c   ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4106:Src/tasks.c   ****                     {
4107:Src/tasks.c   ****                         /* It is known that the task is in its ready list so
4108:Src/tasks.c   ****                          * there is no need to check again and the port level
4109:Src/tasks.c   ****                          * reset macro can be called directly. */
4110:Src/tasks.c   ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4111:Src/tasks.c   ****                     }
4112:Src/tasks.c   ****                     else
4113:Src/tasks.c   ****                     {
4114:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
4115:Src/tasks.c   ****                     }
4116:Src/tasks.c   **** 
4117:Src/tasks.c   ****                     /* Inherit the priority before being moved into the new list. */
4118:Src/tasks.c   ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4119:Src/tasks.c   ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4120:Src/tasks.c   ****                 }
4121:Src/tasks.c   ****                 else
4122:Src/tasks.c   ****                 {
4123:Src/tasks.c   ****                     /* Just inherit the priority. */
4124:Src/tasks.c   ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4125:Src/tasks.c   ****                 }
4126:Src/tasks.c   **** 
4127:Src/tasks.c   ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4128:Src/tasks.c   **** 
4129:Src/tasks.c   ****                 /* Inheritance occurred. */
4130:Src/tasks.c   ****                 xReturn = pdTRUE;
4131:Src/tasks.c   ****             }
4132:Src/tasks.c   ****             else
4133:Src/tasks.c   ****             {
4134:Src/tasks.c   ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4135:Src/tasks.c   ****                 {
4136:Src/tasks.c   ****                     /* The base priority of the mutex holder is lower than the
4137:Src/tasks.c   ****                      * priority of the task attempting to take the mutex, but the
4138:Src/tasks.c   ****                      * current priority of the mutex holder is not lower than the
4139:Src/tasks.c   ****                      * priority of the task attempting to take the mutex.
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 90


4140:Src/tasks.c   ****                      * Therefore the mutex holder must have already inherited a
4141:Src/tasks.c   ****                      * priority, but inheritance would have occurred if that had
4142:Src/tasks.c   ****                      * not been the case. */
4143:Src/tasks.c   ****                     xReturn = pdTRUE;
4144:Src/tasks.c   ****                 }
4145:Src/tasks.c   ****                 else
4146:Src/tasks.c   ****                 {
4147:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
4148:Src/tasks.c   ****                 }
4149:Src/tasks.c   ****             }
4150:Src/tasks.c   ****         }
4151:Src/tasks.c   ****         else
4152:Src/tasks.c   ****         {
4153:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
4154:Src/tasks.c   ****         }
4155:Src/tasks.c   **** 
4156:Src/tasks.c   ****         return xReturn;
4157:Src/tasks.c   ****     }
4158:Src/tasks.c   **** 
4159:Src/tasks.c   **** #endif /* configUSE_MUTEXES */
4160:Src/tasks.c   **** /*-----------------------------------------------------------*/
4161:Src/tasks.c   **** 
4162:Src/tasks.c   **** #if ( configUSE_MUTEXES == 1 )
4163:Src/tasks.c   **** 
4164:Src/tasks.c   ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4165:Src/tasks.c   ****     {
4166:Src/tasks.c   ****         TCB_t * const pxTCB = pxMutexHolder;
4167:Src/tasks.c   ****         BaseType_t xReturn = pdFALSE;
4168:Src/tasks.c   **** 
4169:Src/tasks.c   ****         if( pxMutexHolder != NULL )
4170:Src/tasks.c   ****         {
4171:Src/tasks.c   ****             /* A task can only have an inherited priority if it holds the mutex.
4172:Src/tasks.c   ****              * If the mutex is held by a task then it cannot be given from an
4173:Src/tasks.c   ****              * interrupt, and if a mutex is given by the holding task then it must
4174:Src/tasks.c   ****              * be the running state task. */
4175:Src/tasks.c   ****             configASSERT( pxTCB == pxCurrentTCB );
4176:Src/tasks.c   ****             configASSERT( pxTCB->uxMutexesHeld );
4177:Src/tasks.c   ****             ( pxTCB->uxMutexesHeld )--;
4178:Src/tasks.c   **** 
4179:Src/tasks.c   ****             /* Has the holder of the mutex inherited the priority of another
4180:Src/tasks.c   ****              * task? */
4181:Src/tasks.c   ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4182:Src/tasks.c   ****             {
4183:Src/tasks.c   ****                 /* Only disinherit if no other mutexes are held. */
4184:Src/tasks.c   ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4185:Src/tasks.c   ****                 {
4186:Src/tasks.c   ****                     /* A task can only have an inherited priority if it holds
4187:Src/tasks.c   ****                      * the mutex.  If the mutex is held by a task then it cannot be
4188:Src/tasks.c   ****                      * given from an interrupt, and if a mutex is given by the
4189:Src/tasks.c   ****                      * holding task then it must be the running state task.  Remove
4190:Src/tasks.c   ****                      * the holding task from the ready list. */
4191:Src/tasks.c   ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4192:Src/tasks.c   ****                     {
4193:Src/tasks.c   ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4194:Src/tasks.c   ****                     }
4195:Src/tasks.c   ****                     else
4196:Src/tasks.c   ****                     {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 91


4197:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
4198:Src/tasks.c   ****                     }
4199:Src/tasks.c   **** 
4200:Src/tasks.c   ****                     /* Disinherit the priority before adding the task into the
4201:Src/tasks.c   ****                      * new  ready list. */
4202:Src/tasks.c   ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4203:Src/tasks.c   ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4204:Src/tasks.c   **** 
4205:Src/tasks.c   ****                     /* Reset the event list item value.  It cannot be in use for
4206:Src/tasks.c   ****                      * any other purpose if this task is running, and it must be
4207:Src/tasks.c   ****                      * running to give back the mutex. */
4208:Src/tasks.c   ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4209:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
4210:Src/tasks.c   **** 
4211:Src/tasks.c   ****                     /* Return true to indicate that a context switch is required.
4212:Src/tasks.c   ****                      * This is only actually required in the corner case whereby
4213:Src/tasks.c   ****                      * multiple mutexes were held and the mutexes were given back
4214:Src/tasks.c   ****                      * in an order different to that in which they were taken.
4215:Src/tasks.c   ****                      * If a context switch did not occur when the first mutex was
4216:Src/tasks.c   ****                      * returned, even if a task was waiting on it, then a context
4217:Src/tasks.c   ****                      * switch should occur when the last mutex is returned whether
4218:Src/tasks.c   ****                      * a task is waiting on it or not. */
4219:Src/tasks.c   ****                     xReturn = pdTRUE;
4220:Src/tasks.c   ****                 }
4221:Src/tasks.c   ****                 else
4222:Src/tasks.c   ****                 {
4223:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
4224:Src/tasks.c   ****                 }
4225:Src/tasks.c   ****             }
4226:Src/tasks.c   ****             else
4227:Src/tasks.c   ****             {
4228:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
4229:Src/tasks.c   ****             }
4230:Src/tasks.c   ****         }
4231:Src/tasks.c   ****         else
4232:Src/tasks.c   ****         {
4233:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
4234:Src/tasks.c   ****         }
4235:Src/tasks.c   **** 
4236:Src/tasks.c   ****         return xReturn;
4237:Src/tasks.c   ****     }
4238:Src/tasks.c   **** 
4239:Src/tasks.c   **** #endif /* configUSE_MUTEXES */
4240:Src/tasks.c   **** /*-----------------------------------------------------------*/
4241:Src/tasks.c   **** 
4242:Src/tasks.c   **** #if ( configUSE_MUTEXES == 1 )
4243:Src/tasks.c   **** 
4244:Src/tasks.c   ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4245:Src/tasks.c   ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4246:Src/tasks.c   ****     {
4247:Src/tasks.c   ****         TCB_t * const pxTCB = pxMutexHolder;
4248:Src/tasks.c   ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4249:Src/tasks.c   ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4250:Src/tasks.c   **** 
4251:Src/tasks.c   ****         if( pxMutexHolder != NULL )
4252:Src/tasks.c   ****         {
4253:Src/tasks.c   ****             /* If pxMutexHolder is not NULL then the holder must hold at least
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 92


4254:Src/tasks.c   ****              * one mutex. */
4255:Src/tasks.c   ****             configASSERT( pxTCB->uxMutexesHeld );
4256:Src/tasks.c   **** 
4257:Src/tasks.c   ****             /* Determine the priority to which the priority of the task that
4258:Src/tasks.c   ****              * holds the mutex should be set.  This will be the greater of the
4259:Src/tasks.c   ****              * holding task's base priority and the priority of the highest
4260:Src/tasks.c   ****              * priority task that is waiting to obtain the mutex. */
4261:Src/tasks.c   ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4262:Src/tasks.c   ****             {
4263:Src/tasks.c   ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4264:Src/tasks.c   ****             }
4265:Src/tasks.c   ****             else
4266:Src/tasks.c   ****             {
4267:Src/tasks.c   ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4268:Src/tasks.c   ****             }
4269:Src/tasks.c   **** 
4270:Src/tasks.c   ****             /* Does the priority need to change? */
4271:Src/tasks.c   ****             if( pxTCB->uxPriority != uxPriorityToUse )
4272:Src/tasks.c   ****             {
4273:Src/tasks.c   ****                 /* Only disinherit if no other mutexes are held.  This is a
4274:Src/tasks.c   ****                  * simplification in the priority inheritance implementation.  If
4275:Src/tasks.c   ****                  * the task that holds the mutex is also holding other mutexes then
4276:Src/tasks.c   ****                  * the other mutexes may have caused the priority inheritance. */
4277:Src/tasks.c   ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4278:Src/tasks.c   ****                 {
4279:Src/tasks.c   ****                     /* If a task has timed out because it already holds the
4280:Src/tasks.c   ****                      * mutex it was trying to obtain then it cannot of inherited
4281:Src/tasks.c   ****                      * its own priority. */
4282:Src/tasks.c   ****                     configASSERT( pxTCB != pxCurrentTCB );
4283:Src/tasks.c   **** 
4284:Src/tasks.c   ****                     /* Disinherit the priority, remembering the previous
4285:Src/tasks.c   ****                      * priority to facilitate determining the subject task's
4286:Src/tasks.c   ****                      * state. */
4287:Src/tasks.c   ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4288:Src/tasks.c   ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4289:Src/tasks.c   ****                     pxTCB->uxPriority = uxPriorityToUse;
4290:Src/tasks.c   **** 
4291:Src/tasks.c   ****                     /* Only reset the event list item value if the value is not
4292:Src/tasks.c   ****                      * being used for anything else. */
4293:Src/tasks.c   ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
4294:Src/tasks.c   ****                     {
4295:Src/tasks.c   ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4296:Src/tasks.c   ****                     }
4297:Src/tasks.c   ****                     else
4298:Src/tasks.c   ****                     {
4299:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
4300:Src/tasks.c   ****                     }
4301:Src/tasks.c   **** 
4302:Src/tasks.c   ****                     /* If the running task is not the task that holds the mutex
4303:Src/tasks.c   ****                      * then the task that holds the mutex could be in either the
4304:Src/tasks.c   ****                      * Ready, Blocked or Suspended states.  Only remove the task
4305:Src/tasks.c   ****                      * from its current state list if it is in the Ready state as
4306:Src/tasks.c   ****                      * the task's priority is going to change and there is one
4307:Src/tasks.c   ****                      * Ready list per priority. */
4308:Src/tasks.c   ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4309:Src/tasks.c   ****                     {
4310:Src/tasks.c   ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 93


4311:Src/tasks.c   ****                         {
4312:Src/tasks.c   ****                             /* It is known that the task is in its ready list so
4313:Src/tasks.c   ****                              * there is no need to check again and the port level
4314:Src/tasks.c   ****                              * reset macro can be called directly. */
4315:Src/tasks.c   ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4316:Src/tasks.c   ****                         }
4317:Src/tasks.c   ****                         else
4318:Src/tasks.c   ****                         {
4319:Src/tasks.c   ****                             mtCOVERAGE_TEST_MARKER();
4320:Src/tasks.c   ****                         }
4321:Src/tasks.c   **** 
4322:Src/tasks.c   ****                         prvAddTaskToReadyList( pxTCB );
4323:Src/tasks.c   ****                     }
4324:Src/tasks.c   ****                     else
4325:Src/tasks.c   ****                     {
4326:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
4327:Src/tasks.c   ****                     }
4328:Src/tasks.c   ****                 }
4329:Src/tasks.c   ****                 else
4330:Src/tasks.c   ****                 {
4331:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
4332:Src/tasks.c   ****                 }
4333:Src/tasks.c   ****             }
4334:Src/tasks.c   ****             else
4335:Src/tasks.c   ****             {
4336:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
4337:Src/tasks.c   ****             }
4338:Src/tasks.c   ****         }
4339:Src/tasks.c   ****         else
4340:Src/tasks.c   ****         {
4341:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
4342:Src/tasks.c   ****         }
4343:Src/tasks.c   ****     }
4344:Src/tasks.c   **** 
4345:Src/tasks.c   **** #endif /* configUSE_MUTEXES */
4346:Src/tasks.c   **** /*-----------------------------------------------------------*/
4347:Src/tasks.c   **** 
4348:Src/tasks.c   **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4349:Src/tasks.c   **** 
4350:Src/tasks.c   ****     void vTaskEnterCritical( void )
4351:Src/tasks.c   ****     {
4352:Src/tasks.c   ****         portDISABLE_INTERRUPTS();
4353:Src/tasks.c   **** 
4354:Src/tasks.c   ****         if( xSchedulerRunning != pdFALSE )
4355:Src/tasks.c   ****         {
4356:Src/tasks.c   ****             ( pxCurrentTCB->uxCriticalNesting )++;
4357:Src/tasks.c   **** 
4358:Src/tasks.c   ****             /* This is not the interrupt safe version of the enter critical
4359:Src/tasks.c   ****              * function so  assert() if it is being called from an interrupt
4360:Src/tasks.c   ****              * context.  Only API functions that end in "FromISR" can be used in an
4361:Src/tasks.c   ****              * interrupt.  Only assert if the critical nesting count is 1 to
4362:Src/tasks.c   ****              * protect against recursive calls if the assert function also uses a
4363:Src/tasks.c   ****              * critical section. */
4364:Src/tasks.c   ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4365:Src/tasks.c   ****             {
4366:Src/tasks.c   ****                 portASSERT_IF_IN_ISR();
4367:Src/tasks.c   ****             }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 94


4368:Src/tasks.c   ****         }
4369:Src/tasks.c   ****         else
4370:Src/tasks.c   ****         {
4371:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
4372:Src/tasks.c   ****         }
4373:Src/tasks.c   ****     }
4374:Src/tasks.c   **** 
4375:Src/tasks.c   **** #endif /* portCRITICAL_NESTING_IN_TCB */
4376:Src/tasks.c   **** /*-----------------------------------------------------------*/
4377:Src/tasks.c   **** 
4378:Src/tasks.c   **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4379:Src/tasks.c   **** 
4380:Src/tasks.c   ****     void vTaskExitCritical( void )
4381:Src/tasks.c   ****     {
4382:Src/tasks.c   ****         if( xSchedulerRunning != pdFALSE )
4383:Src/tasks.c   ****         {
4384:Src/tasks.c   ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4385:Src/tasks.c   ****             {
4386:Src/tasks.c   ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4387:Src/tasks.c   **** 
4388:Src/tasks.c   ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4389:Src/tasks.c   ****                 {
4390:Src/tasks.c   ****                     portENABLE_INTERRUPTS();
4391:Src/tasks.c   ****                 }
4392:Src/tasks.c   ****                 else
4393:Src/tasks.c   ****                 {
4394:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
4395:Src/tasks.c   ****                 }
4396:Src/tasks.c   ****             }
4397:Src/tasks.c   ****             else
4398:Src/tasks.c   ****             {
4399:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
4400:Src/tasks.c   ****             }
4401:Src/tasks.c   ****         }
4402:Src/tasks.c   ****         else
4403:Src/tasks.c   ****         {
4404:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
4405:Src/tasks.c   ****         }
4406:Src/tasks.c   ****     }
4407:Src/tasks.c   **** 
4408:Src/tasks.c   **** #endif /* portCRITICAL_NESTING_IN_TCB */
4409:Src/tasks.c   **** /*-----------------------------------------------------------*/
4410:Src/tasks.c   **** 
4411:Src/tasks.c   **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4412:Src/tasks.c   **** 
4413:Src/tasks.c   ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4414:Src/tasks.c   ****                                         const char * pcTaskName )
4415:Src/tasks.c   ****     {
4416:Src/tasks.c   ****         size_t x;
4417:Src/tasks.c   **** 
4418:Src/tasks.c   ****         /* Start by copying the entire string. */
4419:Src/tasks.c   ****         strcpy( pcBuffer, pcTaskName );
4420:Src/tasks.c   **** 
4421:Src/tasks.c   ****         /* Pad the end of the string with spaces to ensure columns line up when
4422:Src/tasks.c   ****          * printed out. */
4423:Src/tasks.c   ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4424:Src/tasks.c   ****         {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 95


4425:Src/tasks.c   ****             pcBuffer[ x ] = ' ';
4426:Src/tasks.c   ****         }
4427:Src/tasks.c   **** 
4428:Src/tasks.c   ****         /* Terminate. */
4429:Src/tasks.c   ****         pcBuffer[ x ] = ( char ) 0x00;
4430:Src/tasks.c   **** 
4431:Src/tasks.c   ****         /* Return the new end of string. */
4432:Src/tasks.c   ****         return &( pcBuffer[ x ] );
4433:Src/tasks.c   ****     }
4434:Src/tasks.c   **** 
4435:Src/tasks.c   **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4436:Src/tasks.c   **** /*-----------------------------------------------------------*/
4437:Src/tasks.c   **** 
4438:Src/tasks.c   **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4439:Src/tasks.c   **** 
4440:Src/tasks.c   ****     void vTaskList( char * pcWriteBuffer )
4441:Src/tasks.c   ****     {
4442:Src/tasks.c   ****         TaskStatus_t * pxTaskStatusArray;
4443:Src/tasks.c   ****         UBaseType_t uxArraySize, x;
4444:Src/tasks.c   ****         char cStatus;
4445:Src/tasks.c   **** 
4446:Src/tasks.c   ****         /*
4447:Src/tasks.c   ****          * PLEASE NOTE:
4448:Src/tasks.c   ****          *
4449:Src/tasks.c   ****          * This function is provided for convenience only, and is used by many
4450:Src/tasks.c   ****          * of the demo applications.  Do not consider it to be part of the
4451:Src/tasks.c   ****          * scheduler.
4452:Src/tasks.c   ****          *
4453:Src/tasks.c   ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4454:Src/tasks.c   ****          * uxTaskGetSystemState() output into a human readable table that
4455:Src/tasks.c   ****          * displays task: names, states, priority, stack usage and task number.
4456:Src/tasks.c   ****          * Stack usage specified as the number of unused StackType_t words stack can hold
4457:Src/tasks.c   ****          * on top of stack - not the number of bytes.
4458:Src/tasks.c   ****          *
4459:Src/tasks.c   ****          * vTaskList() has a dependency on the sprintf() C library function that
4460:Src/tasks.c   ****          * might bloat the code size, use a lot of stack, and provide different
4461:Src/tasks.c   ****          * results on different platforms.  An alternative, tiny, third party,
4462:Src/tasks.c   ****          * and limited functionality implementation of sprintf() is provided in
4463:Src/tasks.c   ****          * many of the FreeRTOS/Demo sub-directories in a file called
4464:Src/tasks.c   ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4465:Src/tasks.c   ****          * snprintf() implementation!).
4466:Src/tasks.c   ****          *
4467:Src/tasks.c   ****          * It is recommended that production systems call uxTaskGetSystemState()
4468:Src/tasks.c   ****          * directly to get access to raw stats data, rather than indirectly
4469:Src/tasks.c   ****          * through a call to vTaskList().
4470:Src/tasks.c   ****          */
4471:Src/tasks.c   **** 
4472:Src/tasks.c   **** 
4473:Src/tasks.c   ****         /* Make sure the write buffer does not contain a string. */
4474:Src/tasks.c   ****         *pcWriteBuffer = ( char ) 0x00;
4475:Src/tasks.c   **** 
4476:Src/tasks.c   ****         /* Take a snapshot of the number of tasks in case it changes while this
4477:Src/tasks.c   ****          * function is executing. */
4478:Src/tasks.c   ****         uxArraySize = uxCurrentNumberOfTasks;
4479:Src/tasks.c   **** 
4480:Src/tasks.c   ****         /* Allocate an array index for each task.  NOTE!  if
4481:Src/tasks.c   ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 96


4482:Src/tasks.c   ****          * equate to NULL. */
4483:Src/tasks.c   ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4484:Src/tasks.c   **** 
4485:Src/tasks.c   ****         if( pxTaskStatusArray != NULL )
4486:Src/tasks.c   ****         {
4487:Src/tasks.c   ****             /* Generate the (binary) data. */
4488:Src/tasks.c   ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4489:Src/tasks.c   **** 
4490:Src/tasks.c   ****             /* Create a human readable table from the binary data. */
4491:Src/tasks.c   ****             for( x = 0; x < uxArraySize; x++ )
4492:Src/tasks.c   ****             {
4493:Src/tasks.c   ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4494:Src/tasks.c   ****                 {
4495:Src/tasks.c   ****                     case eRunning:
4496:Src/tasks.c   ****                         cStatus = tskRUNNING_CHAR;
4497:Src/tasks.c   ****                         break;
4498:Src/tasks.c   **** 
4499:Src/tasks.c   ****                     case eReady:
4500:Src/tasks.c   ****                         cStatus = tskREADY_CHAR;
4501:Src/tasks.c   ****                         break;
4502:Src/tasks.c   **** 
4503:Src/tasks.c   ****                     case eBlocked:
4504:Src/tasks.c   ****                         cStatus = tskBLOCKED_CHAR;
4505:Src/tasks.c   ****                         break;
4506:Src/tasks.c   **** 
4507:Src/tasks.c   ****                     case eSuspended:
4508:Src/tasks.c   ****                         cStatus = tskSUSPENDED_CHAR;
4509:Src/tasks.c   ****                         break;
4510:Src/tasks.c   **** 
4511:Src/tasks.c   ****                     case eDeleted:
4512:Src/tasks.c   ****                         cStatus = tskDELETED_CHAR;
4513:Src/tasks.c   ****                         break;
4514:Src/tasks.c   **** 
4515:Src/tasks.c   ****                     case eInvalid: /* Fall through. */
4516:Src/tasks.c   ****                     default:       /* Should not get here, but it is included
4517:Src/tasks.c   ****                                     * to prevent static checking errors. */
4518:Src/tasks.c   ****                         cStatus = ( char ) 0x00;
4519:Src/tasks.c   ****                         break;
4520:Src/tasks.c   ****                 }
4521:Src/tasks.c   **** 
4522:Src/tasks.c   ****                 /* Write the task name to the string, padding with spaces so it
4523:Src/tasks.c   ****                  * can be printed in tabular form more easily. */
4524:Src/tasks.c   ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4525:Src/tasks.c   **** 
4526:Src/tasks.c   ****                 /* Write the rest of the string. */
4527:Src/tasks.c   ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4528:Src/tasks.c   ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4529:Src/tasks.c   ****             }
4530:Src/tasks.c   **** 
4531:Src/tasks.c   ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4532:Src/tasks.c   ****              * is 0 then vPortFree() will be #defined to nothing. */
4533:Src/tasks.c   ****             vPortFree( pxTaskStatusArray );
4534:Src/tasks.c   ****         }
4535:Src/tasks.c   ****         else
4536:Src/tasks.c   ****         {
4537:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
4538:Src/tasks.c   ****         }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 97


4539:Src/tasks.c   ****     }
4540:Src/tasks.c   **** 
4541:Src/tasks.c   **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4542:Src/tasks.c   **** /*----------------------------------------------------------*/
4543:Src/tasks.c   **** 
4544:Src/tasks.c   **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4545:Src/tasks.c   **** 
4546:Src/tasks.c   ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4547:Src/tasks.c   ****     {
4548:Src/tasks.c   ****         TaskStatus_t * pxTaskStatusArray;
4549:Src/tasks.c   ****         UBaseType_t uxArraySize, x;
4550:Src/tasks.c   ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulStatsAsPercentage;
4551:Src/tasks.c   **** 
4552:Src/tasks.c   ****         #if ( configUSE_TRACE_FACILITY != 1 )
4553:Src/tasks.c   ****             {
4554:Src/tasks.c   ****                 #error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vT
4555:Src/tasks.c   ****             }
4556:Src/tasks.c   ****         #endif
4557:Src/tasks.c   **** 
4558:Src/tasks.c   ****         /*
4559:Src/tasks.c   ****          * PLEASE NOTE:
4560:Src/tasks.c   ****          *
4561:Src/tasks.c   ****          * This function is provided for convenience only, and is used by many
4562:Src/tasks.c   ****          * of the demo applications.  Do not consider it to be part of the
4563:Src/tasks.c   ****          * scheduler.
4564:Src/tasks.c   ****          *
4565:Src/tasks.c   ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4566:Src/tasks.c   ****          * of the uxTaskGetSystemState() output into a human readable table that
4567:Src/tasks.c   ****          * displays the amount of time each task has spent in the Running state
4568:Src/tasks.c   ****          * in both absolute and percentage terms.
4569:Src/tasks.c   ****          *
4570:Src/tasks.c   ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4571:Src/tasks.c   ****          * function that might bloat the code size, use a lot of stack, and
4572:Src/tasks.c   ****          * provide different results on different platforms.  An alternative,
4573:Src/tasks.c   ****          * tiny, third party, and limited functionality implementation of
4574:Src/tasks.c   ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4575:Src/tasks.c   ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4576:Src/tasks.c   ****          * a full snprintf() implementation!).
4577:Src/tasks.c   ****          *
4578:Src/tasks.c   ****          * It is recommended that production systems call uxTaskGetSystemState()
4579:Src/tasks.c   ****          * directly to get access to raw stats data, rather than indirectly
4580:Src/tasks.c   ****          * through a call to vTaskGetRunTimeStats().
4581:Src/tasks.c   ****          */
4582:Src/tasks.c   **** 
4583:Src/tasks.c   ****         /* Make sure the write buffer does not contain a string. */
4584:Src/tasks.c   ****         *pcWriteBuffer = ( char ) 0x00;
4585:Src/tasks.c   **** 
4586:Src/tasks.c   ****         /* Take a snapshot of the number of tasks in case it changes while this
4587:Src/tasks.c   ****          * function is executing. */
4588:Src/tasks.c   ****         uxArraySize = uxCurrentNumberOfTasks;
4589:Src/tasks.c   **** 
4590:Src/tasks.c   ****         /* Allocate an array index for each task.  NOTE!  If
4591:Src/tasks.c   ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4592:Src/tasks.c   ****          * equate to NULL. */
4593:Src/tasks.c   ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4594:Src/tasks.c   **** 
4595:Src/tasks.c   ****         if( pxTaskStatusArray != NULL )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 98


4596:Src/tasks.c   ****         {
4597:Src/tasks.c   ****             /* Generate the (binary) data. */
4598:Src/tasks.c   ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4599:Src/tasks.c   **** 
4600:Src/tasks.c   ****             /* For percentage calculations. */
4601:Src/tasks.c   ****             ulTotalTime /= 100UL;
4602:Src/tasks.c   **** 
4603:Src/tasks.c   ****             /* Avoid divide by zero errors. */
4604:Src/tasks.c   ****             if( ulTotalTime > 0UL )
4605:Src/tasks.c   ****             {
4606:Src/tasks.c   ****                 /* Create a human readable table from the binary data. */
4607:Src/tasks.c   ****                 for( x = 0; x < uxArraySize; x++ )
4608:Src/tasks.c   ****                 {
4609:Src/tasks.c   ****                     /* What percentage of the total run time has the task used?
4610:Src/tasks.c   ****                      * This will always be rounded down to the nearest integer.
4611:Src/tasks.c   ****                      * ulTotalRunTime has already been divided by 100. */
4612:Src/tasks.c   ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4613:Src/tasks.c   **** 
4614:Src/tasks.c   ****                     /* Write the task name to the string, padding with
4615:Src/tasks.c   ****                      * spaces so it can be printed in tabular form more
4616:Src/tasks.c   ****                      * easily. */
4617:Src/tasks.c   ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4618:Src/tasks.c   **** 
4619:Src/tasks.c   ****                     if( ulStatsAsPercentage > 0UL )
4620:Src/tasks.c   ****                     {
4621:Src/tasks.c   ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4622:Src/tasks.c   ****                             {
4623:Src/tasks.c   ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x 
4624:Src/tasks.c   ****                             }
4625:Src/tasks.c   ****                         #else
4626:Src/tasks.c   ****                             {
4627:Src/tasks.c   ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4628:Src/tasks.c   ****                                  * printf() library can be used. */
4629:Src/tasks.c   ****                                 sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTask
4630:Src/tasks.c   ****                             }
4631:Src/tasks.c   ****                         #endif
4632:Src/tasks.c   ****                     }
4633:Src/tasks.c   ****                     else
4634:Src/tasks.c   ****                     {
4635:Src/tasks.c   ****                         /* If the percentage is zero here then the task has
4636:Src/tasks.c   ****                          * consumed less than 1% of the total run time. */
4637:Src/tasks.c   ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4638:Src/tasks.c   ****                             {
4639:Src/tasks.c   ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ]
4640:Src/tasks.c   ****                             }
4641:Src/tasks.c   ****                         #else
4642:Src/tasks.c   ****                             {
4643:Src/tasks.c   ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4644:Src/tasks.c   ****                                  * printf() library can be used. */
4645:Src/tasks.c   ****                                 sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTask
4646:Src/tasks.c   ****                             }
4647:Src/tasks.c   ****                         #endif
4648:Src/tasks.c   ****                     }
4649:Src/tasks.c   **** 
4650:Src/tasks.c   ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4651:Src/tasks.c   ****                 }
4652:Src/tasks.c   ****             }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 99


4653:Src/tasks.c   ****             else
4654:Src/tasks.c   ****             {
4655:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
4656:Src/tasks.c   ****             }
4657:Src/tasks.c   **** 
4658:Src/tasks.c   ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4659:Src/tasks.c   ****              * is 0 then vPortFree() will be #defined to nothing. */
4660:Src/tasks.c   ****             vPortFree( pxTaskStatusArray );
4661:Src/tasks.c   ****         }
4662:Src/tasks.c   ****         else
4663:Src/tasks.c   ****         {
4664:Src/tasks.c   ****             mtCOVERAGE_TEST_MARKER();
4665:Src/tasks.c   ****         }
4666:Src/tasks.c   ****     }
4667:Src/tasks.c   **** 
4668:Src/tasks.c   **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4669:Src/tasks.c   **** /*-----------------------------------------------------------*/
4670:Src/tasks.c   **** 
4671:Src/tasks.c   **** TickType_t uxTaskResetEventItemValue( void )
4672:Src/tasks.c   **** {
4673:Src/tasks.c   ****     TickType_t uxReturn;
4674:Src/tasks.c   **** 
4675:Src/tasks.c   ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4676:Src/tasks.c   **** 
4677:Src/tasks.c   ****     /* Reset the event list item to its normal value - so it can be used with
4678:Src/tasks.c   ****      * queues and semaphores. */
4679:Src/tasks.c   ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4680:Src/tasks.c   **** 
4681:Src/tasks.c   ****     return uxReturn;
4682:Src/tasks.c   **** }
4683:Src/tasks.c   **** /*-----------------------------------------------------------*/
4684:Src/tasks.c   **** 
4685:Src/tasks.c   **** #if ( configUSE_MUTEXES == 1 )
4686:Src/tasks.c   **** 
4687:Src/tasks.c   ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4688:Src/tasks.c   ****     {
4689:Src/tasks.c   ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4690:Src/tasks.c   ****          * then pxCurrentTCB will be NULL. */
4691:Src/tasks.c   ****         if( pxCurrentTCB != NULL )
4692:Src/tasks.c   ****         {
4693:Src/tasks.c   ****             ( pxCurrentTCB->uxMutexesHeld )++;
4694:Src/tasks.c   ****         }
4695:Src/tasks.c   **** 
4696:Src/tasks.c   ****         return pxCurrentTCB;
4697:Src/tasks.c   ****     }
4698:Src/tasks.c   **** 
4699:Src/tasks.c   **** #endif /* configUSE_MUTEXES */
4700:Src/tasks.c   **** /*-----------------------------------------------------------*/
4701:Src/tasks.c   **** 
4702:Src/tasks.c   **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4703:Src/tasks.c   **** 
4704:Src/tasks.c   ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4705:Src/tasks.c   ****                                       BaseType_t xClearCountOnExit,
4706:Src/tasks.c   ****                                       TickType_t xTicksToWait )
4707:Src/tasks.c   ****     {
4708:Src/tasks.c   ****         uint32_t ulReturn;
4709:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 100


4710:Src/tasks.c   ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4711:Src/tasks.c   **** 
4712:Src/tasks.c   ****         taskENTER_CRITICAL();
4713:Src/tasks.c   ****         {
4714:Src/tasks.c   ****             /* Only block if the notification count is not already non-zero. */
4715:Src/tasks.c   ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4716:Src/tasks.c   ****             {
4717:Src/tasks.c   ****                 /* Mark this task as waiting for a notification. */
4718:Src/tasks.c   ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4719:Src/tasks.c   **** 
4720:Src/tasks.c   ****                 if( xTicksToWait > ( TickType_t ) 0 )
4721:Src/tasks.c   ****                 {
4722:Src/tasks.c   ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:Src/tasks.c   ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4724:Src/tasks.c   **** 
4725:Src/tasks.c   ****                     /* All ports are written to allow a yield in a critical
4726:Src/tasks.c   ****                      * section (some will yield immediately, others wait until the
4727:Src/tasks.c   ****                      * critical section exits) - but it is not something that
4728:Src/tasks.c   ****                      * application code should ever do. */
4729:Src/tasks.c   ****                     portYIELD_WITHIN_API();
4730:Src/tasks.c   ****                 }
4731:Src/tasks.c   ****                 else
4732:Src/tasks.c   ****                 {
4733:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
4734:Src/tasks.c   ****                 }
4735:Src/tasks.c   ****             }
4736:Src/tasks.c   ****             else
4737:Src/tasks.c   ****             {
4738:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
4739:Src/tasks.c   ****             }
4740:Src/tasks.c   ****         }
4741:Src/tasks.c   ****         taskEXIT_CRITICAL();
4742:Src/tasks.c   **** 
4743:Src/tasks.c   ****         taskENTER_CRITICAL();
4744:Src/tasks.c   ****         {
4745:Src/tasks.c   ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4746:Src/tasks.c   ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4747:Src/tasks.c   **** 
4748:Src/tasks.c   ****             if( ulReturn != 0UL )
4749:Src/tasks.c   ****             {
4750:Src/tasks.c   ****                 if( xClearCountOnExit != pdFALSE )
4751:Src/tasks.c   ****                 {
4752:Src/tasks.c   ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4753:Src/tasks.c   ****                 }
4754:Src/tasks.c   ****                 else
4755:Src/tasks.c   ****                 {
4756:Src/tasks.c   ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4757:Src/tasks.c   ****                 }
4758:Src/tasks.c   ****             }
4759:Src/tasks.c   ****             else
4760:Src/tasks.c   ****             {
4761:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
4762:Src/tasks.c   ****             }
4763:Src/tasks.c   **** 
4764:Src/tasks.c   ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4765:Src/tasks.c   ****         }
4766:Src/tasks.c   ****         taskEXIT_CRITICAL();
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 101


4767:Src/tasks.c   **** 
4768:Src/tasks.c   ****         return ulReturn;
4769:Src/tasks.c   ****     }
4770:Src/tasks.c   **** 
4771:Src/tasks.c   **** #endif /* configUSE_TASK_NOTIFICATIONS */
4772:Src/tasks.c   **** /*-----------------------------------------------------------*/
4773:Src/tasks.c   **** 
4774:Src/tasks.c   **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4775:Src/tasks.c   **** 
4776:Src/tasks.c   ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4777:Src/tasks.c   ****                                        uint32_t ulBitsToClearOnEntry,
4778:Src/tasks.c   ****                                        uint32_t ulBitsToClearOnExit,
4779:Src/tasks.c   ****                                        uint32_t * pulNotificationValue,
4780:Src/tasks.c   ****                                        TickType_t xTicksToWait )
4781:Src/tasks.c   ****     {
4782:Src/tasks.c   ****         BaseType_t xReturn;
4783:Src/tasks.c   **** 
4784:Src/tasks.c   ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4785:Src/tasks.c   **** 
4786:Src/tasks.c   ****         taskENTER_CRITICAL();
4787:Src/tasks.c   ****         {
4788:Src/tasks.c   ****             /* Only block if a notification is not already pending. */
4789:Src/tasks.c   ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4790:Src/tasks.c   ****             {
4791:Src/tasks.c   ****                 /* Clear bits in the task's notification value as bits may get
4792:Src/tasks.c   ****                  * set  by the notifying task or interrupt.  This can be used to
4793:Src/tasks.c   ****                  * clear the value to zero. */
4794:Src/tasks.c   ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
4795:Src/tasks.c   **** 
4796:Src/tasks.c   ****                 /* Mark this task as waiting for a notification. */
4797:Src/tasks.c   ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4798:Src/tasks.c   **** 
4799:Src/tasks.c   ****                 if( xTicksToWait > ( TickType_t ) 0 )
4800:Src/tasks.c   ****                 {
4801:Src/tasks.c   ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4802:Src/tasks.c   ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4803:Src/tasks.c   **** 
4804:Src/tasks.c   ****                     /* All ports are written to allow a yield in a critical
4805:Src/tasks.c   ****                      * section (some will yield immediately, others wait until the
4806:Src/tasks.c   ****                      * critical section exits) - but it is not something that
4807:Src/tasks.c   ****                      * application code should ever do. */
4808:Src/tasks.c   ****                     portYIELD_WITHIN_API();
4809:Src/tasks.c   ****                 }
4810:Src/tasks.c   ****                 else
4811:Src/tasks.c   ****                 {
4812:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
4813:Src/tasks.c   ****                 }
4814:Src/tasks.c   ****             }
4815:Src/tasks.c   ****             else
4816:Src/tasks.c   ****             {
4817:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
4818:Src/tasks.c   ****             }
4819:Src/tasks.c   ****         }
4820:Src/tasks.c   ****         taskEXIT_CRITICAL();
4821:Src/tasks.c   **** 
4822:Src/tasks.c   ****         taskENTER_CRITICAL();
4823:Src/tasks.c   ****         {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 102


4824:Src/tasks.c   ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4825:Src/tasks.c   **** 
4826:Src/tasks.c   ****             if( pulNotificationValue != NULL )
4827:Src/tasks.c   ****             {
4828:Src/tasks.c   ****                 /* Output the current notification value, which may or may not
4829:Src/tasks.c   ****                  * have changed. */
4830:Src/tasks.c   ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4831:Src/tasks.c   ****             }
4832:Src/tasks.c   **** 
4833:Src/tasks.c   ****             /* If ucNotifyValue is set then either the task never entered the
4834:Src/tasks.c   ****              * blocked state (because a notification was already pending) or the
4835:Src/tasks.c   ****              * task unblocked because of a notification.  Otherwise the task
4836:Src/tasks.c   ****              * unblocked because of a timeout. */
4837:Src/tasks.c   ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4838:Src/tasks.c   ****             {
4839:Src/tasks.c   ****                 /* A notification was not received. */
4840:Src/tasks.c   ****                 xReturn = pdFALSE;
4841:Src/tasks.c   ****             }
4842:Src/tasks.c   ****             else
4843:Src/tasks.c   ****             {
4844:Src/tasks.c   ****                 /* A notification was already pending or a notification was
4845:Src/tasks.c   ****                  * received while the task was waiting. */
4846:Src/tasks.c   ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4847:Src/tasks.c   ****                 xReturn = pdTRUE;
4848:Src/tasks.c   ****             }
4849:Src/tasks.c   **** 
4850:Src/tasks.c   ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4851:Src/tasks.c   ****         }
4852:Src/tasks.c   ****         taskEXIT_CRITICAL();
4853:Src/tasks.c   **** 
4854:Src/tasks.c   ****         return xReturn;
4855:Src/tasks.c   ****     }
4856:Src/tasks.c   **** 
4857:Src/tasks.c   **** #endif /* configUSE_TASK_NOTIFICATIONS */
4858:Src/tasks.c   **** /*-----------------------------------------------------------*/
4859:Src/tasks.c   **** 
4860:Src/tasks.c   **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4861:Src/tasks.c   **** 
4862:Src/tasks.c   ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4863:Src/tasks.c   ****                                    UBaseType_t uxIndexToNotify,
4864:Src/tasks.c   ****                                    uint32_t ulValue,
4865:Src/tasks.c   ****                                    eNotifyAction eAction,
4866:Src/tasks.c   ****                                    uint32_t * pulPreviousNotificationValue )
4867:Src/tasks.c   ****     {
4868:Src/tasks.c   ****         TCB_t * pxTCB;
4869:Src/tasks.c   ****         BaseType_t xReturn = pdPASS;
4870:Src/tasks.c   ****         uint8_t ucOriginalNotifyState;
4871:Src/tasks.c   **** 
4872:Src/tasks.c   ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4873:Src/tasks.c   ****         configASSERT( xTaskToNotify );
4874:Src/tasks.c   ****         pxTCB = xTaskToNotify;
4875:Src/tasks.c   **** 
4876:Src/tasks.c   ****         taskENTER_CRITICAL();
4877:Src/tasks.c   ****         {
4878:Src/tasks.c   ****             if( pulPreviousNotificationValue != NULL )
4879:Src/tasks.c   ****             {
4880:Src/tasks.c   ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 103


4881:Src/tasks.c   ****             }
4882:Src/tasks.c   **** 
4883:Src/tasks.c   ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4884:Src/tasks.c   **** 
4885:Src/tasks.c   ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4886:Src/tasks.c   **** 
4887:Src/tasks.c   ****             switch( eAction )
4888:Src/tasks.c   ****             {
4889:Src/tasks.c   ****                 case eSetBits:
4890:Src/tasks.c   ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4891:Src/tasks.c   ****                     break;
4892:Src/tasks.c   **** 
4893:Src/tasks.c   ****                 case eIncrement:
4894:Src/tasks.c   ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4895:Src/tasks.c   ****                     break;
4896:Src/tasks.c   **** 
4897:Src/tasks.c   ****                 case eSetValueWithOverwrite:
4898:Src/tasks.c   ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4899:Src/tasks.c   ****                     break;
4900:Src/tasks.c   **** 
4901:Src/tasks.c   ****                 case eSetValueWithoutOverwrite:
4902:Src/tasks.c   **** 
4903:Src/tasks.c   ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4904:Src/tasks.c   ****                     {
4905:Src/tasks.c   ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4906:Src/tasks.c   ****                     }
4907:Src/tasks.c   ****                     else
4908:Src/tasks.c   ****                     {
4909:Src/tasks.c   ****                         /* The value could not be written to the task. */
4910:Src/tasks.c   ****                         xReturn = pdFAIL;
4911:Src/tasks.c   ****                     }
4912:Src/tasks.c   **** 
4913:Src/tasks.c   ****                     break;
4914:Src/tasks.c   **** 
4915:Src/tasks.c   ****                 case eNoAction:
4916:Src/tasks.c   **** 
4917:Src/tasks.c   ****                     /* The task is being notified without its notify value being
4918:Src/tasks.c   ****                      * updated. */
4919:Src/tasks.c   ****                     break;
4920:Src/tasks.c   **** 
4921:Src/tasks.c   ****                 default:
4922:Src/tasks.c   **** 
4923:Src/tasks.c   ****                     /* Should not get here if all enums are handled.
4924:Src/tasks.c   ****                      * Artificially force an assert by testing a value the
4925:Src/tasks.c   ****                      * compiler can't assume is const. */
4926:Src/tasks.c   ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
4927:Src/tasks.c   **** 
4928:Src/tasks.c   ****                     break;
4929:Src/tasks.c   ****             }
4930:Src/tasks.c   **** 
4931:Src/tasks.c   ****             traceTASK_NOTIFY( uxIndexToNotify );
4932:Src/tasks.c   **** 
4933:Src/tasks.c   ****             /* If the task is in the blocked state specifically to wait for a
4934:Src/tasks.c   ****              * notification then unblock it now. */
4935:Src/tasks.c   ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4936:Src/tasks.c   ****             {
4937:Src/tasks.c   ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 104


4938:Src/tasks.c   ****                 prvAddTaskToReadyList( pxTCB );
4939:Src/tasks.c   **** 
4940:Src/tasks.c   ****                 /* The task should not have been on an event list. */
4941:Src/tasks.c   ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4942:Src/tasks.c   **** 
4943:Src/tasks.c   ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4944:Src/tasks.c   ****                     {
4945:Src/tasks.c   ****                         /* If a task is blocked waiting for a notification then
4946:Src/tasks.c   ****                          * xNextTaskUnblockTime might be set to the blocked task's time
4947:Src/tasks.c   ****                          * out time.  If the task is unblocked for a reason other than
4948:Src/tasks.c   ****                          * a timeout xNextTaskUnblockTime is normally left unchanged,
4949:Src/tasks.c   ****                          * because it will automatically get reset to a new value when
4950:Src/tasks.c   ****                          * the tick count equals xNextTaskUnblockTime.  However if
4951:Src/tasks.c   ****                          * tickless idling is used it might be more important to enter
4952:Src/tasks.c   ****                          * sleep mode at the earliest possible time - so reset
4953:Src/tasks.c   ****                          * xNextTaskUnblockTime here to ensure it is updated at the
4954:Src/tasks.c   ****                          * earliest possible time. */
4955:Src/tasks.c   ****                         prvResetNextTaskUnblockTime();
4956:Src/tasks.c   ****                     }
4957:Src/tasks.c   ****                 #endif
4958:Src/tasks.c   **** 
4959:Src/tasks.c   ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4960:Src/tasks.c   ****                 {
4961:Src/tasks.c   ****                     /* The notified task has a priority above the currently
4962:Src/tasks.c   ****                      * executing task so a yield is required. */
4963:Src/tasks.c   ****                     taskYIELD_IF_USING_PREEMPTION();
4964:Src/tasks.c   ****                 }
4965:Src/tasks.c   ****                 else
4966:Src/tasks.c   ****                 {
4967:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
4968:Src/tasks.c   ****                 }
4969:Src/tasks.c   ****             }
4970:Src/tasks.c   ****             else
4971:Src/tasks.c   ****             {
4972:Src/tasks.c   ****                 mtCOVERAGE_TEST_MARKER();
4973:Src/tasks.c   ****             }
4974:Src/tasks.c   ****         }
4975:Src/tasks.c   ****         taskEXIT_CRITICAL();
4976:Src/tasks.c   **** 
4977:Src/tasks.c   ****         return xReturn;
4978:Src/tasks.c   ****     }
4979:Src/tasks.c   **** 
4980:Src/tasks.c   **** #endif /* configUSE_TASK_NOTIFICATIONS */
4981:Src/tasks.c   **** /*-----------------------------------------------------------*/
4982:Src/tasks.c   **** 
4983:Src/tasks.c   **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4984:Src/tasks.c   **** 
4985:Src/tasks.c   ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4986:Src/tasks.c   ****                                           UBaseType_t uxIndexToNotify,
4987:Src/tasks.c   ****                                           uint32_t ulValue,
4988:Src/tasks.c   ****                                           eNotifyAction eAction,
4989:Src/tasks.c   ****                                           uint32_t * pulPreviousNotificationValue,
4990:Src/tasks.c   ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4991:Src/tasks.c   ****     {
4992:Src/tasks.c   ****         TCB_t * pxTCB;
4993:Src/tasks.c   ****         uint8_t ucOriginalNotifyState;
4994:Src/tasks.c   ****         BaseType_t xReturn = pdPASS;
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 105


4995:Src/tasks.c   ****         UBaseType_t uxSavedInterruptStatus;
4996:Src/tasks.c   **** 
4997:Src/tasks.c   ****         configASSERT( xTaskToNotify );
4998:Src/tasks.c   ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4999:Src/tasks.c   **** 
5000:Src/tasks.c   ****         /* RTOS ports that support interrupt nesting have the concept of a
5001:Src/tasks.c   ****          * maximum  system call (or maximum API call) interrupt priority.
5002:Src/tasks.c   ****          * Interrupts that are  above the maximum system call priority are keep
5003:Src/tasks.c   ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5004:Src/tasks.c   ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5005:Src/tasks.c   ****          * is defined in FreeRTOSConfig.h then
5006:Src/tasks.c   ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5007:Src/tasks.c   ****          * failure if a FreeRTOS API function is called from an interrupt that has
5008:Src/tasks.c   ****          * been assigned a priority above the configured maximum system call
5009:Src/tasks.c   ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5010:Src/tasks.c   ****          * from interrupts  that have been assigned a priority at or (logically)
5011:Src/tasks.c   ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5012:Src/tasks.c   ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5013:Src/tasks.c   ****          * simple as possible.  More information (albeit Cortex-M specific) is
5014:Src/tasks.c   ****          * provided on the following link:
5015:Src/tasks.c   ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5016:Src/tasks.c   ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5017:Src/tasks.c   **** 
5018:Src/tasks.c   ****         pxTCB = xTaskToNotify;
5019:Src/tasks.c   **** 
5020:Src/tasks.c   ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5021:Src/tasks.c   ****         {
5022:Src/tasks.c   ****             if( pulPreviousNotificationValue != NULL )
5023:Src/tasks.c   ****             {
5024:Src/tasks.c   ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
5025:Src/tasks.c   ****             }
5026:Src/tasks.c   **** 
5027:Src/tasks.c   ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5028:Src/tasks.c   ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5029:Src/tasks.c   **** 
5030:Src/tasks.c   ****             switch( eAction )
5031:Src/tasks.c   ****             {
5032:Src/tasks.c   ****                 case eSetBits:
5033:Src/tasks.c   ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
5034:Src/tasks.c   ****                     break;
5035:Src/tasks.c   **** 
5036:Src/tasks.c   ****                 case eIncrement:
5037:Src/tasks.c   ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5038:Src/tasks.c   ****                     break;
5039:Src/tasks.c   **** 
5040:Src/tasks.c   ****                 case eSetValueWithOverwrite:
5041:Src/tasks.c   ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5042:Src/tasks.c   ****                     break;
5043:Src/tasks.c   **** 
5044:Src/tasks.c   ****                 case eSetValueWithoutOverwrite:
5045:Src/tasks.c   **** 
5046:Src/tasks.c   ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5047:Src/tasks.c   ****                     {
5048:Src/tasks.c   ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5049:Src/tasks.c   ****                     }
5050:Src/tasks.c   ****                     else
5051:Src/tasks.c   ****                     {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 106


5052:Src/tasks.c   ****                         /* The value could not be written to the task. */
5053:Src/tasks.c   ****                         xReturn = pdFAIL;
5054:Src/tasks.c   ****                     }
5055:Src/tasks.c   **** 
5056:Src/tasks.c   ****                     break;
5057:Src/tasks.c   **** 
5058:Src/tasks.c   ****                 case eNoAction:
5059:Src/tasks.c   **** 
5060:Src/tasks.c   ****                     /* The task is being notified without its notify value being
5061:Src/tasks.c   ****                      * updated. */
5062:Src/tasks.c   ****                     break;
5063:Src/tasks.c   **** 
5064:Src/tasks.c   ****                 default:
5065:Src/tasks.c   **** 
5066:Src/tasks.c   ****                     /* Should not get here if all enums are handled.
5067:Src/tasks.c   ****                      * Artificially force an assert by testing a value the
5068:Src/tasks.c   ****                      * compiler can't assume is const. */
5069:Src/tasks.c   ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5070:Src/tasks.c   ****                     break;
5071:Src/tasks.c   ****             }
5072:Src/tasks.c   **** 
5073:Src/tasks.c   ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5074:Src/tasks.c   **** 
5075:Src/tasks.c   ****             /* If the task is in the blocked state specifically to wait for a
5076:Src/tasks.c   ****              * notification then unblock it now. */
5077:Src/tasks.c   ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5078:Src/tasks.c   ****             {
5079:Src/tasks.c   ****                 /* The task should not have been on an event list. */
5080:Src/tasks.c   ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5081:Src/tasks.c   **** 
5082:Src/tasks.c   ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5083:Src/tasks.c   ****                 {
5084:Src/tasks.c   ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5085:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
5086:Src/tasks.c   ****                 }
5087:Src/tasks.c   ****                 else
5088:Src/tasks.c   ****                 {
5089:Src/tasks.c   ****                     /* The delayed and ready lists cannot be accessed, so hold
5090:Src/tasks.c   ****                      * this task pending until the scheduler is resumed. */
5091:Src/tasks.c   ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5092:Src/tasks.c   ****                 }
5093:Src/tasks.c   **** 
5094:Src/tasks.c   ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5095:Src/tasks.c   ****                 {
5096:Src/tasks.c   ****                     /* The notified task has a priority above the currently
5097:Src/tasks.c   ****                      * executing task so a yield is required. */
5098:Src/tasks.c   ****                     if( pxHigherPriorityTaskWoken != NULL )
5099:Src/tasks.c   ****                     {
5100:Src/tasks.c   ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5101:Src/tasks.c   ****                     }
5102:Src/tasks.c   **** 
5103:Src/tasks.c   ****                     /* Mark that a yield is pending in case the user is not
5104:Src/tasks.c   ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5105:Src/tasks.c   ****                      * safe FreeRTOS function. */
5106:Src/tasks.c   ****                     xYieldPending = pdTRUE;
5107:Src/tasks.c   ****                 }
5108:Src/tasks.c   ****                 else
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 107


5109:Src/tasks.c   ****                 {
5110:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
5111:Src/tasks.c   ****                 }
5112:Src/tasks.c   ****             }
5113:Src/tasks.c   ****         }
5114:Src/tasks.c   ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5115:Src/tasks.c   **** 
5116:Src/tasks.c   ****         return xReturn;
5117:Src/tasks.c   ****     }
5118:Src/tasks.c   **** 
5119:Src/tasks.c   **** #endif /* configUSE_TASK_NOTIFICATIONS */
5120:Src/tasks.c   **** /*-----------------------------------------------------------*/
5121:Src/tasks.c   **** 
5122:Src/tasks.c   **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5123:Src/tasks.c   **** 
5124:Src/tasks.c   ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5125:Src/tasks.c   ****                                         UBaseType_t uxIndexToNotify,
5126:Src/tasks.c   ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5127:Src/tasks.c   ****     {
5128:Src/tasks.c   ****         TCB_t * pxTCB;
5129:Src/tasks.c   ****         uint8_t ucOriginalNotifyState;
5130:Src/tasks.c   ****         UBaseType_t uxSavedInterruptStatus;
5131:Src/tasks.c   **** 
5132:Src/tasks.c   ****         configASSERT( xTaskToNotify );
5133:Src/tasks.c   ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5134:Src/tasks.c   **** 
5135:Src/tasks.c   ****         /* RTOS ports that support interrupt nesting have the concept of a
5136:Src/tasks.c   ****          * maximum  system call (or maximum API call) interrupt priority.
5137:Src/tasks.c   ****          * Interrupts that are  above the maximum system call priority are keep
5138:Src/tasks.c   ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5139:Src/tasks.c   ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5140:Src/tasks.c   ****          * is defined in FreeRTOSConfig.h then
5141:Src/tasks.c   ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5142:Src/tasks.c   ****          * failure if a FreeRTOS API function is called from an interrupt that has
5143:Src/tasks.c   ****          * been assigned a priority above the configured maximum system call
5144:Src/tasks.c   ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5145:Src/tasks.c   ****          * from interrupts  that have been assigned a priority at or (logically)
5146:Src/tasks.c   ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5147:Src/tasks.c   ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5148:Src/tasks.c   ****          * simple as possible.  More information (albeit Cortex-M specific) is
5149:Src/tasks.c   ****          * provided on the following link:
5150:Src/tasks.c   ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5151:Src/tasks.c   ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5152:Src/tasks.c   **** 
5153:Src/tasks.c   ****         pxTCB = xTaskToNotify;
5154:Src/tasks.c   **** 
5155:Src/tasks.c   ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5156:Src/tasks.c   ****         {
5157:Src/tasks.c   ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5158:Src/tasks.c   ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5159:Src/tasks.c   **** 
5160:Src/tasks.c   ****             /* 'Giving' is equivalent to incrementing a count in a counting
5161:Src/tasks.c   ****              * semaphore. */
5162:Src/tasks.c   ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5163:Src/tasks.c   **** 
5164:Src/tasks.c   ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5165:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 108


5166:Src/tasks.c   ****             /* If the task is in the blocked state specifically to wait for a
5167:Src/tasks.c   ****              * notification then unblock it now. */
5168:Src/tasks.c   ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5169:Src/tasks.c   ****             {
5170:Src/tasks.c   ****                 /* The task should not have been on an event list. */
5171:Src/tasks.c   ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5172:Src/tasks.c   **** 
5173:Src/tasks.c   ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5174:Src/tasks.c   ****                 {
5175:Src/tasks.c   ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5176:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
5177:Src/tasks.c   ****                 }
5178:Src/tasks.c   ****                 else
5179:Src/tasks.c   ****                 {
5180:Src/tasks.c   ****                     /* The delayed and ready lists cannot be accessed, so hold
5181:Src/tasks.c   ****                      * this task pending until the scheduler is resumed. */
5182:Src/tasks.c   ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5183:Src/tasks.c   ****                 }
5184:Src/tasks.c   **** 
5185:Src/tasks.c   ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5186:Src/tasks.c   ****                 {
5187:Src/tasks.c   ****                     /* The notified task has a priority above the currently
5188:Src/tasks.c   ****                      * executing task so a yield is required. */
5189:Src/tasks.c   ****                     if( pxHigherPriorityTaskWoken != NULL )
5190:Src/tasks.c   ****                     {
5191:Src/tasks.c   ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5192:Src/tasks.c   ****                     }
5193:Src/tasks.c   **** 
5194:Src/tasks.c   ****                     /* Mark that a yield is pending in case the user is not
5195:Src/tasks.c   ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5196:Src/tasks.c   ****                      * safe FreeRTOS function. */
5197:Src/tasks.c   ****                     xYieldPending = pdTRUE;
5198:Src/tasks.c   ****                 }
5199:Src/tasks.c   ****                 else
5200:Src/tasks.c   ****                 {
5201:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
5202:Src/tasks.c   ****                 }
5203:Src/tasks.c   ****             }
5204:Src/tasks.c   ****         }
5205:Src/tasks.c   ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5206:Src/tasks.c   ****     }
5207:Src/tasks.c   **** 
5208:Src/tasks.c   **** #endif /* configUSE_TASK_NOTIFICATIONS */
5209:Src/tasks.c   **** /*-----------------------------------------------------------*/
5210:Src/tasks.c   **** 
5211:Src/tasks.c   **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5212:Src/tasks.c   **** 
5213:Src/tasks.c   ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5214:Src/tasks.c   ****                                              UBaseType_t uxIndexToClear )
5215:Src/tasks.c   ****     {
5216:Src/tasks.c   ****         TCB_t * pxTCB;
5217:Src/tasks.c   ****         BaseType_t xReturn;
5218:Src/tasks.c   **** 
5219:Src/tasks.c   ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5220:Src/tasks.c   **** 
5221:Src/tasks.c   ****         /* If null is passed in here then it is the calling task that is having
5222:Src/tasks.c   ****          * its notification state cleared. */
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 109


5223:Src/tasks.c   ****         pxTCB = prvGetTCBFromHandle( xTask );
5224:Src/tasks.c   **** 
5225:Src/tasks.c   ****         taskENTER_CRITICAL();
5226:Src/tasks.c   ****         {
5227:Src/tasks.c   ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5228:Src/tasks.c   ****             {
5229:Src/tasks.c   ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5230:Src/tasks.c   ****                 xReturn = pdPASS;
5231:Src/tasks.c   ****             }
5232:Src/tasks.c   ****             else
5233:Src/tasks.c   ****             {
5234:Src/tasks.c   ****                 xReturn = pdFAIL;
5235:Src/tasks.c   ****             }
5236:Src/tasks.c   ****         }
5237:Src/tasks.c   ****         taskEXIT_CRITICAL();
5238:Src/tasks.c   **** 
5239:Src/tasks.c   ****         return xReturn;
5240:Src/tasks.c   ****     }
5241:Src/tasks.c   **** 
5242:Src/tasks.c   **** #endif /* configUSE_TASK_NOTIFICATIONS */
5243:Src/tasks.c   **** /*-----------------------------------------------------------*/
5244:Src/tasks.c   **** 
5245:Src/tasks.c   **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5246:Src/tasks.c   **** 
5247:Src/tasks.c   ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5248:Src/tasks.c   ****                                             UBaseType_t uxIndexToClear,
5249:Src/tasks.c   ****                                             uint32_t ulBitsToClear )
5250:Src/tasks.c   ****     {
5251:Src/tasks.c   ****         TCB_t * pxTCB;
5252:Src/tasks.c   ****         uint32_t ulReturn;
5253:Src/tasks.c   **** 
5254:Src/tasks.c   ****         /* If null is passed in here then it is the calling task that is having
5255:Src/tasks.c   ****          * its notification state cleared. */
5256:Src/tasks.c   ****         pxTCB = prvGetTCBFromHandle( xTask );
5257:Src/tasks.c   **** 
5258:Src/tasks.c   ****         taskENTER_CRITICAL();
5259:Src/tasks.c   ****         {
5260:Src/tasks.c   ****             /* Return the notification as it was before the bits were cleared,
5261:Src/tasks.c   ****              * then clear the bit mask. */
5262:Src/tasks.c   ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5263:Src/tasks.c   ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5264:Src/tasks.c   ****         }
5265:Src/tasks.c   ****         taskEXIT_CRITICAL();
5266:Src/tasks.c   **** 
5267:Src/tasks.c   ****         return ulReturn;
5268:Src/tasks.c   ****     }
5269:Src/tasks.c   **** 
5270:Src/tasks.c   **** #endif /* configUSE_TASK_NOTIFICATIONS */
5271:Src/tasks.c   **** /*-----------------------------------------------------------*/
5272:Src/tasks.c   **** 
5273:Src/tasks.c   **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5274:Src/tasks.c   **** 
5275:Src/tasks.c   ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
5276:Src/tasks.c   ****     {
5277:Src/tasks.c   ****         return xIdleTaskHandle->ulRunTimeCounter;
5278:Src/tasks.c   ****     }
5279:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 110


5280:Src/tasks.c   **** #endif
5281:Src/tasks.c   **** /*-----------------------------------------------------------*/
5282:Src/tasks.c   **** 
5283:Src/tasks.c   **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5284:Src/tasks.c   **** 
5285:Src/tasks.c   ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
5286:Src/tasks.c   ****     {
5287:Src/tasks.c   ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
5288:Src/tasks.c   **** 
5289:Src/tasks.c   ****         ulTotalTime = portGET_RUN_TIME_COUNTER_VALUE();
5290:Src/tasks.c   **** 
5291:Src/tasks.c   ****         /* For percentage calculations. */
5292:Src/tasks.c   ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
5293:Src/tasks.c   **** 
5294:Src/tasks.c   ****         /* Avoid divide by zero errors. */
5295:Src/tasks.c   ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
5296:Src/tasks.c   ****         {
5297:Src/tasks.c   ****             ulReturn = xIdleTaskHandle->ulRunTimeCounter / ulTotalTime;
5298:Src/tasks.c   ****         }
5299:Src/tasks.c   ****         else
5300:Src/tasks.c   ****         {
5301:Src/tasks.c   ****             ulReturn = 0;
5302:Src/tasks.c   ****         }
5303:Src/tasks.c   **** 
5304:Src/tasks.c   ****         return ulReturn;
5305:Src/tasks.c   ****     }
5306:Src/tasks.c   **** 
5307:Src/tasks.c   **** #endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) 
5308:Src/tasks.c   **** /*-----------------------------------------------------------*/
5309:Src/tasks.c   **** 
5310:Src/tasks.c   **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5311:Src/tasks.c   ****                                             const BaseType_t xCanBlockIndefinitely )
5312:Src/tasks.c   **** {
 766              		.loc 1 5312 1 view -0
 767              		.cfi_startproc
 768              		@ args = 0, pretend = 0, frame = 0
 769              		@ frame_needed = 0, uses_anonymous_args = 0
 770              		.loc 1 5312 1 is_stmt 0 view .LVU213
 771 0000 70B5     		push	{r4, r5, r6, lr}
 772              	.LCFI7:
 773              		.cfi_def_cfa_offset 16
 774              		.cfi_offset 4, -16
 775              		.cfi_offset 5, -12
 776              		.cfi_offset 6, -8
 777              		.cfi_offset 14, -4
 778 0002 0446     		mov	r4, r0
 779 0004 0D46     		mov	r5, r1
5313:Src/tasks.c   ****     TickType_t xTimeToWake;
 780              		.loc 1 5313 5 is_stmt 1 view .LVU214
5314:Src/tasks.c   ****     const TickType_t xConstTickCount = xTickCount;
 781              		.loc 1 5314 5 view .LVU215
 782              		.loc 1 5314 22 is_stmt 0 view .LVU216
 783 0006 1E4B     		ldr	r3, .L67
 784 0008 1E68     		ldr	r6, [r3]
 785              	.LVL55:
5315:Src/tasks.c   **** 
5316:Src/tasks.c   ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 111


5317:Src/tasks.c   ****         {
5318:Src/tasks.c   ****             /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5319:Src/tasks.c   ****              * reset to pdFALSE so it can be detected as having been set to pdTRUE
5320:Src/tasks.c   ****              * when the task leaves the Blocked state. */
5321:Src/tasks.c   ****             pxCurrentTCB->ucDelayAborted = pdFALSE;
5322:Src/tasks.c   ****         }
5323:Src/tasks.c   ****     #endif
5324:Src/tasks.c   **** 
5325:Src/tasks.c   ****     /* Remove the task from the ready list before adding it to the blocked list
5326:Src/tasks.c   ****      * as the same list item is used for both lists. */
5327:Src/tasks.c   ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 786              		.loc 1 5327 5 is_stmt 1 view .LVU217
 787              		.loc 1 5327 38 is_stmt 0 view .LVU218
 788 000a 1E4B     		ldr	r3, .L67+4
 789 000c 1868     		ldr	r0, [r3]
 790              	.LVL56:
 791              		.loc 1 5327 9 view .LVU219
 792 000e 0430     		adds	r0, r0, #4
 793 0010 FFF7FEFF 		bl	uxListRemove
 794              	.LVL57:
5328:Src/tasks.c   ****     {
5329:Src/tasks.c   ****         /* The current task must be in a ready list, so there is no need to
5330:Src/tasks.c   ****          * check, and the port reset macro can be called directly. */
5331:Src/tasks.c   ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
5332:Src/tasks.c   ****     }
5333:Src/tasks.c   ****     else
5334:Src/tasks.c   ****     {
5335:Src/tasks.c   ****         mtCOVERAGE_TEST_MARKER();
 795              		.loc 1 5335 33 is_stmt 1 view .LVU220
5336:Src/tasks.c   ****     }
5337:Src/tasks.c   **** 
5338:Src/tasks.c   ****     #if ( INCLUDE_vTaskSuspend == 1 )
5339:Src/tasks.c   ****         {
5340:Src/tasks.c   ****             if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 796              		.loc 1 5340 13 view .LVU221
 797              		.loc 1 5340 15 is_stmt 0 view .LVU222
 798 0014 B4F1FF3F 		cmp	r4, #-1
 799 0018 0DD0     		beq	.L66
 800              	.L62:
5341:Src/tasks.c   ****             {
5342:Src/tasks.c   ****                 /* Add the task to the suspended task list instead of a delayed task
5343:Src/tasks.c   ****                  * list to ensure it is not woken by a timing event.  It will block
5344:Src/tasks.c   ****                  * indefinitely. */
5345:Src/tasks.c   ****                 listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5346:Src/tasks.c   ****             }
5347:Src/tasks.c   ****             else
5348:Src/tasks.c   ****             {
5349:Src/tasks.c   ****                 /* Calculate the time at which the task should be woken if the event
5350:Src/tasks.c   ****                  * does not occur.  This may overflow but this doesn't matter, the
5351:Src/tasks.c   ****                  * kernel will manage it correctly. */
5352:Src/tasks.c   ****                 xTimeToWake = xConstTickCount + xTicksToWait;
 801              		.loc 1 5352 17 is_stmt 1 view .LVU223
 802              		.loc 1 5352 29 is_stmt 0 view .LVU224
 803 001a 3444     		add	r4, r4, r6
 804              	.LVL58:
5353:Src/tasks.c   **** 
5354:Src/tasks.c   ****                 /* The list item will be inserted in wake time order. */
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 112


5355:Src/tasks.c   ****                 listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 805              		.loc 1 5355 17 is_stmt 1 view .LVU225
 806 001c 194B     		ldr	r3, .L67+4
 807 001e 1B68     		ldr	r3, [r3]
 808 0020 5C60     		str	r4, [r3, #4]
5356:Src/tasks.c   **** 
5357:Src/tasks.c   ****                 if( xTimeToWake < xConstTickCount )
 809              		.loc 1 5357 17 view .LVU226
 810              		.loc 1 5357 19 is_stmt 0 view .LVU227
 811 0022 A642     		cmp	r6, r4
 812 0024 1DD9     		bls	.L64
5358:Src/tasks.c   ****                 {
5359:Src/tasks.c   ****                     /* Wake time has overflowed.  Place this item in the overflow
5360:Src/tasks.c   ****                      * list. */
5361:Src/tasks.c   ****                     vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 813              		.loc 1 5361 21 is_stmt 1 view .LVU228
 814 0026 184B     		ldr	r3, .L67+8
 815 0028 1868     		ldr	r0, [r3]
 816              		.loc 1 5361 76 is_stmt 0 view .LVU229
 817 002a 164B     		ldr	r3, .L67+4
 818 002c 1968     		ldr	r1, [r3]
 819              		.loc 1 5361 21 view .LVU230
 820 002e 0431     		adds	r1, r1, #4
 821 0030 FFF7FEFF 		bl	vListInsert
 822              	.LVL59:
 823              	.L61:
5362:Src/tasks.c   ****                 }
5363:Src/tasks.c   ****                 else
5364:Src/tasks.c   ****                 {
5365:Src/tasks.c   ****                     /* The wake time has not overflowed, so the current block list
5366:Src/tasks.c   ****                      * is used. */
5367:Src/tasks.c   ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5368:Src/tasks.c   **** 
5369:Src/tasks.c   ****                     /* If the task entering the blocked state was placed at the
5370:Src/tasks.c   ****                      * head of the list of blocked tasks then xNextTaskUnblockTime
5371:Src/tasks.c   ****                      * needs to be updated too. */
5372:Src/tasks.c   ****                     if( xTimeToWake < xNextTaskUnblockTime )
5373:Src/tasks.c   ****                     {
5374:Src/tasks.c   ****                         xNextTaskUnblockTime = xTimeToWake;
5375:Src/tasks.c   ****                     }
5376:Src/tasks.c   ****                     else
5377:Src/tasks.c   ****                     {
5378:Src/tasks.c   ****                         mtCOVERAGE_TEST_MARKER();
5379:Src/tasks.c   ****                     }
5380:Src/tasks.c   ****                 }
5381:Src/tasks.c   ****             }
5382:Src/tasks.c   ****         }
5383:Src/tasks.c   ****     #else /* INCLUDE_vTaskSuspend */
5384:Src/tasks.c   ****         {
5385:Src/tasks.c   ****             /* Calculate the time at which the task should be woken if the event
5386:Src/tasks.c   ****              * does not occur.  This may overflow but this doesn't matter, the kernel
5387:Src/tasks.c   ****              * will manage it correctly. */
5388:Src/tasks.c   ****             xTimeToWake = xConstTickCount + xTicksToWait;
5389:Src/tasks.c   **** 
5390:Src/tasks.c   ****             /* The list item will be inserted in wake time order. */
5391:Src/tasks.c   ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5392:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 113


5393:Src/tasks.c   ****             if( xTimeToWake < xConstTickCount )
5394:Src/tasks.c   ****             {
5395:Src/tasks.c   ****                 /* Wake time has overflowed.  Place this item in the overflow list. */
5396:Src/tasks.c   ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5397:Src/tasks.c   ****             }
5398:Src/tasks.c   ****             else
5399:Src/tasks.c   ****             {
5400:Src/tasks.c   ****                 /* The wake time has not overflowed, so the current block list is used. */
5401:Src/tasks.c   ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5402:Src/tasks.c   **** 
5403:Src/tasks.c   ****                 /* If the task entering the blocked state was placed at the head of the
5404:Src/tasks.c   ****                  * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5405:Src/tasks.c   ****                  * too. */
5406:Src/tasks.c   ****                 if( xTimeToWake < xNextTaskUnblockTime )
5407:Src/tasks.c   ****                 {
5408:Src/tasks.c   ****                     xNextTaskUnblockTime = xTimeToWake;
5409:Src/tasks.c   ****                 }
5410:Src/tasks.c   ****                 else
5411:Src/tasks.c   ****                 {
5412:Src/tasks.c   ****                     mtCOVERAGE_TEST_MARKER();
5413:Src/tasks.c   ****                 }
5414:Src/tasks.c   ****             }
5415:Src/tasks.c   **** 
5416:Src/tasks.c   ****             /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5417:Src/tasks.c   ****             ( void ) xCanBlockIndefinitely;
5418:Src/tasks.c   ****         }
5419:Src/tasks.c   ****     #endif /* INCLUDE_vTaskSuspend */
5420:Src/tasks.c   **** }
 824              		.loc 1 5420 1 view .LVU231
 825 0034 70BD     		pop	{r4, r5, r6, pc}
 826              	.LVL60:
 827              	.L66:
5340:Src/tasks.c   ****             {
 828              		.loc 1 5340 51 discriminator 1 view .LVU232
 829 0036 002D     		cmp	r5, #0
 830 0038 EFD0     		beq	.L62
 831              	.LBB32:
5345:Src/tasks.c   ****             }
 832              		.loc 1 5345 17 is_stmt 1 view .LVU233
 833 003a 144A     		ldr	r2, .L67+12
 834 003c 5168     		ldr	r1, [r2, #4]
 835              	.LVL61:
5345:Src/tasks.c   ****             }
 836              		.loc 1 5345 17 view .LVU234
5345:Src/tasks.c   ****             }
 837              		.loc 1 5345 17 view .LVU235
5345:Src/tasks.c   ****             }
 838              		.loc 1 5345 17 view .LVU236
 839 003e 114B     		ldr	r3, .L67+4
 840 0040 1868     		ldr	r0, [r3]
 841 0042 8160     		str	r1, [r0, #8]
5345:Src/tasks.c   ****             }
 842              		.loc 1 5345 17 view .LVU237
 843 0044 1868     		ldr	r0, [r3]
 844 0046 8C68     		ldr	r4, [r1, #8]
 845              	.LVL62:
5345:Src/tasks.c   ****             }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 114


 846              		.loc 1 5345 17 is_stmt 0 view .LVU238
 847 0048 C460     		str	r4, [r0, #12]
5345:Src/tasks.c   ****             }
 848              		.loc 1 5345 17 is_stmt 1 view .LVU239
 849 004a 1868     		ldr	r0, [r3]
 850 004c 0430     		adds	r0, r0, #4
 851 004e 6060     		str	r0, [r4, #4]
5345:Src/tasks.c   ****             }
 852              		.loc 1 5345 17 view .LVU240
 853 0050 1868     		ldr	r0, [r3]
 854 0052 0430     		adds	r0, r0, #4
 855 0054 8860     		str	r0, [r1, #8]
5345:Src/tasks.c   ****             }
 856              		.loc 1 5345 17 view .LVU241
 857 0056 1B68     		ldr	r3, [r3]
 858 0058 5A61     		str	r2, [r3, #20]
5345:Src/tasks.c   ****             }
 859              		.loc 1 5345 17 view .LVU242
 860 005a 1368     		ldr	r3, [r2]
 861 005c 0133     		adds	r3, r3, #1
 862 005e 1360     		str	r3, [r2]
 863              	.LBE32:
5345:Src/tasks.c   ****             }
 864              		.loc 1 5345 89 view .LVU243
5345:Src/tasks.c   ****             }
 865              		.loc 1 5345 17 is_stmt 0 view .LVU244
 866 0060 E8E7     		b	.L61
 867              	.LVL63:
 868              	.L64:
5367:Src/tasks.c   **** 
 869              		.loc 1 5367 21 is_stmt 1 view .LVU245
 870 0062 0B4B     		ldr	r3, .L67+16
 871 0064 1868     		ldr	r0, [r3]
5367:Src/tasks.c   **** 
 872              		.loc 1 5367 68 is_stmt 0 view .LVU246
 873 0066 074B     		ldr	r3, .L67+4
 874 0068 1968     		ldr	r1, [r3]
5367:Src/tasks.c   **** 
 875              		.loc 1 5367 21 view .LVU247
 876 006a 0431     		adds	r1, r1, #4
 877 006c FFF7FEFF 		bl	vListInsert
 878              	.LVL64:
5372:Src/tasks.c   ****                     {
 879              		.loc 1 5372 21 is_stmt 1 view .LVU248
5372:Src/tasks.c   ****                     {
 880              		.loc 1 5372 37 is_stmt 0 view .LVU249
 881 0070 084B     		ldr	r3, .L67+20
 882 0072 1B68     		ldr	r3, [r3]
5372:Src/tasks.c   ****                     {
 883              		.loc 1 5372 23 view .LVU250
 884 0074 A342     		cmp	r3, r4
 885 0076 DDD9     		bls	.L61
5374:Src/tasks.c   ****                     }
 886              		.loc 1 5374 25 is_stmt 1 view .LVU251
5374:Src/tasks.c   ****                     }
 887              		.loc 1 5374 46 is_stmt 0 view .LVU252
 888 0078 064B     		ldr	r3, .L67+20
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 115


 889 007a 1C60     		str	r4, [r3]
5378:Src/tasks.c   ****                     }
 890              		.loc 1 5378 49 is_stmt 1 view .LVU253
 891              		.loc 1 5420 1 is_stmt 0 view .LVU254
 892 007c DAE7     		b	.L61
 893              	.L68:
 894 007e 00BF     		.align	2
 895              	.L67:
 896 0080 00000000 		.word	.LANCHOR15
 897 0084 00000000 		.word	.LANCHOR10
 898 0088 00000000 		.word	.LANCHOR8
 899 008c 00000000 		.word	.LANCHOR0
 900 0090 00000000 		.word	.LANCHOR2
 901 0094 00000000 		.word	.LANCHOR3
 902              		.cfi_endproc
 903              	.LFE51:
 905              		.section	.text.xTaskCreate,"ax",%progbits
 906              		.align	1
 907              		.global	xTaskCreate
 908              		.syntax unified
 909              		.thumb
 910              		.thumb_func
 911              		.fpu softvfp
 913              	xTaskCreate:
 914              	.LVL65:
 915              	.LFB4:
 734:Src/tasks.c   ****         TCB_t * pxNewTCB;
 916              		.loc 1 734 5 is_stmt 1 view -0
 917              		.cfi_startproc
 918              		@ args = 8, pretend = 0, frame = 0
 919              		@ frame_needed = 0, uses_anonymous_args = 0
 734:Src/tasks.c   ****         TCB_t * pxNewTCB;
 920              		.loc 1 734 5 is_stmt 0 view .LVU256
 921 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 922              	.LCFI8:
 923              		.cfi_def_cfa_offset 28
 924              		.cfi_offset 4, -28
 925              		.cfi_offset 5, -24
 926              		.cfi_offset 6, -20
 927              		.cfi_offset 7, -16
 928              		.cfi_offset 8, -12
 929              		.cfi_offset 9, -8
 930              		.cfi_offset 14, -4
 931 0004 85B0     		sub	sp, sp, #20
 932              	.LCFI9:
 933              		.cfi_def_cfa_offset 48
 934 0006 0746     		mov	r7, r0
 935 0008 8846     		mov	r8, r1
 936 000a 1446     		mov	r4, r2
 937 000c 1E46     		mov	r6, r3
 735:Src/tasks.c   ****         BaseType_t xReturn;
 938              		.loc 1 735 9 is_stmt 1 view .LVU257
 736:Src/tasks.c   **** 
 939              		.loc 1 736 9 view .LVU258
 940              	.LBB33:
 765:Src/tasks.c   **** 
 941              		.loc 1 765 17 view .LVU259
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 116


 768:Src/tasks.c   **** 
 942              		.loc 1 768 17 view .LVU260
 768:Src/tasks.c   **** 
 943              		.loc 1 768 27 is_stmt 0 view .LVU261
 944 000e 9000     		lsls	r0, r2, #2
 945              	.LVL66:
 768:Src/tasks.c   **** 
 946              		.loc 1 768 27 view .LVU262
 947 0010 FFF7FEFF 		bl	pvPortMalloc
 948              	.LVL67:
 770:Src/tasks.c   ****                 {
 949              		.loc 1 770 17 is_stmt 1 view .LVU263
 770:Src/tasks.c   ****                 {
 950              		.loc 1 770 19 is_stmt 0 view .LVU264
 951 0014 F0B1     		cbz	r0, .L73
 952 0016 8146     		mov	r9, r0
 773:Src/tasks.c   **** 
 953              		.loc 1 773 21 is_stmt 1 view .LVU265
 773:Src/tasks.c   **** 
 954              		.loc 1 773 44 is_stmt 0 view .LVU266
 955 0018 4C20     		movs	r0, #76
 956              	.LVL68:
 773:Src/tasks.c   **** 
 957              		.loc 1 773 44 view .LVU267
 958 001a FFF7FEFF 		bl	pvPortMalloc
 959              	.LVL69:
 775:Src/tasks.c   ****                     {
 960              		.loc 1 775 21 is_stmt 1 view .LVU268
 775:Src/tasks.c   ****                     {
 961              		.loc 1 775 23 is_stmt 0 view .LVU269
 962 001e 0546     		mov	r5, r0
 963 0020 A0B1     		cbz	r0, .L71
 778:Src/tasks.c   ****                     }
 964              		.loc 1 778 25 is_stmt 1 view .LVU270
 778:Src/tasks.c   ****                     }
 965              		.loc 1 778 43 is_stmt 0 view .LVU271
 966 0022 C0F83090 		str	r9, [r0, #48]
 967              	.LVL70:
 968              	.L72:
 778:Src/tasks.c   ****                     }
 969              		.loc 1 778 43 view .LVU272
 970              	.LBE33:
 794:Src/tasks.c   ****         {
 971              		.loc 1 794 9 is_stmt 1 view .LVU273
 794:Src/tasks.c   ****         {
 972              		.loc 1 794 11 is_stmt 0 view .LVU274
 973 0026 D5B1     		cbz	r5, .L74
 804:Src/tasks.c   ****             prvAddNewTaskToReadyList( pxNewTCB );
 974              		.loc 1 804 13 is_stmt 1 view .LVU275
 975 0028 0023     		movs	r3, #0
 976 002a 0393     		str	r3, [sp, #12]
 977 002c 0295     		str	r5, [sp, #8]
 978 002e 0D9B     		ldr	r3, [sp, #52]
 979 0030 0193     		str	r3, [sp, #4]
 980 0032 0C9B     		ldr	r3, [sp, #48]
 981 0034 0093     		str	r3, [sp]
 982 0036 3346     		mov	r3, r6
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 117


 983 0038 2246     		mov	r2, r4
 984 003a 4146     		mov	r1, r8
 985 003c 3846     		mov	r0, r7
 986 003e FFF7FEFF 		bl	prvInitialiseNewTask
 987              	.LVL71:
 805:Src/tasks.c   ****             xReturn = pdPASS;
 988              		.loc 1 805 13 view .LVU276
 989 0042 2846     		mov	r0, r5
 990 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 991              	.LVL72:
 806:Src/tasks.c   ****         }
 992              		.loc 1 806 13 view .LVU277
 806:Src/tasks.c   ****         }
 993              		.loc 1 806 21 is_stmt 0 view .LVU278
 994 0048 0120     		movs	r0, #1
 995 004a 05E0     		b	.L69
 996              	.LVL73:
 997              	.L71:
 998              	.LBB34:
 784:Src/tasks.c   ****                     }
 999              		.loc 1 784 25 is_stmt 1 view .LVU279
 1000 004c 4846     		mov	r0, r9
 1001              	.LVL74:
 784:Src/tasks.c   ****                     }
 1002              		.loc 1 784 25 is_stmt 0 view .LVU280
 1003 004e FFF7FEFF 		bl	vPortFree
 1004              	.LVL75:
 1005 0052 E8E7     		b	.L72
 1006              	.LVL76:
 1007              	.L73:
 784:Src/tasks.c   ****                     }
 1008              		.loc 1 784 25 view .LVU281
 1009              	.LBE34:
 810:Src/tasks.c   ****         }
 1010              		.loc 1 810 21 view .LVU282
 1011 0054 4FF0FF30 		mov	r0, #-1
 1012              	.LVL77:
 1013              	.L69:
 814:Src/tasks.c   **** 
 1014              		.loc 1 814 5 view .LVU283
 1015 0058 05B0     		add	sp, sp, #20
 1016              	.LCFI10:
 1017              		.cfi_remember_state
 1018              		.cfi_def_cfa_offset 28
 1019              		@ sp needed
 1020 005a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1021              	.LVL78:
 1022              	.L74:
 1023              	.LCFI11:
 1024              		.cfi_restore_state
 810:Src/tasks.c   ****         }
 1025              		.loc 1 810 21 view .LVU284
 1026 005e 4FF0FF30 		mov	r0, #-1
 1027              	.LVL79:
 813:Src/tasks.c   ****     }
 1028              		.loc 1 813 9 is_stmt 1 view .LVU285
 813:Src/tasks.c   ****     }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 118


 1029              		.loc 1 813 16 is_stmt 0 view .LVU286
 1030 0062 F9E7     		b	.L69
 1031              		.cfi_endproc
 1032              	.LFE4:
 1034              		.section	.text.vTaskDelete,"ax",%progbits
 1035              		.align	1
 1036              		.global	vTaskDelete
 1037              		.syntax unified
 1038              		.thumb
 1039              		.thumb_func
 1040              		.fpu softvfp
 1042              	vTaskDelete:
 1043              	.LVL80:
 1044              	.LFB7:
1158:Src/tasks.c   ****         TCB_t * pxTCB;
 1045              		.loc 1 1158 5 is_stmt 1 view -0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
1158:Src/tasks.c   ****         TCB_t * pxTCB;
 1049              		.loc 1 1158 5 is_stmt 0 view .LVU288
 1050 0000 38B5     		push	{r3, r4, r5, lr}
 1051              	.LCFI12:
 1052              		.cfi_def_cfa_offset 16
 1053              		.cfi_offset 3, -16
 1054              		.cfi_offset 4, -12
 1055              		.cfi_offset 5, -8
 1056              		.cfi_offset 14, -4
 1057 0002 0446     		mov	r4, r0
1159:Src/tasks.c   **** 
 1058              		.loc 1 1159 9 is_stmt 1 view .LVU289
1161:Src/tasks.c   ****         {
 1059              		.loc 1 1161 9 view .LVU290
 1060 0004 FFF7FEFF 		bl	vPortEnterCritical
 1061              	.LVL81:
1165:Src/tasks.c   **** 
 1062              		.loc 1 1165 13 view .LVU291
1165:Src/tasks.c   **** 
 1063              		.loc 1 1165 21 is_stmt 0 view .LVU292
 1064 0008 44B3     		cbz	r4, .L84
 1065              	.LVL82:
 1066              	.L77:
1168:Src/tasks.c   ****             {
 1067              		.loc 1 1168 13 is_stmt 1 discriminator 4 view .LVU293
1168:Src/tasks.c   ****             {
 1068              		.loc 1 1168 17 is_stmt 0 discriminator 4 view .LVU294
 1069 000a 251D     		adds	r5, r4, #4
 1070 000c 2846     		mov	r0, r5
 1071 000e FFF7FEFF 		bl	uxListRemove
 1072              	.LVL83:
1174:Src/tasks.c   ****             }
 1073              		.loc 1 1174 41 is_stmt 1 discriminator 4 view .LVU295
1178:Src/tasks.c   ****             {
 1074              		.loc 1 1178 13 discriminator 4 view .LVU296
1178:Src/tasks.c   ****             {
 1075              		.loc 1 1178 17 is_stmt 0 discriminator 4 view .LVU297
 1076 0012 A36A     		ldr	r3, [r4, #40]
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 119


1178:Src/tasks.c   ****             {
 1077              		.loc 1 1178 15 discriminator 4 view .LVU298
 1078 0014 1BB1     		cbz	r3, .L78
1180:Src/tasks.c   ****             }
 1079              		.loc 1 1180 17 is_stmt 1 view .LVU299
1180:Src/tasks.c   ****             }
 1080              		.loc 1 1180 26 is_stmt 0 view .LVU300
 1081 0016 04F11800 		add	r0, r4, #24
 1082 001a FFF7FEFF 		bl	uxListRemove
 1083              	.LVL84:
 1084              	.L78:
1184:Src/tasks.c   ****             }
 1085              		.loc 1 1184 41 is_stmt 1 view .LVU301
1191:Src/tasks.c   **** 
 1086              		.loc 1 1191 13 view .LVU302
1191:Src/tasks.c   **** 
 1087              		.loc 1 1191 25 is_stmt 0 view .LVU303
 1088 001e 1A4A     		ldr	r2, .L87
 1089 0020 1368     		ldr	r3, [r2]
 1090 0022 0133     		adds	r3, r3, #1
 1091 0024 1360     		str	r3, [r2]
1193:Src/tasks.c   ****             {
 1092              		.loc 1 1193 13 is_stmt 1 view .LVU304
1193:Src/tasks.c   ****             {
 1093              		.loc 1 1193 23 is_stmt 0 view .LVU305
 1094 0026 194B     		ldr	r3, .L87+4
 1095 0028 1B68     		ldr	r3, [r3]
1193:Src/tasks.c   ****             {
 1096              		.loc 1 1193 15 view .LVU306
 1097 002a A342     		cmp	r3, r4
 1098 002c 19D0     		beq	.L85
1220:Src/tasks.c   ****                 traceTASK_DELETE( pxTCB );
 1099              		.loc 1 1220 17 is_stmt 1 view .LVU307
 1100 002e 184A     		ldr	r2, .L87+8
 1101 0030 1368     		ldr	r3, [r2]
 1102 0032 013B     		subs	r3, r3, #1
 1103 0034 1360     		str	r3, [r2]
1221:Src/tasks.c   **** 
 1104              		.loc 1 1221 42 view .LVU308
1225:Src/tasks.c   ****             }
 1105              		.loc 1 1225 17 view .LVU309
 1106 0036 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1107              	.LVL85:
 1108              	.L80:
1228:Src/tasks.c   **** 
 1109              		.loc 1 1228 9 view .LVU310
 1110 003a FFF7FEFF 		bl	vPortExitCritical
 1111              	.LVL86:
1233:Src/tasks.c   ****         {
 1112              		.loc 1 1233 9 view .LVU311
1233:Src/tasks.c   ****         {
 1113              		.loc 1 1233 19 is_stmt 0 view .LVU312
 1114 003e 134B     		ldr	r3, .L87+4
 1115 0040 1B68     		ldr	r3, [r3]
1233:Src/tasks.c   ****         {
 1116              		.loc 1 1233 11 view .LVU313
 1117 0042 A342     		cmp	r3, r4
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 120


 1118 0044 02D0     		beq	.L81
1235:Src/tasks.c   ****         }
 1119              		.loc 1 1235 13 is_stmt 1 view .LVU314
 1120 0046 2046     		mov	r0, r4
 1121 0048 FFF7FEFF 		bl	prvDeleteTCB
 1122              	.LVL87:
 1123              	.L81:
1240:Src/tasks.c   ****         {
 1124              		.loc 1 1240 9 view .LVU315
1240:Src/tasks.c   ****         {
 1125              		.loc 1 1240 31 is_stmt 0 view .LVU316
 1126 004c 114B     		ldr	r3, .L87+12
 1127 004e 1B68     		ldr	r3, [r3]
1240:Src/tasks.c   ****         {
 1128              		.loc 1 1240 11 view .LVU317
 1129 0050 1BB1     		cbz	r3, .L76
1242:Src/tasks.c   ****             {
 1130              		.loc 1 1242 13 is_stmt 1 view .LVU318
1242:Src/tasks.c   ****             {
 1131              		.loc 1 1242 23 is_stmt 0 view .LVU319
 1132 0052 0E4B     		ldr	r3, .L87+4
 1133 0054 1B68     		ldr	r3, [r3]
1242:Src/tasks.c   ****             {
 1134              		.loc 1 1242 15 view .LVU320
 1135 0056 A342     		cmp	r3, r4
 1136 0058 0CD0     		beq	.L86
 1137              	.L76:
1252:Src/tasks.c   **** 
 1138              		.loc 1 1252 5 view .LVU321
 1139 005a 38BD     		pop	{r3, r4, r5, pc}
 1140              	.LVL88:
 1141              	.L84:
1165:Src/tasks.c   **** 
 1142              		.loc 1 1165 21 discriminator 1 view .LVU322
 1143 005c 0B4B     		ldr	r3, .L87+4
 1144 005e 1C68     		ldr	r4, [r3]
 1145              	.LVL89:
1165:Src/tasks.c   **** 
 1146              		.loc 1 1165 21 discriminator 1 view .LVU323
 1147 0060 D3E7     		b	.L77
 1148              	.LVL90:
 1149              	.L85:
1200:Src/tasks.c   **** 
 1150              		.loc 1 1200 17 is_stmt 1 view .LVU324
 1151 0062 2946     		mov	r1, r5
 1152 0064 0C48     		ldr	r0, .L87+16
 1153 0066 FFF7FEFF 		bl	vListInsertEnd
 1154              	.LVL91:
1205:Src/tasks.c   **** 
 1155              		.loc 1 1205 17 view .LVU325
 1156 006a 0C4A     		ldr	r2, .L87+20
 1157 006c 1368     		ldr	r3, [r2]
 1158 006e 0133     		adds	r3, r3, #1
 1159 0070 1360     		str	r3, [r2]
1209:Src/tasks.c   **** 
 1160              		.loc 1 1209 42 view .LVU326
1216:Src/tasks.c   ****             }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 121


 1161              		.loc 1 1216 66 view .LVU327
 1162 0072 E2E7     		b	.L80
 1163              	.L86:
1244:Src/tasks.c   ****                 portYIELD_WITHIN_API();
 1164              		.loc 1 1244 58 view .LVU328
1245:Src/tasks.c   ****             }
 1165              		.loc 1 1245 17 view .LVU329
 1166 0074 0A4B     		ldr	r3, .L87+24
 1167 0076 4FF08052 		mov	r2, #268435456
 1168 007a 1A60     		str	r2, [r3]
1245:Src/tasks.c   ****             }
 1169              		.loc 1 1245 17 view .LVU330
 1170              		.syntax unified
 1171              	@ 1245 "Src/tasks.c" 1
 1172 007c BFF34F8F 		dsb
 1173              	@ 0 "" 2
1245:Src/tasks.c   ****             }
 1174              		.loc 1 1245 17 view .LVU331
 1175              	@ 1245 "Src/tasks.c" 1
 1176 0080 BFF36F8F 		isb
 1177              	@ 0 "" 2
1245:Src/tasks.c   ****             }
 1178              		.loc 1 1245 39 view .LVU332
1249:Src/tasks.c   ****             }
 1179              		.loc 1 1249 41 view .LVU333
1252:Src/tasks.c   **** 
 1180              		.loc 1 1252 5 is_stmt 0 view .LVU334
 1181              		.thumb
 1182              		.syntax unified
 1183 0084 E9E7     		b	.L76
 1184              	.L88:
 1185 0086 00BF     		.align	2
 1186              	.L87:
 1187 0088 00000000 		.word	.LANCHOR12
 1188 008c 00000000 		.word	.LANCHOR10
 1189 0090 00000000 		.word	.LANCHOR9
 1190 0094 00000000 		.word	.LANCHOR11
 1191 0098 00000000 		.word	.LANCHOR7
 1192 009c 00000000 		.word	.LANCHOR14
 1193 00a0 04ED00E0 		.word	-536810236
 1194              		.cfi_endproc
 1195              	.LFE7:
 1197              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1198              		.align	1
 1199              		.global	uxTaskPriorityGet
 1200              		.syntax unified
 1201              		.thumb
 1202              		.thumb_func
 1203              		.fpu softvfp
 1205              	uxTaskPriorityGet:
 1206              	.LVL92:
 1207              	.LFB10:
1489:Src/tasks.c   ****         TCB_t const * pxTCB;
 1208              		.loc 1 1489 5 is_stmt 1 view -0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 122


1489:Src/tasks.c   ****         TCB_t const * pxTCB;
 1212              		.loc 1 1489 5 is_stmt 0 view .LVU336
 1213 0000 10B5     		push	{r4, lr}
 1214              	.LCFI13:
 1215              		.cfi_def_cfa_offset 8
 1216              		.cfi_offset 4, -8
 1217              		.cfi_offset 14, -4
 1218 0002 0446     		mov	r4, r0
1490:Src/tasks.c   ****         UBaseType_t uxReturn;
 1219              		.loc 1 1490 9 is_stmt 1 view .LVU337
1491:Src/tasks.c   **** 
 1220              		.loc 1 1491 9 view .LVU338
1493:Src/tasks.c   ****         {
 1221              		.loc 1 1493 9 view .LVU339
 1222 0004 FFF7FEFF 		bl	vPortEnterCritical
 1223              	.LVL93:
1497:Src/tasks.c   ****             uxReturn = pxTCB->uxPriority;
 1224              		.loc 1 1497 13 view .LVU340
1497:Src/tasks.c   ****             uxReturn = pxTCB->uxPriority;
 1225              		.loc 1 1497 21 is_stmt 0 view .LVU341
 1226 0008 24B1     		cbz	r4, .L92
 1227              	.LVL94:
 1228              	.L90:
1498:Src/tasks.c   ****         }
 1229              		.loc 1 1498 13 is_stmt 1 discriminator 4 view .LVU342
1498:Src/tasks.c   ****         }
 1230              		.loc 1 1498 22 is_stmt 0 discriminator 4 view .LVU343
 1231 000a E46A     		ldr	r4, [r4, #44]
 1232              	.LVL95:
1500:Src/tasks.c   **** 
 1233              		.loc 1 1500 9 is_stmt 1 discriminator 4 view .LVU344
 1234 000c FFF7FEFF 		bl	vPortExitCritical
 1235              	.LVL96:
1502:Src/tasks.c   ****     }
 1236              		.loc 1 1502 9 discriminator 4 view .LVU345
1503:Src/tasks.c   **** 
 1237              		.loc 1 1503 5 is_stmt 0 discriminator 4 view .LVU346
 1238 0010 2046     		mov	r0, r4
 1239 0012 10BD     		pop	{r4, pc}
 1240              	.LVL97:
 1241              	.L92:
1497:Src/tasks.c   ****             uxReturn = pxTCB->uxPriority;
 1242              		.loc 1 1497 21 discriminator 1 view .LVU347
 1243 0014 014B     		ldr	r3, .L93
 1244 0016 1C68     		ldr	r4, [r3]
 1245              	.LVL98:
1497:Src/tasks.c   ****             uxReturn = pxTCB->uxPriority;
 1246              		.loc 1 1497 21 discriminator 1 view .LVU348
 1247 0018 F7E7     		b	.L90
 1248              	.L94:
 1249 001a 00BF     		.align	2
 1250              	.L93:
 1251 001c 00000000 		.word	.LANCHOR10
 1252              		.cfi_endproc
 1253              	.LFE10:
 1255              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1256              		.align	1
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 123


 1257              		.global	uxTaskPriorityGetFromISR
 1258              		.syntax unified
 1259              		.thumb
 1260              		.thumb_func
 1261              		.fpu softvfp
 1263              	uxTaskPriorityGetFromISR:
 1264              	.LVL99:
 1265              	.LFB11:
1511:Src/tasks.c   ****         TCB_t const * pxTCB;
 1266              		.loc 1 1511 5 is_stmt 1 view -0
 1267              		.cfi_startproc
 1268              		@ args = 0, pretend = 0, frame = 0
 1269              		@ frame_needed = 0, uses_anonymous_args = 0
 1270              		@ link register save eliminated.
1512:Src/tasks.c   ****         UBaseType_t uxReturn, uxSavedInterruptState;
 1271              		.loc 1 1512 9 view .LVU350
1513:Src/tasks.c   **** 
 1272              		.loc 1 1513 9 view .LVU351
1531:Src/tasks.c   **** 
 1273              		.loc 1 1531 51 view .LVU352
1533:Src/tasks.c   ****         {
 1274              		.loc 1 1533 9 view .LVU353
 1275              	.LBB35:
 1276              	.LBI35:
 1277              		.file 2 "Inc/portmacro.h"
   1:Inc/portmacro.h **** /*
   2:Inc/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:Inc/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Inc/portmacro.h ****  *
   5:Inc/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:Inc/portmacro.h ****  *
   7:Inc/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Inc/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:Inc/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:Inc/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Inc/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Inc/portmacro.h ****  * subject to the following conditions:
  13:Inc/portmacro.h ****  *
  14:Inc/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:Inc/portmacro.h ****  * copies or substantial portions of the Software.
  16:Inc/portmacro.h ****  *
  17:Inc/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Inc/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Inc/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Inc/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Inc/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Inc/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Inc/portmacro.h ****  *
  24:Inc/portmacro.h ****  * https://www.FreeRTOS.org
  25:Inc/portmacro.h ****  * https://github.com/FreeRTOS
  26:Inc/portmacro.h ****  *
  27:Inc/portmacro.h ****  */
  28:Inc/portmacro.h **** 
  29:Inc/portmacro.h **** 
  30:Inc/portmacro.h **** #ifndef PORTMACRO_H
  31:Inc/portmacro.h ****     #define PORTMACRO_H
  32:Inc/portmacro.h **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 124


  33:Inc/portmacro.h ****     #ifdef __cplusplus
  34:Inc/portmacro.h ****         extern "C" {
  35:Inc/portmacro.h ****     #endif
  36:Inc/portmacro.h **** 
  37:Inc/portmacro.h **** /*-----------------------------------------------------------
  38:Inc/portmacro.h ****  * Port specific definitions.
  39:Inc/portmacro.h ****  *
  40:Inc/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:Inc/portmacro.h ****  * given hardware and compiler.
  42:Inc/portmacro.h ****  *
  43:Inc/portmacro.h ****  * These settings should not be altered.
  44:Inc/portmacro.h ****  *-----------------------------------------------------------
  45:Inc/portmacro.h ****  */
  46:Inc/portmacro.h **** 
  47:Inc/portmacro.h **** /* Type definitions. */
  48:Inc/portmacro.h ****     #define portCHAR          char
  49:Inc/portmacro.h ****     #define portFLOAT         float
  50:Inc/portmacro.h ****     #define portDOUBLE        double
  51:Inc/portmacro.h ****     #define portLONG          long
  52:Inc/portmacro.h ****     #define portSHORT         short
  53:Inc/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:Inc/portmacro.h ****     #define portBASE_TYPE     long
  55:Inc/portmacro.h **** 
  56:Inc/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:Inc/portmacro.h ****     typedef long             BaseType_t;
  58:Inc/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:Inc/portmacro.h **** 
  60:Inc/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:Inc/portmacro.h ****         typedef uint16_t     TickType_t;
  62:Inc/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:Inc/portmacro.h ****     #else
  64:Inc/portmacro.h ****         typedef uint32_t     TickType_t;
  65:Inc/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:Inc/portmacro.h **** 
  67:Inc/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:Inc/portmacro.h ****  * not need to be guarded with a critical section. */
  69:Inc/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:Inc/portmacro.h ****     #endif
  71:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  72:Inc/portmacro.h **** 
  73:Inc/portmacro.h **** /* Architecture specifics. */
  74:Inc/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:Inc/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:Inc/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:Inc/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  79:Inc/portmacro.h **** 
  80:Inc/portmacro.h **** /* Scheduler utilities. */
  81:Inc/portmacro.h ****     #define portYIELD()                                 \
  82:Inc/portmacro.h ****     {                                                   \
  83:Inc/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:Inc/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:Inc/portmacro.h ****                                                         \
  86:Inc/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:Inc/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:Inc/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:Inc/portmacro.h ****         __asm volatile ( "isb" );                                  \
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 125


  90:Inc/portmacro.h ****     }
  91:Inc/portmacro.h **** 
  92:Inc/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:Inc/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:Inc/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  95:Inc/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  97:Inc/portmacro.h **** 
  98:Inc/portmacro.h **** /* Critical section management. */
  99:Inc/portmacro.h ****     extern void vPortEnterCritical( void );
 100:Inc/portmacro.h ****     extern void vPortExitCritical( void );
 101:Inc/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:Inc/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:Inc/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:Inc/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:Inc/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:Inc/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:Inc/portmacro.h **** 
 108:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 109:Inc/portmacro.h **** 
 110:Inc/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:Inc/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:Inc/portmacro.h ****  * (which build with all the ports) will build. */
 113:Inc/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:Inc/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 116:Inc/portmacro.h **** 
 117:Inc/portmacro.h **** /* Tickless idle/low power functionality. */
 118:Inc/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:Inc/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:Inc/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:Inc/portmacro.h ****     #endif
 122:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 123:Inc/portmacro.h **** 
 124:Inc/portmacro.h **** /* Architecture specific optimisations. */
 125:Inc/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:Inc/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:Inc/portmacro.h ****     #endif
 128:Inc/portmacro.h **** 
 129:Inc/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:Inc/portmacro.h **** 
 131:Inc/portmacro.h **** /* Generic helper function. */
 132:Inc/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:Inc/portmacro.h ****         {
 134:Inc/portmacro.h ****             uint8_t ucReturn;
 135:Inc/portmacro.h **** 
 136:Inc/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:Inc/portmacro.h **** 
 138:Inc/portmacro.h ****             return ucReturn;
 139:Inc/portmacro.h ****         }
 140:Inc/portmacro.h **** 
 141:Inc/portmacro.h **** /* Check the configuration. */
 142:Inc/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:Inc/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:Inc/portmacro.h ****         #endif
 145:Inc/portmacro.h **** 
 146:Inc/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 126


 147:Inc/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:Inc/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:Inc/portmacro.h **** 
 150:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 151:Inc/portmacro.h **** 
 152:Inc/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:Inc/portmacro.h **** 
 154:Inc/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:Inc/portmacro.h **** 
 156:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 157:Inc/portmacro.h **** 
 158:Inc/portmacro.h ****     #ifdef configASSERT
 159:Inc/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:Inc/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:Inc/portmacro.h ****     #endif
 162:Inc/portmacro.h **** 
 163:Inc/portmacro.h **** /* portNOP() is not required by this port. */
 164:Inc/portmacro.h ****     #define portNOP()
 165:Inc/portmacro.h **** 
 166:Inc/portmacro.h ****     #define portINLINE              __inline
 167:Inc/portmacro.h **** 
 168:Inc/portmacro.h ****     #ifndef portFORCE_INLINE
 169:Inc/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:Inc/portmacro.h ****     #endif
 171:Inc/portmacro.h **** 
 172:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 173:Inc/portmacro.h **** 
 174:Inc/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 175:Inc/portmacro.h ****     {
 176:Inc/portmacro.h ****         uint32_t ulCurrentInterrupt;
 177:Inc/portmacro.h ****         BaseType_t xReturn;
 178:Inc/portmacro.h **** 
 179:Inc/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 180:Inc/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 181:Inc/portmacro.h **** 
 182:Inc/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 183:Inc/portmacro.h ****         {
 184:Inc/portmacro.h ****             xReturn = pdFALSE;
 185:Inc/portmacro.h ****         }
 186:Inc/portmacro.h ****         else
 187:Inc/portmacro.h ****         {
 188:Inc/portmacro.h ****             xReturn = pdTRUE;
 189:Inc/portmacro.h ****         }
 190:Inc/portmacro.h **** 
 191:Inc/portmacro.h ****         return xReturn;
 192:Inc/portmacro.h ****     }
 193:Inc/portmacro.h **** 
 194:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 195:Inc/portmacro.h **** 
 196:Inc/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 197:Inc/portmacro.h ****     {
 198:Inc/portmacro.h ****         uint32_t ulNewBASEPRI;
 199:Inc/portmacro.h **** 
 200:Inc/portmacro.h ****         __asm volatile
 201:Inc/portmacro.h ****         (
 202:Inc/portmacro.h ****             "	mov %0, %1												\n"\
 203:Inc/portmacro.h ****             "	msr basepri, %0											\n"\
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 127


 204:Inc/portmacro.h ****             "	isb														\n"\
 205:Inc/portmacro.h ****             "	dsb														\n"\
 206:Inc/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 207:Inc/portmacro.h ****         );
 208:Inc/portmacro.h ****     }
 209:Inc/portmacro.h **** 
 210:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 211:Inc/portmacro.h **** 
 212:Inc/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1278              		.loc 2 212 38 view .LVU354
 1279              	.LBB36:
 213:Inc/portmacro.h ****     {
 214:Inc/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1280              		.loc 2 214 9 view .LVU355
 215:Inc/portmacro.h **** 
 216:Inc/portmacro.h ****         __asm volatile
 1281              		.loc 2 216 9 view .LVU356
 1282              		.syntax unified
 1283              	@ 216 "Inc/portmacro.h" 1
 1284 0000 EFF31183 			mrs r3, basepri											
 1285 0004 4FF0BF02 		mov r2, #191												
 1286 0008 82F31188 		msr basepri, r2											
 1287 000c BFF36F8F 		isb														
 1288 0010 BFF34F8F 		dsb														
 1289              	
 1290              	@ 0 "" 2
 1291              	.LVL100:
 217:Inc/portmacro.h ****         (
 218:Inc/portmacro.h ****             "	mrs %0, basepri											\n"\
 219:Inc/portmacro.h ****             "	mov %1, %2												\n"\
 220:Inc/portmacro.h ****             "	msr basepri, %1											\n"\
 221:Inc/portmacro.h ****             "	isb														\n"\
 222:Inc/portmacro.h ****             "	dsb														\n"\
 223:Inc/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 224:Inc/portmacro.h ****         );
 225:Inc/portmacro.h **** 
 226:Inc/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 227:Inc/portmacro.h ****          * warnings. */
 228:Inc/portmacro.h ****         return ulOriginalBASEPRI;
 1292              		.loc 2 228 9 view .LVU357
 1293              		.loc 2 228 9 is_stmt 0 view .LVU358
 1294              		.thumb
 1295              		.syntax unified
 1296              	.LBE36:
 1297              	.LBE35:
1537:Src/tasks.c   ****             uxReturn = pxTCB->uxPriority;
 1298              		.loc 1 1537 13 is_stmt 1 view .LVU359
1537:Src/tasks.c   ****             uxReturn = pxTCB->uxPriority;
 1299              		.loc 1 1537 21 is_stmt 0 view .LVU360
 1300 0014 18B1     		cbz	r0, .L97
 1301              	.LVL101:
 1302              	.L96:
1538:Src/tasks.c   ****         }
 1303              		.loc 1 1538 13 is_stmt 1 discriminator 4 view .LVU361
1538:Src/tasks.c   ****         }
 1304              		.loc 1 1538 22 is_stmt 0 discriminator 4 view .LVU362
 1305 0016 C06A     		ldr	r0, [r0, #44]
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 128


 1306              	.LVL102:
1540:Src/tasks.c   **** 
 1307              		.loc 1 1540 9 is_stmt 1 discriminator 4 view .LVU363
 1308              	.LBB37:
 1309              	.LBI37:
 229:Inc/portmacro.h ****     }
 230:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 231:Inc/portmacro.h **** 
 232:Inc/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1310              		.loc 2 232 34 discriminator 4 view .LVU364
 1311              	.LBB38:
 233:Inc/portmacro.h ****     {
 234:Inc/portmacro.h ****         __asm volatile
 1312              		.loc 2 234 9 discriminator 4 view .LVU365
 1313              		.syntax unified
 1314              	@ 234 "Inc/portmacro.h" 1
 1315 0018 83F31188 			msr basepri, r3	
 1316              	@ 0 "" 2
 1317              	.LVL103:
 1318              		.loc 2 234 9 is_stmt 0 discriminator 4 view .LVU366
 1319              		.thumb
 1320              		.syntax unified
 1321              	.LBE38:
 1322              	.LBE37:
1542:Src/tasks.c   ****     }
 1323              		.loc 1 1542 9 is_stmt 1 discriminator 4 view .LVU367
1543:Src/tasks.c   **** 
 1324              		.loc 1 1543 5 is_stmt 0 discriminator 4 view .LVU368
 1325 001c 7047     		bx	lr
 1326              	.LVL104:
 1327              	.L97:
1537:Src/tasks.c   ****             uxReturn = pxTCB->uxPriority;
 1328              		.loc 1 1537 21 discriminator 1 view .LVU369
 1329 001e 014A     		ldr	r2, .L98
 1330 0020 1068     		ldr	r0, [r2]
 1331              	.LVL105:
1537:Src/tasks.c   ****             uxReturn = pxTCB->uxPriority;
 1332              		.loc 1 1537 21 discriminator 1 view .LVU370
 1333 0022 F8E7     		b	.L96
 1334              	.L99:
 1335              		.align	2
 1336              	.L98:
 1337 0024 00000000 		.word	.LANCHOR10
 1338              		.cfi_endproc
 1339              	.LFE11:
 1341              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1342              		.align	1
 1343              		.global	vTaskPrioritySet
 1344              		.syntax unified
 1345              		.thumb
 1346              		.thumb_func
 1347              		.fpu softvfp
 1349              	vTaskPrioritySet:
 1350              	.LVL106:
 1351              	.LFB12:
1552:Src/tasks.c   ****         TCB_t * pxTCB;
 1352              		.loc 1 1552 5 is_stmt 1 view -0
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 129


 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
1552:Src/tasks.c   ****         TCB_t * pxTCB;
 1356              		.loc 1 1552 5 is_stmt 0 view .LVU372
 1357 0000 70B5     		push	{r4, r5, r6, lr}
 1358              	.LCFI14:
 1359              		.cfi_def_cfa_offset 16
 1360              		.cfi_offset 4, -16
 1361              		.cfi_offset 5, -12
 1362              		.cfi_offset 6, -8
 1363              		.cfi_offset 14, -4
 1364 0002 0446     		mov	r4, r0
 1365 0004 0D46     		mov	r5, r1
1553:Src/tasks.c   ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1366              		.loc 1 1553 9 is_stmt 1 view .LVU373
1554:Src/tasks.c   ****         BaseType_t xYieldRequired = pdFALSE;
 1367              		.loc 1 1554 9 view .LVU374
1555:Src/tasks.c   **** 
 1368              		.loc 1 1555 9 view .LVU375
 1369              	.LVL107:
1557:Src/tasks.c   **** 
 1370              		.loc 1 1557 61 view .LVU376
1560:Src/tasks.c   ****         {
 1371              		.loc 1 1560 9 view .LVU377
1560:Src/tasks.c   ****         {
 1372              		.loc 1 1560 11 is_stmt 0 view .LVU378
 1373 0006 0429     		cmp	r1, #4
 1374 0008 00D9     		bls	.L101
1562:Src/tasks.c   ****         }
 1375              		.loc 1 1562 27 view .LVU379
 1376 000a 0425     		movs	r5, #4
 1377              	.L101:
 1378              	.LVL108:
1566:Src/tasks.c   ****         }
 1379              		.loc 1 1566 37 is_stmt 1 view .LVU380
1569:Src/tasks.c   ****         {
 1380              		.loc 1 1569 9 view .LVU381
 1381 000c FFF7FEFF 		bl	vPortEnterCritical
 1382              	.LVL109:
1573:Src/tasks.c   **** 
 1383              		.loc 1 1573 13 view .LVU382
1573:Src/tasks.c   **** 
 1384              		.loc 1 1573 21 is_stmt 0 view .LVU383
 1385 0010 74B1     		cbz	r4, .L114
 1386              	.LVL110:
 1387              	.L102:
1575:Src/tasks.c   **** 
 1388              		.loc 1 1575 59 is_stmt 1 discriminator 4 view .LVU384
1583:Src/tasks.c   ****                 }
 1389              		.loc 1 1583 21 discriminator 4 view .LVU385
1583:Src/tasks.c   ****                 }
 1390              		.loc 1 1583 43 is_stmt 0 discriminator 4 view .LVU386
 1391 0012 E36A     		ldr	r3, [r4, #44]
 1392              	.LVL111:
1587:Src/tasks.c   ****             {
 1393              		.loc 1 1587 13 is_stmt 1 discriminator 4 view .LVU387
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 130


1587:Src/tasks.c   ****             {
 1394              		.loc 1 1587 15 is_stmt 0 discriminator 4 view .LVU388
 1395 0014 9D42     		cmp	r5, r3
 1396 0016 2BD0     		beq	.L103
1591:Src/tasks.c   ****                 {
 1397              		.loc 1 1591 17 is_stmt 1 view .LVU389
1591:Src/tasks.c   ****                 {
 1398              		.loc 1 1591 19 is_stmt 0 view .LVU390
 1399 0018 0DD9     		bls	.L104
1593:Src/tasks.c   ****                     {
 1400              		.loc 1 1593 21 is_stmt 1 view .LVU391
1593:Src/tasks.c   ****                     {
 1401              		.loc 1 1593 31 is_stmt 0 view .LVU392
 1402 001a 2A4A     		ldr	r2, .L116
 1403 001c 1268     		ldr	r2, [r2]
1593:Src/tasks.c   ****                     {
 1404              		.loc 1 1593 23 view .LVU393
 1405 001e A242     		cmp	r2, r4
 1406 0020 29D0     		beq	.L110
1598:Src/tasks.c   ****                         {
 1407              		.loc 1 1598 25 is_stmt 1 view .LVU394
1598:Src/tasks.c   ****                         {
 1408              		.loc 1 1598 58 is_stmt 0 view .LVU395
 1409 0022 284A     		ldr	r2, .L116
 1410 0024 1268     		ldr	r2, [r2]
 1411 0026 D26A     		ldr	r2, [r2, #44]
1598:Src/tasks.c   ****                         {
 1412              		.loc 1 1598 27 view .LVU396
 1413 0028 AA42     		cmp	r2, r5
 1414 002a 26D9     		bls	.L111
1555:Src/tasks.c   **** 
 1415              		.loc 1 1555 20 view .LVU397
 1416 002c 0026     		movs	r6, #0
 1417 002e 07E0     		b	.L105
 1418              	.LVL112:
 1419              	.L114:
1573:Src/tasks.c   **** 
 1420              		.loc 1 1573 21 discriminator 1 view .LVU398
 1421 0030 244B     		ldr	r3, .L116
 1422 0032 1C68     		ldr	r4, [r3]
 1423              	.LVL113:
1573:Src/tasks.c   **** 
 1424              		.loc 1 1573 21 discriminator 1 view .LVU399
 1425 0034 EDE7     		b	.L102
 1426              	.LVL114:
 1427              	.L104:
1614:Src/tasks.c   ****                 {
 1428              		.loc 1 1614 22 is_stmt 1 view .LVU400
1614:Src/tasks.c   ****                 {
 1429              		.loc 1 1614 32 is_stmt 0 view .LVU401
 1430 0036 234A     		ldr	r2, .L116
 1431 0038 1268     		ldr	r2, [r2]
1614:Src/tasks.c   ****                 {
 1432              		.loc 1 1614 24 view .LVU402
 1433 003a A242     		cmp	r2, r4
 1434 003c 1FD0     		beq	.L112
1555:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 131


 1435              		.loc 1 1555 20 view .LVU403
 1436 003e 0026     		movs	r6, #0
 1437              	.L105:
 1438              	.LVL115:
1626:Src/tasks.c   **** 
 1439              		.loc 1 1626 17 is_stmt 1 view .LVU404
1631:Src/tasks.c   **** 
 1440              		.loc 1 1631 17 view .LVU405
1651:Src/tasks.c   ****                     }
 1441              		.loc 1 1651 25 view .LVU406
1651:Src/tasks.c   ****                     }
 1442              		.loc 1 1651 43 is_stmt 0 view .LVU407
 1443 0040 E562     		str	r5, [r4, #44]
1657:Src/tasks.c   ****                 {
 1444              		.loc 1 1657 17 is_stmt 1 view .LVU408
1657:Src/tasks.c   ****                 {
 1445              		.loc 1 1657 23 is_stmt 0 view .LVU409
 1446 0042 A269     		ldr	r2, [r4, #24]
1657:Src/tasks.c   ****                 {
 1447              		.loc 1 1657 19 view .LVU410
 1448 0044 002A     		cmp	r2, #0
 1449 0046 02DB     		blt	.L106
1659:Src/tasks.c   ****                 }
 1450              		.loc 1 1659 21 is_stmt 1 view .LVU411
 1451 0048 C5F10505 		rsb	r5, r5, #5
 1452              	.LVL116:
1659:Src/tasks.c   ****                 }
 1453              		.loc 1 1659 21 is_stmt 0 view .LVU412
 1454 004c A561     		str	r5, [r4, #24]
 1455              	.L106:
1663:Src/tasks.c   ****                 }
 1456              		.loc 1 1663 45 is_stmt 1 view .LVU413
1670:Src/tasks.c   ****                 {
 1457              		.loc 1 1670 17 view .LVU414
1670:Src/tasks.c   ****                 {
 1458              		.loc 1 1670 21 is_stmt 0 view .LVU415
 1459 004e 6169     		ldr	r1, [r4, #20]
 1460 0050 03EB8303 		add	r3, r3, r3, lsl #2
 1461              	.LVL117:
1670:Src/tasks.c   ****                 {
 1462              		.loc 1 1670 21 view .LVU416
 1463 0054 1C4A     		ldr	r2, .L116+4
 1464 0056 02EB8303 		add	r3, r2, r3, lsl #2
1670:Src/tasks.c   ****                 {
 1465              		.loc 1 1670 19 view .LVU417
 1466 005a 9942     		cmp	r1, r3
 1467 005c 11D0     		beq	.L115
 1468              	.LVL118:
 1469              	.L107:
1691:Src/tasks.c   ****                 }
 1470              		.loc 1 1691 45 is_stmt 1 view .LVU418
1694:Src/tasks.c   ****                 {
 1471              		.loc 1 1694 17 view .LVU419
1694:Src/tasks.c   ****                 {
 1472              		.loc 1 1694 19 is_stmt 0 view .LVU420
 1473 005e 3EB1     		cbz	r6, .L103
1696:Src/tasks.c   ****                 }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 132


 1474              		.loc 1 1696 21 is_stmt 1 view .LVU421
 1475 0060 1A4B     		ldr	r3, .L116+8
 1476 0062 4FF08052 		mov	r2, #268435456
 1477 0066 1A60     		str	r2, [r3]
1696:Src/tasks.c   ****                 }
 1478              		.loc 1 1696 21 view .LVU422
 1479              		.syntax unified
 1480              	@ 1696 "Src/tasks.c" 1
 1481 0068 BFF34F8F 		dsb
 1482              	@ 0 "" 2
1696:Src/tasks.c   ****                 }
 1483              		.loc 1 1696 21 view .LVU423
 1484              	@ 1696 "Src/tasks.c" 1
 1485 006c BFF36F8F 		isb
 1486              	@ 0 "" 2
1696:Src/tasks.c   ****                 }
 1487              		.loc 1 1696 52 view .LVU424
 1488              	.LVL119:
 1489              		.thumb
 1490              		.syntax unified
 1491              	.L103:
1700:Src/tasks.c   ****                 }
 1492              		.loc 1 1700 45 view .LVU425
1705:Src/tasks.c   ****             }
 1493              		.loc 1 1705 17 view .LVU426
1708:Src/tasks.c   ****     }
 1494              		.loc 1 1708 9 view .LVU427
 1495 0070 FFF7FEFF 		bl	vPortExitCritical
 1496              	.LVL120:
1709:Src/tasks.c   **** 
 1497              		.loc 1 1709 5 is_stmt 0 view .LVU428
 1498 0074 70BD     		pop	{r4, r5, r6, pc}
 1499              	.LVL121:
 1500              	.L110:
1555:Src/tasks.c   **** 
 1501              		.loc 1 1555 20 view .LVU429
 1502 0076 0026     		movs	r6, #0
 1503 0078 E2E7     		b	.L105
 1504              	.L111:
1600:Src/tasks.c   ****                         }
 1505              		.loc 1 1600 44 view .LVU430
 1506 007a 0126     		movs	r6, #1
 1507 007c E0E7     		b	.L105
 1508              	.L112:
1619:Src/tasks.c   ****                 }
 1509              		.loc 1 1619 36 view .LVU431
 1510 007e 0126     		movs	r6, #1
 1511 0080 DEE7     		b	.L105
 1512              	.LVL122:
 1513              	.L115:
1675:Src/tasks.c   ****                     {
 1514              		.loc 1 1675 21 is_stmt 1 view .LVU432
1675:Src/tasks.c   ****                     {
 1515              		.loc 1 1675 25 is_stmt 0 view .LVU433
 1516 0082 251D     		adds	r5, r4, #4
 1517 0084 2846     		mov	r0, r5
 1518 0086 FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 133


 1519              	.LVL123:
1684:Src/tasks.c   ****                     }
 1520              		.loc 1 1684 49 is_stmt 1 view .LVU434
1687:Src/tasks.c   ****                 }
 1521              		.loc 1 1687 21 view .LVU435
1687:Src/tasks.c   ****                 }
 1522              		.loc 1 1687 21 view .LVU436
 1523 008a E36A     		ldr	r3, [r4, #44]
 1524 008c 104A     		ldr	r2, .L116+12
 1525 008e 1268     		ldr	r2, [r2]
 1526 0090 9342     		cmp	r3, r2
 1527 0092 01D9     		bls	.L108
1687:Src/tasks.c   ****                 }
 1528              		.loc 1 1687 21 discriminator 1 view .LVU437
 1529 0094 0E4A     		ldr	r2, .L116+12
 1530 0096 1360     		str	r3, [r2]
 1531              	.L108:
1687:Src/tasks.c   ****                 }
 1532              		.loc 1 1687 21 discriminator 3 view .LVU438
 1533              	.LBB39:
1687:Src/tasks.c   ****                 }
 1534              		.loc 1 1687 21 discriminator 3 view .LVU439
 1535 0098 0B4A     		ldr	r2, .L116+4
 1536 009a 03EB8303 		add	r3, r3, r3, lsl #2
 1537 009e 02EB8303 		add	r3, r2, r3, lsl #2
 1538 00a2 5B68     		ldr	r3, [r3, #4]
 1539              	.LVL124:
1687:Src/tasks.c   ****                 }
 1540              		.loc 1 1687 21 discriminator 3 view .LVU440
1687:Src/tasks.c   ****                 }
 1541              		.loc 1 1687 21 discriminator 3 view .LVU441
1687:Src/tasks.c   ****                 }
 1542              		.loc 1 1687 21 discriminator 3 view .LVU442
 1543 00a4 A360     		str	r3, [r4, #8]
1687:Src/tasks.c   ****                 }
 1544              		.loc 1 1687 21 discriminator 3 view .LVU443
 1545 00a6 9968     		ldr	r1, [r3, #8]
 1546 00a8 E160     		str	r1, [r4, #12]
1687:Src/tasks.c   ****                 }
 1547              		.loc 1 1687 21 discriminator 3 view .LVU444
 1548 00aa 4D60     		str	r5, [r1, #4]
1687:Src/tasks.c   ****                 }
 1549              		.loc 1 1687 21 discriminator 3 view .LVU445
 1550 00ac 9D60     		str	r5, [r3, #8]
1687:Src/tasks.c   ****                 }
 1551              		.loc 1 1687 21 discriminator 3 view .LVU446
 1552 00ae E36A     		ldr	r3, [r4, #44]
 1553              	.LVL125:
1687:Src/tasks.c   ****                 }
 1554              		.loc 1 1687 21 is_stmt 0 discriminator 3 view .LVU447
 1555 00b0 03EB8301 		add	r1, r3, r3, lsl #2
 1556 00b4 8800     		lsls	r0, r1, #2
 1557 00b6 02EB8101 		add	r1, r2, r1, lsl #2
 1558 00ba 6161     		str	r1, [r4, #20]
1687:Src/tasks.c   ****                 }
 1559              		.loc 1 1687 21 is_stmt 1 discriminator 3 view .LVU448
 1560 00bc 1158     		ldr	r1, [r2, r0]
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 134


 1561 00be 0131     		adds	r1, r1, #1
 1562 00c0 1150     		str	r1, [r2, r0]
 1563              	.LBE39:
1687:Src/tasks.c   ****                 }
 1564              		.loc 1 1687 21 discriminator 3 view .LVU449
1687:Src/tasks.c   ****                 }
 1565              		.loc 1 1687 51 discriminator 3 view .LVU450
 1566 00c2 CCE7     		b	.L107
 1567              	.L117:
 1568              		.align	2
 1569              	.L116:
 1570 00c4 00000000 		.word	.LANCHOR10
 1571 00c8 00000000 		.word	.LANCHOR4
 1572 00cc 04ED00E0 		.word	-536810236
 1573 00d0 00000000 		.word	.LANCHOR13
 1574              		.cfi_endproc
 1575              	.LFE12:
 1577              		.section	.text.vTaskResume,"ax",%progbits
 1578              		.align	1
 1579              		.global	vTaskResume
 1580              		.syntax unified
 1581              		.thumb
 1582              		.thumb_func
 1583              		.fpu softvfp
 1585              	vTaskResume:
 1586              	.LVL126:
 1587              	.LFB15:
1869:Src/tasks.c   ****         TCB_t * const pxTCB = xTaskToResume;
 1588              		.loc 1 1869 5 view -0
 1589              		.cfi_startproc
 1590              		@ args = 0, pretend = 0, frame = 0
 1591              		@ frame_needed = 0, uses_anonymous_args = 0
1869:Src/tasks.c   ****         TCB_t * const pxTCB = xTaskToResume;
 1592              		.loc 1 1869 5 is_stmt 0 view .LVU452
 1593 0000 38B5     		push	{r3, r4, r5, lr}
 1594              	.LCFI15:
 1595              		.cfi_def_cfa_offset 16
 1596              		.cfi_offset 3, -16
 1597              		.cfi_offset 4, -12
 1598              		.cfi_offset 5, -8
 1599              		.cfi_offset 14, -4
1870:Src/tasks.c   **** 
 1600              		.loc 1 1870 9 is_stmt 1 view .LVU453
 1601              	.LVL127:
1873:Src/tasks.c   **** 
 1602              		.loc 1 1873 38 view .LVU454
1877:Src/tasks.c   ****         {
 1603              		.loc 1 1877 9 view .LVU455
1877:Src/tasks.c   ****         {
 1604              		.loc 1 1877 21 is_stmt 0 view .LVU456
 1605 0002 1F4B     		ldr	r3, .L124
 1606 0004 1B68     		ldr	r3, [r3]
1877:Src/tasks.c   ****         {
 1607              		.loc 1 1877 11 view .LVU457
 1608 0006 8342     		cmp	r3, r0
 1609 0008 09D0     		beq	.L118
 1610 000a 0446     		mov	r4, r0
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 135


1877:Src/tasks.c   ****         {
 1611              		.loc 1 1877 39 discriminator 1 view .LVU458
 1612 000c 38B1     		cbz	r0, .L118
1879:Src/tasks.c   ****             {
 1613              		.loc 1 1879 13 is_stmt 1 view .LVU459
 1614 000e FFF7FEFF 		bl	vPortEnterCritical
 1615              	.LVL128:
1881:Src/tasks.c   ****                 {
 1616              		.loc 1 1881 17 view .LVU460
1881:Src/tasks.c   ****                 {
 1617              		.loc 1 1881 21 is_stmt 0 view .LVU461
 1618 0012 2046     		mov	r0, r4
 1619 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1620              	.LVL129:
1881:Src/tasks.c   ****                 {
 1621              		.loc 1 1881 19 view .LVU462
 1622 0018 10B9     		cbnz	r0, .L123
 1623              	.L120:
1905:Src/tasks.c   ****                 }
 1624              		.loc 1 1905 45 is_stmt 1 view .LVU463
1908:Src/tasks.c   ****         }
 1625              		.loc 1 1908 13 view .LVU464
 1626 001a FFF7FEFF 		bl	vPortExitCritical
 1627              	.LVL130:
1912:Src/tasks.c   ****         }
 1628              		.loc 1 1912 37 view .LVU465
 1629              	.L118:
1914:Src/tasks.c   **** 
 1630              		.loc 1 1914 5 is_stmt 0 view .LVU466
 1631 001e 38BD     		pop	{r3, r4, r5, pc}
 1632              	.LVL131:
 1633              	.L123:
1883:Src/tasks.c   **** 
 1634              		.loc 1 1883 46 is_stmt 1 view .LVU467
1887:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 1635              		.loc 1 1887 21 view .LVU468
1887:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 1636              		.loc 1 1887 30 is_stmt 0 view .LVU469
 1637 0020 251D     		adds	r5, r4, #4
 1638 0022 2846     		mov	r0, r5
 1639 0024 FFF7FEFF 		bl	uxListRemove
 1640              	.LVL132:
1888:Src/tasks.c   **** 
 1641              		.loc 1 1888 21 is_stmt 1 view .LVU470
1888:Src/tasks.c   **** 
 1642              		.loc 1 1888 21 view .LVU471
 1643 0028 E36A     		ldr	r3, [r4, #44]
 1644 002a 164A     		ldr	r2, .L124+4
 1645 002c 1268     		ldr	r2, [r2]
 1646 002e 9342     		cmp	r3, r2
 1647 0030 01D9     		bls	.L121
1888:Src/tasks.c   **** 
 1648              		.loc 1 1888 21 discriminator 1 view .LVU472
 1649 0032 144A     		ldr	r2, .L124+4
 1650 0034 1360     		str	r3, [r2]
 1651              	.L121:
1888:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 136


 1652              		.loc 1 1888 21 discriminator 3 view .LVU473
 1653              	.LBB40:
1888:Src/tasks.c   **** 
 1654              		.loc 1 1888 21 discriminator 3 view .LVU474
 1655 0036 144A     		ldr	r2, .L124+8
 1656 0038 03EB8303 		add	r3, r3, r3, lsl #2
 1657 003c 02EB8303 		add	r3, r2, r3, lsl #2
 1658 0040 5B68     		ldr	r3, [r3, #4]
 1659              	.LVL133:
1888:Src/tasks.c   **** 
 1660              		.loc 1 1888 21 discriminator 3 view .LVU475
1888:Src/tasks.c   **** 
 1661              		.loc 1 1888 21 discriminator 3 view .LVU476
1888:Src/tasks.c   **** 
 1662              		.loc 1 1888 21 discriminator 3 view .LVU477
 1663 0042 A360     		str	r3, [r4, #8]
1888:Src/tasks.c   **** 
 1664              		.loc 1 1888 21 discriminator 3 view .LVU478
 1665 0044 9968     		ldr	r1, [r3, #8]
 1666 0046 E160     		str	r1, [r4, #12]
1888:Src/tasks.c   **** 
 1667              		.loc 1 1888 21 discriminator 3 view .LVU479
 1668 0048 4D60     		str	r5, [r1, #4]
1888:Src/tasks.c   **** 
 1669              		.loc 1 1888 21 discriminator 3 view .LVU480
 1670 004a 9D60     		str	r5, [r3, #8]
1888:Src/tasks.c   **** 
 1671              		.loc 1 1888 21 discriminator 3 view .LVU481
 1672 004c E36A     		ldr	r3, [r4, #44]
 1673              	.LVL134:
1888:Src/tasks.c   **** 
 1674              		.loc 1 1888 21 is_stmt 0 discriminator 3 view .LVU482
 1675 004e 03EB8301 		add	r1, r3, r3, lsl #2
 1676 0052 8800     		lsls	r0, r1, #2
 1677 0054 02EB8101 		add	r1, r2, r1, lsl #2
 1678 0058 6161     		str	r1, [r4, #20]
1888:Src/tasks.c   **** 
 1679              		.loc 1 1888 21 is_stmt 1 discriminator 3 view .LVU483
 1680 005a 1158     		ldr	r1, [r2, r0]
 1681 005c 0131     		adds	r1, r1, #1
 1682 005e 1150     		str	r1, [r2, r0]
 1683              	.LBE40:
1888:Src/tasks.c   **** 
 1684              		.loc 1 1888 21 discriminator 3 view .LVU484
1888:Src/tasks.c   **** 
 1685              		.loc 1 1888 51 discriminator 3 view .LVU485
1891:Src/tasks.c   ****                     {
 1686              		.loc 1 1891 21 discriminator 3 view .LVU486
1891:Src/tasks.c   ****                     {
 1687              		.loc 1 1891 30 is_stmt 0 discriminator 3 view .LVU487
 1688 0060 E26A     		ldr	r2, [r4, #44]
1891:Src/tasks.c   ****                     {
 1689              		.loc 1 1891 58 discriminator 3 view .LVU488
 1690 0062 074B     		ldr	r3, .L124
 1691 0064 1B68     		ldr	r3, [r3]
 1692 0066 DB6A     		ldr	r3, [r3, #44]
1891:Src/tasks.c   ****                     {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 137


 1693              		.loc 1 1891 23 discriminator 3 view .LVU489
 1694 0068 9A42     		cmp	r2, r3
 1695 006a D6D3     		bcc	.L120
1896:Src/tasks.c   ****                     }
 1696              		.loc 1 1896 25 is_stmt 1 view .LVU490
 1697 006c 074B     		ldr	r3, .L124+12
 1698 006e 4FF08052 		mov	r2, #268435456
 1699 0072 1A60     		str	r2, [r3]
1896:Src/tasks.c   ****                     }
 1700              		.loc 1 1896 25 view .LVU491
 1701              		.syntax unified
 1702              	@ 1896 "Src/tasks.c" 1
 1703 0074 BFF34F8F 		dsb
 1704              	@ 0 "" 2
1896:Src/tasks.c   ****                     }
 1705              		.loc 1 1896 25 view .LVU492
 1706              	@ 1896 "Src/tasks.c" 1
 1707 0078 BFF36F8F 		isb
 1708              	@ 0 "" 2
1896:Src/tasks.c   ****                     }
 1709              		.loc 1 1896 56 view .LVU493
 1710              		.thumb
 1711              		.syntax unified
 1712 007c CDE7     		b	.L120
 1713              	.L125:
 1714 007e 00BF     		.align	2
 1715              	.L124:
 1716 0080 00000000 		.word	.LANCHOR10
 1717 0084 00000000 		.word	.LANCHOR13
 1718 0088 00000000 		.word	.LANCHOR4
 1719 008c 04ED00E0 		.word	-536810236
 1720              		.cfi_endproc
 1721              	.LFE15:
 1723              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1724              		.align	1
 1725              		.global	xTaskResumeFromISR
 1726              		.syntax unified
 1727              		.thumb
 1728              		.thumb_func
 1729              		.fpu softvfp
 1731              	xTaskResumeFromISR:
 1732              	.LVL135:
 1733              	.LFB16:
1923:Src/tasks.c   ****         BaseType_t xYieldRequired = pdFALSE;
 1734              		.loc 1 1923 5 view -0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 0
 1737              		@ frame_needed = 0, uses_anonymous_args = 0
1923:Src/tasks.c   ****         BaseType_t xYieldRequired = pdFALSE;
 1738              		.loc 1 1923 5 is_stmt 0 view .LVU495
 1739 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1740              	.LCFI16:
 1741              		.cfi_def_cfa_offset 24
 1742              		.cfi_offset 3, -24
 1743              		.cfi_offset 4, -20
 1744              		.cfi_offset 5, -16
 1745              		.cfi_offset 6, -12
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 138


 1746              		.cfi_offset 7, -8
 1747              		.cfi_offset 14, -4
 1748 0002 0446     		mov	r4, r0
1924:Src/tasks.c   ****         TCB_t * const pxTCB = xTaskToResume;
 1749              		.loc 1 1924 9 is_stmt 1 view .LVU496
 1750              	.LVL136:
1925:Src/tasks.c   ****         UBaseType_t uxSavedInterruptStatus;
 1751              		.loc 1 1925 9 view .LVU497
1926:Src/tasks.c   **** 
 1752              		.loc 1 1926 9 view .LVU498
1928:Src/tasks.c   **** 
 1753              		.loc 1 1928 38 view .LVU499
1946:Src/tasks.c   **** 
 1754              		.loc 1 1946 51 view .LVU500
1948:Src/tasks.c   ****         {
 1755              		.loc 1 1948 9 view .LVU501
 1756              	.LBB41:
 1757              	.LBI41:
 212:Inc/portmacro.h ****     {
 1758              		.loc 2 212 38 view .LVU502
 1759              	.LBB42:
 214:Inc/portmacro.h **** 
 1760              		.loc 2 214 9 view .LVU503
 216:Inc/portmacro.h ****         (
 1761              		.loc 2 216 9 view .LVU504
 1762              		.syntax unified
 1763              	@ 216 "Inc/portmacro.h" 1
 1764 0004 EFF31186 			mrs r6, basepri											
 1765 0008 4FF0BF03 		mov r3, #191												
 1766 000c 83F31188 		msr basepri, r3											
 1767 0010 BFF36F8F 		isb														
 1768 0014 BFF34F8F 		dsb														
 1769              	
 1770              	@ 0 "" 2
 1771              	.LVL137:
 228:Inc/portmacro.h ****     }
 1772              		.loc 2 228 9 view .LVU505
 228:Inc/portmacro.h ****     }
 1773              		.loc 2 228 9 is_stmt 0 view .LVU506
 1774              		.thumb
 1775              		.syntax unified
 1776              	.LBE42:
 1777              	.LBE41:
1950:Src/tasks.c   ****             {
 1778              		.loc 1 1950 13 is_stmt 1 view .LVU507
1950:Src/tasks.c   ****             {
 1779              		.loc 1 1950 17 is_stmt 0 view .LVU508
 1780 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1781              	.LVL138:
1950:Src/tasks.c   ****             {
 1782              		.loc 1 1950 15 view .LVU509
 1783 001c 0546     		mov	r5, r0
 1784 001e 0028     		cmp	r0, #0
 1785 0020 2CD0     		beq	.L127
1952:Src/tasks.c   **** 
 1786              		.loc 1 1952 51 is_stmt 1 view .LVU510
1955:Src/tasks.c   ****                 {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 139


 1787              		.loc 1 1955 17 view .LVU511
1955:Src/tasks.c   ****                 {
 1788              		.loc 1 1955 42 is_stmt 0 view .LVU512
 1789 0022 1D4B     		ldr	r3, .L133
 1790 0024 1B68     		ldr	r3, [r3]
1955:Src/tasks.c   ****                 {
 1791              		.loc 1 1955 19 view .LVU513
 1792 0026 002B     		cmp	r3, #0
 1793 0028 2ED1     		bne	.L128
1959:Src/tasks.c   ****                     {
 1794              		.loc 1 1959 21 is_stmt 1 view .LVU514
1959:Src/tasks.c   ****                     {
 1795              		.loc 1 1959 30 is_stmt 0 view .LVU515
 1796 002a E26A     		ldr	r2, [r4, #44]
1959:Src/tasks.c   ****                     {
 1797              		.loc 1 1959 58 view .LVU516
 1798 002c 1B4B     		ldr	r3, .L133+4
 1799 002e 1B68     		ldr	r3, [r3]
 1800 0030 DB6A     		ldr	r3, [r3, #44]
1959:Src/tasks.c   ****                     {
 1801              		.loc 1 1959 23 view .LVU517
 1802 0032 9A42     		cmp	r2, r3
 1803 0034 26D3     		bcc	.L131
1961:Src/tasks.c   **** 
 1804              		.loc 1 1961 25 is_stmt 1 view .LVU518
 1805              	.LVL139:
1966:Src/tasks.c   ****                     }
 1806              		.loc 1 1966 25 view .LVU519
1966:Src/tasks.c   ****                     }
 1807              		.loc 1 1966 39 is_stmt 0 view .LVU520
 1808 0036 0125     		movs	r5, #1
 1809 0038 194B     		ldr	r3, .L133+8
 1810 003a 1D60     		str	r5, [r3]
 1811              	.LVL140:
 1812              	.L129:
1970:Src/tasks.c   ****                     }
 1813              		.loc 1 1970 49 is_stmt 1 view .LVU521
1973:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 1814              		.loc 1 1973 21 view .LVU522
1973:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 1815              		.loc 1 1973 30 is_stmt 0 view .LVU523
 1816 003c 271D     		adds	r7, r4, #4
 1817 003e 3846     		mov	r0, r7
 1818 0040 FFF7FEFF 		bl	uxListRemove
 1819              	.LVL141:
1974:Src/tasks.c   ****                 }
 1820              		.loc 1 1974 21 is_stmt 1 view .LVU524
1974:Src/tasks.c   ****                 }
 1821              		.loc 1 1974 21 view .LVU525
 1822 0044 E36A     		ldr	r3, [r4, #44]
 1823 0046 174A     		ldr	r2, .L133+12
 1824 0048 1268     		ldr	r2, [r2]
 1825 004a 9342     		cmp	r3, r2
 1826 004c 01D9     		bls	.L130
1974:Src/tasks.c   ****                 }
 1827              		.loc 1 1974 21 discriminator 1 view .LVU526
 1828 004e 154A     		ldr	r2, .L133+12
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 140


 1829 0050 1360     		str	r3, [r2]
 1830              	.L130:
1974:Src/tasks.c   ****                 }
 1831              		.loc 1 1974 21 discriminator 3 view .LVU527
 1832              	.LBB43:
1974:Src/tasks.c   ****                 }
 1833              		.loc 1 1974 21 discriminator 3 view .LVU528
 1834 0052 154A     		ldr	r2, .L133+16
 1835 0054 03EB8303 		add	r3, r3, r3, lsl #2
 1836 0058 02EB8303 		add	r3, r2, r3, lsl #2
 1837 005c 5B68     		ldr	r3, [r3, #4]
 1838              	.LVL142:
1974:Src/tasks.c   ****                 }
 1839              		.loc 1 1974 21 discriminator 3 view .LVU529
1974:Src/tasks.c   ****                 }
 1840              		.loc 1 1974 21 discriminator 3 view .LVU530
1974:Src/tasks.c   ****                 }
 1841              		.loc 1 1974 21 discriminator 3 view .LVU531
 1842 005e A360     		str	r3, [r4, #8]
1974:Src/tasks.c   ****                 }
 1843              		.loc 1 1974 21 discriminator 3 view .LVU532
 1844 0060 9968     		ldr	r1, [r3, #8]
 1845 0062 E160     		str	r1, [r4, #12]
1974:Src/tasks.c   ****                 }
 1846              		.loc 1 1974 21 discriminator 3 view .LVU533
 1847 0064 4F60     		str	r7, [r1, #4]
1974:Src/tasks.c   ****                 }
 1848              		.loc 1 1974 21 discriminator 3 view .LVU534
 1849 0066 9F60     		str	r7, [r3, #8]
1974:Src/tasks.c   ****                 }
 1850              		.loc 1 1974 21 discriminator 3 view .LVU535
 1851 0068 E36A     		ldr	r3, [r4, #44]
 1852              	.LVL143:
1974:Src/tasks.c   ****                 }
 1853              		.loc 1 1974 21 is_stmt 0 discriminator 3 view .LVU536
 1854 006a 03EB8301 		add	r1, r3, r3, lsl #2
 1855 006e 8800     		lsls	r0, r1, #2
 1856 0070 02EB8101 		add	r1, r2, r1, lsl #2
 1857 0074 6161     		str	r1, [r4, #20]
1974:Src/tasks.c   ****                 }
 1858              		.loc 1 1974 21 is_stmt 1 discriminator 3 view .LVU537
 1859 0076 1158     		ldr	r1, [r2, r0]
 1860 0078 0131     		adds	r1, r1, #1
 1861 007a 1150     		str	r1, [r2, r0]
 1862              	.LBE43:
1974:Src/tasks.c   ****                 }
 1863              		.loc 1 1974 21 discriminator 3 view .LVU538
1974:Src/tasks.c   ****                 }
 1864              		.loc 1 1974 51 discriminator 3 view .LVU539
 1865              	.LVL144:
 1866              	.L127:
1986:Src/tasks.c   ****             }
 1867              		.loc 1 1986 41 view .LVU540
1989:Src/tasks.c   **** 
 1868              		.loc 1 1989 9 view .LVU541
 1869              	.LBB44:
 1870              	.LBI44:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 141


 232:Inc/portmacro.h ****     {
 1871              		.loc 2 232 34 view .LVU542
 1872              	.LBB45:
 1873              		.loc 2 234 9 view .LVU543
 1874              		.syntax unified
 1875              	@ 234 "Inc/portmacro.h" 1
 1876 007c 86F31188 			msr basepri, r6	
 1877              	@ 0 "" 2
 1878              	.LVL145:
 1879              		.loc 2 234 9 is_stmt 0 view .LVU544
 1880              		.thumb
 1881              		.syntax unified
 1882              	.LBE45:
 1883              	.LBE44:
1991:Src/tasks.c   ****     }
 1884              		.loc 1 1991 9 is_stmt 1 view .LVU545
1992:Src/tasks.c   **** 
 1885              		.loc 1 1992 5 is_stmt 0 view .LVU546
 1886 0080 2846     		mov	r0, r5
 1887 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1888              	.LVL146:
 1889              	.L131:
1924:Src/tasks.c   ****         TCB_t * const pxTCB = xTaskToResume;
 1890              		.loc 1 1924 20 view .LVU547
 1891 0084 0025     		movs	r5, #0
 1892 0086 D9E7     		b	.L129
 1893              	.L128:
1981:Src/tasks.c   ****                 }
 1894              		.loc 1 1981 21 is_stmt 1 view .LVU548
 1895 0088 04F11801 		add	r1, r4, #24
 1896 008c 0748     		ldr	r0, .L133+20
 1897 008e FFF7FEFF 		bl	vListInsertEnd
 1898              	.LVL147:
1924:Src/tasks.c   ****         TCB_t * const pxTCB = xTaskToResume;
 1899              		.loc 1 1924 20 is_stmt 0 view .LVU549
 1900 0092 0025     		movs	r5, #0
 1901 0094 F2E7     		b	.L127
 1902              	.L134:
 1903 0096 00BF     		.align	2
 1904              	.L133:
 1905 0098 00000000 		.word	.LANCHOR16
 1906 009c 00000000 		.word	.LANCHOR10
 1907 00a0 00000000 		.word	.LANCHOR17
 1908 00a4 00000000 		.word	.LANCHOR13
 1909 00a8 00000000 		.word	.LANCHOR4
 1910 00ac 00000000 		.word	.LANCHOR1
 1911              		.cfi_endproc
 1912              	.LFE16:
 1914              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 1915              		.align	2
 1916              	.LC0:
 1917 0000 49444C45 		.ascii	"IDLE\000"
 1917      00
 1918              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1919              		.align	1
 1920              		.global	vTaskStartScheduler
 1921              		.syntax unified
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 142


 1922              		.thumb
 1923              		.thumb_func
 1924              		.fpu softvfp
 1926              	vTaskStartScheduler:
 1927              	.LFB17:
1998:Src/tasks.c   ****     BaseType_t xReturn;
 1928              		.loc 1 1998 1 is_stmt 1 view -0
 1929              		.cfi_startproc
 1930              		@ args = 0, pretend = 0, frame = 0
 1931              		@ frame_needed = 0, uses_anonymous_args = 0
 1932 0000 00B5     		push	{lr}
 1933              	.LCFI17:
 1934              		.cfi_def_cfa_offset 4
 1935              		.cfi_offset 14, -4
 1936 0002 83B0     		sub	sp, sp, #12
 1937              	.LCFI18:
 1938              		.cfi_def_cfa_offset 16
1999:Src/tasks.c   **** 
 1939              		.loc 1 1999 5 view .LVU551
2031:Src/tasks.c   ****                                    configIDLE_TASK_NAME,
 1940              		.loc 1 2031 13 view .LVU552
2031:Src/tasks.c   ****                                    configIDLE_TASK_NAME,
 1941              		.loc 1 2031 23 is_stmt 0 view .LVU553
 1942 0004 124B     		ldr	r3, .L139
 1943 0006 0193     		str	r3, [sp, #4]
 1944 0008 0023     		movs	r3, #0
 1945 000a 0093     		str	r3, [sp]
 1946 000c 2022     		movs	r2, #32
 1947 000e 1149     		ldr	r1, .L139+4
 1948 0010 1148     		ldr	r0, .L139+8
 1949 0012 FFF7FEFF 		bl	xTaskCreate
 1950              	.LVL148:
2053:Src/tasks.c   ****     {
 1951              		.loc 1 2053 5 is_stmt 1 view .LVU554
2053:Src/tasks.c   ****     {
 1952              		.loc 1 2053 7 is_stmt 0 view .LVU555
 1953 0016 0128     		cmp	r0, #1
 1954 0018 04D0     		beq	.L138
 1955              	.LVL149:
 1956              	.L136:
2112:Src/tasks.c   ****     }
 1957              		.loc 1 2112 73 is_stmt 1 view .LVU556
2117:Src/tasks.c   **** 
 1958              		.loc 1 2117 5 view .LVU557
2121:Src/tasks.c   **** }
 1959              		.loc 1 2121 5 view .LVU558
 1960 001a 104B     		ldr	r3, .L139+12
 1961 001c 1B68     		ldr	r3, [r3]
2122:Src/tasks.c   **** /*-----------------------------------------------------------*/
 1962              		.loc 1 2122 1 is_stmt 0 view .LVU559
 1963 001e 03B0     		add	sp, sp, #12
 1964              	.LCFI19:
 1965              		.cfi_remember_state
 1966              		.cfi_def_cfa_offset 4
 1967              		@ sp needed
 1968 0020 5DF804FB 		ldr	pc, [sp], #4
 1969              	.LVL150:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 143


 1970              	.L138:
 1971              	.LCFI20:
 1972              		.cfi_restore_state
2069:Src/tasks.c   **** 
 1973              		.loc 1 2069 9 is_stmt 1 view .LVU560
 1974              	.LBB46:
 1975              	.LBI46:
 196:Inc/portmacro.h ****     {
 1976              		.loc 2 196 34 view .LVU561
 1977              	.LBB47:
 198:Inc/portmacro.h **** 
 1978              		.loc 2 198 9 view .LVU562
 200:Inc/portmacro.h ****         (
 1979              		.loc 2 200 9 view .LVU563
 1980              		.syntax unified
 1981              	@ 200 "Inc/portmacro.h" 1
 1982 0024 4FF0BF03 			mov r3, #191												
 1983 0028 83F31188 		msr basepri, r3											
 1984 002c BFF36F8F 		isb														
 1985 0030 BFF34F8F 		dsb														
 1986              	
 1987              	@ 0 "" 2
 1988              		.thumb
 1989              		.syntax unified
 1990              	.LBE47:
 1991              	.LBE46:
2081:Src/tasks.c   ****         xSchedulerRunning = pdTRUE;
 1992              		.loc 1 2081 9 view .LVU564
2081:Src/tasks.c   ****         xSchedulerRunning = pdTRUE;
 1993              		.loc 1 2081 30 is_stmt 0 view .LVU565
 1994 0034 0A4B     		ldr	r3, .L139+16
 1995 0036 4FF0FF32 		mov	r2, #-1
 1996 003a 1A60     		str	r2, [r3]
2082:Src/tasks.c   ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1997              		.loc 1 2082 9 is_stmt 1 view .LVU566
2082:Src/tasks.c   ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1998              		.loc 1 2082 27 is_stmt 0 view .LVU567
 1999 003c 094B     		ldr	r3, .L139+20
 2000 003e 0122     		movs	r2, #1
 2001 0040 1A60     		str	r2, [r3]
2083:Src/tasks.c   **** 
 2002              		.loc 1 2083 9 is_stmt 1 view .LVU568
2083:Src/tasks.c   **** 
 2003              		.loc 1 2083 20 is_stmt 0 view .LVU569
 2004 0042 094B     		ldr	r3, .L139+24
 2005 0044 0022     		movs	r2, #0
 2006 0046 1A60     		str	r2, [r3]
2091:Src/tasks.c   **** 
 2007              		.loc 1 2091 49 is_stmt 1 view .LVU570
2093:Src/tasks.c   **** 
 2008              		.loc 1 2093 32 view .LVU571
2097:Src/tasks.c   ****         {
 2009              		.loc 1 2097 9 view .LVU572
2097:Src/tasks.c   ****         {
 2010              		.loc 1 2097 13 is_stmt 0 view .LVU573
 2011 0048 FFF7FEFF 		bl	xPortStartScheduler
 2012              	.LVL151:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 144


2097:Src/tasks.c   ****         {
 2013              		.loc 1 2097 13 view .LVU574
 2014 004c E5E7     		b	.L136
 2015              	.L140:
 2016 004e 00BF     		.align	2
 2017              	.L139:
 2018 0050 00000000 		.word	.LANCHOR18
 2019 0054 00000000 		.word	.LC0
 2020 0058 00000000 		.word	prvIdleTask
 2021 005c 00000000 		.word	.LANCHOR19
 2022 0060 00000000 		.word	.LANCHOR3
 2023 0064 00000000 		.word	.LANCHOR11
 2024 0068 00000000 		.word	.LANCHOR15
 2025              		.cfi_endproc
 2026              	.LFE17:
 2028              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2029              		.align	1
 2030              		.global	vTaskEndScheduler
 2031              		.syntax unified
 2032              		.thumb
 2033              		.thumb_func
 2034              		.fpu softvfp
 2036              	vTaskEndScheduler:
 2037              	.LFB18:
2126:Src/tasks.c   ****     /* Stop the scheduler interrupts and call the portable scheduler end
 2038              		.loc 1 2126 1 is_stmt 1 view -0
 2039              		.cfi_startproc
 2040              		@ args = 0, pretend = 0, frame = 0
 2041              		@ frame_needed = 0, uses_anonymous_args = 0
 2042 0000 08B5     		push	{r3, lr}
 2043              	.LCFI21:
 2044              		.cfi_def_cfa_offset 8
 2045              		.cfi_offset 3, -8
 2046              		.cfi_offset 14, -4
2130:Src/tasks.c   ****     xSchedulerRunning = pdFALSE;
 2047              		.loc 1 2130 5 view .LVU576
 2048              	.LBB48:
 2049              	.LBI48:
 196:Inc/portmacro.h ****     {
 2050              		.loc 2 196 34 view .LVU577
 2051              	.LBB49:
 198:Inc/portmacro.h **** 
 2052              		.loc 2 198 9 view .LVU578
 200:Inc/portmacro.h ****         (
 2053              		.loc 2 200 9 view .LVU579
 2054              		.syntax unified
 2055              	@ 200 "Inc/portmacro.h" 1
 2056 0002 4FF0BF03 			mov r3, #191												
 2057 0006 83F31188 		msr basepri, r3											
 2058 000a BFF36F8F 		isb														
 2059 000e BFF34F8F 		dsb														
 2060              	
 2061              	@ 0 "" 2
 2062              		.thumb
 2063              		.syntax unified
 2064              	.LBE49:
 2065              	.LBE48:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 145


2131:Src/tasks.c   ****     vPortEndScheduler();
 2066              		.loc 1 2131 5 view .LVU580
2131:Src/tasks.c   ****     vPortEndScheduler();
 2067              		.loc 1 2131 23 is_stmt 0 view .LVU581
 2068 0012 034B     		ldr	r3, .L143
 2069 0014 0022     		movs	r2, #0
 2070 0016 1A60     		str	r2, [r3]
2132:Src/tasks.c   **** }
 2071              		.loc 1 2132 5 is_stmt 1 view .LVU582
 2072 0018 FFF7FEFF 		bl	vPortEndScheduler
 2073              	.LVL152:
2133:Src/tasks.c   **** /*----------------------------------------------------------*/
 2074              		.loc 1 2133 1 is_stmt 0 view .LVU583
 2075 001c 08BD     		pop	{r3, pc}
 2076              	.L144:
 2077 001e 00BF     		.align	2
 2078              	.L143:
 2079 0020 00000000 		.word	.LANCHOR11
 2080              		.cfi_endproc
 2081              	.LFE18:
 2083              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2084              		.align	1
 2085              		.global	vTaskSuspendAll
 2086              		.syntax unified
 2087              		.thumb
 2088              		.thumb_func
 2089              		.fpu softvfp
 2091              	vTaskSuspendAll:
 2092              	.LFB19:
2137:Src/tasks.c   ****     /* A critical section is not required as the variable is of type
 2093              		.loc 1 2137 1 is_stmt 1 view -0
 2094              		.cfi_startproc
 2095              		@ args = 0, pretend = 0, frame = 0
 2096              		@ frame_needed = 0, uses_anonymous_args = 0
 2097              		@ link register save eliminated.
2145:Src/tasks.c   **** 
 2098              		.loc 1 2145 27 view .LVU585
2149:Src/tasks.c   **** 
 2099              		.loc 1 2149 5 view .LVU586
 2100 0000 024A     		ldr	r2, .L146
 2101 0002 1368     		ldr	r3, [r2]
 2102 0004 0133     		adds	r3, r3, #1
 2103 0006 1360     		str	r3, [r2]
2153:Src/tasks.c   **** }
 2104              		.loc 1 2153 5 view .LVU587
2154:Src/tasks.c   **** /*----------------------------------------------------------*/
 2105              		.loc 1 2154 1 is_stmt 0 view .LVU588
 2106 0008 7047     		bx	lr
 2107              	.L147:
 2108 000a 00BF     		.align	2
 2109              	.L146:
 2110 000c 00000000 		.word	.LANCHOR16
 2111              		.cfi_endproc
 2112              	.LFE19:
 2114              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2115              		.align	1
 2116              		.global	xTaskGetTickCount
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 146


 2117              		.syntax unified
 2118              		.thumb
 2119              		.thumb_func
 2120              		.fpu softvfp
 2122              	xTaskGetTickCount:
 2123              	.LFB21:
2333:Src/tasks.c   ****     TickType_t xTicks;
 2124              		.loc 1 2333 1 is_stmt 1 view -0
 2125              		.cfi_startproc
 2126              		@ args = 0, pretend = 0, frame = 0
 2127              		@ frame_needed = 0, uses_anonymous_args = 0
 2128              		@ link register save eliminated.
2334:Src/tasks.c   **** 
 2129              		.loc 1 2334 5 view .LVU590
2337:Src/tasks.c   ****     {
 2130              		.loc 1 2337 35 view .LVU591
2339:Src/tasks.c   ****     }
 2131              		.loc 1 2339 9 view .LVU592
2339:Src/tasks.c   ****     }
 2132              		.loc 1 2339 16 is_stmt 0 view .LVU593
 2133 0000 014B     		ldr	r3, .L149
 2134 0002 1868     		ldr	r0, [r3]
 2135              	.LVL153:
2341:Src/tasks.c   **** 
 2136              		.loc 1 2341 34 is_stmt 1 view .LVU594
2343:Src/tasks.c   **** }
 2137              		.loc 1 2343 5 view .LVU595
2344:Src/tasks.c   **** /*-----------------------------------------------------------*/
 2138              		.loc 1 2344 1 is_stmt 0 view .LVU596
 2139 0004 7047     		bx	lr
 2140              	.L150:
 2141 0006 00BF     		.align	2
 2142              	.L149:
 2143 0008 00000000 		.word	.LANCHOR15
 2144              		.cfi_endproc
 2145              	.LFE21:
 2147              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2148              		.align	1
 2149              		.global	xTaskGetTickCountFromISR
 2150              		.syntax unified
 2151              		.thumb
 2152              		.thumb_func
 2153              		.fpu softvfp
 2155              	xTaskGetTickCountFromISR:
 2156              	.LFB22:
2348:Src/tasks.c   ****     TickType_t xReturn;
 2157              		.loc 1 2348 1 is_stmt 1 view -0
 2158              		.cfi_startproc
 2159              		@ args = 0, pretend = 0, frame = 0
 2160              		@ frame_needed = 0, uses_anonymous_args = 0
 2161              		@ link register save eliminated.
2349:Src/tasks.c   ****     UBaseType_t uxSavedInterruptStatus;
 2162              		.loc 1 2349 5 view .LVU598
2350:Src/tasks.c   **** 
 2163              		.loc 1 2350 5 view .LVU599
2366:Src/tasks.c   **** 
 2164              		.loc 1 2366 47 view .LVU600
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 147


2368:Src/tasks.c   ****     {
 2165              		.loc 1 2368 5 view .LVU601
 2166              	.LVL154:
2370:Src/tasks.c   ****     }
 2167              		.loc 1 2370 9 view .LVU602
2370:Src/tasks.c   ****     }
 2168              		.loc 1 2370 17 is_stmt 0 view .LVU603
 2169 0000 014B     		ldr	r3, .L152
 2170 0002 1868     		ldr	r0, [r3]
 2171              	.LVL155:
2372:Src/tasks.c   **** 
 2172              		.loc 1 2372 5 is_stmt 1 view .LVU604
2374:Src/tasks.c   **** }
 2173              		.loc 1 2374 5 view .LVU605
2375:Src/tasks.c   **** /*-----------------------------------------------------------*/
 2174              		.loc 1 2375 1 is_stmt 0 view .LVU606
 2175 0004 7047     		bx	lr
 2176              	.L153:
 2177 0006 00BF     		.align	2
 2178              	.L152:
 2179 0008 00000000 		.word	.LANCHOR15
 2180              		.cfi_endproc
 2181              	.LFE22:
 2183              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2184              		.align	1
 2185              		.global	uxTaskGetNumberOfTasks
 2186              		.syntax unified
 2187              		.thumb
 2188              		.thumb_func
 2189              		.fpu softvfp
 2191              	uxTaskGetNumberOfTasks:
 2192              	.LFB23:
2379:Src/tasks.c   ****     /* A critical section is not required because the variables are of type
 2193              		.loc 1 2379 1 is_stmt 1 view -0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 0
 2196              		@ frame_needed = 0, uses_anonymous_args = 0
 2197              		@ link register save eliminated.
2382:Src/tasks.c   **** }
 2198              		.loc 1 2382 5 view .LVU608
2382:Src/tasks.c   **** }
 2199              		.loc 1 2382 12 is_stmt 0 view .LVU609
 2200 0000 014B     		ldr	r3, .L155
 2201 0002 1868     		ldr	r0, [r3]
2383:Src/tasks.c   **** /*-----------------------------------------------------------*/
 2202              		.loc 1 2383 1 view .LVU610
 2203 0004 7047     		bx	lr
 2204              	.L156:
 2205 0006 00BF     		.align	2
 2206              	.L155:
 2207 0008 00000000 		.word	.LANCHOR9
 2208              		.cfi_endproc
 2209              	.LFE23:
 2211              		.section	.text.pcTaskGetName,"ax",%progbits
 2212              		.align	1
 2213              		.global	pcTaskGetName
 2214              		.syntax unified
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 148


 2215              		.thumb
 2216              		.thumb_func
 2217              		.fpu softvfp
 2219              	pcTaskGetName:
 2220              	.LVL156:
 2221              	.LFB24:
2387:Src/tasks.c   ****     TCB_t * pxTCB;
 2222              		.loc 1 2387 1 is_stmt 1 view -0
 2223              		.cfi_startproc
 2224              		@ args = 0, pretend = 0, frame = 0
 2225              		@ frame_needed = 0, uses_anonymous_args = 0
 2226              		@ link register save eliminated.
2388:Src/tasks.c   **** 
 2227              		.loc 1 2388 5 view .LVU612
2392:Src/tasks.c   ****     configASSERT( pxTCB );
 2228              		.loc 1 2392 5 view .LVU613
2392:Src/tasks.c   ****     configASSERT( pxTCB );
 2229              		.loc 1 2392 13 is_stmt 0 view .LVU614
 2230 0000 0346     		mov	r3, r0
 2231 0002 10B1     		cbz	r0, .L159
 2232              	.LVL157:
 2233              	.L158:
2393:Src/tasks.c   ****     return &( pxTCB->pcTaskName[ 0 ] );
 2234              		.loc 1 2393 26 is_stmt 1 discriminator 4 view .LVU615
2394:Src/tasks.c   **** }
 2235              		.loc 1 2394 5 discriminator 4 view .LVU616
2395:Src/tasks.c   **** /*-----------------------------------------------------------*/
 2236              		.loc 1 2395 1 is_stmt 0 discriminator 4 view .LVU617
 2237 0004 03F13400 		add	r0, r3, #52
 2238 0008 7047     		bx	lr
 2239              	.LVL158:
 2240              	.L159:
2392:Src/tasks.c   ****     configASSERT( pxTCB );
 2241              		.loc 1 2392 13 discriminator 1 view .LVU618
 2242 000a 014B     		ldr	r3, .L160
 2243 000c 1B68     		ldr	r3, [r3]
 2244              	.LVL159:
2392:Src/tasks.c   ****     configASSERT( pxTCB );
 2245              		.loc 1 2392 13 discriminator 1 view .LVU619
 2246 000e F9E7     		b	.L158
 2247              	.L161:
 2248              		.align	2
 2249              	.L160:
 2250 0010 00000000 		.word	.LANCHOR10
 2251              		.cfi_endproc
 2252              	.LFE24:
 2254              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2255              		.align	1
 2256              		.global	xTaskIncrementTick
 2257              		.syntax unified
 2258              		.thumb
 2259              		.thumb_func
 2260              		.fpu softvfp
 2262              	xTaskIncrementTick:
 2263              	.LFB26:
2737:Src/tasks.c   ****     TCB_t * pxTCB;
 2264              		.loc 1 2737 1 is_stmt 1 view -0
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 149


 2265              		.cfi_startproc
 2266              		@ args = 0, pretend = 0, frame = 0
 2267              		@ frame_needed = 0, uses_anonymous_args = 0
2738:Src/tasks.c   ****     TickType_t xItemValue;
 2268              		.loc 1 2738 5 view .LVU621
2739:Src/tasks.c   ****     BaseType_t xSwitchRequired = pdFALSE;
 2269              		.loc 1 2739 5 view .LVU622
2740:Src/tasks.c   **** 
 2270              		.loc 1 2740 5 view .LVU623
 2271              	.LVL160:
2745:Src/tasks.c   **** 
 2272              		.loc 1 2745 43 view .LVU624
2747:Src/tasks.c   ****     {
 2273              		.loc 1 2747 5 view .LVU625
2747:Src/tasks.c   ****     {
 2274              		.loc 1 2747 30 is_stmt 0 view .LVU626
 2275 0000 4B4B     		ldr	r3, .L190
 2276 0002 1B68     		ldr	r3, [r3]
2747:Src/tasks.c   ****     {
 2277              		.loc 1 2747 7 view .LVU627
 2278 0004 002B     		cmp	r3, #0
 2279 0006 40F08A80 		bne	.L163
2737:Src/tasks.c   ****     TCB_t * pxTCB;
 2280              		.loc 1 2737 1 view .LVU628
 2281 000a 70B5     		push	{r4, r5, r6, lr}
 2282              	.LCFI22:
 2283              		.cfi_def_cfa_offset 16
 2284              		.cfi_offset 4, -16
 2285              		.cfi_offset 5, -12
 2286              		.cfi_offset 6, -8
 2287              		.cfi_offset 14, -4
 2288              	.LBB50:
2751:Src/tasks.c   **** 
 2289              		.loc 1 2751 9 is_stmt 1 view .LVU629
2751:Src/tasks.c   **** 
 2290              		.loc 1 2751 55 is_stmt 0 view .LVU630
 2291 000c 494B     		ldr	r3, .L190+4
 2292 000e 1D68     		ldr	r5, [r3]
2751:Src/tasks.c   **** 
 2293              		.loc 1 2751 26 view .LVU631
 2294 0010 0135     		adds	r5, r5, #1
 2295              	.LVL161:
2755:Src/tasks.c   **** 
 2296              		.loc 1 2755 9 is_stmt 1 view .LVU632
2755:Src/tasks.c   **** 
 2297              		.loc 1 2755 20 is_stmt 0 view .LVU633
 2298 0012 1D60     		str	r5, [r3]
2757:Src/tasks.c   ****         {
 2299              		.loc 1 2757 9 is_stmt 1 view .LVU634
2757:Src/tasks.c   ****         {
 2300              		.loc 1 2757 11 is_stmt 0 view .LVU635
 2301 0014 A5B1     		cbz	r5, .L185
 2302              	.L164:
2763:Src/tasks.c   ****         }
 2303              		.loc 1 2763 37 is_stmt 1 view .LVU636
2770:Src/tasks.c   ****         {
 2304              		.loc 1 2770 9 view .LVU637
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 150


2770:Src/tasks.c   ****         {
 2305              		.loc 1 2770 29 is_stmt 0 view .LVU638
 2306 0016 484B     		ldr	r3, .L190+8
 2307 0018 1B68     		ldr	r3, [r3]
2770:Src/tasks.c   ****         {
 2308              		.loc 1 2770 11 view .LVU639
 2309 001a AB42     		cmp	r3, r5
 2310 001c 1DD9     		bls	.L177
 2311              	.LBE50:
2740:Src/tasks.c   **** 
 2312              		.loc 1 2740 16 view .LVU640
 2313 001e 0020     		movs	r0, #0
 2314              	.LVL162:
 2315              	.L166:
 2316              	.LBB57:
2853:Src/tasks.c   ****                 {
 2317              		.loc 1 2853 17 is_stmt 1 view .LVU641
2853:Src/tasks.c   ****                 {
 2318              		.loc 1 2853 21 is_stmt 0 view .LVU642
 2319 0020 464B     		ldr	r3, .L190+12
 2320 0022 1B68     		ldr	r3, [r3]
 2321 0024 DB6A     		ldr	r3, [r3, #44]
 2322 0026 03EB8303 		add	r3, r3, r3, lsl #2
 2323 002a 9A00     		lsls	r2, r3, #2
 2324 002c 444B     		ldr	r3, .L190+16
 2325 002e 9B58     		ldr	r3, [r3, r2]
2853:Src/tasks.c   ****                 {
 2326              		.loc 1 2853 19 view .LVU643
 2327 0030 012B     		cmp	r3, #1
 2328 0032 00D9     		bls	.L175
2855:Src/tasks.c   ****                 }
 2329              		.loc 1 2855 37 view .LVU644
 2330 0034 0120     		movs	r0, #1
 2331              	.LVL163:
 2332              	.L175:
2859:Src/tasks.c   ****                 }
 2333              		.loc 1 2859 45 is_stmt 1 view .LVU645
2881:Src/tasks.c   ****                 {
 2334              		.loc 1 2881 17 view .LVU646
2881:Src/tasks.c   ****                 {
 2335              		.loc 1 2881 35 is_stmt 0 view .LVU647
 2336 0036 434B     		ldr	r3, .L190+20
 2337 0038 1B68     		ldr	r3, [r3]
2881:Src/tasks.c   ****                 {
 2338              		.loc 1 2881 19 view .LVU648
 2339 003a 002B     		cmp	r3, #0
 2340 003c 75D1     		bne	.L180
 2341              	.LVL164:
 2342              	.L162:
2881:Src/tasks.c   ****                 {
 2343              		.loc 1 2881 19 view .LVU649
 2344              	.LBE57:
2906:Src/tasks.c   **** /*-----------------------------------------------------------*/
 2345              		.loc 1 2906 1 view .LVU650
 2346 003e 70BD     		pop	{r4, r5, r6, pc}
 2347              	.LVL165:
 2348              	.L185:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 151


 2349              	.LBB58:
 2350              	.LBB51:
2759:Src/tasks.c   ****         }
 2351              		.loc 1 2759 13 is_stmt 1 view .LVU651
2759:Src/tasks.c   ****         }
 2352              		.loc 1 2759 13 view .LVU652
2759:Src/tasks.c   ****         }
 2353              		.loc 1 2759 13 view .LVU653
 2354 0040 414A     		ldr	r2, .L190+24
 2355 0042 1168     		ldr	r1, [r2]
 2356              	.LVL166:
2759:Src/tasks.c   ****         }
 2357              		.loc 1 2759 13 view .LVU654
 2358 0044 414B     		ldr	r3, .L190+28
 2359 0046 1868     		ldr	r0, [r3]
 2360 0048 1060     		str	r0, [r2]
2759:Src/tasks.c   ****         }
 2361              		.loc 1 2759 13 view .LVU655
 2362 004a 1960     		str	r1, [r3]
2759:Src/tasks.c   ****         }
 2363              		.loc 1 2759 13 view .LVU656
 2364 004c 404A     		ldr	r2, .L190+32
 2365 004e 1368     		ldr	r3, [r2]
 2366 0050 0133     		adds	r3, r3, #1
 2367 0052 1360     		str	r3, [r2]
2759:Src/tasks.c   ****         }
 2368              		.loc 1 2759 13 view .LVU657
 2369 0054 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2370              	.LVL167:
2759:Src/tasks.c   ****         }
 2371              		.loc 1 2759 13 is_stmt 0 view .LVU658
 2372              	.LBE51:
2759:Src/tasks.c   ****         }
 2373              		.loc 1 2759 39 is_stmt 1 view .LVU659
 2374 0058 DDE7     		b	.L164
 2375              	.L177:
2759:Src/tasks.c   ****         }
 2376              		.loc 1 2759 39 is_stmt 0 view .LVU660
 2377              	.LBE58:
2740:Src/tasks.c   **** 
 2378              		.loc 1 2740 16 view .LVU661
 2379 005a 0020     		movs	r0, #0
 2380 005c 36E0     		b	.L165
 2381              	.LVL168:
 2382              	.L186:
 2383              	.LBB59:
2781:Src/tasks.c   ****                     break;
 2384              		.loc 1 2781 21 is_stmt 1 view .LVU662
2781:Src/tasks.c   ****                     break;
 2385              		.loc 1 2781 42 is_stmt 0 view .LVU663
 2386 005e 364B     		ldr	r3, .L190+8
 2387 0060 4FF0FF32 		mov	r2, #-1
 2388 0064 1A60     		str	r2, [r3]
2782:Src/tasks.c   ****                 }
 2389              		.loc 1 2782 21 is_stmt 1 view .LVU664
 2390 0066 DBE7     		b	.L166
 2391              	.LVL169:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 152


 2392              	.L187:
2800:Src/tasks.c   ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2393              		.loc 1 2800 25 view .LVU665
2800:Src/tasks.c   ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2394              		.loc 1 2800 46 is_stmt 0 view .LVU666
 2395 0068 334B     		ldr	r3, .L190+8
 2396              	.LVL170:
2800:Src/tasks.c   ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2397              		.loc 1 2800 46 view .LVU667
 2398 006a 1A60     		str	r2, [r3]
2801:Src/tasks.c   ****                     }
 2399              		.loc 1 2801 25 is_stmt 1 view .LVU668
 2400 006c D8E7     		b	.L166
 2401              	.LVL171:
 2402              	.L188:
 2403              	.LBB52:
2809:Src/tasks.c   **** 
 2404              		.loc 1 2809 21 discriminator 1 view .LVU669
 2405 006e D968     		ldr	r1, [r3, #12]
 2406 0070 5160     		str	r1, [r2, #4]
 2407 0072 41E0     		b	.L169
 2408              	.LVL172:
 2409              	.L189:
2809:Src/tasks.c   **** 
 2410              		.loc 1 2809 21 is_stmt 0 discriminator 1 view .LVU670
 2411              	.LBE52:
 2412              	.LBB53:
2815:Src/tasks.c   ****                     }
 2413              		.loc 1 2815 25 is_stmt 1 discriminator 1 view .LVU671
 2414 0074 196A     		ldr	r1, [r3, #32]
 2415 0076 5160     		str	r1, [r2, #4]
 2416              	.L171:
2815:Src/tasks.c   ****                     }
 2417              		.loc 1 2815 25 discriminator 3 view .LVU672
 2418 0078 0021     		movs	r1, #0
 2419 007a 9962     		str	r1, [r3, #40]
2815:Src/tasks.c   ****                     }
 2420              		.loc 1 2815 25 discriminator 3 view .LVU673
 2421 007c 1168     		ldr	r1, [r2]
 2422 007e 0139     		subs	r1, r1, #1
 2423 0080 1160     		str	r1, [r2]
 2424              	.LBE53:
2815:Src/tasks.c   ****                     }
 2425              		.loc 1 2815 70 discriminator 3 view .LVU674
 2426              	.LVL173:
 2427              	.L170:
2819:Src/tasks.c   ****                     }
 2428              		.loc 1 2819 49 view .LVU675
2824:Src/tasks.c   **** 
 2429              		.loc 1 2824 21 view .LVU676
2824:Src/tasks.c   **** 
 2430              		.loc 1 2824 21 view .LVU677
 2431 0082 DA6A     		ldr	r2, [r3, #44]
 2432 0084 3349     		ldr	r1, .L190+36
 2433 0086 0968     		ldr	r1, [r1]
 2434 0088 8A42     		cmp	r2, r1
 2435 008a 01D9     		bls	.L172
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 153


2824:Src/tasks.c   **** 
 2436              		.loc 1 2824 21 discriminator 1 view .LVU678
 2437 008c 3149     		ldr	r1, .L190+36
 2438 008e 0A60     		str	r2, [r1]
 2439              	.L172:
2824:Src/tasks.c   **** 
 2440              		.loc 1 2824 21 discriminator 3 view .LVU679
 2441              	.LBB54:
2824:Src/tasks.c   **** 
 2442              		.loc 1 2824 21 discriminator 3 view .LVU680
 2443 0090 2B49     		ldr	r1, .L190+16
 2444 0092 02EB8202 		add	r2, r2, r2, lsl #2
 2445 0096 9400     		lsls	r4, r2, #2
 2446 0098 0C44     		add	r4, r4, r1
 2447 009a 6268     		ldr	r2, [r4, #4]
 2448              	.LVL174:
2824:Src/tasks.c   **** 
 2449              		.loc 1 2824 21 discriminator 3 view .LVU681
2824:Src/tasks.c   **** 
 2450              		.loc 1 2824 21 discriminator 3 view .LVU682
2824:Src/tasks.c   **** 
 2451              		.loc 1 2824 21 discriminator 3 view .LVU683
 2452 009c 9A60     		str	r2, [r3, #8]
2824:Src/tasks.c   **** 
 2453              		.loc 1 2824 21 discriminator 3 view .LVU684
 2454 009e 9468     		ldr	r4, [r2, #8]
 2455 00a0 DC60     		str	r4, [r3, #12]
2824:Src/tasks.c   **** 
 2456              		.loc 1 2824 21 discriminator 3 view .LVU685
 2457 00a2 6660     		str	r6, [r4, #4]
2824:Src/tasks.c   **** 
 2458              		.loc 1 2824 21 discriminator 3 view .LVU686
 2459 00a4 9660     		str	r6, [r2, #8]
2824:Src/tasks.c   **** 
 2460              		.loc 1 2824 21 discriminator 3 view .LVU687
 2461 00a6 DA6A     		ldr	r2, [r3, #44]
 2462              	.LVL175:
2824:Src/tasks.c   **** 
 2463              		.loc 1 2824 21 is_stmt 0 discriminator 3 view .LVU688
 2464 00a8 02EB8206 		add	r6, r2, r2, lsl #2
 2465 00ac B400     		lsls	r4, r6, #2
 2466 00ae 0E19     		adds	r6, r1, r4
 2467 00b0 5E61     		str	r6, [r3, #20]
2824:Src/tasks.c   **** 
 2468              		.loc 1 2824 21 is_stmt 1 discriminator 3 view .LVU689
 2469 00b2 0C59     		ldr	r4, [r1, r4]
 2470 00b4 0134     		adds	r4, r4, #1
 2471 00b6 02EB8202 		add	r2, r2, r2, lsl #2
 2472 00ba 9600     		lsls	r6, r2, #2
 2473 00bc 8C51     		str	r4, [r1, r6]
 2474              	.LBE54:
2824:Src/tasks.c   **** 
 2475              		.loc 1 2824 21 discriminator 3 view .LVU690
2824:Src/tasks.c   **** 
 2476              		.loc 1 2824 51 discriminator 3 view .LVU691
2834:Src/tasks.c   ****                             {
 2477              		.loc 1 2834 29 discriminator 3 view .LVU692
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 154


2834:Src/tasks.c   ****                             {
 2478              		.loc 1 2834 38 is_stmt 0 discriminator 3 view .LVU693
 2479 00be DA6A     		ldr	r2, [r3, #44]
2834:Src/tasks.c   ****                             {
 2480              		.loc 1 2834 66 discriminator 3 view .LVU694
 2481 00c0 1E4B     		ldr	r3, .L190+12
 2482              	.LVL176:
2834:Src/tasks.c   ****                             {
 2483              		.loc 1 2834 66 discriminator 3 view .LVU695
 2484 00c2 1B68     		ldr	r3, [r3]
 2485 00c4 DB6A     		ldr	r3, [r3, #44]
2834:Src/tasks.c   ****                             {
 2486              		.loc 1 2834 31 discriminator 3 view .LVU696
 2487 00c6 9A42     		cmp	r2, r3
 2488 00c8 00D3     		bcc	.L165
2836:Src/tasks.c   ****                             }
 2489              		.loc 1 2836 49 view .LVU697
 2490 00ca 0120     		movs	r0, #1
 2491              	.LVL177:
 2492              	.L165:
2772:Src/tasks.c   ****             {
 2493              		.loc 1 2772 13 is_stmt 1 view .LVU698
2774:Src/tasks.c   ****                 {
 2494              		.loc 1 2774 17 view .LVU699
2774:Src/tasks.c   ****                 {
 2495              		.loc 1 2774 21 is_stmt 0 view .LVU700
 2496 00cc 1E4B     		ldr	r3, .L190+24
 2497 00ce 1B68     		ldr	r3, [r3]
 2498 00d0 1B68     		ldr	r3, [r3]
2774:Src/tasks.c   ****                 {
 2499              		.loc 1 2774 19 view .LVU701
 2500 00d2 002B     		cmp	r3, #0
 2501 00d4 C3D0     		beq	.L186
2790:Src/tasks.c   ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2502              		.loc 1 2790 21 is_stmt 1 view .LVU702
2790:Src/tasks.c   ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2503              		.loc 1 2790 29 is_stmt 0 view .LVU703
 2504 00d6 1C4B     		ldr	r3, .L190+24
 2505 00d8 1B68     		ldr	r3, [r3]
 2506 00da DB68     		ldr	r3, [r3, #12]
2790:Src/tasks.c   ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2507              		.loc 1 2790 27 view .LVU704
 2508 00dc DB68     		ldr	r3, [r3, #12]
 2509              	.LVL178:
2791:Src/tasks.c   **** 
 2510              		.loc 1 2791 21 is_stmt 1 view .LVU705
2791:Src/tasks.c   **** 
 2511              		.loc 1 2791 32 is_stmt 0 view .LVU706
 2512 00de 5A68     		ldr	r2, [r3, #4]
 2513              	.LVL179:
2793:Src/tasks.c   ****                     {
 2514              		.loc 1 2793 21 is_stmt 1 view .LVU707
2793:Src/tasks.c   ****                     {
 2515              		.loc 1 2793 23 is_stmt 0 view .LVU708
 2516 00e0 9542     		cmp	r5, r2
 2517 00e2 C1D3     		bcc	.L187
2805:Src/tasks.c   ****                     }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 155


 2518              		.loc 1 2805 49 is_stmt 1 view .LVU709
 2519              	.LBB55:
2809:Src/tasks.c   **** 
 2520              		.loc 1 2809 21 view .LVU710
 2521 00e4 5A69     		ldr	r2, [r3, #20]
 2522              	.LVL180:
2809:Src/tasks.c   **** 
 2523              		.loc 1 2809 21 view .LVU711
 2524 00e6 9C68     		ldr	r4, [r3, #8]
 2525 00e8 D968     		ldr	r1, [r3, #12]
 2526 00ea A160     		str	r1, [r4, #8]
 2527              	.LVL181:
2809:Src/tasks.c   **** 
 2528              		.loc 1 2809 21 view .LVU712
 2529 00ec 9C68     		ldr	r4, [r3, #8]
 2530 00ee 4C60     		str	r4, [r1, #4]
2809:Src/tasks.c   **** 
 2531              		.loc 1 2809 21 view .LVU713
 2532 00f0 5168     		ldr	r1, [r2, #4]
 2533 00f2 1E1D     		adds	r6, r3, #4
 2534 00f4 B142     		cmp	r1, r6
 2535 00f6 BAD0     		beq	.L188
 2536              	.L169:
2809:Src/tasks.c   **** 
 2537              		.loc 1 2809 21 discriminator 3 view .LVU714
 2538 00f8 0021     		movs	r1, #0
 2539 00fa 5961     		str	r1, [r3, #20]
2809:Src/tasks.c   **** 
 2540              		.loc 1 2809 21 discriminator 3 view .LVU715
 2541 00fc 1168     		ldr	r1, [r2]
 2542 00fe 0139     		subs	r1, r1, #1
 2543 0100 1160     		str	r1, [r2]
 2544              	.LBE55:
2809:Src/tasks.c   **** 
 2545              		.loc 1 2809 66 discriminator 3 view .LVU716
2813:Src/tasks.c   ****                     {
 2546              		.loc 1 2813 21 discriminator 3 view .LVU717
2813:Src/tasks.c   ****                     {
 2547              		.loc 1 2813 25 is_stmt 0 discriminator 3 view .LVU718
 2548 0102 9A6A     		ldr	r2, [r3, #40]
 2549              	.LVL182:
2813:Src/tasks.c   ****                     {
 2550              		.loc 1 2813 23 discriminator 3 view .LVU719
 2551 0104 002A     		cmp	r2, #0
 2552 0106 BCD0     		beq	.L170
 2553              	.LBB56:
2815:Src/tasks.c   ****                     }
 2554              		.loc 1 2815 25 is_stmt 1 view .LVU720
 2555              	.LVL183:
2815:Src/tasks.c   ****                     }
 2556              		.loc 1 2815 25 view .LVU721
 2557 0108 DC69     		ldr	r4, [r3, #28]
 2558 010a 196A     		ldr	r1, [r3, #32]
 2559 010c A160     		str	r1, [r4, #8]
2815:Src/tasks.c   ****                     }
 2560              		.loc 1 2815 25 view .LVU722
 2561 010e DC69     		ldr	r4, [r3, #28]
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 156


 2562 0110 4C60     		str	r4, [r1, #4]
2815:Src/tasks.c   ****                     }
 2563              		.loc 1 2815 25 view .LVU723
 2564 0112 5468     		ldr	r4, [r2, #4]
 2565 0114 03F11801 		add	r1, r3, #24
 2566 0118 8C42     		cmp	r4, r1
 2567 011a ADD1     		bne	.L171
 2568 011c AAE7     		b	.L189
 2569              	.LVL184:
 2570              	.L163:
 2571              	.LCFI23:
 2572              		.cfi_def_cfa_offset 0
 2573              		.cfi_restore 4
 2574              		.cfi_restore 5
 2575              		.cfi_restore 6
 2576              		.cfi_restore 14
2815:Src/tasks.c   ****                     }
 2577              		.loc 1 2815 25 is_stmt 0 view .LVU724
 2578              	.LBE56:
 2579              	.LBE59:
2894:Src/tasks.c   **** 
 2580              		.loc 1 2894 9 is_stmt 1 view .LVU725
 2581 011e 0E4A     		ldr	r2, .L190+40
 2582 0120 1368     		ldr	r3, [r2]
 2583 0122 0133     		adds	r3, r3, #1
 2584 0124 1360     		str	r3, [r2]
2740:Src/tasks.c   **** 
 2585              		.loc 1 2740 16 is_stmt 0 view .LVU726
 2586 0126 0020     		movs	r0, #0
2906:Src/tasks.c   **** /*-----------------------------------------------------------*/
 2587              		.loc 1 2906 1 view .LVU727
 2588 0128 7047     		bx	lr
 2589              	.LVL185:
 2590              	.L180:
 2591              	.LCFI24:
 2592              		.cfi_def_cfa_offset 16
 2593              		.cfi_offset 4, -16
 2594              		.cfi_offset 5, -12
 2595              		.cfi_offset 6, -8
 2596              		.cfi_offset 14, -4
 2597              	.LBB60:
2883:Src/tasks.c   ****                 }
 2598              		.loc 1 2883 37 view .LVU728
 2599 012a 0120     		movs	r0, #1
 2600              	.LVL186:
2883:Src/tasks.c   ****                 }
 2601              		.loc 1 2883 37 view .LVU729
 2602              	.LBE60:
2905:Src/tasks.c   **** }
 2603              		.loc 1 2905 5 is_stmt 1 view .LVU730
2905:Src/tasks.c   **** }
 2604              		.loc 1 2905 12 is_stmt 0 view .LVU731
 2605 012c 87E7     		b	.L162
 2606              	.L191:
 2607 012e 00BF     		.align	2
 2608              	.L190:
 2609 0130 00000000 		.word	.LANCHOR16
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 157


 2610 0134 00000000 		.word	.LANCHOR15
 2611 0138 00000000 		.word	.LANCHOR3
 2612 013c 00000000 		.word	.LANCHOR10
 2613 0140 00000000 		.word	.LANCHOR4
 2614 0144 00000000 		.word	.LANCHOR17
 2615 0148 00000000 		.word	.LANCHOR2
 2616 014c 00000000 		.word	.LANCHOR8
 2617 0150 00000000 		.word	.LANCHOR20
 2618 0154 00000000 		.word	.LANCHOR13
 2619 0158 00000000 		.word	.LANCHOR21
 2620              		.cfi_endproc
 2621              	.LFE26:
 2623              		.section	.text.xTaskResumeAll,"ax",%progbits
 2624              		.align	1
 2625              		.global	xTaskResumeAll
 2626              		.syntax unified
 2627              		.thumb
 2628              		.thumb_func
 2629              		.fpu softvfp
 2631              	xTaskResumeAll:
 2632              	.LFB20:
2221:Src/tasks.c   ****     TCB_t * pxTCB = NULL;
 2633              		.loc 1 2221 1 is_stmt 1 view -0
 2634              		.cfi_startproc
 2635              		@ args = 0, pretend = 0, frame = 0
 2636              		@ frame_needed = 0, uses_anonymous_args = 0
 2637 0000 10B5     		push	{r4, lr}
 2638              	.LCFI25:
 2639              		.cfi_def_cfa_offset 8
 2640              		.cfi_offset 4, -8
 2641              		.cfi_offset 14, -4
2222:Src/tasks.c   ****     BaseType_t xAlreadyYielded = pdFALSE;
 2642              		.loc 1 2222 5 view .LVU733
 2643              	.LVL187:
2223:Src/tasks.c   **** 
 2644              		.loc 1 2223 5 view .LVU734
2227:Src/tasks.c   **** 
 2645              		.loc 1 2227 41 view .LVU735
2234:Src/tasks.c   ****     {
 2646              		.loc 1 2234 5 view .LVU736
 2647 0002 FFF7FEFF 		bl	vPortEnterCritical
 2648              	.LVL188:
2236:Src/tasks.c   **** 
 2649              		.loc 1 2236 9 view .LVU737
 2650 0006 424B     		ldr	r3, .L211
 2651 0008 1A68     		ldr	r2, [r3]
 2652 000a 013A     		subs	r2, r2, #1
 2653 000c 1A60     		str	r2, [r3]
2238:Src/tasks.c   ****         {
 2654              		.loc 1 2238 9 view .LVU738
2238:Src/tasks.c   ****         {
 2655              		.loc 1 2238 34 is_stmt 0 view .LVU739
 2656 000e 1B68     		ldr	r3, [r3]
2238:Src/tasks.c   ****         {
 2657              		.loc 1 2238 11 view .LVU740
 2658 0010 002B     		cmp	r3, #0
 2659 0012 78D1     		bne	.L204
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 158


2240:Src/tasks.c   ****             {
 2660              		.loc 1 2240 13 is_stmt 1 view .LVU741
2240:Src/tasks.c   ****             {
 2661              		.loc 1 2240 40 is_stmt 0 view .LVU742
 2662 0014 3F4B     		ldr	r3, .L211+4
 2663 0016 1B68     		ldr	r3, [r3]
2240:Src/tasks.c   ****             {
 2664              		.loc 1 2240 15 view .LVU743
 2665 0018 3BB9     		cbnz	r3, .L205
2223:Src/tasks.c   **** 
 2666              		.loc 1 2223 16 view .LVU744
 2667 001a 0024     		movs	r4, #0
 2668 001c 74E0     		b	.L193
 2669              	.LVL189:
 2670              	.L208:
 2671              	.LBB61:
2247:Src/tasks.c   ****                     portMEMORY_BARRIER();
 2672              		.loc 1 2247 21 is_stmt 1 discriminator 1 view .LVU745
 2673 001e 196A     		ldr	r1, [r3, #32]
 2674 0020 5160     		str	r1, [r2, #4]
 2675 0022 15E0     		b	.L195
 2676              	.LVL190:
 2677              	.L209:
2247:Src/tasks.c   ****                     portMEMORY_BARRIER();
 2678              		.loc 1 2247 21 is_stmt 0 discriminator 1 view .LVU746
 2679              	.LBE61:
 2680              	.LBB62:
2249:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 2681              		.loc 1 2249 21 is_stmt 1 discriminator 1 view .LVU747
 2682 0024 D968     		ldr	r1, [r3, #12]
 2683 0026 5160     		str	r1, [r2, #4]
 2684 0028 21E0     		b	.L196
 2685              	.LVL191:
 2686              	.L205:
2249:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 2687              		.loc 1 2249 21 is_stmt 0 discriminator 1 view .LVU748
 2688              	.LBE62:
2222:Src/tasks.c   ****     BaseType_t xAlreadyYielded = pdFALSE;
 2689              		.loc 1 2222 13 view .LVU749
 2690 002a 0023     		movs	r3, #0
 2691              	.LVL192:
 2692              	.L194:
2260:Src/tasks.c   ****                     }
 2693              		.loc 1 2260 49 is_stmt 1 view .LVU750
2244:Src/tasks.c   ****                 {
 2694              		.loc 1 2244 22 view .LVU751
2244:Src/tasks.c   ****                 {
 2695              		.loc 1 2244 24 is_stmt 0 view .LVU752
 2696 002c 3A4A     		ldr	r2, .L211+8
 2697 002e 1268     		ldr	r2, [r2]
2244:Src/tasks.c   ****                 {
 2698              		.loc 1 2244 22 view .LVU753
 2699 0030 002A     		cmp	r2, #0
 2700 0032 47D0     		beq	.L207
2246:Src/tasks.c   ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2701              		.loc 1 2246 21 is_stmt 1 view .LVU754
2246:Src/tasks.c   ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 159


 2702              		.loc 1 2246 29 is_stmt 0 view .LVU755
 2703 0034 384B     		ldr	r3, .L211+8
 2704              	.LVL193:
2246:Src/tasks.c   ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2705              		.loc 1 2246 29 view .LVU756
 2706 0036 DB68     		ldr	r3, [r3, #12]
2246:Src/tasks.c   ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2707              		.loc 1 2246 27 view .LVU757
 2708 0038 DB68     		ldr	r3, [r3, #12]
 2709              	.LVL194:
 2710              	.LBB63:
2247:Src/tasks.c   ****                     portMEMORY_BARRIER();
 2711              		.loc 1 2247 21 is_stmt 1 view .LVU758
 2712 003a 9A6A     		ldr	r2, [r3, #40]
 2713              	.LVL195:
2247:Src/tasks.c   ****                     portMEMORY_BARRIER();
 2714              		.loc 1 2247 21 view .LVU759
 2715 003c D869     		ldr	r0, [r3, #28]
 2716 003e 196A     		ldr	r1, [r3, #32]
 2717 0040 8160     		str	r1, [r0, #8]
2247:Src/tasks.c   ****                     portMEMORY_BARRIER();
 2718              		.loc 1 2247 21 view .LVU760
 2719 0042 D869     		ldr	r0, [r3, #28]
 2720 0044 4860     		str	r0, [r1, #4]
2247:Src/tasks.c   ****                     portMEMORY_BARRIER();
 2721              		.loc 1 2247 21 view .LVU761
 2722 0046 5068     		ldr	r0, [r2, #4]
 2723 0048 03F11801 		add	r1, r3, #24
 2724 004c 8842     		cmp	r0, r1
 2725 004e E6D0     		beq	.L208
 2726              	.L195:
2247:Src/tasks.c   ****                     portMEMORY_BARRIER();
 2727              		.loc 1 2247 21 discriminator 3 view .LVU762
 2728 0050 0021     		movs	r1, #0
 2729 0052 9962     		str	r1, [r3, #40]
2247:Src/tasks.c   ****                     portMEMORY_BARRIER();
 2730              		.loc 1 2247 21 discriminator 3 view .LVU763
 2731 0054 1168     		ldr	r1, [r2]
 2732 0056 0139     		subs	r1, r1, #1
 2733 0058 1160     		str	r1, [r2]
 2734              	.LBE63:
2247:Src/tasks.c   ****                     portMEMORY_BARRIER();
 2735              		.loc 1 2247 66 discriminator 3 view .LVU764
2248:Src/tasks.c   ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 2736              		.loc 1 2248 21 discriminator 3 view .LVU765
 2737              	.LBB64:
2249:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 2738              		.loc 1 2249 21 discriminator 3 view .LVU766
 2739 005a 5A69     		ldr	r2, [r3, #20]
 2740              	.LVL196:
2249:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 2741              		.loc 1 2249 21 discriminator 3 view .LVU767
 2742 005c 9868     		ldr	r0, [r3, #8]
 2743 005e D968     		ldr	r1, [r3, #12]
 2744 0060 8160     		str	r1, [r0, #8]
2249:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 2745              		.loc 1 2249 21 discriminator 3 view .LVU768
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 160


 2746 0062 9868     		ldr	r0, [r3, #8]
 2747 0064 4860     		str	r0, [r1, #4]
2249:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 2748              		.loc 1 2249 21 discriminator 3 view .LVU769
 2749 0066 5168     		ldr	r1, [r2, #4]
 2750 0068 181D     		adds	r0, r3, #4
 2751 006a 8142     		cmp	r1, r0
 2752 006c DAD0     		beq	.L209
 2753              	.L196:
2249:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 2754              		.loc 1 2249 21 discriminator 3 view .LVU770
 2755 006e 0021     		movs	r1, #0
 2756 0070 5961     		str	r1, [r3, #20]
2249:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 2757              		.loc 1 2249 21 discriminator 3 view .LVU771
 2758 0072 1168     		ldr	r1, [r2]
 2759 0074 0139     		subs	r1, r1, #1
 2760 0076 1160     		str	r1, [r2]
 2761              	.LBE64:
2249:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 2762              		.loc 1 2249 66 discriminator 3 view .LVU772
2250:Src/tasks.c   **** 
 2763              		.loc 1 2250 21 discriminator 3 view .LVU773
2250:Src/tasks.c   **** 
 2764              		.loc 1 2250 21 discriminator 3 view .LVU774
 2765 0078 DA6A     		ldr	r2, [r3, #44]
 2766              	.LVL197:
2250:Src/tasks.c   **** 
 2767              		.loc 1 2250 21 is_stmt 0 discriminator 3 view .LVU775
 2768 007a 2849     		ldr	r1, .L211+12
 2769 007c 0968     		ldr	r1, [r1]
 2770 007e 8A42     		cmp	r2, r1
 2771 0080 01D9     		bls	.L197
2250:Src/tasks.c   **** 
 2772              		.loc 1 2250 21 is_stmt 1 discriminator 1 view .LVU776
 2773 0082 2649     		ldr	r1, .L211+12
 2774 0084 0A60     		str	r2, [r1]
 2775              	.L197:
2250:Src/tasks.c   **** 
 2776              		.loc 1 2250 21 discriminator 3 view .LVU777
 2777              	.LBB65:
2250:Src/tasks.c   **** 
 2778              		.loc 1 2250 21 discriminator 3 view .LVU778
 2779 0086 2649     		ldr	r1, .L211+16
 2780 0088 02EB8202 		add	r2, r2, r2, lsl #2
 2781 008c 01EB8202 		add	r2, r1, r2, lsl #2
 2782 0090 5268     		ldr	r2, [r2, #4]
 2783              	.LVL198:
2250:Src/tasks.c   **** 
 2784              		.loc 1 2250 21 discriminator 3 view .LVU779
2250:Src/tasks.c   **** 
 2785              		.loc 1 2250 21 discriminator 3 view .LVU780
2250:Src/tasks.c   **** 
 2786              		.loc 1 2250 21 discriminator 3 view .LVU781
 2787 0092 9A60     		str	r2, [r3, #8]
2250:Src/tasks.c   **** 
 2788              		.loc 1 2250 21 discriminator 3 view .LVU782
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 161


 2789 0094 9468     		ldr	r4, [r2, #8]
 2790 0096 DC60     		str	r4, [r3, #12]
2250:Src/tasks.c   **** 
 2791              		.loc 1 2250 21 discriminator 3 view .LVU783
 2792 0098 6060     		str	r0, [r4, #4]
2250:Src/tasks.c   **** 
 2793              		.loc 1 2250 21 discriminator 3 view .LVU784
 2794 009a 9060     		str	r0, [r2, #8]
2250:Src/tasks.c   **** 
 2795              		.loc 1 2250 21 discriminator 3 view .LVU785
 2796 009c DA6A     		ldr	r2, [r3, #44]
 2797              	.LVL199:
2250:Src/tasks.c   **** 
 2798              		.loc 1 2250 21 is_stmt 0 discriminator 3 view .LVU786
 2799 009e 02EB8200 		add	r0, r2, r2, lsl #2
 2800 00a2 8400     		lsls	r4, r0, #2
 2801 00a4 01EB8000 		add	r0, r1, r0, lsl #2
 2802 00a8 5861     		str	r0, [r3, #20]
2250:Src/tasks.c   **** 
 2803              		.loc 1 2250 21 is_stmt 1 discriminator 3 view .LVU787
 2804 00aa 0859     		ldr	r0, [r1, r4]
 2805 00ac 0130     		adds	r0, r0, #1
 2806 00ae 0851     		str	r0, [r1, r4]
 2807              	.LBE65:
2250:Src/tasks.c   **** 
 2808              		.loc 1 2250 21 discriminator 3 view .LVU788
2250:Src/tasks.c   **** 
 2809              		.loc 1 2250 51 discriminator 3 view .LVU789
2254:Src/tasks.c   ****                     {
 2810              		.loc 1 2254 21 discriminator 3 view .LVU790
2254:Src/tasks.c   ****                     {
 2811              		.loc 1 2254 30 is_stmt 0 discriminator 3 view .LVU791
 2812 00b0 D96A     		ldr	r1, [r3, #44]
2254:Src/tasks.c   ****                     {
 2813              		.loc 1 2254 58 discriminator 3 view .LVU792
 2814 00b2 1C4A     		ldr	r2, .L211+20
 2815 00b4 1268     		ldr	r2, [r2]
 2816 00b6 D26A     		ldr	r2, [r2, #44]
2254:Src/tasks.c   ****                     {
 2817              		.loc 1 2254 23 discriminator 3 view .LVU793
 2818 00b8 9142     		cmp	r1, r2
 2819 00ba B7D3     		bcc	.L194
2256:Src/tasks.c   ****                     }
 2820              		.loc 1 2256 25 is_stmt 1 view .LVU794
2256:Src/tasks.c   ****                     }
 2821              		.loc 1 2256 39 is_stmt 0 view .LVU795
 2822 00bc 1A4A     		ldr	r2, .L211+24
 2823 00be 0121     		movs	r1, #1
 2824 00c0 1160     		str	r1, [r2]
 2825 00c2 B3E7     		b	.L194
 2826              	.L207:
2264:Src/tasks.c   ****                 {
 2827              		.loc 1 2264 17 is_stmt 1 view .LVU796
2264:Src/tasks.c   ****                 {
 2828              		.loc 1 2264 19 is_stmt 0 view .LVU797
 2829 00c4 0BB1     		cbz	r3, .L200
2272:Src/tasks.c   ****                 }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 162


 2830              		.loc 1 2272 21 is_stmt 1 view .LVU798
 2831 00c6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2832              	.LVL200:
 2833              	.L200:
 2834              	.LBB66:
2280:Src/tasks.c   **** 
 2835              		.loc 1 2280 21 view .LVU799
2280:Src/tasks.c   **** 
 2836              		.loc 1 2280 32 is_stmt 0 view .LVU800
 2837 00ca 184B     		ldr	r3, .L211+28
 2838 00cc 1C68     		ldr	r4, [r3]
 2839              	.LVL201:
2282:Src/tasks.c   ****                     {
 2840              		.loc 1 2282 21 is_stmt 1 view .LVU801
2282:Src/tasks.c   ****                     {
 2841              		.loc 1 2282 23 is_stmt 0 view .LVU802
 2842 00ce 74B9     		cbnz	r4, .L203
 2843              	.L201:
2302:Src/tasks.c   ****                     }
 2844              		.loc 1 2302 49 is_stmt 1 view .LVU803
 2845              	.LBE66:
2306:Src/tasks.c   ****                 {
 2846              		.loc 1 2306 17 view .LVU804
2306:Src/tasks.c   ****                 {
 2847              		.loc 1 2306 35 is_stmt 0 view .LVU805
 2848 00d0 154B     		ldr	r3, .L211+24
 2849 00d2 1C68     		ldr	r4, [r3]
 2850              	.LVL202:
2306:Src/tasks.c   ****                 {
 2851              		.loc 1 2306 19 view .LVU806
 2852 00d4 C4B1     		cbz	r4, .L193
2310:Src/tasks.c   ****                         }
 2853              		.loc 1 2310 29 is_stmt 1 view .LVU807
 2854              	.LVL203:
2313:Src/tasks.c   ****                 }
 2855              		.loc 1 2313 21 view .LVU808
 2856 00d6 164B     		ldr	r3, .L211+32
 2857 00d8 4FF08052 		mov	r2, #268435456
 2858 00dc 1A60     		str	r2, [r3]
2313:Src/tasks.c   ****                 }
 2859              		.loc 1 2313 21 view .LVU809
 2860              		.syntax unified
 2861              	@ 2313 "Src/tasks.c" 1
 2862 00de BFF34F8F 		dsb
 2863              	@ 0 "" 2
2313:Src/tasks.c   ****                 }
 2864              		.loc 1 2313 21 view .LVU810
 2865              	@ 2313 "Src/tasks.c" 1
 2866 00e2 BFF36F8F 		isb
 2867              	@ 0 "" 2
2313:Src/tasks.c   ****                 }
 2868              		.loc 1 2313 52 view .LVU811
2310:Src/tasks.c   ****                         }
 2869              		.loc 1 2310 45 is_stmt 0 view .LVU812
 2870              		.thumb
 2871              		.syntax unified
 2872 00e6 0124     		movs	r4, #1
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 163


 2873 00e8 0EE0     		b	.L193
 2874              	.LVL204:
 2875              	.L202:
 2876              	.LBB67:
2292:Src/tasks.c   ****                             }
 2877              		.loc 1 2292 57 is_stmt 1 view .LVU813
2295:Src/tasks.c   ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 2878              		.loc 1 2295 29 view .LVU814
2296:Src/tasks.c   **** 
 2879              		.loc 1 2296 32 view .LVU815
2296:Src/tasks.c   **** 
 2880              		.loc 1 2296 25 is_stmt 0 view .LVU816
 2881 00ea 013C     		subs	r4, r4, #1
 2882              	.LVL205:
2296:Src/tasks.c   **** 
 2883              		.loc 1 2296 25 view .LVU817
 2884 00ec 07D0     		beq	.L210
 2885              	.L203:
2284:Src/tasks.c   ****                         {
 2886              		.loc 1 2284 25 is_stmt 1 view .LVU818
2286:Src/tasks.c   ****                             {
 2887              		.loc 1 2286 29 view .LVU819
2286:Src/tasks.c   ****                             {
 2888              		.loc 1 2286 33 is_stmt 0 view .LVU820
 2889 00ee FFF7FEFF 		bl	xTaskIncrementTick
 2890              	.LVL206:
2286:Src/tasks.c   ****                             {
 2891              		.loc 1 2286 31 view .LVU821
 2892 00f2 0028     		cmp	r0, #0
 2893 00f4 F9D0     		beq	.L202
2288:Src/tasks.c   ****                             }
 2894              		.loc 1 2288 33 is_stmt 1 view .LVU822
2288:Src/tasks.c   ****                             }
 2895              		.loc 1 2288 47 is_stmt 0 view .LVU823
 2896 00f6 0C4B     		ldr	r3, .L211+24
 2897 00f8 0122     		movs	r2, #1
 2898 00fa 1A60     		str	r2, [r3]
 2899 00fc F5E7     		b	.L202
 2900              	.L210:
2298:Src/tasks.c   ****                     }
 2901              		.loc 1 2298 25 is_stmt 1 view .LVU824
2298:Src/tasks.c   ****                     }
 2902              		.loc 1 2298 38 is_stmt 0 view .LVU825
 2903 00fe 0B4B     		ldr	r3, .L211+28
 2904 0100 0022     		movs	r2, #0
 2905 0102 1A60     		str	r2, [r3]
 2906 0104 E4E7     		b	.L201
 2907              	.LVL207:
 2908              	.L204:
2298:Src/tasks.c   ****                     }
 2909              		.loc 1 2298 38 view .LVU826
 2910              	.LBE67:
2223:Src/tasks.c   **** 
 2911              		.loc 1 2223 16 view .LVU827
 2912 0106 0024     		movs	r4, #0
 2913              	.LVL208:
 2914              	.L193:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 164


2323:Src/tasks.c   ****         }
 2915              		.loc 1 2323 37 is_stmt 1 view .LVU828
2326:Src/tasks.c   **** 
 2916              		.loc 1 2326 5 view .LVU829
 2917 0108 FFF7FEFF 		bl	vPortExitCritical
 2918              	.LVL209:
2328:Src/tasks.c   **** }
 2919              		.loc 1 2328 5 view .LVU830
2329:Src/tasks.c   **** /*-----------------------------------------------------------*/
 2920              		.loc 1 2329 1 is_stmt 0 view .LVU831
 2921 010c 2046     		mov	r0, r4
 2922 010e 10BD     		pop	{r4, pc}
 2923              	.LVL210:
 2924              	.L212:
2329:Src/tasks.c   **** /*-----------------------------------------------------------*/
 2925              		.loc 1 2329 1 view .LVU832
 2926              		.align	2
 2927              	.L211:
 2928 0110 00000000 		.word	.LANCHOR16
 2929 0114 00000000 		.word	.LANCHOR9
 2930 0118 00000000 		.word	.LANCHOR1
 2931 011c 00000000 		.word	.LANCHOR13
 2932 0120 00000000 		.word	.LANCHOR4
 2933 0124 00000000 		.word	.LANCHOR10
 2934 0128 00000000 		.word	.LANCHOR17
 2935 012c 00000000 		.word	.LANCHOR21
 2936 0130 04ED00E0 		.word	-536810236
 2937              		.cfi_endproc
 2938              	.LFE20:
 2940              		.section	.text.xTaskDelayUntil,"ax",%progbits
 2941              		.align	1
 2942              		.global	xTaskDelayUntil
 2943              		.syntax unified
 2944              		.thumb
 2945              		.thumb_func
 2946              		.fpu softvfp
 2948              	xTaskDelayUntil:
 2949              	.LVL211:
 2950              	.LFB8:
1261:Src/tasks.c   ****         TickType_t xTimeToWake;
 2951              		.loc 1 1261 5 is_stmt 1 view -0
 2952              		.cfi_startproc
 2953              		@ args = 0, pretend = 0, frame = 0
 2954              		@ frame_needed = 0, uses_anonymous_args = 0
1261:Src/tasks.c   ****         TickType_t xTimeToWake;
 2955              		.loc 1 1261 5 is_stmt 0 view .LVU834
 2956 0000 38B5     		push	{r3, r4, r5, lr}
 2957              	.LCFI26:
 2958              		.cfi_def_cfa_offset 16
 2959              		.cfi_offset 3, -16
 2960              		.cfi_offset 4, -12
 2961              		.cfi_offset 5, -8
 2962              		.cfi_offset 14, -4
 2963 0002 0546     		mov	r5, r0
 2964 0004 0C46     		mov	r4, r1
1262:Src/tasks.c   ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2965              		.loc 1 1262 9 is_stmt 1 view .LVU835
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 165


1263:Src/tasks.c   **** 
 2966              		.loc 1 1263 9 view .LVU836
 2967              	.LVL212:
1265:Src/tasks.c   ****         configASSERT( ( xTimeIncrement > 0U ) );
 2968              		.loc 1 1265 43 view .LVU837
1266:Src/tasks.c   ****         configASSERT( uxSchedulerSuspended == 0 );
 2969              		.loc 1 1266 48 view .LVU838
1267:Src/tasks.c   **** 
 2970              		.loc 1 1267 50 view .LVU839
1269:Src/tasks.c   ****         {
 2971              		.loc 1 1269 9 view .LVU840
 2972 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2973              	.LVL213:
 2974              	.LBB68:
1273:Src/tasks.c   **** 
 2975              		.loc 1 1273 13 view .LVU841
1273:Src/tasks.c   **** 
 2976              		.loc 1 1273 30 is_stmt 0 view .LVU842
 2977 000a 164B     		ldr	r3, .L223
 2978 000c 1868     		ldr	r0, [r3]
 2979              	.LVL214:
1276:Src/tasks.c   **** 
 2980              		.loc 1 1276 13 is_stmt 1 view .LVU843
1276:Src/tasks.c   **** 
 2981              		.loc 1 1276 27 is_stmt 0 view .LVU844
 2982 000e 2A68     		ldr	r2, [r5]
1276:Src/tasks.c   **** 
 2983              		.loc 1 1276 25 view .LVU845
 2984 0010 1444     		add	r4, r4, r2
 2985              	.LVL215:
1278:Src/tasks.c   ****             {
 2986              		.loc 1 1278 13 is_stmt 1 view .LVU846
1278:Src/tasks.c   ****             {
 2987              		.loc 1 1278 15 is_stmt 0 view .LVU847
 2988 0012 8242     		cmp	r2, r0
 2989 0014 0BD9     		bls	.L214
1285:Src/tasks.c   ****                 {
 2990              		.loc 1 1285 17 is_stmt 1 view .LVU848
1285:Src/tasks.c   ****                 {
 2991              		.loc 1 1285 19 is_stmt 0 view .LVU849
 2992 0016 A242     		cmp	r2, r4
 2993 0018 02D8     		bhi	.L215
1310:Src/tasks.c   **** 
 2994              		.loc 1 1310 13 is_stmt 1 view .LVU850
1310:Src/tasks.c   **** 
 2995              		.loc 1 1310 33 is_stmt 0 view .LVU851
 2996 001a 2C60     		str	r4, [r5]
1312:Src/tasks.c   ****             {
 2997              		.loc 1 1312 13 is_stmt 1 view .LVU852
 2998              	.LBE68:
1263:Src/tasks.c   **** 
 2999              		.loc 1 1263 37 is_stmt 0 view .LVU853
 3000 001c 0024     		movs	r4, #0
 3001              	.LVL216:
1263:Src/tasks.c   **** 
 3002              		.loc 1 1263 37 view .LVU854
 3003 001e 10E0     		b	.L216
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 166


 3004              	.LVL217:
 3005              	.L215:
 3006              	.LBB69:
1285:Src/tasks.c   ****                 {
 3007              		.loc 1 1285 59 discriminator 1 view .LVU855
 3008 0020 A042     		cmp	r0, r4
 3009 0022 02D3     		bcc	.L217
1310:Src/tasks.c   **** 
 3010              		.loc 1 1310 13 is_stmt 1 view .LVU856
1310:Src/tasks.c   **** 
 3011              		.loc 1 1310 33 is_stmt 0 view .LVU857
 3012 0024 2C60     		str	r4, [r5]
1312:Src/tasks.c   ****             {
 3013              		.loc 1 1312 13 is_stmt 1 view .LVU858
 3014              	.LBE69:
1263:Src/tasks.c   **** 
 3015              		.loc 1 1263 37 is_stmt 0 view .LVU859
 3016 0026 0024     		movs	r4, #0
 3017              	.LVL218:
1263:Src/tasks.c   **** 
 3018              		.loc 1 1263 37 view .LVU860
 3019 0028 0BE0     		b	.L216
 3020              	.LVL219:
 3021              	.L217:
 3022              	.LBB70:
1287:Src/tasks.c   ****                 }
 3023              		.loc 1 1287 21 is_stmt 1 view .LVU861
1310:Src/tasks.c   **** 
 3024              		.loc 1 1310 13 view .LVU862
1310:Src/tasks.c   **** 
 3025              		.loc 1 1310 33 is_stmt 0 view .LVU863
 3026 002a 2C60     		str	r4, [r5]
1312:Src/tasks.c   ****             {
 3027              		.loc 1 1312 13 is_stmt 1 view .LVU864
 3028 002c 04E0     		b	.L218
 3029              	.LVL220:
 3030              	.L214:
1299:Src/tasks.c   ****                 {
 3031              		.loc 1 1299 17 view .LVU865
1299:Src/tasks.c   ****                 {
 3032              		.loc 1 1299 19 is_stmt 0 view .LVU866
 3033 002e A242     		cmp	r2, r4
 3034 0030 01D8     		bhi	.L219
1299:Src/tasks.c   ****                 {
 3035              		.loc 1 1299 59 discriminator 1 view .LVU867
 3036 0032 A042     		cmp	r0, r4
 3037 0034 12D2     		bcs	.L220
 3038              	.L219:
1301:Src/tasks.c   ****                 }
 3039              		.loc 1 1301 21 is_stmt 1 view .LVU868
 3040              	.LVL221:
1310:Src/tasks.c   **** 
 3041              		.loc 1 1310 13 view .LVU869
1310:Src/tasks.c   **** 
 3042              		.loc 1 1310 33 is_stmt 0 view .LVU870
 3043 0036 2C60     		str	r4, [r5]
1312:Src/tasks.c   ****             {
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 167


 3044              		.loc 1 1312 13 is_stmt 1 view .LVU871
 3045              	.L218:
1314:Src/tasks.c   **** 
 3046              		.loc 1 1314 53 view .LVU872
1318:Src/tasks.c   ****             }
 3047              		.loc 1 1318 17 view .LVU873
 3048 0038 0021     		movs	r1, #0
 3049 003a 201A     		subs	r0, r4, r0
 3050              	.LVL222:
1318:Src/tasks.c   ****             }
 3051              		.loc 1 1318 17 is_stmt 0 view .LVU874
 3052 003c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3053              	.LVL223:
 3054 0040 0124     		movs	r4, #1
 3055              	.LVL224:
 3056              	.L216:
1322:Src/tasks.c   ****             }
 3057              		.loc 1 1322 41 is_stmt 1 view .LVU875
 3058              	.LBE70:
1325:Src/tasks.c   **** 
 3059              		.loc 1 1325 9 view .LVU876
1325:Src/tasks.c   **** 
 3060              		.loc 1 1325 27 is_stmt 0 view .LVU877
 3061 0042 FFF7FEFF 		bl	xTaskResumeAll
 3062              	.LVL225:
1329:Src/tasks.c   ****         {
 3063              		.loc 1 1329 9 is_stmt 1 view .LVU878
1329:Src/tasks.c   ****         {
 3064              		.loc 1 1329 11 is_stmt 0 view .LVU879
 3065 0046 38B9     		cbnz	r0, .L213
1331:Src/tasks.c   ****         }
 3066              		.loc 1 1331 13 is_stmt 1 view .LVU880
 3067 0048 074B     		ldr	r3, .L223+4
 3068 004a 4FF08052 		mov	r2, #268435456
 3069 004e 1A60     		str	r2, [r3]
1331:Src/tasks.c   ****         }
 3070              		.loc 1 1331 13 view .LVU881
 3071              		.syntax unified
 3072              	@ 1331 "Src/tasks.c" 1
 3073 0050 BFF34F8F 		dsb
 3074              	@ 0 "" 2
1331:Src/tasks.c   ****         }
 3075              		.loc 1 1331 13 view .LVU882
 3076              	@ 1331 "Src/tasks.c" 1
 3077 0054 BFF36F8F 		isb
 3078              	@ 0 "" 2
1331:Src/tasks.c   ****         }
 3079              		.loc 1 1331 35 view .LVU883
1335:Src/tasks.c   ****         }
 3080              		.loc 1 1335 37 view .LVU884
1338:Src/tasks.c   ****     }
 3081              		.loc 1 1338 9 view .LVU885
 3082              		.thumb
 3083              		.syntax unified
 3084              	.L213:
1339:Src/tasks.c   **** 
 3085              		.loc 1 1339 5 is_stmt 0 view .LVU886
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 168


 3086 0058 2046     		mov	r0, r4
 3087              	.LVL226:
1339:Src/tasks.c   **** 
 3088              		.loc 1 1339 5 view .LVU887
 3089 005a 38BD     		pop	{r3, r4, r5, pc}
 3090              	.LVL227:
 3091              	.L220:
 3092              	.LBB71:
1310:Src/tasks.c   **** 
 3093              		.loc 1 1310 13 is_stmt 1 view .LVU888
1310:Src/tasks.c   **** 
 3094              		.loc 1 1310 33 is_stmt 0 view .LVU889
 3095 005c 2C60     		str	r4, [r5]
1312:Src/tasks.c   ****             {
 3096              		.loc 1 1312 13 is_stmt 1 view .LVU890
 3097              	.LBE71:
1263:Src/tasks.c   **** 
 3098              		.loc 1 1263 37 is_stmt 0 view .LVU891
 3099 005e 0024     		movs	r4, #0
 3100              	.LVL228:
1263:Src/tasks.c   **** 
 3101              		.loc 1 1263 37 view .LVU892
 3102 0060 EFE7     		b	.L216
 3103              	.L224:
 3104 0062 00BF     		.align	2
 3105              	.L223:
 3106 0064 00000000 		.word	.LANCHOR15
 3107 0068 04ED00E0 		.word	-536810236
 3108              		.cfi_endproc
 3109              	.LFE8:
 3111              		.section	.text.vTaskDelay,"ax",%progbits
 3112              		.align	1
 3113              		.global	vTaskDelay
 3114              		.syntax unified
 3115              		.thumb
 3116              		.thumb_func
 3117              		.fpu softvfp
 3119              	vTaskDelay:
 3120              	.LVL229:
 3121              	.LFB9:
1347:Src/tasks.c   ****         BaseType_t xAlreadyYielded = pdFALSE;
 3122              		.loc 1 1347 5 is_stmt 1 view -0
 3123              		.cfi_startproc
 3124              		@ args = 0, pretend = 0, frame = 0
 3125              		@ frame_needed = 0, uses_anonymous_args = 0
1347:Src/tasks.c   ****         BaseType_t xAlreadyYielded = pdFALSE;
 3126              		.loc 1 1347 5 is_stmt 0 view .LVU894
 3127 0000 10B5     		push	{r4, lr}
 3128              	.LCFI27:
 3129              		.cfi_def_cfa_offset 8
 3130              		.cfi_offset 4, -8
 3131              		.cfi_offset 14, -4
1348:Src/tasks.c   **** 
 3132              		.loc 1 1348 9 is_stmt 1 view .LVU895
 3133              	.LVL230:
1351:Src/tasks.c   ****         {
 3134              		.loc 1 1351 9 view .LVU896
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 169


1351:Src/tasks.c   ****         {
 3135              		.loc 1 1351 11 is_stmt 0 view .LVU897
 3136 0002 40B9     		cbnz	r0, .L229
 3137              	.LVL231:
 3138              	.L226:
1378:Src/tasks.c   ****         }
 3139              		.loc 1 1378 13 is_stmt 1 view .LVU898
 3140 0004 0A4B     		ldr	r3, .L230
 3141 0006 4FF08052 		mov	r2, #268435456
 3142 000a 1A60     		str	r2, [r3]
1378:Src/tasks.c   ****         }
 3143              		.loc 1 1378 13 view .LVU899
 3144              		.syntax unified
 3145              	@ 1378 "Src/tasks.c" 1
 3146 000c BFF34F8F 		dsb
 3147              	@ 0 "" 2
1378:Src/tasks.c   ****         }
 3148              		.loc 1 1378 13 view .LVU900
 3149              	@ 1378 "Src/tasks.c" 1
 3150 0010 BFF36F8F 		isb
 3151              	@ 0 "" 2
1378:Src/tasks.c   ****         }
 3152              		.loc 1 1378 35 view .LVU901
1382:Src/tasks.c   ****         }
 3153              		.loc 1 1382 37 view .LVU902
 3154              		.thumb
 3155              		.syntax unified
 3156              	.L225:
1384:Src/tasks.c   **** 
 3157              		.loc 1 1384 5 is_stmt 0 view .LVU903
 3158 0014 10BD     		pop	{r4, pc}
 3159              	.LVL232:
 3160              	.L229:
1384:Src/tasks.c   **** 
 3161              		.loc 1 1384 5 view .LVU904
 3162 0016 0446     		mov	r4, r0
1353:Src/tasks.c   ****             vTaskSuspendAll();
 3163              		.loc 1 1353 54 is_stmt 1 view .LVU905
1354:Src/tasks.c   ****             {
 3164              		.loc 1 1354 13 view .LVU906
 3165 0018 FFF7FEFF 		bl	vTaskSuspendAll
 3166              	.LVL233:
1356:Src/tasks.c   **** 
 3167              		.loc 1 1356 34 view .LVU907
1365:Src/tasks.c   ****             }
 3168              		.loc 1 1365 17 view .LVU908
 3169 001c 0021     		movs	r1, #0
 3170 001e 2046     		mov	r0, r4
 3171 0020 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3172              	.LVL234:
1367:Src/tasks.c   ****         }
 3173              		.loc 1 1367 13 view .LVU909
1367:Src/tasks.c   ****         }
 3174              		.loc 1 1367 31 is_stmt 0 view .LVU910
 3175 0024 FFF7FEFF 		bl	xTaskResumeAll
 3176              	.LVL235:
1371:Src/tasks.c   ****         }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 170


 3177              		.loc 1 1371 37 is_stmt 1 view .LVU911
1376:Src/tasks.c   ****         {
 3178              		.loc 1 1376 9 view .LVU912
1376:Src/tasks.c   ****         {
 3179              		.loc 1 1376 11 is_stmt 0 view .LVU913
 3180 0028 0028     		cmp	r0, #0
 3181 002a F3D1     		bne	.L225
1376:Src/tasks.c   ****         {
 3182              		.loc 1 1376 11 view .LVU914
 3183 002c EAE7     		b	.L226
 3184              	.L231:
 3185 002e 00BF     		.align	2
 3186              	.L230:
 3187 0030 04ED00E0 		.word	-536810236
 3188              		.cfi_endproc
 3189              	.LFE9:
 3191              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3192              		.align	1
 3193              		.global	xTaskCatchUpTicks
 3194              		.syntax unified
 3195              		.thumb
 3196              		.thumb_func
 3197              		.fpu softvfp
 3199              	xTaskCatchUpTicks:
 3200              	.LVL236:
 3201              	.LFB25:
2639:Src/tasks.c   ****     BaseType_t xYieldOccurred;
 3202              		.loc 1 2639 1 is_stmt 1 view -0
 3203              		.cfi_startproc
 3204              		@ args = 0, pretend = 0, frame = 0
 3205              		@ frame_needed = 0, uses_anonymous_args = 0
2639:Src/tasks.c   ****     BaseType_t xYieldOccurred;
 3206              		.loc 1 2639 1 is_stmt 0 view .LVU916
 3207 0000 10B5     		push	{r4, lr}
 3208              	.LCFI28:
 3209              		.cfi_def_cfa_offset 8
 3210              		.cfi_offset 4, -8
 3211              		.cfi_offset 14, -4
 3212 0002 0446     		mov	r4, r0
2640:Src/tasks.c   **** 
 3213              		.loc 1 2640 5 is_stmt 1 view .LVU917
2644:Src/tasks.c   **** 
 3214              		.loc 1 2644 46 view .LVU918
2648:Src/tasks.c   ****     xPendedTicks += xTicksToCatchUp;
 3215              		.loc 1 2648 5 view .LVU919
 3216 0004 FFF7FEFF 		bl	vTaskSuspendAll
 3217              	.LVL237:
2649:Src/tasks.c   ****     xYieldOccurred = xTaskResumeAll();
 3218              		.loc 1 2649 5 view .LVU920
2649:Src/tasks.c   ****     xYieldOccurred = xTaskResumeAll();
 3219              		.loc 1 2649 18 is_stmt 0 view .LVU921
 3220 0008 034A     		ldr	r2, .L234
 3221 000a 1368     		ldr	r3, [r2]
 3222 000c 2344     		add	r3, r3, r4
 3223 000e 1360     		str	r3, [r2]
2650:Src/tasks.c   **** 
 3224              		.loc 1 2650 5 is_stmt 1 view .LVU922
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 171


2650:Src/tasks.c   **** 
 3225              		.loc 1 2650 22 is_stmt 0 view .LVU923
 3226 0010 FFF7FEFF 		bl	xTaskResumeAll
 3227              	.LVL238:
2652:Src/tasks.c   **** }
 3228              		.loc 1 2652 5 is_stmt 1 view .LVU924
2653:Src/tasks.c   **** /*----------------------------------------------------------*/
 3229              		.loc 1 2653 1 is_stmt 0 view .LVU925
 3230 0014 10BD     		pop	{r4, pc}
 3231              	.LVL239:
 3232              	.L235:
2653:Src/tasks.c   **** /*----------------------------------------------------------*/
 3233              		.loc 1 2653 1 view .LVU926
 3234 0016 00BF     		.align	2
 3235              	.L234:
 3236 0018 00000000 		.word	.LANCHOR21
 3237              		.cfi_endproc
 3238              	.LFE25:
 3240              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3241              		.align	1
 3242              		.global	vTaskSwitchContext
 3243              		.syntax unified
 3244              		.thumb
 3245              		.thumb_func
 3246              		.fpu softvfp
 3248              	vTaskSwitchContext:
 3249              	.LFB27:
3022:Src/tasks.c   ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3250              		.loc 1 3022 1 is_stmt 1 view -0
 3251              		.cfi_startproc
 3252              		@ args = 0, pretend = 0, frame = 0
 3253              		@ frame_needed = 0, uses_anonymous_args = 0
 3254              		@ link register save eliminated.
3023:Src/tasks.c   ****     {
 3255              		.loc 1 3023 5 view .LVU928
3023:Src/tasks.c   ****     {
 3256              		.loc 1 3023 30 is_stmt 0 view .LVU929
 3257 0000 1B4B     		ldr	r3, .L246
 3258 0002 1B68     		ldr	r3, [r3]
3023:Src/tasks.c   ****     {
 3259              		.loc 1 3023 7 view .LVU930
 3260 0004 1BB1     		cbz	r3, .L237
3027:Src/tasks.c   ****     }
 3261              		.loc 1 3027 9 is_stmt 1 view .LVU931
3027:Src/tasks.c   ****     }
 3262              		.loc 1 3027 23 is_stmt 0 view .LVU932
 3263 0006 1B4B     		ldr	r3, .L246+4
 3264 0008 0122     		movs	r2, #1
 3265 000a 1A60     		str	r2, [r3]
 3266 000c 7047     		bx	lr
 3267              	.L237:
3022:Src/tasks.c   ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3268              		.loc 1 3022 1 view .LVU933
 3269 000e 10B4     		push	{r4}
 3270              	.LCFI29:
 3271              		.cfi_def_cfa_offset 4
 3272              		.cfi_offset 4, -4
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 172


3031:Src/tasks.c   ****         traceTASK_SWITCHED_OUT();
 3273              		.loc 1 3031 9 is_stmt 1 view .LVU934
3031:Src/tasks.c   ****         traceTASK_SWITCHED_OUT();
 3274              		.loc 1 3031 23 is_stmt 0 view .LVU935
 3275 0010 184B     		ldr	r3, .L246+4
 3276 0012 0022     		movs	r2, #0
 3277 0014 1A60     		str	r2, [r3]
3032:Src/tasks.c   **** 
 3278              		.loc 1 3032 33 is_stmt 1 view .LVU936
3063:Src/tasks.c   **** 
 3279              		.loc 1 3063 39 view .LVU937
 3280              	.LBB72:
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3281              		.loc 1 3074 9 view .LVU938
 3282 0016 184B     		ldr	r3, .L246+8
 3283 0018 1B68     		ldr	r3, [r3]
 3284              	.LVL240:
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3285              		.loc 1 3074 9 view .LVU939
 3286 001a 00E0     		b	.L239
 3287              	.L240:
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3288              		.loc 1 3074 9 discriminator 3 view .LVU940
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3289              		.loc 1 3074 9 discriminator 3 view .LVU941
 3290 001c 013B     		subs	r3, r3, #1
 3291              	.LVL241:
 3292              	.L239:
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3293              		.loc 1 3074 9 discriminator 1 view .LVU942
 3294 001e 03EB8301 		add	r1, r3, r3, lsl #2
 3295 0022 8A00     		lsls	r2, r1, #2
 3296 0024 1549     		ldr	r1, .L246+12
 3297 0026 8A58     		ldr	r2, [r1, r2]
 3298 0028 002A     		cmp	r2, #0
 3299 002a F7D0     		beq	.L240
 3300              	.LBB73:
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3301              		.loc 1 3074 9 discriminator 4 view .LVU943
 3302              	.LVL242:
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3303              		.loc 1 3074 9 discriminator 4 view .LVU944
 3304 002c 03EB8300 		add	r0, r3, r3, lsl #2
 3305 0030 8200     		lsls	r2, r0, #2
 3306 0032 0A44     		add	r2, r2, r1
 3307 0034 5068     		ldr	r0, [r2, #4]
 3308 0036 4068     		ldr	r0, [r0, #4]
 3309 0038 5060     		str	r0, [r2, #4]
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3310              		.loc 1 3074 9 discriminator 4 view .LVU945
 3311 003a 03EB8304 		add	r4, r3, r3, lsl #2
 3312 003e A200     		lsls	r2, r4, #2
 3313 0040 1446     		mov	r4, r2
 3314 0042 0832     		adds	r2, r2, #8
 3315 0044 1144     		add	r1, r1, r2
 3316 0046 8842     		cmp	r0, r1
 3317 0048 0CD0     		beq	.L245
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 173


 3318              	.L241:
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3319              		.loc 1 3074 9 discriminator 7 view .LVU946
 3320 004a 03EB8302 		add	r2, r3, r3, lsl #2
 3321 004e 9100     		lsls	r1, r2, #2
 3322 0050 0A4A     		ldr	r2, .L246+12
 3323 0052 0A44     		add	r2, r2, r1
 3324 0054 5268     		ldr	r2, [r2, #4]
 3325 0056 D168     		ldr	r1, [r2, #12]
 3326 0058 094A     		ldr	r2, .L246+16
 3327 005a 1160     		str	r1, [r2]
 3328              	.LBE73:
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3329              		.loc 1 3074 9 discriminator 7 view .LVU947
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3330              		.loc 1 3074 9 discriminator 7 view .LVU948
 3331 005c 064A     		ldr	r2, .L246+8
 3332 005e 1360     		str	r3, [r2]
 3333              	.LBE72:
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3334              		.loc 1 3074 43 discriminator 7 view .LVU949
3075:Src/tasks.c   **** 
 3335              		.loc 1 3075 32 discriminator 7 view .LVU950
3094:Src/tasks.c   **** /*-----------------------------------------------------------*/
 3336              		.loc 1 3094 1 is_stmt 0 discriminator 7 view .LVU951
 3337 0060 10BC     		pop	{r4}
 3338              	.LCFI30:
 3339              		.cfi_remember_state
 3340              		.cfi_restore 4
 3341              		.cfi_def_cfa_offset 0
 3342 0062 7047     		bx	lr
 3343              	.L245:
 3344              	.LCFI31:
 3345              		.cfi_restore_state
 3346              	.LBB75:
 3347              	.LBB74:
3074:Src/tasks.c   ****         traceTASK_SWITCHED_IN();
 3348              		.loc 1 3074 9 is_stmt 1 discriminator 5 view .LVU952
 3349 0064 4068     		ldr	r0, [r0, #4]
 3350 0066 054A     		ldr	r2, .L246+12
 3351 0068 2244     		add	r2, r2, r4
 3352 006a 5060     		str	r0, [r2, #4]
 3353 006c EDE7     		b	.L241
 3354              	.L247:
 3355 006e 00BF     		.align	2
 3356              	.L246:
 3357 0070 00000000 		.word	.LANCHOR16
 3358 0074 00000000 		.word	.LANCHOR17
 3359 0078 00000000 		.word	.LANCHOR13
 3360 007c 00000000 		.word	.LANCHOR4
 3361 0080 00000000 		.word	.LANCHOR10
 3362              	.LBE74:
 3363              	.LBE75:
 3364              		.cfi_endproc
 3365              	.LFE27:
 3367              		.section	.text.vTaskSuspend,"ax",%progbits
 3368              		.align	1
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 174


 3369              		.global	vTaskSuspend
 3370              		.syntax unified
 3371              		.thumb
 3372              		.thumb_func
 3373              		.fpu softvfp
 3375              	vTaskSuspend:
 3376              	.LVL243:
 3377              	.LFB13:
1717:Src/tasks.c   ****         TCB_t * pxTCB;
 3378              		.loc 1 1717 5 view -0
 3379              		.cfi_startproc
 3380              		@ args = 0, pretend = 0, frame = 0
 3381              		@ frame_needed = 0, uses_anonymous_args = 0
1717:Src/tasks.c   ****         TCB_t * pxTCB;
 3382              		.loc 1 1717 5 is_stmt 0 view .LVU954
 3383 0000 38B5     		push	{r3, r4, r5, lr}
 3384              	.LCFI32:
 3385              		.cfi_def_cfa_offset 16
 3386              		.cfi_offset 3, -16
 3387              		.cfi_offset 4, -12
 3388              		.cfi_offset 5, -8
 3389              		.cfi_offset 14, -4
 3390 0002 0446     		mov	r4, r0
1718:Src/tasks.c   **** 
 3391              		.loc 1 1718 9 is_stmt 1 view .LVU955
1720:Src/tasks.c   ****         {
 3392              		.loc 1 1720 9 view .LVU956
 3393 0004 FFF7FEFF 		bl	vPortEnterCritical
 3394              	.LVL244:
1724:Src/tasks.c   **** 
 3395              		.loc 1 1724 13 view .LVU957
1724:Src/tasks.c   **** 
 3396              		.loc 1 1724 21 is_stmt 0 view .LVU958
 3397 0008 D4B1     		cbz	r4, .L259
 3398              	.LVL245:
 3399              	.L249:
1726:Src/tasks.c   **** 
 3400              		.loc 1 1726 39 is_stmt 1 discriminator 4 view .LVU959
1730:Src/tasks.c   ****             {
 3401              		.loc 1 1730 13 discriminator 4 view .LVU960
1730:Src/tasks.c   ****             {
 3402              		.loc 1 1730 17 is_stmt 0 discriminator 4 view .LVU961
 3403 000a 251D     		adds	r5, r4, #4
 3404 000c 2846     		mov	r0, r5
 3405 000e FFF7FEFF 		bl	uxListRemove
 3406              	.LVL246:
1736:Src/tasks.c   ****             }
 3407              		.loc 1 1736 41 is_stmt 1 discriminator 4 view .LVU962
1740:Src/tasks.c   ****             {
 3408              		.loc 1 1740 13 discriminator 4 view .LVU963
1740:Src/tasks.c   ****             {
 3409              		.loc 1 1740 17 is_stmt 0 discriminator 4 view .LVU964
 3410 0012 A36A     		ldr	r3, [r4, #40]
1740:Src/tasks.c   ****             {
 3411              		.loc 1 1740 15 discriminator 4 view .LVU965
 3412 0014 1BB1     		cbz	r3, .L250
1742:Src/tasks.c   ****             }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 175


 3413              		.loc 1 1742 17 is_stmt 1 view .LVU966
1742:Src/tasks.c   ****             }
 3414              		.loc 1 1742 26 is_stmt 0 view .LVU967
 3415 0016 04F11800 		add	r0, r4, #24
 3416 001a FFF7FEFF 		bl	uxListRemove
 3417              	.LVL247:
 3418              	.L250:
1746:Src/tasks.c   ****             }
 3419              		.loc 1 1746 41 is_stmt 1 view .LVU968
1749:Src/tasks.c   **** 
 3420              		.loc 1 1749 13 view .LVU969
 3421 001e 2946     		mov	r1, r5
 3422 0020 1F48     		ldr	r0, .L263
 3423 0022 FFF7FEFF 		bl	vListInsertEnd
 3424              	.LVL248:
 3425              	.LBB76:
1753:Src/tasks.c   **** 
 3426              		.loc 1 1753 21 view .LVU970
1755:Src/tasks.c   ****                     {
 3427              		.loc 1 1755 21 view .LVU971
1755:Src/tasks.c   ****                     {
 3428              		.loc 1 1755 28 is_stmt 0 view .LVU972
 3429 0026 0023     		movs	r3, #0
 3430              	.LVL249:
 3431              	.L251:
1755:Src/tasks.c   ****                     {
 3432              		.loc 1 1755 33 is_stmt 1 discriminator 1 view .LVU973
1755:Src/tasks.c   ****                     {
 3433              		.loc 1 1755 21 is_stmt 0 discriminator 1 view .LVU974
 3434 0028 002B     		cmp	r3, #0
 3435 002a 0CDD     		ble	.L253
 3436              	.LBE76:
1767:Src/tasks.c   **** 
 3437              		.loc 1 1767 9 is_stmt 1 view .LVU975
 3438 002c FFF7FEFF 		bl	vPortExitCritical
 3439              	.LVL250:
1769:Src/tasks.c   ****         {
 3440              		.loc 1 1769 9 view .LVU976
1769:Src/tasks.c   ****         {
 3441              		.loc 1 1769 31 is_stmt 0 view .LVU977
 3442 0030 1C4B     		ldr	r3, .L263+4
 3443 0032 1B68     		ldr	r3, [r3]
1769:Src/tasks.c   ****         {
 3444              		.loc 1 1769 11 view .LVU978
 3445 0034 A3B9     		cbnz	r3, .L260
 3446              	.L254:
1781:Src/tasks.c   ****         }
 3447              		.loc 1 1781 37 is_stmt 1 view .LVU979
1784:Src/tasks.c   ****         {
 3448              		.loc 1 1784 9 view .LVU980
1784:Src/tasks.c   ****         {
 3449              		.loc 1 1784 19 is_stmt 0 view .LVU981
 3450 0036 1C4B     		ldr	r3, .L263+8
 3451 0038 1B68     		ldr	r3, [r3]
1784:Src/tasks.c   ****         {
 3452              		.loc 1 1784 11 view .LVU982
 3453 003a A342     		cmp	r3, r4
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 176


 3454 003c 17D0     		beq	.L261
 3455              	.L248:
1815:Src/tasks.c   **** 
 3456              		.loc 1 1815 5 view .LVU983
 3457 003e 38BD     		pop	{r3, r4, r5, pc}
 3458              	.LVL251:
 3459              	.L259:
1724:Src/tasks.c   **** 
 3460              		.loc 1 1724 21 discriminator 1 view .LVU984
 3461 0040 194B     		ldr	r3, .L263+8
 3462 0042 1C68     		ldr	r4, [r3]
 3463              	.LVL252:
1724:Src/tasks.c   **** 
 3464              		.loc 1 1724 21 discriminator 1 view .LVU985
 3465 0044 E1E7     		b	.L249
 3466              	.LVL253:
 3467              	.L253:
 3468              	.LBB77:
1757:Src/tasks.c   ****                         {
 3469              		.loc 1 1757 25 is_stmt 1 view .LVU986
1757:Src/tasks.c   ****                         {
 3470              		.loc 1 1757 49 is_stmt 0 view .LVU987
 3471 0046 E218     		adds	r2, r4, r3
 3472 0048 92F84820 		ldrb	r2, [r2, #72]	@ zero_extendqisi2
 3473 004c D2B2     		uxtb	r2, r2
1757:Src/tasks.c   ****                         {
 3474              		.loc 1 1757 27 view .LVU988
 3475 004e 012A     		cmp	r2, #1
 3476 0050 01D0     		beq	.L262
 3477              	.L252:
1755:Src/tasks.c   ****                     {
 3478              		.loc 1 1755 76 is_stmt 1 discriminator 2 view .LVU989
1755:Src/tasks.c   ****                     {
 3479              		.loc 1 1755 77 is_stmt 0 discriminator 2 view .LVU990
 3480 0052 0133     		adds	r3, r3, #1
 3481              	.LVL254:
1755:Src/tasks.c   ****                     {
 3482              		.loc 1 1755 77 discriminator 2 view .LVU991
 3483 0054 E8E7     		b	.L251
 3484              	.L262:
1761:Src/tasks.c   ****                         }
 3485              		.loc 1 1761 29 is_stmt 1 view .LVU992
1761:Src/tasks.c   ****                         }
 3486              		.loc 1 1761 55 is_stmt 0 view .LVU993
 3487 0056 E218     		adds	r2, r4, r3
 3488 0058 0021     		movs	r1, #0
 3489 005a 82F84810 		strb	r1, [r2, #72]
 3490 005e F8E7     		b	.L252
 3491              	.LVL255:
 3492              	.L260:
1761:Src/tasks.c   ****                         }
 3493              		.loc 1 1761 55 view .LVU994
 3494              	.LBE77:
1773:Src/tasks.c   ****             {
 3495              		.loc 1 1773 13 is_stmt 1 view .LVU995
 3496 0060 FFF7FEFF 		bl	vPortEnterCritical
 3497              	.LVL256:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 177


1775:Src/tasks.c   ****             }
 3498              		.loc 1 1775 17 view .LVU996
 3499 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3500              	.LVL257:
1777:Src/tasks.c   ****         }
 3501              		.loc 1 1777 13 view .LVU997
 3502 0068 FFF7FEFF 		bl	vPortExitCritical
 3503              	.LVL258:
 3504 006c E3E7     		b	.L254
 3505              	.L261:
1786:Src/tasks.c   ****             {
 3506              		.loc 1 1786 13 view .LVU998
1786:Src/tasks.c   ****             {
 3507              		.loc 1 1786 35 is_stmt 0 view .LVU999
 3508 006e 0D4B     		ldr	r3, .L263+4
 3509 0070 1B68     		ldr	r3, [r3]
1786:Src/tasks.c   ****             {
 3510              		.loc 1 1786 15 view .LVU1000
 3511 0072 43B1     		cbz	r3, .L256
1789:Src/tasks.c   ****                 portYIELD_WITHIN_API();
 3512              		.loc 1 1789 58 is_stmt 1 view .LVU1001
1790:Src/tasks.c   ****             }
 3513              		.loc 1 1790 17 view .LVU1002
 3514 0074 0D4B     		ldr	r3, .L263+12
 3515 0076 4FF08052 		mov	r2, #268435456
 3516 007a 1A60     		str	r2, [r3]
1790:Src/tasks.c   ****             }
 3517              		.loc 1 1790 17 view .LVU1003
 3518              		.syntax unified
 3519              	@ 1790 "Src/tasks.c" 1
 3520 007c BFF34F8F 		dsb
 3521              	@ 0 "" 2
1790:Src/tasks.c   ****             }
 3522              		.loc 1 1790 17 view .LVU1004
 3523              	@ 1790 "Src/tasks.c" 1
 3524 0080 BFF36F8F 		isb
 3525              	@ 0 "" 2
1790:Src/tasks.c   ****             }
 3526              		.loc 1 1790 39 view .LVU1005
 3527              		.thumb
 3528              		.syntax unified
 3529 0084 DBE7     		b	.L248
 3530              	.L256:
1797:Src/tasks.c   ****                 {
 3531              		.loc 1 1797 17 view .LVU1006
1797:Src/tasks.c   ****                 {
 3532              		.loc 1 1797 21 is_stmt 0 view .LVU1007
 3533 0086 064B     		ldr	r3, .L263
 3534 0088 1A68     		ldr	r2, [r3]
1797:Src/tasks.c   ****                 {
 3535              		.loc 1 1797 68 view .LVU1008
 3536 008a 094B     		ldr	r3, .L263+16
 3537 008c 1B68     		ldr	r3, [r3]
1797:Src/tasks.c   ****                 {
 3538              		.loc 1 1797 19 view .LVU1009
 3539 008e 9A42     		cmp	r2, r3
 3540 0090 03D1     		bne	.L257
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 178


1803:Src/tasks.c   ****                 }
 3541              		.loc 1 1803 21 is_stmt 1 view .LVU1010
1803:Src/tasks.c   ****                 }
 3542              		.loc 1 1803 34 is_stmt 0 view .LVU1011
 3543 0092 054B     		ldr	r3, .L263+8
 3544 0094 0022     		movs	r2, #0
 3545 0096 1A60     		str	r2, [r3]
 3546 0098 D1E7     		b	.L248
 3547              	.L257:
1807:Src/tasks.c   ****                 }
 3548              		.loc 1 1807 21 is_stmt 1 view .LVU1012
 3549 009a FFF7FEFF 		bl	vTaskSwitchContext
 3550              	.LVL259:
1813:Src/tasks.c   ****         }
 3551              		.loc 1 1813 37 view .LVU1013
1815:Src/tasks.c   **** 
 3552              		.loc 1 1815 5 is_stmt 0 view .LVU1014
 3553 009e CEE7     		b	.L248
 3554              	.L264:
 3555              		.align	2
 3556              	.L263:
 3557 00a0 00000000 		.word	.LANCHOR0
 3558 00a4 00000000 		.word	.LANCHOR11
 3559 00a8 00000000 		.word	.LANCHOR10
 3560 00ac 04ED00E0 		.word	-536810236
 3561 00b0 00000000 		.word	.LANCHOR9
 3562              		.cfi_endproc
 3563              	.LFE13:
 3565              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3566              		.align	1
 3567              		.global	vTaskPlaceOnEventList
 3568              		.syntax unified
 3569              		.thumb
 3570              		.thumb_func
 3571              		.fpu softvfp
 3573              	vTaskPlaceOnEventList:
 3574              	.LVL260:
 3575              	.LFB28:
3099:Src/tasks.c   ****     configASSERT( pxEventList );
 3576              		.loc 1 3099 1 is_stmt 1 view -0
 3577              		.cfi_startproc
 3578              		@ args = 0, pretend = 0, frame = 0
 3579              		@ frame_needed = 0, uses_anonymous_args = 0
3099:Src/tasks.c   ****     configASSERT( pxEventList );
 3580              		.loc 1 3099 1 is_stmt 0 view .LVU1016
 3581 0000 10B5     		push	{r4, lr}
 3582              	.LCFI33:
 3583              		.cfi_def_cfa_offset 8
 3584              		.cfi_offset 4, -8
 3585              		.cfi_offset 14, -4
 3586 0002 0C46     		mov	r4, r1
3100:Src/tasks.c   **** 
 3587              		.loc 1 3100 32 is_stmt 1 view .LVU1017
3116:Src/tasks.c   **** 
 3588              		.loc 1 3116 5 view .LVU1018
3116:Src/tasks.c   **** 
 3589              		.loc 1 3116 46 is_stmt 0 view .LVU1019
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 179


 3590 0004 044B     		ldr	r3, .L267
 3591 0006 1968     		ldr	r1, [r3]
 3592              	.LVL261:
3116:Src/tasks.c   **** 
 3593              		.loc 1 3116 5 view .LVU1020
 3594 0008 1831     		adds	r1, r1, #24
 3595 000a FFF7FEFF 		bl	vListInsert
 3596              	.LVL262:
3118:Src/tasks.c   **** }
 3597              		.loc 1 3118 5 is_stmt 1 view .LVU1021
 3598 000e 0121     		movs	r1, #1
 3599 0010 2046     		mov	r0, r4
 3600 0012 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3601              	.LVL263:
3119:Src/tasks.c   **** /*-----------------------------------------------------------*/
 3602              		.loc 1 3119 1 is_stmt 0 view .LVU1022
 3603 0016 10BD     		pop	{r4, pc}
 3604              	.LVL264:
 3605              	.L268:
3119:Src/tasks.c   **** /*-----------------------------------------------------------*/
 3606              		.loc 1 3119 1 view .LVU1023
 3607              		.align	2
 3608              	.L267:
 3609 0018 00000000 		.word	.LANCHOR10
 3610              		.cfi_endproc
 3611              	.LFE28:
 3613              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3614              		.align	1
 3615              		.global	vTaskPlaceOnUnorderedEventList
 3616              		.syntax unified
 3617              		.thumb
 3618              		.thumb_func
 3619              		.fpu softvfp
 3621              	vTaskPlaceOnUnorderedEventList:
 3622              	.LVL265:
 3623              	.LFB29:
3125:Src/tasks.c   ****     configASSERT( pxEventList );
 3624              		.loc 1 3125 1 is_stmt 1 view -0
 3625              		.cfi_startproc
 3626              		@ args = 0, pretend = 0, frame = 0
 3627              		@ frame_needed = 0, uses_anonymous_args = 0
3125:Src/tasks.c   ****     configASSERT( pxEventList );
 3628              		.loc 1 3125 1 is_stmt 0 view .LVU1025
 3629 0000 70B5     		push	{r4, r5, r6, lr}
 3630              	.LCFI34:
 3631              		.cfi_def_cfa_offset 16
 3632              		.cfi_offset 4, -16
 3633              		.cfi_offset 5, -12
 3634              		.cfi_offset 6, -8
 3635              		.cfi_offset 14, -4
 3636 0002 0346     		mov	r3, r0
3126:Src/tasks.c   **** 
 3637              		.loc 1 3126 32 is_stmt 1 view .LVU1026
3130:Src/tasks.c   **** 
 3638              		.loc 1 3130 46 view .LVU1027
3135:Src/tasks.c   **** 
 3639              		.loc 1 3135 5 view .LVU1028
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 180


 3640 0004 0D4C     		ldr	r4, .L271
 3641 0006 2068     		ldr	r0, [r4]
 3642              	.LVL266:
3135:Src/tasks.c   **** 
 3643              		.loc 1 3135 5 is_stmt 0 view .LVU1029
 3644 0008 41F00041 		orr	r1, r1, #-2147483648
 3645              	.LVL267:
3135:Src/tasks.c   **** 
 3646              		.loc 1 3135 5 view .LVU1030
 3647 000c 8161     		str	r1, [r0, #24]
 3648              	.LBB78:
3142:Src/tasks.c   **** 
 3649              		.loc 1 3142 5 is_stmt 1 view .LVU1031
 3650 000e 5968     		ldr	r1, [r3, #4]
 3651              	.LVL268:
3142:Src/tasks.c   **** 
 3652              		.loc 1 3142 5 view .LVU1032
3142:Src/tasks.c   **** 
 3653              		.loc 1 3142 5 view .LVU1033
3142:Src/tasks.c   **** 
 3654              		.loc 1 3142 5 view .LVU1034
 3655 0010 2068     		ldr	r0, [r4]
 3656 0012 C161     		str	r1, [r0, #28]
3142:Src/tasks.c   **** 
 3657              		.loc 1 3142 5 view .LVU1035
 3658 0014 2068     		ldr	r0, [r4]
 3659 0016 8E68     		ldr	r6, [r1, #8]
 3660 0018 0662     		str	r6, [r0, #32]
3142:Src/tasks.c   **** 
 3661              		.loc 1 3142 5 view .LVU1036
 3662 001a 2568     		ldr	r5, [r4]
 3663 001c 1835     		adds	r5, r5, #24
 3664 001e 7560     		str	r5, [r6, #4]
3142:Src/tasks.c   **** 
 3665              		.loc 1 3142 5 view .LVU1037
 3666 0020 2568     		ldr	r5, [r4]
 3667 0022 1835     		adds	r5, r5, #24
 3668 0024 8D60     		str	r5, [r1, #8]
3142:Src/tasks.c   **** 
 3669              		.loc 1 3142 5 view .LVU1038
 3670 0026 2168     		ldr	r1, [r4]
 3671              	.LVL269:
3142:Src/tasks.c   **** 
 3672              		.loc 1 3142 5 is_stmt 0 view .LVU1039
 3673 0028 8B62     		str	r3, [r1, #40]
3142:Src/tasks.c   **** 
 3674              		.loc 1 3142 5 is_stmt 1 view .LVU1040
 3675 002a 1968     		ldr	r1, [r3]
 3676 002c 0131     		adds	r1, r1, #1
 3677 002e 1960     		str	r1, [r3]
 3678              	.LBE78:
3142:Src/tasks.c   **** 
 3679              		.loc 1 3142 69 view .LVU1041
3144:Src/tasks.c   **** }
 3680              		.loc 1 3144 5 view .LVU1042
 3681 0030 0121     		movs	r1, #1
 3682 0032 1046     		mov	r0, r2
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 181


 3683 0034 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3684              	.LVL270:
3145:Src/tasks.c   **** /*-----------------------------------------------------------*/
 3685              		.loc 1 3145 1 is_stmt 0 view .LVU1043
 3686 0038 70BD     		pop	{r4, r5, r6, pc}
 3687              	.L272:
 3688 003a 00BF     		.align	2
 3689              	.L271:
 3690 003c 00000000 		.word	.LANCHOR10
 3691              		.cfi_endproc
 3692              	.LFE29:
 3694              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3695              		.align	1
 3696              		.global	xTaskRemoveFromEventList
 3697              		.syntax unified
 3698              		.thumb
 3699              		.thumb_func
 3700              		.fpu softvfp
 3702              	xTaskRemoveFromEventList:
 3703              	.LVL271:
 3704              	.LFB30:
3184:Src/tasks.c   ****     TCB_t * pxUnblockedTCB;
 3705              		.loc 1 3184 1 is_stmt 1 view -0
 3706              		.cfi_startproc
 3707              		@ args = 0, pretend = 0, frame = 0
 3708              		@ frame_needed = 0, uses_anonymous_args = 0
 3709              		@ link register save eliminated.
3184:Src/tasks.c   ****     TCB_t * pxUnblockedTCB;
 3710              		.loc 1 3184 1 is_stmt 0 view .LVU1045
 3711 0000 10B4     		push	{r4}
 3712              	.LCFI35:
 3713              		.cfi_def_cfa_offset 4
 3714              		.cfi_offset 4, -4
3185:Src/tasks.c   ****     BaseType_t xReturn;
 3715              		.loc 1 3185 5 is_stmt 1 view .LVU1046
3186:Src/tasks.c   **** 
 3716              		.loc 1 3186 5 view .LVU1047
3201:Src/tasks.c   ****     configASSERT( pxUnblockedTCB );
 3717              		.loc 1 3201 5 view .LVU1048
3201:Src/tasks.c   ****     configASSERT( pxUnblockedTCB );
 3718              		.loc 1 3201 22 is_stmt 0 view .LVU1049
 3719 0002 C368     		ldr	r3, [r0, #12]
3201:Src/tasks.c   ****     configASSERT( pxUnblockedTCB );
 3720              		.loc 1 3201 20 view .LVU1050
 3721 0004 DB68     		ldr	r3, [r3, #12]
 3722              	.LVL272:
3202:Src/tasks.c   ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 3723              		.loc 1 3202 35 is_stmt 1 view .LVU1051
 3724              	.LBB79:
3203:Src/tasks.c   **** 
 3725              		.loc 1 3203 5 view .LVU1052
 3726 0006 9A6A     		ldr	r2, [r3, #40]
 3727              	.LVL273:
3203:Src/tasks.c   **** 
 3728              		.loc 1 3203 5 view .LVU1053
 3729 0008 D869     		ldr	r0, [r3, #28]
 3730              	.LVL274:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 182


3203:Src/tasks.c   **** 
 3731              		.loc 1 3203 5 is_stmt 0 view .LVU1054
 3732 000a 196A     		ldr	r1, [r3, #32]
 3733 000c 8160     		str	r1, [r0, #8]
3203:Src/tasks.c   **** 
 3734              		.loc 1 3203 5 is_stmt 1 view .LVU1055
 3735 000e D869     		ldr	r0, [r3, #28]
 3736 0010 4860     		str	r0, [r1, #4]
3203:Src/tasks.c   **** 
 3737              		.loc 1 3203 5 view .LVU1056
 3738 0012 5168     		ldr	r1, [r2, #4]
 3739 0014 03F11800 		add	r0, r3, #24
 3740 0018 8142     		cmp	r1, r0
 3741 001a 3ED0     		beq	.L282
 3742              	.L274:
3203:Src/tasks.c   **** 
 3743              		.loc 1 3203 5 discriminator 3 view .LVU1057
 3744 001c 0021     		movs	r1, #0
 3745 001e 9962     		str	r1, [r3, #40]
3203:Src/tasks.c   **** 
 3746              		.loc 1 3203 5 discriminator 3 view .LVU1058
 3747 0020 1168     		ldr	r1, [r2]
 3748 0022 0139     		subs	r1, r1, #1
 3749 0024 1160     		str	r1, [r2]
 3750              	.LBE79:
3203:Src/tasks.c   **** 
 3751              		.loc 1 3203 59 discriminator 3 view .LVU1059
3205:Src/tasks.c   ****     {
 3752              		.loc 1 3205 5 discriminator 3 view .LVU1060
3205:Src/tasks.c   ****     {
 3753              		.loc 1 3205 30 is_stmt 0 discriminator 3 view .LVU1061
 3754 0026 274A     		ldr	r2, .L284
 3755              	.LVL275:
3205:Src/tasks.c   ****     {
 3756              		.loc 1 3205 30 discriminator 3 view .LVU1062
 3757 0028 1268     		ldr	r2, [r2]
3205:Src/tasks.c   ****     {
 3758              		.loc 1 3205 7 discriminator 3 view .LVU1063
 3759 002a 002A     		cmp	r2, #0
 3760 002c 3BD1     		bne	.L275
 3761              	.LBB80:
3207:Src/tasks.c   ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3762              		.loc 1 3207 9 is_stmt 1 view .LVU1064
 3763 002e 5A69     		ldr	r2, [r3, #20]
 3764              	.LVL276:
3207:Src/tasks.c   ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3765              		.loc 1 3207 9 view .LVU1065
 3766 0030 9868     		ldr	r0, [r3, #8]
 3767 0032 D968     		ldr	r1, [r3, #12]
 3768 0034 8160     		str	r1, [r0, #8]
3207:Src/tasks.c   ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3769              		.loc 1 3207 9 view .LVU1066
 3770 0036 9868     		ldr	r0, [r3, #8]
 3771 0038 4860     		str	r0, [r1, #4]
3207:Src/tasks.c   ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3772              		.loc 1 3207 9 view .LVU1067
 3773 003a 5168     		ldr	r1, [r2, #4]
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 183


 3774 003c 181D     		adds	r0, r3, #4
 3775 003e 8142     		cmp	r1, r0
 3776 0040 2ED0     		beq	.L283
 3777              	.L276:
3207:Src/tasks.c   ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3778              		.loc 1 3207 9 discriminator 3 view .LVU1068
 3779 0042 0021     		movs	r1, #0
 3780 0044 5961     		str	r1, [r3, #20]
3207:Src/tasks.c   ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3781              		.loc 1 3207 9 discriminator 3 view .LVU1069
 3782 0046 1168     		ldr	r1, [r2]
 3783 0048 0139     		subs	r1, r1, #1
 3784 004a 1160     		str	r1, [r2]
 3785              	.LBE80:
3207:Src/tasks.c   ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3786              		.loc 1 3207 63 discriminator 3 view .LVU1070
3208:Src/tasks.c   **** 
 3787              		.loc 1 3208 9 discriminator 3 view .LVU1071
3208:Src/tasks.c   **** 
 3788              		.loc 1 3208 9 discriminator 3 view .LVU1072
 3789 004c DA6A     		ldr	r2, [r3, #44]
 3790              	.LVL277:
3208:Src/tasks.c   **** 
 3791              		.loc 1 3208 9 is_stmt 0 discriminator 3 view .LVU1073
 3792 004e 1E49     		ldr	r1, .L284+4
 3793 0050 0968     		ldr	r1, [r1]
 3794 0052 8A42     		cmp	r2, r1
 3795 0054 01D9     		bls	.L277
3208:Src/tasks.c   **** 
 3796              		.loc 1 3208 9 is_stmt 1 discriminator 1 view .LVU1074
 3797 0056 1C49     		ldr	r1, .L284+4
 3798 0058 0A60     		str	r2, [r1]
 3799              	.L277:
3208:Src/tasks.c   **** 
 3800              		.loc 1 3208 9 discriminator 3 view .LVU1075
 3801              	.LBB81:
3208:Src/tasks.c   **** 
 3802              		.loc 1 3208 9 discriminator 3 view .LVU1076
 3803 005a 1C49     		ldr	r1, .L284+8
 3804 005c 02EB8202 		add	r2, r2, r2, lsl #2
 3805 0060 01EB8202 		add	r2, r1, r2, lsl #2
 3806 0064 5268     		ldr	r2, [r2, #4]
 3807              	.LVL278:
3208:Src/tasks.c   **** 
 3808              		.loc 1 3208 9 discriminator 3 view .LVU1077
3208:Src/tasks.c   **** 
 3809              		.loc 1 3208 9 discriminator 3 view .LVU1078
3208:Src/tasks.c   **** 
 3810              		.loc 1 3208 9 discriminator 3 view .LVU1079
 3811 0066 9A60     		str	r2, [r3, #8]
3208:Src/tasks.c   **** 
 3812              		.loc 1 3208 9 discriminator 3 view .LVU1080
 3813 0068 9468     		ldr	r4, [r2, #8]
 3814 006a DC60     		str	r4, [r3, #12]
3208:Src/tasks.c   **** 
 3815              		.loc 1 3208 9 discriminator 3 view .LVU1081
 3816 006c 6060     		str	r0, [r4, #4]
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 184


3208:Src/tasks.c   **** 
 3817              		.loc 1 3208 9 discriminator 3 view .LVU1082
 3818 006e 9060     		str	r0, [r2, #8]
3208:Src/tasks.c   **** 
 3819              		.loc 1 3208 9 discriminator 3 view .LVU1083
 3820 0070 DA6A     		ldr	r2, [r3, #44]
 3821              	.LVL279:
3208:Src/tasks.c   **** 
 3822              		.loc 1 3208 9 is_stmt 0 discriminator 3 view .LVU1084
 3823 0072 02EB8200 		add	r0, r2, r2, lsl #2
 3824 0076 8400     		lsls	r4, r0, #2
 3825 0078 01EB8000 		add	r0, r1, r0, lsl #2
 3826 007c 5861     		str	r0, [r3, #20]
3208:Src/tasks.c   **** 
 3827              		.loc 1 3208 9 is_stmt 1 discriminator 3 view .LVU1085
 3828 007e 0859     		ldr	r0, [r1, r4]
 3829 0080 0130     		adds	r0, r0, #1
 3830 0082 0851     		str	r0, [r1, r4]
 3831              	.LBE81:
3208:Src/tasks.c   **** 
 3832              		.loc 1 3208 9 discriminator 3 view .LVU1086
3208:Src/tasks.c   **** 
 3833              		.loc 1 3208 48 discriminator 3 view .LVU1087
 3834              	.L278:
3228:Src/tasks.c   ****     }
 3835              		.loc 1 3228 86 discriminator 1 view .LVU1088
3231:Src/tasks.c   ****     {
 3836              		.loc 1 3231 5 discriminator 1 view .LVU1089
3231:Src/tasks.c   ****     {
 3837              		.loc 1 3231 23 is_stmt 0 discriminator 1 view .LVU1090
 3838 0084 DA6A     		ldr	r2, [r3, #44]
3231:Src/tasks.c   ****     {
 3839              		.loc 1 3231 50 discriminator 1 view .LVU1091
 3840 0086 124B     		ldr	r3, .L284+12
 3841              	.LVL280:
3231:Src/tasks.c   ****     {
 3842              		.loc 1 3231 50 discriminator 1 view .LVU1092
 3843 0088 1B68     		ldr	r3, [r3]
 3844 008a DB6A     		ldr	r3, [r3, #44]
3231:Src/tasks.c   ****     {
 3845              		.loc 1 3231 7 discriminator 1 view .LVU1093
 3846 008c 9A42     		cmp	r2, r3
 3847 008e 16D9     		bls	.L280
3236:Src/tasks.c   **** 
 3848              		.loc 1 3236 9 is_stmt 1 view .LVU1094
 3849              	.LVL281:
3240:Src/tasks.c   ****     }
 3850              		.loc 1 3240 9 view .LVU1095
3240:Src/tasks.c   ****     }
 3851              		.loc 1 3240 23 is_stmt 0 view .LVU1096
 3852 0090 0120     		movs	r0, #1
 3853 0092 104B     		ldr	r3, .L284+16
 3854 0094 1860     		str	r0, [r3]
 3855              	.LVL282:
 3856              	.L273:
3248:Src/tasks.c   **** /*-----------------------------------------------------------*/
 3857              		.loc 1 3248 1 view .LVU1097
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 185


 3858 0096 10BC     		pop	{r4}
 3859              	.LCFI36:
 3860              		.cfi_remember_state
 3861              		.cfi_restore 4
 3862              		.cfi_def_cfa_offset 0
 3863 0098 7047     		bx	lr
 3864              	.LVL283:
 3865              	.L282:
 3866              	.LCFI37:
 3867              		.cfi_restore_state
 3868              	.LBB82:
3203:Src/tasks.c   **** 
 3869              		.loc 1 3203 5 is_stmt 1 discriminator 1 view .LVU1098
 3870 009a 196A     		ldr	r1, [r3, #32]
 3871 009c 5160     		str	r1, [r2, #4]
 3872 009e BDE7     		b	.L274
 3873              	.LVL284:
 3874              	.L283:
3203:Src/tasks.c   **** 
 3875              		.loc 1 3203 5 is_stmt 0 discriminator 1 view .LVU1099
 3876              	.LBE82:
 3877              	.LBB83:
3207:Src/tasks.c   ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3878              		.loc 1 3207 9 is_stmt 1 discriminator 1 view .LVU1100
 3879 00a0 D968     		ldr	r1, [r3, #12]
 3880 00a2 5160     		str	r1, [r2, #4]
 3881 00a4 CDE7     		b	.L276
 3882              	.LVL285:
 3883              	.L275:
3207:Src/tasks.c   ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3884              		.loc 1 3207 9 is_stmt 0 discriminator 1 view .LVU1101
 3885              	.LBE83:
 3886              	.LBB84:
3228:Src/tasks.c   ****     }
 3887              		.loc 1 3228 9 is_stmt 1 view .LVU1102
 3888 00a6 0C4A     		ldr	r2, .L284+20
 3889 00a8 5168     		ldr	r1, [r2, #4]
 3890              	.LVL286:
3228:Src/tasks.c   ****     }
 3891              		.loc 1 3228 9 view .LVU1103
3228:Src/tasks.c   ****     }
 3892              		.loc 1 3228 9 view .LVU1104
3228:Src/tasks.c   ****     }
 3893              		.loc 1 3228 9 view .LVU1105
 3894 00aa D961     		str	r1, [r3, #28]
3228:Src/tasks.c   ****     }
 3895              		.loc 1 3228 9 view .LVU1106
 3896 00ac 8C68     		ldr	r4, [r1, #8]
 3897 00ae 1C62     		str	r4, [r3, #32]
3228:Src/tasks.c   ****     }
 3898              		.loc 1 3228 9 view .LVU1107
 3899 00b0 6060     		str	r0, [r4, #4]
3228:Src/tasks.c   ****     }
 3900              		.loc 1 3228 9 view .LVU1108
 3901 00b2 8860     		str	r0, [r1, #8]
3228:Src/tasks.c   ****     }
 3902              		.loc 1 3228 9 view .LVU1109
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 186


 3903 00b4 9A62     		str	r2, [r3, #40]
3228:Src/tasks.c   ****     }
 3904              		.loc 1 3228 9 view .LVU1110
 3905 00b6 1168     		ldr	r1, [r2]
 3906              	.LVL287:
3228:Src/tasks.c   ****     }
 3907              		.loc 1 3228 9 is_stmt 0 view .LVU1111
 3908 00b8 0131     		adds	r1, r1, #1
 3909 00ba 1160     		str	r1, [r2]
 3910 00bc E2E7     		b	.L278
 3911              	.LVL288:
 3912              	.L280:
3228:Src/tasks.c   ****     }
 3913              		.loc 1 3228 9 view .LVU1112
 3914              	.LBE84:
3244:Src/tasks.c   ****     }
 3915              		.loc 1 3244 17 view .LVU1113
 3916 00be 0020     		movs	r0, #0
 3917              	.LVL289:
3247:Src/tasks.c   **** }
 3918              		.loc 1 3247 5 is_stmt 1 view .LVU1114
3247:Src/tasks.c   **** }
 3919              		.loc 1 3247 12 is_stmt 0 view .LVU1115
 3920 00c0 E9E7     		b	.L273
 3921              	.L285:
 3922 00c2 00BF     		.align	2
 3923              	.L284:
 3924 00c4 00000000 		.word	.LANCHOR16
 3925 00c8 00000000 		.word	.LANCHOR13
 3926 00cc 00000000 		.word	.LANCHOR4
 3927 00d0 00000000 		.word	.LANCHOR10
 3928 00d4 00000000 		.word	.LANCHOR17
 3929 00d8 00000000 		.word	.LANCHOR1
 3930              		.cfi_endproc
 3931              	.LFE30:
 3933              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3934              		.align	1
 3935              		.global	vTaskRemoveFromUnorderedEventList
 3936              		.syntax unified
 3937              		.thumb
 3938              		.thumb_func
 3939              		.fpu softvfp
 3941              	vTaskRemoveFromUnorderedEventList:
 3942              	.LVL290:
 3943              	.LFB31:
3253:Src/tasks.c   ****     TCB_t * pxUnblockedTCB;
 3944              		.loc 1 3253 1 is_stmt 1 view -0
 3945              		.cfi_startproc
 3946              		@ args = 0, pretend = 0, frame = 0
 3947              		@ frame_needed = 0, uses_anonymous_args = 0
 3948              		@ link register save eliminated.
3253:Src/tasks.c   ****     TCB_t * pxUnblockedTCB;
 3949              		.loc 1 3253 1 is_stmt 0 view .LVU1117
 3950 0000 10B4     		push	{r4}
 3951              	.LCFI38:
 3952              		.cfi_def_cfa_offset 4
 3953              		.cfi_offset 4, -4
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 187


3254:Src/tasks.c   **** 
 3954              		.loc 1 3254 5 is_stmt 1 view .LVU1118
3258:Src/tasks.c   **** 
 3955              		.loc 1 3258 52 view .LVU1119
3261:Src/tasks.c   **** 
 3956              		.loc 1 3261 5 view .LVU1120
 3957 0002 41F00041 		orr	r1, r1, #-2147483648
 3958              	.LVL291:
3261:Src/tasks.c   **** 
 3959              		.loc 1 3261 5 is_stmt 0 view .LVU1121
 3960 0006 0160     		str	r1, [r0]
3265:Src/tasks.c   ****     configASSERT( pxUnblockedTCB );
 3961              		.loc 1 3265 5 is_stmt 1 view .LVU1122
3265:Src/tasks.c   ****     configASSERT( pxUnblockedTCB );
 3962              		.loc 1 3265 20 is_stmt 0 view .LVU1123
 3963 0008 C368     		ldr	r3, [r0, #12]
 3964              	.LVL292:
3266:Src/tasks.c   ****     listREMOVE_ITEM( pxEventListItem );
 3965              		.loc 1 3266 35 is_stmt 1 view .LVU1124
 3966              	.LBB85:
3267:Src/tasks.c   **** 
 3967              		.loc 1 3267 5 view .LVU1125
 3968 000a 0269     		ldr	r2, [r0, #16]
 3969              	.LVL293:
3267:Src/tasks.c   **** 
 3970              		.loc 1 3267 5 view .LVU1126
 3971 000c 4168     		ldr	r1, [r0, #4]
 3972 000e 8468     		ldr	r4, [r0, #8]
 3973 0010 8C60     		str	r4, [r1, #8]
3267:Src/tasks.c   **** 
 3974              		.loc 1 3267 5 view .LVU1127
 3975 0012 8168     		ldr	r1, [r0, #8]
 3976 0014 4468     		ldr	r4, [r0, #4]
 3977 0016 4C60     		str	r4, [r1, #4]
3267:Src/tasks.c   **** 
 3978              		.loc 1 3267 5 view .LVU1128
 3979 0018 5168     		ldr	r1, [r2, #4]
 3980 001a 8142     		cmp	r1, r0
 3981 001c 3AD0     		beq	.L292
 3982              	.L287:
3267:Src/tasks.c   **** 
 3983              		.loc 1 3267 5 discriminator 3 view .LVU1129
 3984 001e 0021     		movs	r1, #0
 3985 0020 0161     		str	r1, [r0, #16]
3267:Src/tasks.c   **** 
 3986              		.loc 1 3267 5 discriminator 3 view .LVU1130
 3987 0022 1168     		ldr	r1, [r2]
 3988 0024 0139     		subs	r1, r1, #1
 3989 0026 1160     		str	r1, [r2]
 3990              	.LBE85:
3267:Src/tasks.c   **** 
 3991              		.loc 1 3267 39 discriminator 3 view .LVU1131
 3992              	.LBB86:
3286:Src/tasks.c   ****     prvAddTaskToReadyList( pxUnblockedTCB );
 3993              		.loc 1 3286 5 discriminator 3 view .LVU1132
 3994 0028 5A69     		ldr	r2, [r3, #20]
 3995              	.LVL294:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 188


3286:Src/tasks.c   ****     prvAddTaskToReadyList( pxUnblockedTCB );
 3996              		.loc 1 3286 5 discriminator 3 view .LVU1133
 3997 002a 9868     		ldr	r0, [r3, #8]
 3998              	.LVL295:
3286:Src/tasks.c   ****     prvAddTaskToReadyList( pxUnblockedTCB );
 3999              		.loc 1 3286 5 is_stmt 0 discriminator 3 view .LVU1134
 4000 002c D968     		ldr	r1, [r3, #12]
 4001 002e 8160     		str	r1, [r0, #8]
3286:Src/tasks.c   ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4002              		.loc 1 3286 5 is_stmt 1 discriminator 3 view .LVU1135
 4003 0030 9868     		ldr	r0, [r3, #8]
 4004 0032 4860     		str	r0, [r1, #4]
3286:Src/tasks.c   ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4005              		.loc 1 3286 5 discriminator 3 view .LVU1136
 4006 0034 5168     		ldr	r1, [r2, #4]
 4007 0036 181D     		adds	r0, r3, #4
 4008 0038 8142     		cmp	r1, r0
 4009 003a 2ED0     		beq	.L293
 4010              	.L288:
3286:Src/tasks.c   ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4011              		.loc 1 3286 5 discriminator 3 view .LVU1137
 4012 003c 0021     		movs	r1, #0
 4013 003e 5961     		str	r1, [r3, #20]
3286:Src/tasks.c   ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4014              		.loc 1 3286 5 discriminator 3 view .LVU1138
 4015 0040 1168     		ldr	r1, [r2]
 4016 0042 0139     		subs	r1, r1, #1
 4017 0044 1160     		str	r1, [r2]
 4018              	.LBE86:
3286:Src/tasks.c   ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4019              		.loc 1 3286 59 discriminator 3 view .LVU1139
3287:Src/tasks.c   **** 
 4020              		.loc 1 3287 5 discriminator 3 view .LVU1140
3287:Src/tasks.c   **** 
 4021              		.loc 1 3287 5 discriminator 3 view .LVU1141
 4022 0046 DA6A     		ldr	r2, [r3, #44]
 4023              	.LVL296:
3287:Src/tasks.c   **** 
 4024              		.loc 1 3287 5 is_stmt 0 discriminator 3 view .LVU1142
 4025 0048 1549     		ldr	r1, .L294
 4026 004a 0968     		ldr	r1, [r1]
 4027 004c 8A42     		cmp	r2, r1
 4028 004e 01D9     		bls	.L289
3287:Src/tasks.c   **** 
 4029              		.loc 1 3287 5 is_stmt 1 discriminator 1 view .LVU1143
 4030 0050 1349     		ldr	r1, .L294
 4031 0052 0A60     		str	r2, [r1]
 4032              	.L289:
3287:Src/tasks.c   **** 
 4033              		.loc 1 3287 5 discriminator 3 view .LVU1144
 4034              	.LBB87:
3287:Src/tasks.c   **** 
 4035              		.loc 1 3287 5 discriminator 3 view .LVU1145
 4036 0054 1349     		ldr	r1, .L294+4
 4037 0056 02EB8202 		add	r2, r2, r2, lsl #2
 4038 005a 01EB8202 		add	r2, r1, r2, lsl #2
 4039 005e 5268     		ldr	r2, [r2, #4]
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 189


 4040              	.LVL297:
3287:Src/tasks.c   **** 
 4041              		.loc 1 3287 5 discriminator 3 view .LVU1146
3287:Src/tasks.c   **** 
 4042              		.loc 1 3287 5 discriminator 3 view .LVU1147
3287:Src/tasks.c   **** 
 4043              		.loc 1 3287 5 discriminator 3 view .LVU1148
 4044 0060 9A60     		str	r2, [r3, #8]
3287:Src/tasks.c   **** 
 4045              		.loc 1 3287 5 discriminator 3 view .LVU1149
 4046 0062 9468     		ldr	r4, [r2, #8]
 4047 0064 DC60     		str	r4, [r3, #12]
3287:Src/tasks.c   **** 
 4048              		.loc 1 3287 5 discriminator 3 view .LVU1150
 4049 0066 6060     		str	r0, [r4, #4]
3287:Src/tasks.c   **** 
 4050              		.loc 1 3287 5 discriminator 3 view .LVU1151
 4051 0068 9060     		str	r0, [r2, #8]
3287:Src/tasks.c   **** 
 4052              		.loc 1 3287 5 discriminator 3 view .LVU1152
 4053 006a DA6A     		ldr	r2, [r3, #44]
 4054              	.LVL298:
3287:Src/tasks.c   **** 
 4055              		.loc 1 3287 5 is_stmt 0 discriminator 3 view .LVU1153
 4056 006c 02EB8200 		add	r0, r2, r2, lsl #2
 4057 0070 8400     		lsls	r4, r0, #2
 4058 0072 01EB8000 		add	r0, r1, r0, lsl #2
 4059 0076 5861     		str	r0, [r3, #20]
3287:Src/tasks.c   **** 
 4060              		.loc 1 3287 5 is_stmt 1 discriminator 3 view .LVU1154
 4061 0078 0859     		ldr	r0, [r1, r4]
 4062 007a 0130     		adds	r0, r0, #1
 4063 007c 0851     		str	r0, [r1, r4]
 4064              	.LBE87:
3287:Src/tasks.c   **** 
 4065              		.loc 1 3287 5 discriminator 3 view .LVU1155
3287:Src/tasks.c   **** 
 4066              		.loc 1 3287 44 discriminator 3 view .LVU1156
3289:Src/tasks.c   ****     {
 4067              		.loc 1 3289 5 discriminator 3 view .LVU1157
3289:Src/tasks.c   ****     {
 4068              		.loc 1 3289 23 is_stmt 0 discriminator 3 view .LVU1158
 4069 007e DA6A     		ldr	r2, [r3, #44]
3289:Src/tasks.c   ****     {
 4070              		.loc 1 3289 50 discriminator 3 view .LVU1159
 4071 0080 094B     		ldr	r3, .L294+8
 4072              	.LVL299:
3289:Src/tasks.c   ****     {
 4073              		.loc 1 3289 50 discriminator 3 view .LVU1160
 4074 0082 1B68     		ldr	r3, [r3]
 4075 0084 DB6A     		ldr	r3, [r3, #44]
3289:Src/tasks.c   ****     {
 4076              		.loc 1 3289 7 discriminator 3 view .LVU1161
 4077 0086 9A42     		cmp	r2, r3
 4078 0088 02D9     		bls	.L286
3295:Src/tasks.c   ****     }
 4079              		.loc 1 3295 9 is_stmt 1 view .LVU1162
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 190


3295:Src/tasks.c   ****     }
 4080              		.loc 1 3295 23 is_stmt 0 view .LVU1163
 4081 008a 084B     		ldr	r3, .L294+12
 4082 008c 0122     		movs	r2, #1
 4083 008e 1A60     		str	r2, [r3]
 4084              	.L286:
3297:Src/tasks.c   **** /*-----------------------------------------------------------*/
 4085              		.loc 1 3297 1 view .LVU1164
 4086 0090 10BC     		pop	{r4}
 4087              	.LCFI39:
 4088              		.cfi_remember_state
 4089              		.cfi_restore 4
 4090              		.cfi_def_cfa_offset 0
 4091 0092 7047     		bx	lr
 4092              	.LVL300:
 4093              	.L292:
 4094              	.LCFI40:
 4095              		.cfi_restore_state
 4096              	.LBB88:
3267:Src/tasks.c   **** 
 4097              		.loc 1 3267 5 is_stmt 1 discriminator 1 view .LVU1165
 4098 0094 8168     		ldr	r1, [r0, #8]
 4099 0096 5160     		str	r1, [r2, #4]
 4100 0098 C1E7     		b	.L287
 4101              	.LVL301:
 4102              	.L293:
3267:Src/tasks.c   **** 
 4103              		.loc 1 3267 5 is_stmt 0 discriminator 1 view .LVU1166
 4104              	.LBE88:
 4105              	.LBB89:
3286:Src/tasks.c   ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4106              		.loc 1 3286 5 is_stmt 1 discriminator 1 view .LVU1167
 4107 009a D968     		ldr	r1, [r3, #12]
 4108 009c 5160     		str	r1, [r2, #4]
 4109 009e CDE7     		b	.L288
 4110              	.L295:
 4111              		.align	2
 4112              	.L294:
 4113 00a0 00000000 		.word	.LANCHOR13
 4114 00a4 00000000 		.word	.LANCHOR4
 4115 00a8 00000000 		.word	.LANCHOR10
 4116 00ac 00000000 		.word	.LANCHOR17
 4117              	.LBE89:
 4118              		.cfi_endproc
 4119              	.LFE31:
 4121              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4122              		.align	1
 4123              		.global	vTaskSetTimeOutState
 4124              		.syntax unified
 4125              		.thumb
 4126              		.thumb_func
 4127              		.fpu softvfp
 4129              	vTaskSetTimeOutState:
 4130              	.LVL302:
 4131              	.LFB32:
3301:Src/tasks.c   ****     configASSERT( pxTimeOut );
 4132              		.loc 1 3301 1 view -0
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 191


 4133              		.cfi_startproc
 4134              		@ args = 0, pretend = 0, frame = 0
 4135              		@ frame_needed = 0, uses_anonymous_args = 0
3301:Src/tasks.c   ****     configASSERT( pxTimeOut );
 4136              		.loc 1 3301 1 is_stmt 0 view .LVU1169
 4137 0000 10B5     		push	{r4, lr}
 4138              	.LCFI41:
 4139              		.cfi_def_cfa_offset 8
 4140              		.cfi_offset 4, -8
 4141              		.cfi_offset 14, -4
 4142 0002 0446     		mov	r4, r0
3302:Src/tasks.c   ****     taskENTER_CRITICAL();
 4143              		.loc 1 3302 30 is_stmt 1 view .LVU1170
3303:Src/tasks.c   ****     {
 4144              		.loc 1 3303 5 view .LVU1171
 4145 0004 FFF7FEFF 		bl	vPortEnterCritical
 4146              	.LVL303:
3305:Src/tasks.c   ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4147              		.loc 1 3305 9 view .LVU1172
3305:Src/tasks.c   ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4148              		.loc 1 3305 35 is_stmt 0 view .LVU1173
 4149 0008 044B     		ldr	r3, .L298
 4150 000a 1B68     		ldr	r3, [r3]
 4151 000c 2360     		str	r3, [r4]
3306:Src/tasks.c   ****     }
 4152              		.loc 1 3306 9 is_stmt 1 view .LVU1174
3306:Src/tasks.c   ****     }
 4153              		.loc 1 3306 36 is_stmt 0 view .LVU1175
 4154 000e 044B     		ldr	r3, .L298+4
 4155 0010 1B68     		ldr	r3, [r3]
 4156 0012 6360     		str	r3, [r4, #4]
3308:Src/tasks.c   **** }
 4157              		.loc 1 3308 5 is_stmt 1 view .LVU1176
 4158 0014 FFF7FEFF 		bl	vPortExitCritical
 4159              	.LVL304:
3309:Src/tasks.c   **** /*-----------------------------------------------------------*/
 4160              		.loc 1 3309 1 is_stmt 0 view .LVU1177
 4161 0018 10BD     		pop	{r4, pc}
 4162              	.LVL305:
 4163              	.L299:
3309:Src/tasks.c   **** /*-----------------------------------------------------------*/
 4164              		.loc 1 3309 1 view .LVU1178
 4165 001a 00BF     		.align	2
 4166              	.L298:
 4167 001c 00000000 		.word	.LANCHOR20
 4168 0020 00000000 		.word	.LANCHOR15
 4169              		.cfi_endproc
 4170              	.LFE32:
 4172              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4173              		.align	1
 4174              		.global	vTaskInternalSetTimeOutState
 4175              		.syntax unified
 4176              		.thumb
 4177              		.thumb_func
 4178              		.fpu softvfp
 4180              	vTaskInternalSetTimeOutState:
 4181              	.LVL306:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 192


 4182              	.LFB33:
3313:Src/tasks.c   ****     /* For internal use only as it does not use a critical section. */
 4183              		.loc 1 3313 1 is_stmt 1 view -0
 4184              		.cfi_startproc
 4185              		@ args = 0, pretend = 0, frame = 0
 4186              		@ frame_needed = 0, uses_anonymous_args = 0
 4187              		@ link register save eliminated.
3315:Src/tasks.c   ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4188              		.loc 1 3315 5 view .LVU1180
3315:Src/tasks.c   ****     pxTimeOut->xTimeOnEntering = xTickCount;
 4189              		.loc 1 3315 31 is_stmt 0 view .LVU1181
 4190 0000 034B     		ldr	r3, .L301
 4191 0002 1B68     		ldr	r3, [r3]
 4192 0004 0360     		str	r3, [r0]
3316:Src/tasks.c   **** }
 4193              		.loc 1 3316 5 is_stmt 1 view .LVU1182
3316:Src/tasks.c   **** }
 4194              		.loc 1 3316 32 is_stmt 0 view .LVU1183
 4195 0006 034B     		ldr	r3, .L301+4
 4196 0008 1B68     		ldr	r3, [r3]
 4197 000a 4360     		str	r3, [r0, #4]
3317:Src/tasks.c   **** /*-----------------------------------------------------------*/
 4198              		.loc 1 3317 1 view .LVU1184
 4199 000c 7047     		bx	lr
 4200              	.L302:
 4201 000e 00BF     		.align	2
 4202              	.L301:
 4203 0010 00000000 		.word	.LANCHOR20
 4204 0014 00000000 		.word	.LANCHOR15
 4205              		.cfi_endproc
 4206              	.LFE33:
 4208              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4209              		.align	1
 4210              		.global	xTaskCheckForTimeOut
 4211              		.syntax unified
 4212              		.thumb
 4213              		.thumb_func
 4214              		.fpu softvfp
 4216              	xTaskCheckForTimeOut:
 4217              	.LVL307:
 4218              	.LFB34:
3322:Src/tasks.c   ****     BaseType_t xReturn;
 4219              		.loc 1 3322 1 is_stmt 1 view -0
 4220              		.cfi_startproc
 4221              		@ args = 0, pretend = 0, frame = 0
 4222              		@ frame_needed = 0, uses_anonymous_args = 0
3322:Src/tasks.c   ****     BaseType_t xReturn;
 4223              		.loc 1 3322 1 is_stmt 0 view .LVU1186
 4224 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4225              	.LCFI42:
 4226              		.cfi_def_cfa_offset 24
 4227              		.cfi_offset 3, -24
 4228              		.cfi_offset 4, -20
 4229              		.cfi_offset 5, -16
 4230              		.cfi_offset 6, -12
 4231              		.cfi_offset 7, -8
 4232              		.cfi_offset 14, -4
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 193


 4233 0002 0446     		mov	r4, r0
 4234 0004 0D46     		mov	r5, r1
3323:Src/tasks.c   **** 
 4235              		.loc 1 3323 5 is_stmt 1 view .LVU1187
3325:Src/tasks.c   ****     configASSERT( pxTicksToWait );
 4236              		.loc 1 3325 30 view .LVU1188
3326:Src/tasks.c   **** 
 4237              		.loc 1 3326 34 view .LVU1189
3328:Src/tasks.c   ****     {
 4238              		.loc 1 3328 5 view .LVU1190
 4239 0006 FFF7FEFF 		bl	vPortEnterCritical
 4240              	.LVL308:
 4241              	.LBB90:
3331:Src/tasks.c   ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4242              		.loc 1 3331 9 view .LVU1191
3331:Src/tasks.c   ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4243              		.loc 1 3331 26 is_stmt 0 view .LVU1192
 4244 000a 134B     		ldr	r3, .L310
 4245 000c 1968     		ldr	r1, [r3]
 4246              	.LVL309:
3332:Src/tasks.c   **** 
 4247              		.loc 1 3332 9 is_stmt 1 view .LVU1193
3332:Src/tasks.c   **** 
 4248              		.loc 1 3332 68 is_stmt 0 view .LVU1194
 4249 000e 6368     		ldr	r3, [r4, #4]
3332:Src/tasks.c   **** 
 4250              		.loc 1 3332 26 view .LVU1195
 4251 0010 C81A     		subs	r0, r1, r3
 4252              	.LVL310:
3346:Src/tasks.c   ****             {
 4253              		.loc 1 3346 13 is_stmt 1 view .LVU1196
3346:Src/tasks.c   ****             {
 4254              		.loc 1 3346 17 is_stmt 0 view .LVU1197
 4255 0012 2A68     		ldr	r2, [r5]
3346:Src/tasks.c   ****             {
 4256              		.loc 1 3346 15 view .LVU1198
 4257 0014 B2F1FF3F 		cmp	r2, #-1
 4258 0018 18D0     		beq	.L307
3356:Src/tasks.c   ****         {
 4259              		.loc 1 3356 9 is_stmt 1 view .LVU1199
3356:Src/tasks.c   ****         {
 4260              		.loc 1 3356 43 is_stmt 0 view .LVU1200
 4261 001a 2768     		ldr	r7, [r4]
3356:Src/tasks.c   ****         {
 4262              		.loc 1 3356 31 view .LVU1201
 4263 001c 0F4E     		ldr	r6, .L310+4
 4264 001e 3668     		ldr	r6, [r6]
3356:Src/tasks.c   ****         {
 4265              		.loc 1 3356 11 view .LVU1202
 4266 0020 B742     		cmp	r7, r6
 4267 0022 05D0     		beq	.L305
3356:Src/tasks.c   ****         {
 4268              		.loc 1 3356 62 discriminator 1 view .LVU1203
 4269 0024 8B42     		cmp	r3, r1
 4270 0026 03D8     		bhi	.L305
3363:Src/tasks.c   ****             *pxTicksToWait = ( TickType_t ) 0;
 4271              		.loc 1 3363 13 is_stmt 1 view .LVU1204
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 194


 4272              	.LVL311:
3364:Src/tasks.c   ****         }
 4273              		.loc 1 3364 13 view .LVU1205
3364:Src/tasks.c   ****         }
 4274              		.loc 1 3364 28 is_stmt 0 view .LVU1206
 4275 0028 0023     		movs	r3, #0
 4276 002a 2B60     		str	r3, [r5]
3363:Src/tasks.c   ****             *pxTicksToWait = ( TickType_t ) 0;
 4277              		.loc 1 3363 21 view .LVU1207
 4278 002c 0124     		movs	r4, #1
 4279              	.LVL312:
3364:Src/tasks.c   ****         }
 4280              		.loc 1 3364 28 view .LVU1208
 4281 002e 0EE0     		b	.L304
 4282              	.LVL313:
 4283              	.L305:
3366:Src/tasks.c   ****         {
 4284              		.loc 1 3366 14 is_stmt 1 view .LVU1209
3366:Src/tasks.c   ****         {
 4285              		.loc 1 3366 16 is_stmt 0 view .LVU1210
 4286 0030 8242     		cmp	r2, r0
 4287 0032 03D8     		bhi	.L309
3375:Src/tasks.c   ****             xReturn = pdTRUE;
 4288              		.loc 1 3375 13 is_stmt 1 view .LVU1211
3375:Src/tasks.c   ****             xReturn = pdTRUE;
 4289              		.loc 1 3375 28 is_stmt 0 view .LVU1212
 4290 0034 0023     		movs	r3, #0
 4291 0036 2B60     		str	r3, [r5]
3376:Src/tasks.c   ****         }
 4292              		.loc 1 3376 13 is_stmt 1 view .LVU1213
 4293              	.LVL314:
3376:Src/tasks.c   ****         }
 4294              		.loc 1 3376 21 is_stmt 0 view .LVU1214
 4295 0038 0124     		movs	r4, #1
 4296              	.LVL315:
3376:Src/tasks.c   ****         }
 4297              		.loc 1 3376 21 view .LVU1215
 4298 003a 08E0     		b	.L304
 4299              	.LVL316:
 4300              	.L309:
3369:Src/tasks.c   ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4301              		.loc 1 3369 13 is_stmt 1 view .LVU1216
3369:Src/tasks.c   ****             vTaskInternalSetTimeOutState( pxTimeOut );
 4302              		.loc 1 3369 28 is_stmt 0 view .LVU1217
 4303 003c 5B1A     		subs	r3, r3, r1
 4304 003e 1344     		add	r3, r3, r2
 4305 0040 2B60     		str	r3, [r5]
3370:Src/tasks.c   ****             xReturn = pdFALSE;
 4306              		.loc 1 3370 13 is_stmt 1 view .LVU1218
 4307 0042 2046     		mov	r0, r4
 4308              	.LVL317:
3370:Src/tasks.c   ****             xReturn = pdFALSE;
 4309              		.loc 1 3370 13 is_stmt 0 view .LVU1219
 4310 0044 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4311              	.LVL318:
3371:Src/tasks.c   ****         }
 4312              		.loc 1 3371 13 is_stmt 1 view .LVU1220
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 195


3371:Src/tasks.c   ****         }
 4313              		.loc 1 3371 21 is_stmt 0 view .LVU1221
 4314 0048 0024     		movs	r4, #0
 4315              	.LVL319:
3371:Src/tasks.c   ****         }
 4316              		.loc 1 3371 21 view .LVU1222
 4317 004a 00E0     		b	.L304
 4318              	.LVL320:
 4319              	.L307:
3351:Src/tasks.c   ****             }
 4320              		.loc 1 3351 25 view .LVU1223
 4321 004c 0024     		movs	r4, #0
 4322              	.LVL321:
 4323              	.L304:
3351:Src/tasks.c   ****             }
 4324              		.loc 1 3351 25 view .LVU1224
 4325              	.LBE90:
3379:Src/tasks.c   **** 
 4326              		.loc 1 3379 5 is_stmt 1 view .LVU1225
 4327 004e FFF7FEFF 		bl	vPortExitCritical
 4328              	.LVL322:
3381:Src/tasks.c   **** }
 4329              		.loc 1 3381 5 view .LVU1226
3382:Src/tasks.c   **** /*-----------------------------------------------------------*/
 4330              		.loc 1 3382 1 is_stmt 0 view .LVU1227
 4331 0052 2046     		mov	r0, r4
 4332 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4333              	.LVL323:
 4334              	.L311:
3382:Src/tasks.c   **** /*-----------------------------------------------------------*/
 4335              		.loc 1 3382 1 view .LVU1228
 4336 0056 00BF     		.align	2
 4337              	.L310:
 4338 0058 00000000 		.word	.LANCHOR15
 4339 005c 00000000 		.word	.LANCHOR20
 4340              		.cfi_endproc
 4341              	.LFE34:
 4343              		.section	.text.vTaskMissedYield,"ax",%progbits
 4344              		.align	1
 4345              		.global	vTaskMissedYield
 4346              		.syntax unified
 4347              		.thumb
 4348              		.thumb_func
 4349              		.fpu softvfp
 4351              	vTaskMissedYield:
 4352              	.LFB35:
3386:Src/tasks.c   ****     xYieldPending = pdTRUE;
 4353              		.loc 1 3386 1 is_stmt 1 view -0
 4354              		.cfi_startproc
 4355              		@ args = 0, pretend = 0, frame = 0
 4356              		@ frame_needed = 0, uses_anonymous_args = 0
 4357              		@ link register save eliminated.
3387:Src/tasks.c   **** }
 4358              		.loc 1 3387 5 view .LVU1230
3387:Src/tasks.c   **** }
 4359              		.loc 1 3387 19 is_stmt 0 view .LVU1231
 4360 0000 014B     		ldr	r3, .L313
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 196


 4361 0002 0122     		movs	r2, #1
 4362 0004 1A60     		str	r2, [r3]
3388:Src/tasks.c   **** /*-----------------------------------------------------------*/
 4363              		.loc 1 3388 1 view .LVU1232
 4364 0006 7047     		bx	lr
 4365              	.L314:
 4366              		.align	2
 4367              	.L313:
 4368 0008 00000000 		.word	.LANCHOR17
 4369              		.cfi_endproc
 4370              	.LFE35:
 4372              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4373              		.align	1
 4374              		.global	xTaskGetCurrentTaskHandle
 4375              		.syntax unified
 4376              		.thumb
 4377              		.thumb_func
 4378              		.fpu softvfp
 4380              	xTaskGetCurrentTaskHandle:
 4381              	.LFB41:
4030:Src/tasks.c   ****         TaskHandle_t xReturn;
 4382              		.loc 1 4030 5 is_stmt 1 view -0
 4383              		.cfi_startproc
 4384              		@ args = 0, pretend = 0, frame = 0
 4385              		@ frame_needed = 0, uses_anonymous_args = 0
 4386              		@ link register save eliminated.
4031:Src/tasks.c   **** 
 4387              		.loc 1 4031 9 view .LVU1234
4036:Src/tasks.c   **** 
 4388              		.loc 1 4036 9 view .LVU1235
4036:Src/tasks.c   **** 
 4389              		.loc 1 4036 17 is_stmt 0 view .LVU1236
 4390 0000 014B     		ldr	r3, .L316
 4391 0002 1868     		ldr	r0, [r3]
 4392              	.LVL324:
4038:Src/tasks.c   ****     }
 4393              		.loc 1 4038 9 is_stmt 1 view .LVU1237
4039:Src/tasks.c   **** 
 4394              		.loc 1 4039 5 is_stmt 0 view .LVU1238
 4395 0004 7047     		bx	lr
 4396              	.L317:
 4397 0006 00BF     		.align	2
 4398              	.L316:
 4399 0008 00000000 		.word	.LANCHOR10
 4400              		.cfi_endproc
 4401              	.LFE41:
 4403              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4404              		.align	1
 4405              		.global	xTaskGetSchedulerState
 4406              		.syntax unified
 4407              		.thumb
 4408              		.thumb_func
 4409              		.fpu softvfp
 4411              	xTaskGetSchedulerState:
 4412              	.LFB42:
4047:Src/tasks.c   ****         BaseType_t xReturn;
 4413              		.loc 1 4047 5 is_stmt 1 view -0
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 197


 4414              		.cfi_startproc
 4415              		@ args = 0, pretend = 0, frame = 0
 4416              		@ frame_needed = 0, uses_anonymous_args = 0
 4417              		@ link register save eliminated.
4048:Src/tasks.c   **** 
 4418              		.loc 1 4048 9 view .LVU1240
4050:Src/tasks.c   ****         {
 4419              		.loc 1 4050 9 view .LVU1241
4050:Src/tasks.c   ****         {
 4420              		.loc 1 4050 31 is_stmt 0 view .LVU1242
 4421 0000 054B     		ldr	r3, .L323
 4422 0002 1B68     		ldr	r3, [r3]
4050:Src/tasks.c   ****         {
 4423              		.loc 1 4050 11 view .LVU1243
 4424 0004 33B1     		cbz	r3, .L320
4056:Src/tasks.c   ****             {
 4425              		.loc 1 4056 13 is_stmt 1 view .LVU1244
4056:Src/tasks.c   ****             {
 4426              		.loc 1 4056 38 is_stmt 0 view .LVU1245
 4427 0006 054B     		ldr	r3, .L323+4
 4428 0008 1B68     		ldr	r3, [r3]
4056:Src/tasks.c   ****             {
 4429              		.loc 1 4056 15 view .LVU1246
 4430 000a 0BB1     		cbz	r3, .L322
4062:Src/tasks.c   ****             }
 4431              		.loc 1 4062 25 view .LVU1247
 4432 000c 0020     		movs	r0, #0
 4433              	.LVL325:
4066:Src/tasks.c   ****     }
 4434              		.loc 1 4066 9 is_stmt 1 view .LVU1248
4067:Src/tasks.c   **** 
 4435              		.loc 1 4067 5 is_stmt 0 view .LVU1249
 4436 000e 7047     		bx	lr
 4437              	.LVL326:
 4438              	.L322:
4058:Src/tasks.c   ****             }
 4439              		.loc 1 4058 25 view .LVU1250
 4440 0010 0220     		movs	r0, #2
 4441 0012 7047     		bx	lr
 4442              	.L320:
4052:Src/tasks.c   ****         }
 4443              		.loc 1 4052 21 view .LVU1251
 4444 0014 0120     		movs	r0, #1
 4445 0016 7047     		bx	lr
 4446              	.L324:
 4447              		.align	2
 4448              	.L323:
 4449 0018 00000000 		.word	.LANCHOR11
 4450 001c 00000000 		.word	.LANCHOR16
 4451              		.cfi_endproc
 4452              	.LFE42:
 4454              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4455              		.align	1
 4456              		.global	uxTaskResetEventItemValue
 4457              		.syntax unified
 4458              		.thumb
 4459              		.thumb_func
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 198


 4460              		.fpu softvfp
 4462              	uxTaskResetEventItemValue:
 4463              	.LFB43:
4672:Src/tasks.c   ****     TickType_t uxReturn;
 4464              		.loc 1 4672 1 is_stmt 1 view -0
 4465              		.cfi_startproc
 4466              		@ args = 0, pretend = 0, frame = 0
 4467              		@ frame_needed = 0, uses_anonymous_args = 0
 4468              		@ link register save eliminated.
4673:Src/tasks.c   **** 
 4469              		.loc 1 4673 5 view .LVU1253
4675:Src/tasks.c   **** 
 4470              		.loc 1 4675 5 view .LVU1254
4675:Src/tasks.c   **** 
 4471              		.loc 1 4675 16 is_stmt 0 view .LVU1255
 4472 0000 044A     		ldr	r2, .L326
 4473 0002 1368     		ldr	r3, [r2]
4675:Src/tasks.c   **** 
 4474              		.loc 1 4675 14 view .LVU1256
 4475 0004 9869     		ldr	r0, [r3, #24]
 4476              	.LVL327:
4679:Src/tasks.c   **** 
 4477              		.loc 1 4679 5 is_stmt 1 view .LVU1257
 4478 0006 1368     		ldr	r3, [r2]
 4479 0008 DB6A     		ldr	r3, [r3, #44]
 4480 000a 1268     		ldr	r2, [r2]
 4481 000c C3F10503 		rsb	r3, r3, #5
 4482 0010 9361     		str	r3, [r2, #24]
4681:Src/tasks.c   **** }
 4483              		.loc 1 4681 5 view .LVU1258
4682:Src/tasks.c   **** /*-----------------------------------------------------------*/
 4484              		.loc 1 4682 1 is_stmt 0 view .LVU1259
 4485 0012 7047     		bx	lr
 4486              	.L327:
 4487              		.align	2
 4488              	.L326:
 4489 0014 00000000 		.word	.LANCHOR10
 4490              		.cfi_endproc
 4491              	.LFE43:
 4493              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 4494              		.align	1
 4495              		.global	ulTaskGenericNotifyTake
 4496              		.syntax unified
 4497              		.thumb
 4498              		.thumb_func
 4499              		.fpu softvfp
 4501              	ulTaskGenericNotifyTake:
 4502              	.LVL328:
 4503              	.LFB44:
4707:Src/tasks.c   ****         uint32_t ulReturn;
 4504              		.loc 1 4707 5 is_stmt 1 view -0
 4505              		.cfi_startproc
 4506              		@ args = 0, pretend = 0, frame = 0
 4507              		@ frame_needed = 0, uses_anonymous_args = 0
4707:Src/tasks.c   ****         uint32_t ulReturn;
 4508              		.loc 1 4707 5 is_stmt 0 view .LVU1261
 4509 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 199


 4510              	.LCFI43:
 4511              		.cfi_def_cfa_offset 16
 4512              		.cfi_offset 4, -16
 4513              		.cfi_offset 5, -12
 4514              		.cfi_offset 6, -8
 4515              		.cfi_offset 14, -4
 4516 0002 0446     		mov	r4, r0
 4517 0004 0E46     		mov	r6, r1
 4518 0006 1546     		mov	r5, r2
4708:Src/tasks.c   **** 
 4519              		.loc 1 4708 9 is_stmt 1 view .LVU1262
4710:Src/tasks.c   **** 
 4520              		.loc 1 4710 78 view .LVU1263
4712:Src/tasks.c   ****         {
 4521              		.loc 1 4712 9 view .LVU1264
 4522 0008 FFF7FEFF 		bl	vPortEnterCritical
 4523              	.LVL329:
4715:Src/tasks.c   ****             {
 4524              		.loc 1 4715 13 view .LVU1265
4715:Src/tasks.c   ****             {
 4525              		.loc 1 4715 29 is_stmt 0 view .LVU1266
 4526 000c 204B     		ldr	r3, .L334
 4527 000e 1B68     		ldr	r3, [r3]
4715:Src/tasks.c   ****             {
 4528              		.loc 1 4715 46 view .LVU1267
 4529 0010 04F11002 		add	r2, r4, #16
 4530 0014 03EB8203 		add	r3, r3, r2, lsl #2
 4531 0018 5B68     		ldr	r3, [r3, #4]
4715:Src/tasks.c   ****             {
 4532              		.loc 1 4715 15 view .LVU1268
 4533 001a 33B9     		cbnz	r3, .L329
4718:Src/tasks.c   **** 
 4534              		.loc 1 4718 17 is_stmt 1 view .LVU1269
4718:Src/tasks.c   **** 
 4535              		.loc 1 4718 29 is_stmt 0 view .LVU1270
 4536 001c 1C4B     		ldr	r3, .L334
 4537 001e 1B68     		ldr	r3, [r3]
4718:Src/tasks.c   **** 
 4538              		.loc 1 4718 62 view .LVU1271
 4539 0020 2344     		add	r3, r3, r4
 4540 0022 0122     		movs	r2, #1
 4541 0024 83F84820 		strb	r2, [r3, #72]
4720:Src/tasks.c   ****                 {
 4542              		.loc 1 4720 17 is_stmt 1 view .LVU1272
4720:Src/tasks.c   ****                 {
 4543              		.loc 1 4720 19 is_stmt 0 view .LVU1273
 4544 0028 E5B9     		cbnz	r5, .L333
 4545              	.L329:
4738:Src/tasks.c   ****             }
 4546              		.loc 1 4738 41 is_stmt 1 view .LVU1274
4741:Src/tasks.c   **** 
 4547              		.loc 1 4741 9 view .LVU1275
 4548 002a FFF7FEFF 		bl	vPortExitCritical
 4549              	.LVL330:
4743:Src/tasks.c   ****         {
 4550              		.loc 1 4743 9 view .LVU1276
 4551 002e FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 200


 4552              	.LVL331:
4745:Src/tasks.c   ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 4553              		.loc 1 4745 51 view .LVU1277
4746:Src/tasks.c   **** 
 4554              		.loc 1 4746 13 view .LVU1278
4746:Src/tasks.c   **** 
 4555              		.loc 1 4746 36 is_stmt 0 view .LVU1279
 4556 0032 174B     		ldr	r3, .L334
 4557 0034 1B68     		ldr	r3, [r3]
4746:Src/tasks.c   **** 
 4558              		.loc 1 4746 22 view .LVU1280
 4559 0036 04F11002 		add	r2, r4, #16
 4560 003a 03EB8203 		add	r3, r3, r2, lsl #2
 4561 003e 5D68     		ldr	r5, [r3, #4]
 4562              	.LVL332:
4748:Src/tasks.c   ****             {
 4563              		.loc 1 4748 13 is_stmt 1 view .LVU1281
4748:Src/tasks.c   ****             {
 4564              		.loc 1 4748 15 is_stmt 0 view .LVU1282
 4565 0040 35B1     		cbz	r5, .L330
4750:Src/tasks.c   ****                 {
 4566              		.loc 1 4750 17 is_stmt 1 view .LVU1283
4750:Src/tasks.c   ****                 {
 4567              		.loc 1 4750 19 is_stmt 0 view .LVU1284
 4568 0042 E6B1     		cbz	r6, .L331
4752:Src/tasks.c   ****                 }
 4569              		.loc 1 4752 21 is_stmt 1 view .LVU1285
4752:Src/tasks.c   ****                 }
 4570              		.loc 1 4752 33 is_stmt 0 view .LVU1286
 4571 0044 124B     		ldr	r3, .L334
 4572 0046 1B68     		ldr	r3, [r3]
4752:Src/tasks.c   ****                 }
 4573              		.loc 1 4752 68 view .LVU1287
 4574 0048 03EB8203 		add	r3, r3, r2, lsl #2
 4575 004c 0022     		movs	r2, #0
 4576 004e 5A60     		str	r2, [r3, #4]
 4577              	.L330:
4761:Src/tasks.c   ****             }
 4578              		.loc 1 4761 41 is_stmt 1 view .LVU1288
4764:Src/tasks.c   ****         }
 4579              		.loc 1 4764 13 view .LVU1289
4764:Src/tasks.c   ****         }
 4580              		.loc 1 4764 25 is_stmt 0 view .LVU1290
 4581 0050 0F4B     		ldr	r3, .L334
 4582 0052 1868     		ldr	r0, [r3]
4764:Src/tasks.c   ****         }
 4583              		.loc 1 4764 58 view .LVU1291
 4584 0054 0444     		add	r4, r4, r0
 4585              	.LVL333:
4764:Src/tasks.c   ****         }
 4586              		.loc 1 4764 58 view .LVU1292
 4587 0056 0023     		movs	r3, #0
 4588 0058 84F84830 		strb	r3, [r4, #72]
4766:Src/tasks.c   **** 
 4589              		.loc 1 4766 9 is_stmt 1 view .LVU1293
 4590 005c FFF7FEFF 		bl	vPortExitCritical
 4591              	.LVL334:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 201


4768:Src/tasks.c   ****     }
 4592              		.loc 1 4768 9 view .LVU1294
4769:Src/tasks.c   **** 
 4593              		.loc 1 4769 5 is_stmt 0 view .LVU1295
 4594 0060 2846     		mov	r0, r5
 4595 0062 70BD     		pop	{r4, r5, r6, pc}
 4596              	.LVL335:
 4597              	.L333:
4722:Src/tasks.c   ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 4598              		.loc 1 4722 21 is_stmt 1 view .LVU1296
 4599 0064 1146     		mov	r1, r2
 4600 0066 2846     		mov	r0, r5
 4601 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4602              	.LVL336:
4723:Src/tasks.c   **** 
 4603              		.loc 1 4723 65 view .LVU1297
4729:Src/tasks.c   ****                 }
 4604              		.loc 1 4729 21 view .LVU1298
 4605 006c 094B     		ldr	r3, .L334+4
 4606 006e 4FF08052 		mov	r2, #268435456
 4607 0072 1A60     		str	r2, [r3]
4729:Src/tasks.c   ****                 }
 4608              		.loc 1 4729 21 view .LVU1299
 4609              		.syntax unified
 4610              	@ 4729 "Src/tasks.c" 1
 4611 0074 BFF34F8F 		dsb
 4612              	@ 0 "" 2
4729:Src/tasks.c   ****                 }
 4613              		.loc 1 4729 21 view .LVU1300
 4614              	@ 4729 "Src/tasks.c" 1
 4615 0078 BFF36F8F 		isb
 4616              	@ 0 "" 2
4729:Src/tasks.c   ****                 }
 4617              		.loc 1 4729 43 view .LVU1301
 4618              		.thumb
 4619              		.syntax unified
 4620 007c D5E7     		b	.L329
 4621              	.LVL337:
 4622              	.L331:
4756:Src/tasks.c   ****                 }
 4623              		.loc 1 4756 21 view .LVU1302
4756:Src/tasks.c   ****                 }
 4624              		.loc 1 4756 33 is_stmt 0 view .LVU1303
 4625 007e 044B     		ldr	r3, .L334
 4626 0080 1B68     		ldr	r3, [r3]
4756:Src/tasks.c   ****                 }
 4627              		.loc 1 4756 79 view .LVU1304
 4628 0082 6A1E     		subs	r2, r5, #1
4756:Src/tasks.c   ****                 }
 4629              		.loc 1 4756 68 view .LVU1305
 4630 0084 04F11001 		add	r1, r4, #16
 4631 0088 03EB8103 		add	r3, r3, r1, lsl #2
 4632 008c 5A60     		str	r2, [r3, #4]
 4633 008e DFE7     		b	.L330
 4634              	.L335:
 4635              		.align	2
 4636              	.L334:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 202


 4637 0090 00000000 		.word	.LANCHOR10
 4638 0094 04ED00E0 		.word	-536810236
 4639              		.cfi_endproc
 4640              	.LFE44:
 4642              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 4643              		.align	1
 4644              		.global	xTaskGenericNotifyWait
 4645              		.syntax unified
 4646              		.thumb
 4647              		.thumb_func
 4648              		.fpu softvfp
 4650              	xTaskGenericNotifyWait:
 4651              	.LVL338:
 4652              	.LFB45:
4781:Src/tasks.c   ****         BaseType_t xReturn;
 4653              		.loc 1 4781 5 is_stmt 1 view -0
 4654              		.cfi_startproc
 4655              		@ args = 4, pretend = 0, frame = 0
 4656              		@ frame_needed = 0, uses_anonymous_args = 0
4781:Src/tasks.c   ****         BaseType_t xReturn;
 4657              		.loc 1 4781 5 is_stmt 0 view .LVU1307
 4658 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4659              	.LCFI44:
 4660              		.cfi_def_cfa_offset 24
 4661              		.cfi_offset 3, -24
 4662              		.cfi_offset 4, -20
 4663              		.cfi_offset 5, -16
 4664              		.cfi_offset 6, -12
 4665              		.cfi_offset 7, -8
 4666              		.cfi_offset 14, -4
 4667 0002 0446     		mov	r4, r0
 4668 0004 0F46     		mov	r7, r1
 4669 0006 1646     		mov	r6, r2
 4670 0008 1D46     		mov	r5, r3
4782:Src/tasks.c   **** 
 4671              		.loc 1 4782 9 is_stmt 1 view .LVU1308
4784:Src/tasks.c   **** 
 4672              		.loc 1 4784 78 view .LVU1309
4786:Src/tasks.c   ****         {
 4673              		.loc 1 4786 9 view .LVU1310
 4674 000a FFF7FEFF 		bl	vPortEnterCritical
 4675              	.LVL339:
4789:Src/tasks.c   ****             {
 4676              		.loc 1 4789 13 view .LVU1311
4789:Src/tasks.c   ****             {
 4677              		.loc 1 4789 29 is_stmt 0 view .LVU1312
 4678 000e 294B     		ldr	r3, .L344
 4679 0010 1B68     		ldr	r3, [r3]
4789:Src/tasks.c   ****             {
 4680              		.loc 1 4789 44 view .LVU1313
 4681 0012 2344     		add	r3, r3, r4
 4682 0014 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 4683 0018 DBB2     		uxtb	r3, r3
4789:Src/tasks.c   ****             {
 4684              		.loc 1 4789 15 view .LVU1314
 4685 001a 022B     		cmp	r3, #2
 4686 001c 10D0     		beq	.L337
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 203


4794:Src/tasks.c   **** 
 4687              		.loc 1 4794 17 is_stmt 1 view .LVU1315
4794:Src/tasks.c   **** 
 4688              		.loc 1 4794 64 is_stmt 0 view .LVU1316
 4689 001e 254A     		ldr	r2, .L344
 4690 0020 1368     		ldr	r3, [r2]
 4691 0022 04F11001 		add	r1, r4, #16
 4692 0026 03EB8103 		add	r3, r3, r1, lsl #2
 4693 002a 5968     		ldr	r1, [r3, #4]
 4694 002c 21EA0707 		bic	r7, r1, r7
 4695              	.LVL340:
4794:Src/tasks.c   **** 
 4696              		.loc 1 4794 64 view .LVU1317
 4697 0030 5F60     		str	r7, [r3, #4]
4797:Src/tasks.c   **** 
 4698              		.loc 1 4797 17 is_stmt 1 view .LVU1318
4797:Src/tasks.c   **** 
 4699              		.loc 1 4797 29 is_stmt 0 view .LVU1319
 4700 0032 1368     		ldr	r3, [r2]
4797:Src/tasks.c   **** 
 4701              		.loc 1 4797 62 view .LVU1320
 4702 0034 2344     		add	r3, r3, r4
 4703 0036 0122     		movs	r2, #1
 4704 0038 83F84820 		strb	r2, [r3, #72]
4799:Src/tasks.c   ****                 {
 4705              		.loc 1 4799 17 is_stmt 1 view .LVU1321
4799:Src/tasks.c   ****                 {
 4706              		.loc 1 4799 19 is_stmt 0 view .LVU1322
 4707 003c 069B     		ldr	r3, [sp, #24]
 4708 003e FBB9     		cbnz	r3, .L342
 4709              	.LVL341:
 4710              	.L337:
4817:Src/tasks.c   ****             }
 4711              		.loc 1 4817 41 is_stmt 1 view .LVU1323
4820:Src/tasks.c   **** 
 4712              		.loc 1 4820 9 view .LVU1324
 4713 0040 FFF7FEFF 		bl	vPortExitCritical
 4714              	.LVL342:
4822:Src/tasks.c   ****         {
 4715              		.loc 1 4822 9 view .LVU1325
 4716 0044 FFF7FEFF 		bl	vPortEnterCritical
 4717              	.LVL343:
4824:Src/tasks.c   **** 
 4718              		.loc 1 4824 51 view .LVU1326
4826:Src/tasks.c   ****             {
 4719              		.loc 1 4826 13 view .LVU1327
4826:Src/tasks.c   ****             {
 4720              		.loc 1 4826 15 is_stmt 0 view .LVU1328
 4721 0048 3DB1     		cbz	r5, .L338
4830:Src/tasks.c   ****             }
 4722              		.loc 1 4830 17 is_stmt 1 view .LVU1329
4830:Src/tasks.c   ****             }
 4723              		.loc 1 4830 53 is_stmt 0 view .LVU1330
 4724 004a 1A4B     		ldr	r3, .L344
 4725 004c 1B68     		ldr	r3, [r3]
4830:Src/tasks.c   ****             }
 4726              		.loc 1 4830 70 view .LVU1331
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 204


 4727 004e 04F11002 		add	r2, r4, #16
 4728 0052 03EB8203 		add	r3, r3, r2, lsl #2
 4729 0056 5B68     		ldr	r3, [r3, #4]
4830:Src/tasks.c   ****             }
 4730              		.loc 1 4830 39 view .LVU1332
 4731 0058 2B60     		str	r3, [r5]
 4732              	.L338:
4837:Src/tasks.c   ****             {
 4733              		.loc 1 4837 13 is_stmt 1 view .LVU1333
4837:Src/tasks.c   ****             {
 4734              		.loc 1 4837 29 is_stmt 0 view .LVU1334
 4735 005a 164B     		ldr	r3, .L344
 4736 005c 1B68     		ldr	r3, [r3]
4837:Src/tasks.c   ****             {
 4737              		.loc 1 4837 44 view .LVU1335
 4738 005e 2344     		add	r3, r3, r4
 4739 0060 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 4740 0064 DBB2     		uxtb	r3, r3
4837:Src/tasks.c   ****             {
 4741              		.loc 1 4837 15 view .LVU1336
 4742 0066 022B     		cmp	r3, #2
 4743 0068 17D0     		beq	.L343
4840:Src/tasks.c   ****             }
 4744              		.loc 1 4840 25 view .LVU1337
 4745 006a 0025     		movs	r5, #0
 4746              	.LVL344:
 4747              	.L339:
4850:Src/tasks.c   ****         }
 4748              		.loc 1 4850 13 is_stmt 1 view .LVU1338
4850:Src/tasks.c   ****         }
 4749              		.loc 1 4850 25 is_stmt 0 view .LVU1339
 4750 006c 114B     		ldr	r3, .L344
 4751 006e 1868     		ldr	r0, [r3]
4850:Src/tasks.c   ****         }
 4752              		.loc 1 4850 58 view .LVU1340
 4753 0070 0444     		add	r4, r4, r0
 4754              	.LVL345:
4850:Src/tasks.c   ****         }
 4755              		.loc 1 4850 58 view .LVU1341
 4756 0072 0023     		movs	r3, #0
 4757 0074 84F84830 		strb	r3, [r4, #72]
4852:Src/tasks.c   **** 
 4758              		.loc 1 4852 9 is_stmt 1 view .LVU1342
 4759 0078 FFF7FEFF 		bl	vPortExitCritical
 4760              	.LVL346:
4854:Src/tasks.c   ****     }
 4761              		.loc 1 4854 9 view .LVU1343
4855:Src/tasks.c   **** 
 4762              		.loc 1 4855 5 is_stmt 0 view .LVU1344
 4763 007c 2846     		mov	r0, r5
 4764 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4765              	.LVL347:
 4766              	.L342:
4801:Src/tasks.c   ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 4767              		.loc 1 4801 21 is_stmt 1 view .LVU1345
 4768 0080 1146     		mov	r1, r2
 4769 0082 1846     		mov	r0, r3
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 205


 4770 0084 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4771              	.LVL348:
4802:Src/tasks.c   **** 
 4772              		.loc 1 4802 65 view .LVU1346
4808:Src/tasks.c   ****                 }
 4773              		.loc 1 4808 21 view .LVU1347
 4774 0088 0B4B     		ldr	r3, .L344+4
 4775 008a 4FF08052 		mov	r2, #268435456
 4776 008e 1A60     		str	r2, [r3]
 4777              	.LVL349:
4808:Src/tasks.c   ****                 }
 4778              		.loc 1 4808 21 view .LVU1348
 4779              		.syntax unified
 4780              	@ 4808 "Src/tasks.c" 1
 4781 0090 BFF34F8F 		dsb
 4782              	@ 0 "" 2
4808:Src/tasks.c   ****                 }
 4783              		.loc 1 4808 21 view .LVU1349
 4784              	@ 4808 "Src/tasks.c" 1
 4785 0094 BFF36F8F 		isb
 4786              	@ 0 "" 2
4808:Src/tasks.c   ****                 }
 4787              		.loc 1 4808 43 view .LVU1350
 4788              		.thumb
 4789              		.syntax unified
 4790 0098 D2E7     		b	.L337
 4791              	.L343:
4846:Src/tasks.c   ****                 xReturn = pdTRUE;
 4792              		.loc 1 4846 17 view .LVU1351
4846:Src/tasks.c   ****                 xReturn = pdTRUE;
 4793              		.loc 1 4846 64 is_stmt 0 view .LVU1352
 4794 009a 064B     		ldr	r3, .L344
 4795 009c 1B68     		ldr	r3, [r3]
 4796 009e 04F11002 		add	r2, r4, #16
 4797 00a2 03EB8203 		add	r3, r3, r2, lsl #2
 4798 00a6 5A68     		ldr	r2, [r3, #4]
 4799 00a8 22EA0606 		bic	r6, r2, r6
 4800              	.LVL350:
4846:Src/tasks.c   ****                 xReturn = pdTRUE;
 4801              		.loc 1 4846 64 view .LVU1353
 4802 00ac 5E60     		str	r6, [r3, #4]
4847:Src/tasks.c   ****             }
 4803              		.loc 1 4847 17 is_stmt 1 view .LVU1354
 4804              	.LVL351:
4847:Src/tasks.c   ****             }
 4805              		.loc 1 4847 25 is_stmt 0 view .LVU1355
 4806 00ae 0125     		movs	r5, #1
 4807              	.LVL352:
4847:Src/tasks.c   ****             }
 4808              		.loc 1 4847 25 view .LVU1356
 4809 00b0 DCE7     		b	.L339
 4810              	.L345:
 4811 00b2 00BF     		.align	2
 4812              	.L344:
 4813 00b4 00000000 		.word	.LANCHOR10
 4814 00b8 04ED00E0 		.word	-536810236
 4815              		.cfi_endproc
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 206


 4816              	.LFE45:
 4818              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4819              		.align	1
 4820              		.global	xTaskGenericNotify
 4821              		.syntax unified
 4822              		.thumb
 4823              		.thumb_func
 4824              		.fpu softvfp
 4826              	xTaskGenericNotify:
 4827              	.LVL353:
 4828              	.LFB46:
4867:Src/tasks.c   ****         TCB_t * pxTCB;
 4829              		.loc 1 4867 5 is_stmt 1 view -0
 4830              		.cfi_startproc
 4831              		@ args = 4, pretend = 0, frame = 0
 4832              		@ frame_needed = 0, uses_anonymous_args = 0
4867:Src/tasks.c   ****         TCB_t * pxTCB;
 4833              		.loc 1 4867 5 is_stmt 0 view .LVU1358
 4834 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4835              	.LCFI45:
 4836              		.cfi_def_cfa_offset 24
 4837              		.cfi_offset 4, -24
 4838              		.cfi_offset 5, -20
 4839              		.cfi_offset 6, -16
 4840              		.cfi_offset 7, -12
 4841              		.cfi_offset 8, -8
 4842              		.cfi_offset 14, -4
 4843 0004 0446     		mov	r4, r0
 4844 0006 0D46     		mov	r5, r1
 4845 0008 1746     		mov	r7, r2
 4846 000a 1E46     		mov	r6, r3
 4847 000c DDF81880 		ldr	r8, [sp, #24]
4868:Src/tasks.c   ****         BaseType_t xReturn = pdPASS;
 4848              		.loc 1 4868 9 is_stmt 1 view .LVU1359
4869:Src/tasks.c   ****         uint8_t ucOriginalNotifyState;
 4849              		.loc 1 4869 9 view .LVU1360
 4850              	.LVL354:
4870:Src/tasks.c   **** 
 4851              		.loc 1 4870 9 view .LVU1361
4872:Src/tasks.c   ****         configASSERT( xTaskToNotify );
 4852              		.loc 1 4872 80 view .LVU1362
4873:Src/tasks.c   ****         pxTCB = xTaskToNotify;
 4853              		.loc 1 4873 38 view .LVU1363
4874:Src/tasks.c   **** 
 4854              		.loc 1 4874 9 view .LVU1364
4876:Src/tasks.c   ****         {
 4855              		.loc 1 4876 9 view .LVU1365
 4856 0010 FFF7FEFF 		bl	vPortEnterCritical
 4857              	.LVL355:
4878:Src/tasks.c   ****             {
 4858              		.loc 1 4878 13 view .LVU1366
4878:Src/tasks.c   ****             {
 4859              		.loc 1 4878 15 is_stmt 0 view .LVU1367
 4860 0014 B8F1000F 		cmp	r8, #0
 4861 0018 06D0     		beq	.L347
4880:Src/tasks.c   ****             }
 4862              		.loc 1 4880 17 is_stmt 1 view .LVU1368
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 207


4880:Src/tasks.c   ****             }
 4863              		.loc 1 4880 71 is_stmt 0 view .LVU1369
 4864 001a 05F11003 		add	r3, r5, #16
 4865 001e 04EB8303 		add	r3, r4, r3, lsl #2
 4866 0022 5B68     		ldr	r3, [r3, #4]
4880:Src/tasks.c   ****             }
 4867              		.loc 1 4880 47 view .LVU1370
 4868 0024 C8F80030 		str	r3, [r8]
 4869              	.L347:
4883:Src/tasks.c   **** 
 4870              		.loc 1 4883 13 is_stmt 1 view .LVU1371
4883:Src/tasks.c   **** 
 4871              		.loc 1 4883 35 is_stmt 0 view .LVU1372
 4872 0028 6319     		adds	r3, r4, r5
 4873 002a 93F84800 		ldrb	r0, [r3, #72]	@ zero_extendqisi2
 4874 002e C0B2     		uxtb	r0, r0
 4875              	.LVL356:
4885:Src/tasks.c   **** 
 4876              		.loc 1 4885 13 is_stmt 1 view .LVU1373
4885:Src/tasks.c   **** 
 4877              		.loc 1 4885 53 is_stmt 0 view .LVU1374
 4878 0030 0222     		movs	r2, #2
 4879 0032 83F84820 		strb	r2, [r3, #72]
4887:Src/tasks.c   ****             {
 4880              		.loc 1 4887 13 is_stmt 1 view .LVU1375
 4881 0036 731E     		subs	r3, r6, #1
 4882 0038 032B     		cmp	r3, #3
 4883 003a 27D8     		bhi	.L357
 4884 003c DFE803F0 		tbb	[pc, r3]
 4885              	.L350:
 4886 0040 02       		.byte	(.L353-.L350)/2
 4887 0041 10       		.byte	(.L352-.L350)/2
 4888 0042 18       		.byte	(.L351-.L350)/2
 4889 0043 1E       		.byte	(.L349-.L350)/2
 4890              		.p2align 1
 4891              	.L353:
4890:Src/tasks.c   ****                     break;
 4892              		.loc 1 4890 21 view .LVU1376
4890:Src/tasks.c   ****                     break;
 4893              		.loc 1 4890 63 is_stmt 0 view .LVU1377
 4894 0044 1035     		adds	r5, r5, #16
 4895              	.LVL357:
4890:Src/tasks.c   ****                     break;
 4896              		.loc 1 4890 63 view .LVU1378
 4897 0046 04EB8505 		add	r5, r4, r5, lsl #2
 4898              	.LVL358:
4890:Src/tasks.c   ****                     break;
 4899              		.loc 1 4890 63 view .LVU1379
 4900 004a 6A68     		ldr	r2, [r5, #4]
 4901 004c 1743     		orrs	r7, r7, r2
 4902              	.LVL359:
4890:Src/tasks.c   ****                     break;
 4903              		.loc 1 4890 63 view .LVU1380
 4904 004e 6F60     		str	r7, [r5, #4]
4891:Src/tasks.c   **** 
 4905              		.loc 1 4891 21 is_stmt 1 view .LVU1381
4869:Src/tasks.c   ****         uint8_t ucOriginalNotifyState;
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 208


 4906              		.loc 1 4869 20 is_stmt 0 view .LVU1382
 4907 0050 0125     		movs	r5, #1
 4908              	.L348:
 4909              	.LVL360:
4931:Src/tasks.c   **** 
 4910              		.loc 1 4931 48 is_stmt 1 view .LVU1383
4935:Src/tasks.c   ****             {
 4911              		.loc 1 4935 13 view .LVU1384
4935:Src/tasks.c   ****             {
 4912              		.loc 1 4935 15 is_stmt 0 view .LVU1385
 4913 0052 0128     		cmp	r0, #1
 4914 0054 1ED0     		beq	.L360
 4915              	.LVL361:
 4916              	.L354:
4972:Src/tasks.c   ****             }
 4917              		.loc 1 4972 41 is_stmt 1 view .LVU1386
4975:Src/tasks.c   **** 
 4918              		.loc 1 4975 9 view .LVU1387
 4919 0056 FFF7FEFF 		bl	vPortExitCritical
 4920              	.LVL362:
4977:Src/tasks.c   ****     }
 4921              		.loc 1 4977 9 view .LVU1388
4978:Src/tasks.c   **** 
 4922              		.loc 1 4978 5 is_stmt 0 view .LVU1389
 4923 005a 2846     		mov	r0, r5
 4924 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4925              	.LVL363:
 4926              	.L352:
4894:Src/tasks.c   ****                     break;
 4927              		.loc 1 4894 21 is_stmt 1 view .LVU1390
4894:Src/tasks.c   ****                     break;
 4928              		.loc 1 4894 45 is_stmt 0 view .LVU1391
 4929 0060 1035     		adds	r5, r5, #16
 4930              	.LVL364:
4894:Src/tasks.c   ****                     break;
 4931              		.loc 1 4894 45 view .LVU1392
 4932 0062 04EB8505 		add	r5, r4, r5, lsl #2
 4933              	.LVL365:
4894:Src/tasks.c   ****                     break;
 4934              		.loc 1 4894 45 view .LVU1393
 4935 0066 6B68     		ldr	r3, [r5, #4]
4894:Src/tasks.c   ****                     break;
 4936              		.loc 1 4894 66 view .LVU1394
 4937 0068 0133     		adds	r3, r3, #1
 4938 006a 6B60     		str	r3, [r5, #4]
4895:Src/tasks.c   **** 
 4939              		.loc 1 4895 21 is_stmt 1 view .LVU1395
4869:Src/tasks.c   ****         uint8_t ucOriginalNotifyState;
 4940              		.loc 1 4869 20 is_stmt 0 view .LVU1396
 4941 006c 0125     		movs	r5, #1
4895:Src/tasks.c   **** 
 4942              		.loc 1 4895 21 view .LVU1397
 4943 006e F0E7     		b	.L348
 4944              	.LVL366:
 4945              	.L351:
4898:Src/tasks.c   ****                     break;
 4946              		.loc 1 4898 21 is_stmt 1 view .LVU1398
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 209


4898:Src/tasks.c   ****                     break;
 4947              		.loc 1 4898 63 is_stmt 0 view .LVU1399
 4948 0070 1035     		adds	r5, r5, #16
 4949              	.LVL367:
4898:Src/tasks.c   ****                     break;
 4950              		.loc 1 4898 63 view .LVU1400
 4951 0072 04EB8505 		add	r5, r4, r5, lsl #2
 4952              	.LVL368:
4898:Src/tasks.c   ****                     break;
 4953              		.loc 1 4898 63 view .LVU1401
 4954 0076 6F60     		str	r7, [r5, #4]
4899:Src/tasks.c   **** 
 4955              		.loc 1 4899 21 is_stmt 1 view .LVU1402
4869:Src/tasks.c   ****         uint8_t ucOriginalNotifyState;
 4956              		.loc 1 4869 20 is_stmt 0 view .LVU1403
 4957 0078 0125     		movs	r5, #1
4899:Src/tasks.c   **** 
 4958              		.loc 1 4899 21 view .LVU1404
 4959 007a EAE7     		b	.L348
 4960              	.LVL369:
 4961              	.L349:
4903:Src/tasks.c   ****                     {
 4962              		.loc 1 4903 21 is_stmt 1 view .LVU1405
4903:Src/tasks.c   ****                     {
 4963              		.loc 1 4903 23 is_stmt 0 view .LVU1406
 4964 007c 0228     		cmp	r0, #2
 4965 007e 07D0     		beq	.L358
4905:Src/tasks.c   ****                     }
 4966              		.loc 1 4905 25 is_stmt 1 view .LVU1407
4905:Src/tasks.c   ****                     }
 4967              		.loc 1 4905 67 is_stmt 0 view .LVU1408
 4968 0080 1035     		adds	r5, r5, #16
 4969              	.LVL370:
4905:Src/tasks.c   ****                     }
 4970              		.loc 1 4905 67 view .LVU1409
 4971 0082 04EB8505 		add	r5, r4, r5, lsl #2
 4972              	.LVL371:
4905:Src/tasks.c   ****                     }
 4973              		.loc 1 4905 67 view .LVU1410
 4974 0086 6F60     		str	r7, [r5, #4]
4869:Src/tasks.c   ****         uint8_t ucOriginalNotifyState;
 4975              		.loc 1 4869 20 view .LVU1411
 4976 0088 0125     		movs	r5, #1
 4977 008a E2E7     		b	.L348
 4978              	.LVL372:
 4979              	.L357:
4885:Src/tasks.c   **** 
 4980              		.loc 1 4885 53 view .LVU1412
 4981 008c 0125     		movs	r5, #1
 4982              	.LVL373:
4885:Src/tasks.c   **** 
 4983              		.loc 1 4885 53 view .LVU1413
 4984 008e E0E7     		b	.L348
 4985              	.LVL374:
 4986              	.L358:
4910:Src/tasks.c   ****                     }
 4987              		.loc 1 4910 33 view .LVU1414
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 210


 4988 0090 0025     		movs	r5, #0
 4989              	.LVL375:
4910:Src/tasks.c   ****                     }
 4990              		.loc 1 4910 33 view .LVU1415
 4991 0092 DEE7     		b	.L348
 4992              	.LVL376:
 4993              	.L360:
 4994              	.LBB91:
4937:Src/tasks.c   ****                 prvAddTaskToReadyList( pxTCB );
 4995              		.loc 1 4937 17 is_stmt 1 view .LVU1416
 4996 0094 6369     		ldr	r3, [r4, #20]
 4997              	.LVL377:
4937:Src/tasks.c   ****                 prvAddTaskToReadyList( pxTCB );
 4998              		.loc 1 4937 17 view .LVU1417
 4999 0096 A268     		ldr	r2, [r4, #8]
 5000 0098 E168     		ldr	r1, [r4, #12]
 5001 009a 9160     		str	r1, [r2, #8]
4937:Src/tasks.c   ****                 prvAddTaskToReadyList( pxTCB );
 5002              		.loc 1 4937 17 view .LVU1418
 5003 009c E268     		ldr	r2, [r4, #12]
 5004 009e A168     		ldr	r1, [r4, #8]
 5005 00a0 5160     		str	r1, [r2, #4]
4937:Src/tasks.c   ****                 prvAddTaskToReadyList( pxTCB );
 5006              		.loc 1 4937 17 view .LVU1419
 5007 00a2 5A68     		ldr	r2, [r3, #4]
 5008 00a4 211D     		adds	r1, r4, #4
 5009 00a6 8A42     		cmp	r2, r1
 5010 00a8 2FD0     		beq	.L361
 5011              	.L355:
4937:Src/tasks.c   ****                 prvAddTaskToReadyList( pxTCB );
 5012              		.loc 1 4937 17 discriminator 3 view .LVU1420
 5013 00aa 0022     		movs	r2, #0
 5014 00ac 6261     		str	r2, [r4, #20]
4937:Src/tasks.c   ****                 prvAddTaskToReadyList( pxTCB );
 5015              		.loc 1 4937 17 discriminator 3 view .LVU1421
 5016 00ae 1A68     		ldr	r2, [r3]
 5017 00b0 013A     		subs	r2, r2, #1
 5018 00b2 1A60     		str	r2, [r3]
 5019              	.LBE91:
4937:Src/tasks.c   ****                 prvAddTaskToReadyList( pxTCB );
 5020              		.loc 1 4937 62 discriminator 3 view .LVU1422
4938:Src/tasks.c   **** 
 5021              		.loc 1 4938 17 discriminator 3 view .LVU1423
4938:Src/tasks.c   **** 
 5022              		.loc 1 4938 17 discriminator 3 view .LVU1424
 5023 00b4 E36A     		ldr	r3, [r4, #44]
 5024              	.LVL378:
4938:Src/tasks.c   **** 
 5025              		.loc 1 4938 17 is_stmt 0 discriminator 3 view .LVU1425
 5026 00b6 164A     		ldr	r2, .L362
 5027 00b8 1268     		ldr	r2, [r2]
 5028 00ba 9342     		cmp	r3, r2
 5029 00bc 01D9     		bls	.L356
4938:Src/tasks.c   **** 
 5030              		.loc 1 4938 17 is_stmt 1 discriminator 1 view .LVU1426
 5031 00be 144A     		ldr	r2, .L362
 5032 00c0 1360     		str	r3, [r2]
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 211


 5033              	.L356:
4938:Src/tasks.c   **** 
 5034              		.loc 1 4938 17 discriminator 3 view .LVU1427
 5035              	.LBB92:
4938:Src/tasks.c   **** 
 5036              		.loc 1 4938 17 discriminator 3 view .LVU1428
 5037 00c2 144A     		ldr	r2, .L362+4
 5038 00c4 03EB8303 		add	r3, r3, r3, lsl #2
 5039 00c8 02EB8303 		add	r3, r2, r3, lsl #2
 5040 00cc 5B68     		ldr	r3, [r3, #4]
 5041              	.LVL379:
4938:Src/tasks.c   **** 
 5042              		.loc 1 4938 17 discriminator 3 view .LVU1429
4938:Src/tasks.c   **** 
 5043              		.loc 1 4938 17 discriminator 3 view .LVU1430
4938:Src/tasks.c   **** 
 5044              		.loc 1 4938 17 discriminator 3 view .LVU1431
 5045 00ce A360     		str	r3, [r4, #8]
4938:Src/tasks.c   **** 
 5046              		.loc 1 4938 17 discriminator 3 view .LVU1432
 5047 00d0 9868     		ldr	r0, [r3, #8]
 5048              	.LVL380:
4938:Src/tasks.c   **** 
 5049              		.loc 1 4938 17 is_stmt 0 discriminator 3 view .LVU1433
 5050 00d2 E060     		str	r0, [r4, #12]
4938:Src/tasks.c   **** 
 5051              		.loc 1 4938 17 is_stmt 1 discriminator 3 view .LVU1434
 5052 00d4 4160     		str	r1, [r0, #4]
4938:Src/tasks.c   **** 
 5053              		.loc 1 4938 17 discriminator 3 view .LVU1435
 5054 00d6 9960     		str	r1, [r3, #8]
4938:Src/tasks.c   **** 
 5055              		.loc 1 4938 17 discriminator 3 view .LVU1436
 5056 00d8 E36A     		ldr	r3, [r4, #44]
 5057              	.LVL381:
4938:Src/tasks.c   **** 
 5058              		.loc 1 4938 17 is_stmt 0 discriminator 3 view .LVU1437
 5059 00da 03EB8301 		add	r1, r3, r3, lsl #2
 5060 00de 8800     		lsls	r0, r1, #2
 5061 00e0 02EB8101 		add	r1, r2, r1, lsl #2
 5062 00e4 6161     		str	r1, [r4, #20]
4938:Src/tasks.c   **** 
 5063              		.loc 1 4938 17 is_stmt 1 discriminator 3 view .LVU1438
 5064 00e6 1158     		ldr	r1, [r2, r0]
 5065 00e8 0131     		adds	r1, r1, #1
 5066 00ea 1150     		str	r1, [r2, r0]
 5067              	.LBE92:
4938:Src/tasks.c   **** 
 5068              		.loc 1 4938 17 discriminator 3 view .LVU1439
4938:Src/tasks.c   **** 
 5069              		.loc 1 4938 47 discriminator 3 view .LVU1440
4941:Src/tasks.c   **** 
 5070              		.loc 1 4941 94 discriminator 3 view .LVU1441
4959:Src/tasks.c   ****                 {
 5071              		.loc 1 4959 17 discriminator 3 view .LVU1442
4959:Src/tasks.c   ****                 {
 5072              		.loc 1 4959 26 is_stmt 0 discriminator 3 view .LVU1443
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 212


 5073 00ec E26A     		ldr	r2, [r4, #44]
4959:Src/tasks.c   ****                 {
 5074              		.loc 1 4959 53 discriminator 3 view .LVU1444
 5075 00ee 0A4B     		ldr	r3, .L362+8
 5076 00f0 1B68     		ldr	r3, [r3]
 5077 00f2 DB6A     		ldr	r3, [r3, #44]
4959:Src/tasks.c   ****                 {
 5078              		.loc 1 4959 19 discriminator 3 view .LVU1445
 5079 00f4 9A42     		cmp	r2, r3
 5080 00f6 AED9     		bls	.L354
4963:Src/tasks.c   ****                 }
 5081              		.loc 1 4963 21 is_stmt 1 view .LVU1446
 5082 00f8 084B     		ldr	r3, .L362+12
 5083 00fa 4FF08052 		mov	r2, #268435456
 5084 00fe 1A60     		str	r2, [r3]
 5085              	.LVL382:
4963:Src/tasks.c   ****                 }
 5086              		.loc 1 4963 21 view .LVU1447
 5087              		.syntax unified
 5088              	@ 4963 "Src/tasks.c" 1
 5089 0100 BFF34F8F 		dsb
 5090              	@ 0 "" 2
4963:Src/tasks.c   ****                 }
 5091              		.loc 1 4963 21 view .LVU1448
 5092              	@ 4963 "Src/tasks.c" 1
 5093 0104 BFF36F8F 		isb
 5094              	@ 0 "" 2
4963:Src/tasks.c   ****                 }
 5095              		.loc 1 4963 52 view .LVU1449
 5096              		.thumb
 5097              		.syntax unified
 5098 0108 A5E7     		b	.L354
 5099              	.LVL383:
 5100              	.L361:
 5101              	.LBB93:
4937:Src/tasks.c   ****                 prvAddTaskToReadyList( pxTCB );
 5102              		.loc 1 4937 17 discriminator 1 view .LVU1450
 5103 010a E268     		ldr	r2, [r4, #12]
 5104 010c 5A60     		str	r2, [r3, #4]
 5105 010e CCE7     		b	.L355
 5106              	.L363:
 5107              		.align	2
 5108              	.L362:
 5109 0110 00000000 		.word	.LANCHOR13
 5110 0114 00000000 		.word	.LANCHOR4
 5111 0118 00000000 		.word	.LANCHOR10
 5112 011c 04ED00E0 		.word	-536810236
 5113              	.LBE93:
 5114              		.cfi_endproc
 5115              	.LFE46:
 5117              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5118              		.align	1
 5119              		.global	xTaskGenericNotifyFromISR
 5120              		.syntax unified
 5121              		.thumb
 5122              		.thumb_func
 5123              		.fpu softvfp
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 213


 5125              	xTaskGenericNotifyFromISR:
 5126              	.LVL384:
 5127              	.LFB47:
4991:Src/tasks.c   ****         TCB_t * pxTCB;
 5128              		.loc 1 4991 5 view -0
 5129              		.cfi_startproc
 5130              		@ args = 8, pretend = 0, frame = 0
 5131              		@ frame_needed = 0, uses_anonymous_args = 0
 5132              		@ link register save eliminated.
4991:Src/tasks.c   ****         TCB_t * pxTCB;
 5133              		.loc 1 4991 5 is_stmt 0 view .LVU1452
 5134 0000 F0B4     		push	{r4, r5, r6, r7}
 5135              	.LCFI46:
 5136              		.cfi_def_cfa_offset 16
 5137              		.cfi_offset 4, -16
 5138              		.cfi_offset 5, -12
 5139              		.cfi_offset 6, -8
 5140              		.cfi_offset 7, -4
 5141 0002 0546     		mov	r5, r0
 5142 0004 049C     		ldr	r4, [sp, #16]
4992:Src/tasks.c   ****         uint8_t ucOriginalNotifyState;
 5143              		.loc 1 4992 9 is_stmt 1 view .LVU1453
4993:Src/tasks.c   ****         BaseType_t xReturn = pdPASS;
 5144              		.loc 1 4993 9 view .LVU1454
4994:Src/tasks.c   ****         UBaseType_t uxSavedInterruptStatus;
 5145              		.loc 1 4994 9 view .LVU1455
 5146              	.LVL385:
4995:Src/tasks.c   **** 
 5147              		.loc 1 4995 9 view .LVU1456
4997:Src/tasks.c   ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 5148              		.loc 1 4997 38 view .LVU1457
4998:Src/tasks.c   **** 
 5149              		.loc 1 4998 80 view .LVU1458
5016:Src/tasks.c   **** 
 5150              		.loc 1 5016 51 view .LVU1459
5018:Src/tasks.c   **** 
 5151              		.loc 1 5018 9 view .LVU1460
5020:Src/tasks.c   ****         {
 5152              		.loc 1 5020 9 view .LVU1461
 5153              	.LBB94:
 5154              	.LBI94:
 212:Inc/portmacro.h ****     {
 5155              		.loc 2 212 38 view .LVU1462
 5156              	.LBB95:
 214:Inc/portmacro.h **** 
 5157              		.loc 2 214 9 view .LVU1463
 216:Inc/portmacro.h ****         (
 5158              		.loc 2 216 9 view .LVU1464
 5159              		.syntax unified
 5160              	@ 216 "Inc/portmacro.h" 1
 5161 0006 EFF31186 			mrs r6, basepri											
 5162 000a 4FF0BF00 		mov r0, #191												
 5163 000e 80F31188 		msr basepri, r0											
 5164 0012 BFF36F8F 		isb														
 5165 0016 BFF34F8F 		dsb														
 5166              	
 5167              	@ 0 "" 2
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 214


 5168              	.LVL386:
 228:Inc/portmacro.h ****     }
 5169              		.loc 2 228 9 view .LVU1465
 228:Inc/portmacro.h ****     }
 5170              		.loc 2 228 9 is_stmt 0 view .LVU1466
 5171              		.thumb
 5172              		.syntax unified
 5173              	.LBE95:
 5174              	.LBE94:
5022:Src/tasks.c   ****             {
 5175              		.loc 1 5022 13 is_stmt 1 view .LVU1467
5022:Src/tasks.c   ****             {
 5176              		.loc 1 5022 15 is_stmt 0 view .LVU1468
 5177 001a 2CB1     		cbz	r4, .L365
5024:Src/tasks.c   ****             }
 5178              		.loc 1 5024 17 is_stmt 1 view .LVU1469
5024:Src/tasks.c   ****             }
 5179              		.loc 1 5024 71 is_stmt 0 view .LVU1470
 5180 001c 01F11000 		add	r0, r1, #16
 5181 0020 05EB8000 		add	r0, r5, r0, lsl #2
 5182 0024 4068     		ldr	r0, [r0, #4]
5024:Src/tasks.c   ****             }
 5183              		.loc 1 5024 47 view .LVU1471
 5184 0026 2060     		str	r0, [r4]
 5185              	.L365:
5027:Src/tasks.c   ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 5186              		.loc 1 5027 13 is_stmt 1 view .LVU1472
5027:Src/tasks.c   ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 5187              		.loc 1 5027 35 is_stmt 0 view .LVU1473
 5188 0028 6818     		adds	r0, r5, r1
 5189 002a 90F84840 		ldrb	r4, [r0, #72]	@ zero_extendqisi2
 5190 002e E4B2     		uxtb	r4, r4
 5191              	.LVL387:
5028:Src/tasks.c   **** 
 5192              		.loc 1 5028 13 is_stmt 1 view .LVU1474
5028:Src/tasks.c   **** 
 5193              		.loc 1 5028 53 is_stmt 0 view .LVU1475
 5194 0030 0227     		movs	r7, #2
 5195 0032 80F84870 		strb	r7, [r0, #72]
5030:Src/tasks.c   ****             {
 5196              		.loc 1 5030 13 is_stmt 1 view .LVU1476
 5197 0036 013B     		subs	r3, r3, #1
 5198              	.LVL388:
5030:Src/tasks.c   ****             {
 5199              		.loc 1 5030 13 is_stmt 0 view .LVU1477
 5200 0038 032B     		cmp	r3, #3
 5201 003a 26D8     		bhi	.L378
 5202 003c DFE803F0 		tbb	[pc, r3]
 5203              	.L368:
 5204 0040 02       		.byte	(.L371-.L368)/2
 5205 0041 0F       		.byte	(.L370-.L368)/2
 5206 0042 17       		.byte	(.L369-.L368)/2
 5207 0043 1D       		.byte	(.L367-.L368)/2
 5208              		.p2align 1
 5209              	.L371:
5033:Src/tasks.c   ****                     break;
 5210              		.loc 1 5033 21 is_stmt 1 view .LVU1478
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 215


5033:Src/tasks.c   ****                     break;
 5211              		.loc 1 5033 63 is_stmt 0 view .LVU1479
 5212 0044 1031     		adds	r1, r1, #16
 5213              	.LVL389:
5033:Src/tasks.c   ****                     break;
 5214              		.loc 1 5033 63 view .LVU1480
 5215 0046 05EB8101 		add	r1, r5, r1, lsl #2
 5216              	.LVL390:
5033:Src/tasks.c   ****                     break;
 5217              		.loc 1 5033 63 view .LVU1481
 5218 004a 4B68     		ldr	r3, [r1, #4]
 5219 004c 1A43     		orrs	r2, r2, r3
 5220              	.LVL391:
5033:Src/tasks.c   ****                     break;
 5221              		.loc 1 5033 63 view .LVU1482
 5222 004e 4A60     		str	r2, [r1, #4]
5034:Src/tasks.c   **** 
 5223              		.loc 1 5034 21 is_stmt 1 view .LVU1483
4994:Src/tasks.c   ****         UBaseType_t uxSavedInterruptStatus;
 5224              		.loc 1 4994 20 is_stmt 0 view .LVU1484
 5225 0050 0120     		movs	r0, #1
 5226              	.L366:
 5227              	.LVL392:
5073:Src/tasks.c   **** 
 5228              		.loc 1 5073 57 is_stmt 1 view .LVU1485
5077:Src/tasks.c   ****             {
 5229              		.loc 1 5077 13 view .LVU1486
5077:Src/tasks.c   ****             {
 5230              		.loc 1 5077 15 is_stmt 0 view .LVU1487
 5231 0052 012C     		cmp	r4, #1
 5232 0054 1DD0     		beq	.L381
 5233              	.LVL393:
 5234              	.L372:
5110:Src/tasks.c   ****                 }
 5235              		.loc 1 5110 45 is_stmt 1 view .LVU1488
5114:Src/tasks.c   **** 
 5236              		.loc 1 5114 9 view .LVU1489
 5237              	.LBB96:
 5238              	.LBI96:
 232:Inc/portmacro.h ****     {
 5239              		.loc 2 232 34 view .LVU1490
 5240              	.LBB97:
 5241              		.loc 2 234 9 view .LVU1491
 5242              		.syntax unified
 5243              	@ 234 "Inc/portmacro.h" 1
 5244 0056 86F31188 			msr basepri, r6	
 5245              	@ 0 "" 2
 5246              	.LVL394:
 5247              		.loc 2 234 9 is_stmt 0 view .LVU1492
 5248              		.thumb
 5249              		.syntax unified
 5250              	.LBE97:
 5251              	.LBE96:
5116:Src/tasks.c   ****     }
 5252              		.loc 1 5116 9 is_stmt 1 view .LVU1493
5117:Src/tasks.c   **** 
 5253              		.loc 1 5117 5 is_stmt 0 view .LVU1494
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 216


 5254 005a F0BC     		pop	{r4, r5, r6, r7}
 5255              	.LCFI47:
 5256              		.cfi_remember_state
 5257              		.cfi_restore 7
 5258              		.cfi_restore 6
 5259              		.cfi_restore 5
 5260              		.cfi_restore 4
 5261              		.cfi_def_cfa_offset 0
 5262              	.LVL395:
5117:Src/tasks.c   **** 
 5263              		.loc 1 5117 5 view .LVU1495
 5264 005c 7047     		bx	lr
 5265              	.LVL396:
 5266              	.L370:
 5267              	.LCFI48:
 5268              		.cfi_restore_state
5037:Src/tasks.c   ****                     break;
 5269              		.loc 1 5037 21 is_stmt 1 view .LVU1496
5037:Src/tasks.c   ****                     break;
 5270              		.loc 1 5037 45 is_stmt 0 view .LVU1497
 5271 005e 1031     		adds	r1, r1, #16
 5272              	.LVL397:
5037:Src/tasks.c   ****                     break;
 5273              		.loc 1 5037 45 view .LVU1498
 5274 0060 05EB8101 		add	r1, r5, r1, lsl #2
 5275              	.LVL398:
5037:Src/tasks.c   ****                     break;
 5276              		.loc 1 5037 45 view .LVU1499
 5277 0064 4B68     		ldr	r3, [r1, #4]
5037:Src/tasks.c   ****                     break;
 5278              		.loc 1 5037 66 view .LVU1500
 5279 0066 0133     		adds	r3, r3, #1
 5280 0068 4B60     		str	r3, [r1, #4]
5038:Src/tasks.c   **** 
 5281              		.loc 1 5038 21 is_stmt 1 view .LVU1501
4994:Src/tasks.c   ****         UBaseType_t uxSavedInterruptStatus;
 5282              		.loc 1 4994 20 is_stmt 0 view .LVU1502
 5283 006a 0120     		movs	r0, #1
5038:Src/tasks.c   **** 
 5284              		.loc 1 5038 21 view .LVU1503
 5285 006c F1E7     		b	.L366
 5286              	.LVL399:
 5287              	.L369:
5041:Src/tasks.c   ****                     break;
 5288              		.loc 1 5041 21 is_stmt 1 view .LVU1504
5041:Src/tasks.c   ****                     break;
 5289              		.loc 1 5041 63 is_stmt 0 view .LVU1505
 5290 006e 1031     		adds	r1, r1, #16
 5291              	.LVL400:
5041:Src/tasks.c   ****                     break;
 5292              		.loc 1 5041 63 view .LVU1506
 5293 0070 05EB8101 		add	r1, r5, r1, lsl #2
 5294              	.LVL401:
5041:Src/tasks.c   ****                     break;
 5295              		.loc 1 5041 63 view .LVU1507
 5296 0074 4A60     		str	r2, [r1, #4]
5042:Src/tasks.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 217


 5297              		.loc 1 5042 21 is_stmt 1 view .LVU1508
4994:Src/tasks.c   ****         UBaseType_t uxSavedInterruptStatus;
 5298              		.loc 1 4994 20 is_stmt 0 view .LVU1509
 5299 0076 0120     		movs	r0, #1
5042:Src/tasks.c   **** 
 5300              		.loc 1 5042 21 view .LVU1510
 5301 0078 EBE7     		b	.L366
 5302              	.LVL402:
 5303              	.L367:
5046:Src/tasks.c   ****                     {
 5304              		.loc 1 5046 21 is_stmt 1 view .LVU1511
5046:Src/tasks.c   ****                     {
 5305              		.loc 1 5046 23 is_stmt 0 view .LVU1512
 5306 007a 022C     		cmp	r4, #2
 5307 007c 07D0     		beq	.L379
5048:Src/tasks.c   ****                     }
 5308              		.loc 1 5048 25 is_stmt 1 view .LVU1513
5048:Src/tasks.c   ****                     }
 5309              		.loc 1 5048 67 is_stmt 0 view .LVU1514
 5310 007e 1031     		adds	r1, r1, #16
 5311              	.LVL403:
5048:Src/tasks.c   ****                     }
 5312              		.loc 1 5048 67 view .LVU1515
 5313 0080 05EB8101 		add	r1, r5, r1, lsl #2
 5314              	.LVL404:
5048:Src/tasks.c   ****                     }
 5315              		.loc 1 5048 67 view .LVU1516
 5316 0084 4A60     		str	r2, [r1, #4]
4994:Src/tasks.c   ****         UBaseType_t uxSavedInterruptStatus;
 5317              		.loc 1 4994 20 view .LVU1517
 5318 0086 0120     		movs	r0, #1
 5319 0088 E3E7     		b	.L366
 5320              	.LVL405:
 5321              	.L378:
5028:Src/tasks.c   **** 
 5322              		.loc 1 5028 53 view .LVU1518
 5323 008a 0120     		movs	r0, #1
 5324 008c E1E7     		b	.L366
 5325              	.L379:
5053:Src/tasks.c   ****                     }
 5326              		.loc 1 5053 33 view .LVU1519
 5327 008e 0020     		movs	r0, #0
 5328 0090 DFE7     		b	.L366
 5329              	.LVL406:
 5330              	.L381:
5080:Src/tasks.c   **** 
 5331              		.loc 1 5080 94 is_stmt 1 view .LVU1520
5082:Src/tasks.c   ****                 {
 5332              		.loc 1 5082 17 view .LVU1521
5082:Src/tasks.c   ****                 {
 5333              		.loc 1 5082 42 is_stmt 0 view .LVU1522
 5334 0092 284B     		ldr	r3, .L383
 5335 0094 1B68     		ldr	r3, [r3]
5082:Src/tasks.c   ****                 {
 5336              		.loc 1 5082 19 view .LVU1523
 5337 0096 002B     		cmp	r3, #0
 5338 0098 3DD1     		bne	.L373
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 218


 5339              	.LBB98:
5084:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5340              		.loc 1 5084 21 is_stmt 1 view .LVU1524
 5341 009a 6B69     		ldr	r3, [r5, #20]
 5342              	.LVL407:
5084:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5343              		.loc 1 5084 21 view .LVU1525
 5344 009c AA68     		ldr	r2, [r5, #8]
 5345 009e E968     		ldr	r1, [r5, #12]
 5346 00a0 9160     		str	r1, [r2, #8]
5084:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5347              		.loc 1 5084 21 view .LVU1526
 5348 00a2 EA68     		ldr	r2, [r5, #12]
 5349 00a4 A968     		ldr	r1, [r5, #8]
 5350 00a6 5160     		str	r1, [r2, #4]
5084:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5351              		.loc 1 5084 21 view .LVU1527
 5352 00a8 5A68     		ldr	r2, [r3, #4]
 5353 00aa 291D     		adds	r1, r5, #4
 5354 00ac 8A42     		cmp	r2, r1
 5355 00ae 2FD0     		beq	.L382
 5356              	.L374:
5084:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5357              		.loc 1 5084 21 discriminator 3 view .LVU1528
 5358 00b0 0022     		movs	r2, #0
 5359 00b2 6A61     		str	r2, [r5, #20]
5084:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5360              		.loc 1 5084 21 discriminator 3 view .LVU1529
 5361 00b4 1A68     		ldr	r2, [r3]
 5362 00b6 013A     		subs	r2, r2, #1
 5363 00b8 1A60     		str	r2, [r3]
 5364              	.LBE98:
5084:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5365              		.loc 1 5084 66 discriminator 3 view .LVU1530
5085:Src/tasks.c   ****                 }
 5366              		.loc 1 5085 21 discriminator 3 view .LVU1531
5085:Src/tasks.c   ****                 }
 5367              		.loc 1 5085 21 discriminator 3 view .LVU1532
 5368 00ba EB6A     		ldr	r3, [r5, #44]
 5369              	.LVL408:
5085:Src/tasks.c   ****                 }
 5370              		.loc 1 5085 21 is_stmt 0 discriminator 3 view .LVU1533
 5371 00bc 1E4A     		ldr	r2, .L383+4
 5372 00be 1268     		ldr	r2, [r2]
 5373 00c0 9342     		cmp	r3, r2
 5374 00c2 01D9     		bls	.L375
5085:Src/tasks.c   ****                 }
 5375              		.loc 1 5085 21 is_stmt 1 discriminator 1 view .LVU1534
 5376 00c4 1C4A     		ldr	r2, .L383+4
 5377 00c6 1360     		str	r3, [r2]
 5378              	.L375:
5085:Src/tasks.c   ****                 }
 5379              		.loc 1 5085 21 discriminator 3 view .LVU1535
 5380              	.LBB99:
5085:Src/tasks.c   ****                 }
 5381              		.loc 1 5085 21 discriminator 3 view .LVU1536
 5382 00c8 1C4A     		ldr	r2, .L383+8
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 219


 5383 00ca 03EB8303 		add	r3, r3, r3, lsl #2
 5384 00ce 02EB8303 		add	r3, r2, r3, lsl #2
 5385 00d2 5B68     		ldr	r3, [r3, #4]
 5386              	.LVL409:
5085:Src/tasks.c   ****                 }
 5387              		.loc 1 5085 21 discriminator 3 view .LVU1537
5085:Src/tasks.c   ****                 }
 5388              		.loc 1 5085 21 discriminator 3 view .LVU1538
5085:Src/tasks.c   ****                 }
 5389              		.loc 1 5085 21 discriminator 3 view .LVU1539
 5390 00d4 AB60     		str	r3, [r5, #8]
5085:Src/tasks.c   ****                 }
 5391              		.loc 1 5085 21 discriminator 3 view .LVU1540
 5392 00d6 9C68     		ldr	r4, [r3, #8]
 5393              	.LVL410:
5085:Src/tasks.c   ****                 }
 5394              		.loc 1 5085 21 is_stmt 0 discriminator 3 view .LVU1541
 5395 00d8 EC60     		str	r4, [r5, #12]
5085:Src/tasks.c   ****                 }
 5396              		.loc 1 5085 21 is_stmt 1 discriminator 3 view .LVU1542
 5397 00da 6160     		str	r1, [r4, #4]
5085:Src/tasks.c   ****                 }
 5398              		.loc 1 5085 21 discriminator 3 view .LVU1543
 5399 00dc 9960     		str	r1, [r3, #8]
5085:Src/tasks.c   ****                 }
 5400              		.loc 1 5085 21 discriminator 3 view .LVU1544
 5401 00de EB6A     		ldr	r3, [r5, #44]
 5402              	.LVL411:
5085:Src/tasks.c   ****                 }
 5403              		.loc 1 5085 21 is_stmt 0 discriminator 3 view .LVU1545
 5404 00e0 03EB8301 		add	r1, r3, r3, lsl #2
 5405 00e4 8C00     		lsls	r4, r1, #2
 5406 00e6 02EB8101 		add	r1, r2, r1, lsl #2
 5407 00ea 6961     		str	r1, [r5, #20]
5085:Src/tasks.c   ****                 }
 5408              		.loc 1 5085 21 is_stmt 1 discriminator 3 view .LVU1546
 5409 00ec 1159     		ldr	r1, [r2, r4]
 5410 00ee 0131     		adds	r1, r1, #1
 5411 00f0 1151     		str	r1, [r2, r4]
 5412              	.LBE99:
5085:Src/tasks.c   ****                 }
 5413              		.loc 1 5085 21 discriminator 3 view .LVU1547
5085:Src/tasks.c   ****                 }
 5414              		.loc 1 5085 51 discriminator 3 view .LVU1548
 5415              	.L376:
5091:Src/tasks.c   ****                 }
 5416              		.loc 1 5091 89 discriminator 1 view .LVU1549
5094:Src/tasks.c   ****                 {
 5417              		.loc 1 5094 17 discriminator 1 view .LVU1550
5094:Src/tasks.c   ****                 {
 5418              		.loc 1 5094 26 is_stmt 0 discriminator 1 view .LVU1551
 5419 00f2 EA6A     		ldr	r2, [r5, #44]
5094:Src/tasks.c   ****                 {
 5420              		.loc 1 5094 53 discriminator 1 view .LVU1552
 5421 00f4 124B     		ldr	r3, .L383+12
 5422 00f6 1B68     		ldr	r3, [r3]
 5423 00f8 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 220


5094:Src/tasks.c   ****                 {
 5424              		.loc 1 5094 19 discriminator 1 view .LVU1553
 5425 00fa 9A42     		cmp	r2, r3
 5426 00fc ABD9     		bls	.L372
5098:Src/tasks.c   ****                     {
 5427              		.loc 1 5098 21 is_stmt 1 view .LVU1554
5098:Src/tasks.c   ****                     {
 5428              		.loc 1 5098 23 is_stmt 0 view .LVU1555
 5429 00fe 059B     		ldr	r3, [sp, #20]
 5430 0100 13B1     		cbz	r3, .L377
5100:Src/tasks.c   ****                     }
 5431              		.loc 1 5100 25 is_stmt 1 view .LVU1556
5100:Src/tasks.c   ****                     }
 5432              		.loc 1 5100 52 is_stmt 0 view .LVU1557
 5433 0102 0123     		movs	r3, #1
 5434 0104 059A     		ldr	r2, [sp, #20]
 5435 0106 1360     		str	r3, [r2]
 5436              	.L377:
5106:Src/tasks.c   ****                 }
 5437              		.loc 1 5106 21 is_stmt 1 view .LVU1558
5106:Src/tasks.c   ****                 }
 5438              		.loc 1 5106 35 is_stmt 0 view .LVU1559
 5439 0108 0E4B     		ldr	r3, .L383+16
 5440 010a 0122     		movs	r2, #1
 5441 010c 1A60     		str	r2, [r3]
 5442 010e A2E7     		b	.L372
 5443              	.LVL412:
 5444              	.L382:
 5445              	.LBB100:
5084:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5446              		.loc 1 5084 21 is_stmt 1 discriminator 1 view .LVU1560
 5447 0110 EA68     		ldr	r2, [r5, #12]
 5448 0112 5A60     		str	r2, [r3, #4]
 5449 0114 CCE7     		b	.L374
 5450              	.LVL413:
 5451              	.L373:
5084:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5452              		.loc 1 5084 21 is_stmt 0 discriminator 1 view .LVU1561
 5453              	.LBE100:
 5454              	.LBB101:
5091:Src/tasks.c   ****                 }
 5455              		.loc 1 5091 21 is_stmt 1 view .LVU1562
 5456 0116 0C4B     		ldr	r3, .L383+20
 5457 0118 5A68     		ldr	r2, [r3, #4]
 5458              	.LVL414:
5091:Src/tasks.c   ****                 }
 5459              		.loc 1 5091 21 view .LVU1563
5091:Src/tasks.c   ****                 }
 5460              		.loc 1 5091 21 view .LVU1564
5091:Src/tasks.c   ****                 }
 5461              		.loc 1 5091 21 view .LVU1565
 5462 011a EA61     		str	r2, [r5, #28]
5091:Src/tasks.c   ****                 }
 5463              		.loc 1 5091 21 view .LVU1566
 5464 011c 9468     		ldr	r4, [r2, #8]
 5465              	.LVL415:
5091:Src/tasks.c   ****                 }
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 221


 5466              		.loc 1 5091 21 is_stmt 0 view .LVU1567
 5467 011e 2C62     		str	r4, [r5, #32]
5091:Src/tasks.c   ****                 }
 5468              		.loc 1 5091 21 is_stmt 1 view .LVU1568
 5469 0120 05F11801 		add	r1, r5, #24
 5470 0124 6160     		str	r1, [r4, #4]
5091:Src/tasks.c   ****                 }
 5471              		.loc 1 5091 21 view .LVU1569
 5472 0126 9160     		str	r1, [r2, #8]
5091:Src/tasks.c   ****                 }
 5473              		.loc 1 5091 21 view .LVU1570
 5474 0128 AB62     		str	r3, [r5, #40]
5091:Src/tasks.c   ****                 }
 5475              		.loc 1 5091 21 view .LVU1571
 5476 012a 1A68     		ldr	r2, [r3]
 5477              	.LVL416:
5091:Src/tasks.c   ****                 }
 5478              		.loc 1 5091 21 is_stmt 0 view .LVU1572
 5479 012c 0132     		adds	r2, r2, #1
 5480 012e 1A60     		str	r2, [r3]
 5481 0130 DFE7     		b	.L376
 5482              	.L384:
 5483 0132 00BF     		.align	2
 5484              	.L383:
 5485 0134 00000000 		.word	.LANCHOR16
 5486 0138 00000000 		.word	.LANCHOR13
 5487 013c 00000000 		.word	.LANCHOR4
 5488 0140 00000000 		.word	.LANCHOR10
 5489 0144 00000000 		.word	.LANCHOR17
 5490 0148 00000000 		.word	.LANCHOR1
 5491              	.LBE101:
 5492              		.cfi_endproc
 5493              	.LFE47:
 5495              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 5496              		.align	1
 5497              		.global	vTaskGenericNotifyGiveFromISR
 5498              		.syntax unified
 5499              		.thumb
 5500              		.thumb_func
 5501              		.fpu softvfp
 5503              	vTaskGenericNotifyGiveFromISR:
 5504              	.LVL417:
 5505              	.LFB48:
5127:Src/tasks.c   ****         TCB_t * pxTCB;
 5506              		.loc 1 5127 5 is_stmt 1 view -0
 5507              		.cfi_startproc
 5508              		@ args = 0, pretend = 0, frame = 0
 5509              		@ frame_needed = 0, uses_anonymous_args = 0
 5510              		@ link register save eliminated.
5127:Src/tasks.c   ****         TCB_t * pxTCB;
 5511              		.loc 1 5127 5 is_stmt 0 view .LVU1574
 5512 0000 70B4     		push	{r4, r5, r6}
 5513              	.LCFI49:
 5514              		.cfi_def_cfa_offset 12
 5515              		.cfi_offset 4, -12
 5516              		.cfi_offset 5, -8
 5517              		.cfi_offset 6, -4
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 222


5128:Src/tasks.c   ****         uint8_t ucOriginalNotifyState;
 5518              		.loc 1 5128 9 is_stmt 1 view .LVU1575
5129:Src/tasks.c   ****         UBaseType_t uxSavedInterruptStatus;
 5519              		.loc 1 5129 9 view .LVU1576
5130:Src/tasks.c   **** 
 5520              		.loc 1 5130 9 view .LVU1577
5132:Src/tasks.c   ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 5521              		.loc 1 5132 38 view .LVU1578
5133:Src/tasks.c   **** 
 5522              		.loc 1 5133 80 view .LVU1579
5151:Src/tasks.c   **** 
 5523              		.loc 1 5151 51 view .LVU1580
5153:Src/tasks.c   **** 
 5524              		.loc 1 5153 9 view .LVU1581
 5525              	.LVL418:
5155:Src/tasks.c   ****         {
 5526              		.loc 1 5155 9 view .LVU1582
 5527              	.LBB102:
 5528              	.LBI102:
 212:Inc/portmacro.h ****     {
 5529              		.loc 2 212 38 view .LVU1583
 5530              	.LBB103:
 214:Inc/portmacro.h **** 
 5531              		.loc 2 214 9 view .LVU1584
 216:Inc/portmacro.h ****         (
 5532              		.loc 2 216 9 view .LVU1585
 5533              		.syntax unified
 5534              	@ 216 "Inc/portmacro.h" 1
 5535 0002 EFF31185 			mrs r5, basepri											
 5536 0006 4FF0BF03 		mov r3, #191												
 5537 000a 83F31188 		msr basepri, r3											
 5538 000e BFF36F8F 		isb														
 5539 0012 BFF34F8F 		dsb														
 5540              	
 5541              	@ 0 "" 2
 5542              	.LVL419:
 228:Inc/portmacro.h ****     }
 5543              		.loc 2 228 9 view .LVU1586
 228:Inc/portmacro.h ****     }
 5544              		.loc 2 228 9 is_stmt 0 view .LVU1587
 5545              		.thumb
 5546              		.syntax unified
 5547              	.LBE103:
 5548              	.LBE102:
5157:Src/tasks.c   ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 5549              		.loc 1 5157 13 is_stmt 1 view .LVU1588
5157:Src/tasks.c   ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 5550              		.loc 1 5157 35 is_stmt 0 view .LVU1589
 5551 0016 4418     		adds	r4, r0, r1
 5552 0018 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 5553 001c DBB2     		uxtb	r3, r3
 5554              	.LVL420:
5158:Src/tasks.c   **** 
 5555              		.loc 1 5158 13 is_stmt 1 view .LVU1590
5158:Src/tasks.c   **** 
 5556              		.loc 1 5158 53 is_stmt 0 view .LVU1591
 5557 001e 0226     		movs	r6, #2
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 223


 5558 0020 84F84860 		strb	r6, [r4, #72]
5162:Src/tasks.c   **** 
 5559              		.loc 1 5162 13 is_stmt 1 view .LVU1592
5162:Src/tasks.c   **** 
 5560              		.loc 1 5162 37 is_stmt 0 view .LVU1593
 5561 0024 1031     		adds	r1, r1, #16
 5562              	.LVL421:
5162:Src/tasks.c   **** 
 5563              		.loc 1 5162 37 view .LVU1594
 5564 0026 00EB8101 		add	r1, r0, r1, lsl #2
 5565              	.LVL422:
5162:Src/tasks.c   **** 
 5566              		.loc 1 5162 37 view .LVU1595
 5567 002a 4C68     		ldr	r4, [r1, #4]
5162:Src/tasks.c   **** 
 5568              		.loc 1 5162 58 view .LVU1596
 5569 002c 0134     		adds	r4, r4, #1
 5570 002e 4C60     		str	r4, [r1, #4]
5164:Src/tasks.c   **** 
 5571              		.loc 1 5164 62 is_stmt 1 view .LVU1597
5168:Src/tasks.c   ****             {
 5572              		.loc 1 5168 13 view .LVU1598
5168:Src/tasks.c   ****             {
 5573              		.loc 1 5168 15 is_stmt 0 view .LVU1599
 5574 0030 012B     		cmp	r3, #1
 5575 0032 03D0     		beq	.L393
 5576              	.LVL423:
 5577              	.L386:
5201:Src/tasks.c   ****                 }
 5578              		.loc 1 5201 45 is_stmt 1 view .LVU1600
5205:Src/tasks.c   ****     }
 5579              		.loc 1 5205 9 view .LVU1601
 5580              	.LBB104:
 5581              	.LBI104:
 232:Inc/portmacro.h ****     {
 5582              		.loc 2 232 34 view .LVU1602
 5583              	.LBB105:
 5584              		.loc 2 234 9 view .LVU1603
 5585              		.syntax unified
 5586              	@ 234 "Inc/portmacro.h" 1
 5587 0034 85F31188 			msr basepri, r5	
 5588              	@ 0 "" 2
 5589              	.LVL424:
 5590              		.loc 2 234 9 is_stmt 0 view .LVU1604
 5591              		.thumb
 5592              		.syntax unified
 5593              	.LBE105:
 5594              	.LBE104:
5206:Src/tasks.c   **** 
 5595              		.loc 1 5206 5 view .LVU1605
 5596 0038 70BC     		pop	{r4, r5, r6}
 5597              	.LCFI50:
 5598              		.cfi_remember_state
 5599              		.cfi_restore 6
 5600              		.cfi_restore 5
 5601              		.cfi_restore 4
 5602              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 224


 5603              	.LVL425:
5206:Src/tasks.c   **** 
 5604              		.loc 1 5206 5 view .LVU1606
 5605 003a 7047     		bx	lr
 5606              	.LVL426:
 5607              	.L393:
 5608              	.LCFI51:
 5609              		.cfi_restore_state
5171:Src/tasks.c   **** 
 5610              		.loc 1 5171 94 is_stmt 1 view .LVU1607
5173:Src/tasks.c   ****                 {
 5611              		.loc 1 5173 17 view .LVU1608
5173:Src/tasks.c   ****                 {
 5612              		.loc 1 5173 42 is_stmt 0 view .LVU1609
 5613 003c 264B     		ldr	r3, .L395
 5614              	.LVL427:
5173:Src/tasks.c   ****                 {
 5615              		.loc 1 5173 42 view .LVU1610
 5616 003e 1B68     		ldr	r3, [r3]
5173:Src/tasks.c   ****                 {
 5617              		.loc 1 5173 19 view .LVU1611
 5618 0040 002B     		cmp	r3, #0
 5619 0042 3BD1     		bne	.L387
 5620              	.LBB106:
5175:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5621              		.loc 1 5175 21 is_stmt 1 view .LVU1612
 5622 0044 4369     		ldr	r3, [r0, #20]
 5623              	.LVL428:
5175:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5624              		.loc 1 5175 21 view .LVU1613
 5625 0046 8168     		ldr	r1, [r0, #8]
 5626 0048 C468     		ldr	r4, [r0, #12]
 5627 004a 8C60     		str	r4, [r1, #8]
5175:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5628              		.loc 1 5175 21 view .LVU1614
 5629 004c C168     		ldr	r1, [r0, #12]
 5630 004e 8468     		ldr	r4, [r0, #8]
 5631 0050 4C60     		str	r4, [r1, #4]
5175:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5632              		.loc 1 5175 21 view .LVU1615
 5633 0052 5968     		ldr	r1, [r3, #4]
 5634 0054 041D     		adds	r4, r0, #4
 5635 0056 A142     		cmp	r1, r4
 5636 0058 2DD0     		beq	.L394
 5637              	.L388:
5175:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5638              		.loc 1 5175 21 discriminator 3 view .LVU1616
 5639 005a 0021     		movs	r1, #0
 5640 005c 4161     		str	r1, [r0, #20]
5175:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5641              		.loc 1 5175 21 discriminator 3 view .LVU1617
 5642 005e 1968     		ldr	r1, [r3]
 5643 0060 0139     		subs	r1, r1, #1
 5644 0062 1960     		str	r1, [r3]
 5645              	.LBE106:
5175:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5646              		.loc 1 5175 66 discriminator 3 view .LVU1618
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 225


5176:Src/tasks.c   ****                 }
 5647              		.loc 1 5176 21 discriminator 3 view .LVU1619
5176:Src/tasks.c   ****                 }
 5648              		.loc 1 5176 21 discriminator 3 view .LVU1620
 5649 0064 C36A     		ldr	r3, [r0, #44]
 5650              	.LVL429:
5176:Src/tasks.c   ****                 }
 5651              		.loc 1 5176 21 is_stmt 0 discriminator 3 view .LVU1621
 5652 0066 1D49     		ldr	r1, .L395+4
 5653 0068 0968     		ldr	r1, [r1]
 5654 006a 8B42     		cmp	r3, r1
 5655 006c 01D9     		bls	.L389
5176:Src/tasks.c   ****                 }
 5656              		.loc 1 5176 21 is_stmt 1 discriminator 1 view .LVU1622
 5657 006e 1B49     		ldr	r1, .L395+4
 5658 0070 0B60     		str	r3, [r1]
 5659              	.L389:
5176:Src/tasks.c   ****                 }
 5660              		.loc 1 5176 21 discriminator 3 view .LVU1623
 5661              	.LBB107:
5176:Src/tasks.c   ****                 }
 5662              		.loc 1 5176 21 discriminator 3 view .LVU1624
 5663 0072 1B49     		ldr	r1, .L395+8
 5664 0074 03EB8303 		add	r3, r3, r3, lsl #2
 5665 0078 01EB8303 		add	r3, r1, r3, lsl #2
 5666 007c 5B68     		ldr	r3, [r3, #4]
 5667              	.LVL430:
5176:Src/tasks.c   ****                 }
 5668              		.loc 1 5176 21 discriminator 3 view .LVU1625
5176:Src/tasks.c   ****                 }
 5669              		.loc 1 5176 21 discriminator 3 view .LVU1626
5176:Src/tasks.c   ****                 }
 5670              		.loc 1 5176 21 discriminator 3 view .LVU1627
 5671 007e 8360     		str	r3, [r0, #8]
5176:Src/tasks.c   ****                 }
 5672              		.loc 1 5176 21 discriminator 3 view .LVU1628
 5673 0080 9E68     		ldr	r6, [r3, #8]
 5674 0082 C660     		str	r6, [r0, #12]
5176:Src/tasks.c   ****                 }
 5675              		.loc 1 5176 21 discriminator 3 view .LVU1629
 5676 0084 7460     		str	r4, [r6, #4]
5176:Src/tasks.c   ****                 }
 5677              		.loc 1 5176 21 discriminator 3 view .LVU1630
 5678 0086 9C60     		str	r4, [r3, #8]
5176:Src/tasks.c   ****                 }
 5679              		.loc 1 5176 21 discriminator 3 view .LVU1631
 5680 0088 C36A     		ldr	r3, [r0, #44]
 5681              	.LVL431:
5176:Src/tasks.c   ****                 }
 5682              		.loc 1 5176 21 is_stmt 0 discriminator 3 view .LVU1632
 5683 008a 03EB8304 		add	r4, r3, r3, lsl #2
 5684 008e A600     		lsls	r6, r4, #2
 5685 0090 01EB8404 		add	r4, r1, r4, lsl #2
 5686 0094 4461     		str	r4, [r0, #20]
5176:Src/tasks.c   ****                 }
 5687              		.loc 1 5176 21 is_stmt 1 discriminator 3 view .LVU1633
 5688 0096 8C59     		ldr	r4, [r1, r6]
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 226


 5689 0098 0134     		adds	r4, r4, #1
 5690 009a 8C51     		str	r4, [r1, r6]
 5691              	.LBE107:
5176:Src/tasks.c   ****                 }
 5692              		.loc 1 5176 21 discriminator 3 view .LVU1634
5176:Src/tasks.c   ****                 }
 5693              		.loc 1 5176 51 discriminator 3 view .LVU1635
 5694              	.L390:
5182:Src/tasks.c   ****                 }
 5695              		.loc 1 5182 89 discriminator 1 view .LVU1636
5185:Src/tasks.c   ****                 {
 5696              		.loc 1 5185 17 discriminator 1 view .LVU1637
5185:Src/tasks.c   ****                 {
 5697              		.loc 1 5185 26 is_stmt 0 discriminator 1 view .LVU1638
 5698 009c C16A     		ldr	r1, [r0, #44]
5185:Src/tasks.c   ****                 {
 5699              		.loc 1 5185 53 discriminator 1 view .LVU1639
 5700 009e 114B     		ldr	r3, .L395+12
 5701 00a0 1B68     		ldr	r3, [r3]
 5702 00a2 DB6A     		ldr	r3, [r3, #44]
5185:Src/tasks.c   ****                 {
 5703              		.loc 1 5185 19 discriminator 1 view .LVU1640
 5704 00a4 9942     		cmp	r1, r3
 5705 00a6 C5D9     		bls	.L386
5189:Src/tasks.c   ****                     {
 5706              		.loc 1 5189 21 is_stmt 1 view .LVU1641
5189:Src/tasks.c   ****                     {
 5707              		.loc 1 5189 23 is_stmt 0 view .LVU1642
 5708 00a8 0AB1     		cbz	r2, .L391
5191:Src/tasks.c   ****                     }
 5709              		.loc 1 5191 25 is_stmt 1 view .LVU1643
5191:Src/tasks.c   ****                     }
 5710              		.loc 1 5191 52 is_stmt 0 view .LVU1644
 5711 00aa 0123     		movs	r3, #1
 5712 00ac 1360     		str	r3, [r2]
 5713              	.L391:
5197:Src/tasks.c   ****                 }
 5714              		.loc 1 5197 21 is_stmt 1 view .LVU1645
5197:Src/tasks.c   ****                 }
 5715              		.loc 1 5197 35 is_stmt 0 view .LVU1646
 5716 00ae 0E4B     		ldr	r3, .L395+16
 5717 00b0 0122     		movs	r2, #1
 5718              	.LVL432:
5197:Src/tasks.c   ****                 }
 5719              		.loc 1 5197 35 view .LVU1647
 5720 00b2 1A60     		str	r2, [r3]
 5721 00b4 BEE7     		b	.L386
 5722              	.LVL433:
 5723              	.L394:
 5724              	.LBB108:
5175:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5725              		.loc 1 5175 21 is_stmt 1 discriminator 1 view .LVU1648
 5726 00b6 C168     		ldr	r1, [r0, #12]
 5727 00b8 5960     		str	r1, [r3, #4]
 5728 00ba CEE7     		b	.L388
 5729              	.LVL434:
 5730              	.L387:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 227


5175:Src/tasks.c   ****                     prvAddTaskToReadyList( pxTCB );
 5731              		.loc 1 5175 21 is_stmt 0 discriminator 1 view .LVU1649
 5732              	.LBE108:
 5733              	.LBB109:
5182:Src/tasks.c   ****                 }
 5734              		.loc 1 5182 21 is_stmt 1 view .LVU1650
 5735 00bc 0B4B     		ldr	r3, .L395+20
 5736 00be 5968     		ldr	r1, [r3, #4]
 5737              	.LVL435:
5182:Src/tasks.c   ****                 }
 5738              		.loc 1 5182 21 view .LVU1651
5182:Src/tasks.c   ****                 }
 5739              		.loc 1 5182 21 view .LVU1652
5182:Src/tasks.c   ****                 }
 5740              		.loc 1 5182 21 view .LVU1653
 5741 00c0 C161     		str	r1, [r0, #28]
5182:Src/tasks.c   ****                 }
 5742              		.loc 1 5182 21 view .LVU1654
 5743 00c2 8E68     		ldr	r6, [r1, #8]
 5744 00c4 0662     		str	r6, [r0, #32]
5182:Src/tasks.c   ****                 }
 5745              		.loc 1 5182 21 view .LVU1655
 5746 00c6 00F11804 		add	r4, r0, #24
 5747 00ca 7460     		str	r4, [r6, #4]
5182:Src/tasks.c   ****                 }
 5748              		.loc 1 5182 21 view .LVU1656
 5749 00cc 8C60     		str	r4, [r1, #8]
5182:Src/tasks.c   ****                 }
 5750              		.loc 1 5182 21 view .LVU1657
 5751 00ce 8362     		str	r3, [r0, #40]
5182:Src/tasks.c   ****                 }
 5752              		.loc 1 5182 21 view .LVU1658
 5753 00d0 1968     		ldr	r1, [r3]
 5754              	.LVL436:
5182:Src/tasks.c   ****                 }
 5755              		.loc 1 5182 21 is_stmt 0 view .LVU1659
 5756 00d2 0131     		adds	r1, r1, #1
 5757 00d4 1960     		str	r1, [r3]
 5758 00d6 E1E7     		b	.L390
 5759              	.L396:
 5760              		.align	2
 5761              	.L395:
 5762 00d8 00000000 		.word	.LANCHOR16
 5763 00dc 00000000 		.word	.LANCHOR13
 5764 00e0 00000000 		.word	.LANCHOR4
 5765 00e4 00000000 		.word	.LANCHOR10
 5766 00e8 00000000 		.word	.LANCHOR17
 5767 00ec 00000000 		.word	.LANCHOR1
 5768              	.LBE109:
 5769              		.cfi_endproc
 5770              	.LFE48:
 5772              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 5773              		.align	1
 5774              		.global	xTaskGenericNotifyStateClear
 5775              		.syntax unified
 5776              		.thumb
 5777              		.thumb_func
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 228


 5778              		.fpu softvfp
 5780              	xTaskGenericNotifyStateClear:
 5781              	.LVL437:
 5782              	.LFB49:
5215:Src/tasks.c   ****         TCB_t * pxTCB;
 5783              		.loc 1 5215 5 is_stmt 1 view -0
 5784              		.cfi_startproc
 5785              		@ args = 0, pretend = 0, frame = 0
 5786              		@ frame_needed = 0, uses_anonymous_args = 0
5215:Src/tasks.c   ****         TCB_t * pxTCB;
 5787              		.loc 1 5215 5 is_stmt 0 view .LVU1661
 5788 0000 38B5     		push	{r3, r4, r5, lr}
 5789              	.LCFI52:
 5790              		.cfi_def_cfa_offset 16
 5791              		.cfi_offset 3, -16
 5792              		.cfi_offset 4, -12
 5793              		.cfi_offset 5, -8
 5794              		.cfi_offset 14, -4
 5795 0002 0C46     		mov	r4, r1
5216:Src/tasks.c   ****         BaseType_t xReturn;
 5796              		.loc 1 5216 9 is_stmt 1 view .LVU1662
5217:Src/tasks.c   **** 
 5797              		.loc 1 5217 9 view .LVU1663
5219:Src/tasks.c   **** 
 5798              		.loc 1 5219 79 view .LVU1664
5223:Src/tasks.c   **** 
 5799              		.loc 1 5223 9 view .LVU1665
5223:Src/tasks.c   **** 
 5800              		.loc 1 5223 17 is_stmt 0 view .LVU1666
 5801 0004 0546     		mov	r5, r0
 5802 0006 60B1     		cbz	r0, .L402
 5803              	.LVL438:
 5804              	.L398:
5225:Src/tasks.c   ****         {
 5805              		.loc 1 5225 9 is_stmt 1 discriminator 4 view .LVU1667
 5806 0008 FFF7FEFF 		bl	vPortEnterCritical
 5807              	.LVL439:
5227:Src/tasks.c   ****             {
 5808              		.loc 1 5227 13 discriminator 4 view .LVU1668
5227:Src/tasks.c   ****             {
 5809              		.loc 1 5227 37 is_stmt 0 discriminator 4 view .LVU1669
 5810 000c 2B19     		adds	r3, r5, r4
 5811 000e 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 5812 0012 DBB2     		uxtb	r3, r3
5227:Src/tasks.c   ****             {
 5813              		.loc 1 5227 15 discriminator 4 view .LVU1670
 5814 0014 022B     		cmp	r3, #2
 5815 0016 07D0     		beq	.L403
5234:Src/tasks.c   ****             }
 5816              		.loc 1 5234 25 view .LVU1671
 5817 0018 0024     		movs	r4, #0
 5818              	.LVL440:
 5819              	.L399:
5237:Src/tasks.c   **** 
 5820              		.loc 1 5237 9 is_stmt 1 view .LVU1672
 5821 001a FFF7FEFF 		bl	vPortExitCritical
 5822              	.LVL441:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 229


5239:Src/tasks.c   ****     }
 5823              		.loc 1 5239 9 view .LVU1673
5240:Src/tasks.c   **** 
 5824              		.loc 1 5240 5 is_stmt 0 view .LVU1674
 5825 001e 2046     		mov	r0, r4
 5826 0020 38BD     		pop	{r3, r4, r5, pc}
 5827              	.LVL442:
 5828              	.L402:
5223:Src/tasks.c   **** 
 5829              		.loc 1 5223 17 discriminator 1 view .LVU1675
 5830 0022 044B     		ldr	r3, .L404
 5831 0024 1D68     		ldr	r5, [r3]
 5832              	.LVL443:
5223:Src/tasks.c   **** 
 5833              		.loc 1 5223 17 discriminator 1 view .LVU1676
 5834 0026 EFE7     		b	.L398
 5835              	.LVL444:
 5836              	.L403:
5229:Src/tasks.c   ****                 xReturn = pdPASS;
 5837              		.loc 1 5229 17 is_stmt 1 view .LVU1677
5229:Src/tasks.c   ****                 xReturn = pdPASS;
 5838              		.loc 1 5229 56 is_stmt 0 view .LVU1678
 5839 0028 2C44     		add	r4, r4, r5
 5840              	.LVL445:
5229:Src/tasks.c   ****                 xReturn = pdPASS;
 5841              		.loc 1 5229 56 view .LVU1679
 5842 002a 0023     		movs	r3, #0
 5843 002c 84F84830 		strb	r3, [r4, #72]
5230:Src/tasks.c   ****             }
 5844              		.loc 1 5230 17 is_stmt 1 view .LVU1680
 5845              	.LVL446:
5230:Src/tasks.c   ****             }
 5846              		.loc 1 5230 25 is_stmt 0 view .LVU1681
 5847 0030 0124     		movs	r4, #1
 5848 0032 F2E7     		b	.L399
 5849              	.L405:
 5850              		.align	2
 5851              	.L404:
 5852 0034 00000000 		.word	.LANCHOR10
 5853              		.cfi_endproc
 5854              	.LFE49:
 5856              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 5857              		.align	1
 5858              		.global	ulTaskGenericNotifyValueClear
 5859              		.syntax unified
 5860              		.thumb
 5861              		.thumb_func
 5862              		.fpu softvfp
 5864              	ulTaskGenericNotifyValueClear:
 5865              	.LVL447:
 5866              	.LFB50:
5250:Src/tasks.c   ****         TCB_t * pxTCB;
 5867              		.loc 1 5250 5 is_stmt 1 view -0
 5868              		.cfi_startproc
 5869              		@ args = 0, pretend = 0, frame = 0
 5870              		@ frame_needed = 0, uses_anonymous_args = 0
5250:Src/tasks.c   ****         TCB_t * pxTCB;
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 230


 5871              		.loc 1 5250 5 is_stmt 0 view .LVU1683
 5872 0000 70B5     		push	{r4, r5, r6, lr}
 5873              	.LCFI53:
 5874              		.cfi_def_cfa_offset 16
 5875              		.cfi_offset 4, -16
 5876              		.cfi_offset 5, -12
 5877              		.cfi_offset 6, -8
 5878              		.cfi_offset 14, -4
 5879 0002 0D46     		mov	r5, r1
 5880 0004 1646     		mov	r6, r2
5251:Src/tasks.c   ****         uint32_t ulReturn;
 5881              		.loc 1 5251 9 is_stmt 1 view .LVU1684
5252:Src/tasks.c   **** 
 5882              		.loc 1 5252 9 view .LVU1685
5256:Src/tasks.c   **** 
 5883              		.loc 1 5256 9 view .LVU1686
5256:Src/tasks.c   **** 
 5884              		.loc 1 5256 17 is_stmt 0 view .LVU1687
 5885 0006 0446     		mov	r4, r0
 5886 0008 70B1     		cbz	r0, .L409
 5887              	.LVL448:
 5888              	.L407:
5258:Src/tasks.c   ****         {
 5889              		.loc 1 5258 9 is_stmt 1 discriminator 4 view .LVU1688
 5890 000a FFF7FEFF 		bl	vPortEnterCritical
 5891              	.LVL449:
5262:Src/tasks.c   ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 5892              		.loc 1 5262 13 discriminator 4 view .LVU1689
5262:Src/tasks.c   ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 5893              		.loc 1 5262 22 is_stmt 0 discriminator 4 view .LVU1690
 5894 000e 05F11001 		add	r1, r5, #16
 5895 0012 04EB8101 		add	r1, r4, r1, lsl #2
 5896 0016 4C68     		ldr	r4, [r1, #4]
 5897              	.LVL450:
5263:Src/tasks.c   ****         }
 5898              		.loc 1 5263 13 is_stmt 1 discriminator 4 view .LVU1691
5263:Src/tasks.c   ****         }
 5899              		.loc 1 5263 54 is_stmt 0 discriminator 4 view .LVU1692
 5900 0018 4B68     		ldr	r3, [r1, #4]
 5901 001a 23EA0603 		bic	r3, r3, r6
 5902 001e 4B60     		str	r3, [r1, #4]
5265:Src/tasks.c   **** 
 5903              		.loc 1 5265 9 is_stmt 1 discriminator 4 view .LVU1693
 5904 0020 FFF7FEFF 		bl	vPortExitCritical
 5905              	.LVL451:
5267:Src/tasks.c   ****     }
 5906              		.loc 1 5267 9 discriminator 4 view .LVU1694
5268:Src/tasks.c   **** 
 5907              		.loc 1 5268 5 is_stmt 0 discriminator 4 view .LVU1695
 5908 0024 2046     		mov	r0, r4
 5909 0026 70BD     		pop	{r4, r5, r6, pc}
 5910              	.LVL452:
 5911              	.L409:
5256:Src/tasks.c   **** 
 5912              		.loc 1 5256 17 discriminator 1 view .LVU1696
 5913 0028 014B     		ldr	r3, .L410
 5914 002a 1C68     		ldr	r4, [r3]
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 231


 5915              	.LVL453:
5256:Src/tasks.c   **** 
 5916              		.loc 1 5256 17 discriminator 1 view .LVU1697
 5917 002c EDE7     		b	.L407
 5918              	.L411:
 5919 002e 00BF     		.align	2
 5920              	.L410:
 5921 0030 00000000 		.word	.LANCHOR10
 5922              		.cfi_endproc
 5923              	.LFE50:
 5925              		.global	uxTopUsedPriority
 5926              		.global	pxCurrentTCB
 5927              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5928              		.align	2
 5929              		.set	.LANCHOR10,. + 0
 5932              	pxCurrentTCB:
 5933 0000 00000000 		.space	4
 5934              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5935              		.align	2
 5936              		.set	.LANCHOR2,. + 0
 5939              	pxDelayedTaskList:
 5940 0000 00000000 		.space	4
 5941              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5942              		.align	2
 5943              		.set	.LANCHOR8,. + 0
 5946              	pxOverflowDelayedTaskList:
 5947 0000 00000000 		.space	4
 5948              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5949              		.align	2
 5950              		.set	.LANCHOR4,. + 0
 5953              	pxReadyTasksLists:
 5954 0000 00000000 		.space	100
 5954      00000000 
 5954      00000000 
 5954      00000000 
 5954      00000000 
 5955              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5956              		.align	2
 5957              		.set	.LANCHOR9,. + 0
 5960              	uxCurrentNumberOfTasks:
 5961 0000 00000000 		.space	4
 5962              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5963              		.align	2
 5964              		.set	.LANCHOR14,. + 0
 5967              	uxDeletedTasksWaitingCleanUp:
 5968 0000 00000000 		.space	4
 5969              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5970              		.align	2
 5971              		.set	.LANCHOR16,. + 0
 5974              	uxSchedulerSuspended:
 5975 0000 00000000 		.space	4
 5976              		.section	.bss.uxTaskNumber,"aw",%nobits
 5977              		.align	2
 5978              		.set	.LANCHOR12,. + 0
 5981              	uxTaskNumber:
 5982 0000 00000000 		.space	4
 5983              		.section	.bss.uxTopReadyPriority,"aw",%nobits
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 232


 5984              		.align	2
 5985              		.set	.LANCHOR13,. + 0
 5988              	uxTopReadyPriority:
 5989 0000 00000000 		.space	4
 5990              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5991              		.align	2
 5992              		.set	.LANCHOR5,. + 0
 5995              	xDelayedTaskList1:
 5996 0000 00000000 		.space	20
 5996      00000000 
 5996      00000000 
 5996      00000000 
 5996      00000000 
 5997              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5998              		.align	2
 5999              		.set	.LANCHOR6,. + 0
 6002              	xDelayedTaskList2:
 6003 0000 00000000 		.space	20
 6003      00000000 
 6003      00000000 
 6003      00000000 
 6003      00000000 
 6004              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 6005              		.align	2
 6006              		.set	.LANCHOR18,. + 0
 6009              	xIdleTaskHandle:
 6010 0000 00000000 		.space	4
 6011              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6012              		.align	2
 6013              		.set	.LANCHOR3,. + 0
 6016              	xNextTaskUnblockTime:
 6017 0000 00000000 		.space	4
 6018              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6019              		.align	2
 6020              		.set	.LANCHOR20,. + 0
 6023              	xNumOfOverflows:
 6024 0000 00000000 		.space	4
 6025              		.section	.bss.xPendedTicks,"aw",%nobits
 6026              		.align	2
 6027              		.set	.LANCHOR21,. + 0
 6030              	xPendedTicks:
 6031 0000 00000000 		.space	4
 6032              		.section	.bss.xPendingReadyList,"aw",%nobits
 6033              		.align	2
 6034              		.set	.LANCHOR1,. + 0
 6037              	xPendingReadyList:
 6038 0000 00000000 		.space	20
 6038      00000000 
 6038      00000000 
 6038      00000000 
 6038      00000000 
 6039              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6040              		.align	2
 6041              		.set	.LANCHOR11,. + 0
 6044              	xSchedulerRunning:
 6045 0000 00000000 		.space	4
 6046              		.section	.bss.xSuspendedTaskList,"aw",%nobits
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 233


 6047              		.align	2
 6048              		.set	.LANCHOR0,. + 0
 6051              	xSuspendedTaskList:
 6052 0000 00000000 		.space	20
 6052      00000000 
 6052      00000000 
 6052      00000000 
 6052      00000000 
 6053              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6054              		.align	2
 6055              		.set	.LANCHOR7,. + 0
 6058              	xTasksWaitingTermination:
 6059 0000 00000000 		.space	20
 6059      00000000 
 6059      00000000 
 6059      00000000 
 6059      00000000 
 6060              		.section	.bss.xTickCount,"aw",%nobits
 6061              		.align	2
 6062              		.set	.LANCHOR15,. + 0
 6065              	xTickCount:
 6066 0000 00000000 		.space	4
 6067              		.section	.bss.xYieldPending,"aw",%nobits
 6068              		.align	2
 6069              		.set	.LANCHOR17,. + 0
 6072              	xYieldPending:
 6073 0000 00000000 		.space	4
 6074              		.section	.data.uxTopUsedPriority,"aw"
 6075              		.align	2
 6076              		.set	.LANCHOR19,. + 0
 6079              	uxTopUsedPriority:
 6080 0000 04000000 		.word	4
 6081              		.text
 6082              	.Letext0:
 6083              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\stddef.h"
 6084              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 6085              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 6086              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 6087              		.file 7 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 6088              		.file 8 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
 6089              		.file 9 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 6090              		.file 10 "Inc/projdefs.h"
 6091              		.file 11 "Inc/list.h"
 6092              		.file 12 "Inc/task.h"
 6093              		.file 13 "Inc/portable.h"
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 234


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:16     .text.prvTaskIsTaskSuspended:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:23     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:83     .text.prvTaskIsTaskSuspended:0000000000000024 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:89     .text.prvResetNextTaskUnblockTime:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:95     .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:130    .text.prvResetNextTaskUnblockTime:0000000000000020 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:136    .text.prvDeleteTCB:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:142    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:174    .text.prvInitialiseNewTask:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:180    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:331    .text.prvInitialiseTaskLists:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:337    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:412    .text.prvInitialiseTaskLists:0000000000000048 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:424    .text.prvAddNewTaskToReadyList:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:430    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:595    .text.prvAddNewTaskToReadyList:00000000000000a8 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:606    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:612    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:689    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:696    .text.prvIdleTask:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:702    .text.prvIdleTask:0000000000000000 prvIdleTask
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:751    .text.prvIdleTask:0000000000000020 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:757    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:763    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:896    .text.prvAddCurrentTaskToDelayedList:0000000000000080 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:906    .text.xTaskCreate:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:913    .text.xTaskCreate:0000000000000000 xTaskCreate
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1035   .text.vTaskDelete:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1042   .text.vTaskDelete:0000000000000000 vTaskDelete
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1187   .text.vTaskDelete:0000000000000088 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1198   .text.uxTaskPriorityGet:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1205   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1251   .text.uxTaskPriorityGet:000000000000001c $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1256   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1263   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1337   .text.uxTaskPriorityGetFromISR:0000000000000024 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1342   .text.vTaskPrioritySet:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1349   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1570   .text.vTaskPrioritySet:00000000000000c4 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1578   .text.vTaskResume:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1585   .text.vTaskResume:0000000000000000 vTaskResume
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1716   .text.vTaskResume:0000000000000080 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1724   .text.xTaskResumeFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1731   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1905   .text.xTaskResumeFromISR:0000000000000098 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1915   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1919   .text.vTaskStartScheduler:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:1926   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2018   .text.vTaskStartScheduler:0000000000000050 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2029   .text.vTaskEndScheduler:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2036   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2079   .text.vTaskEndScheduler:0000000000000020 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2084   .text.vTaskSuspendAll:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2091   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2110   .text.vTaskSuspendAll:000000000000000c $d
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 235


C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2115   .text.xTaskGetTickCount:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2122   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2143   .text.xTaskGetTickCount:0000000000000008 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2148   .text.xTaskGetTickCountFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2155   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2179   .text.xTaskGetTickCountFromISR:0000000000000008 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2184   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2191   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2207   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2212   .text.pcTaskGetName:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2219   .text.pcTaskGetName:0000000000000000 pcTaskGetName
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2250   .text.pcTaskGetName:0000000000000010 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2255   .text.xTaskIncrementTick:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2262   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2609   .text.xTaskIncrementTick:0000000000000130 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2624   .text.xTaskResumeAll:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2631   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2928   .text.xTaskResumeAll:0000000000000110 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2941   .text.xTaskDelayUntil:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:2948   .text.xTaskDelayUntil:0000000000000000 xTaskDelayUntil
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3106   .text.xTaskDelayUntil:0000000000000064 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3112   .text.vTaskDelay:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3119   .text.vTaskDelay:0000000000000000 vTaskDelay
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3187   .text.vTaskDelay:0000000000000030 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3192   .text.xTaskCatchUpTicks:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3199   .text.xTaskCatchUpTicks:0000000000000000 xTaskCatchUpTicks
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3236   .text.xTaskCatchUpTicks:0000000000000018 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3241   .text.vTaskSwitchContext:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3248   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3357   .text.vTaskSwitchContext:0000000000000070 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3368   .text.vTaskSuspend:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3375   .text.vTaskSuspend:0000000000000000 vTaskSuspend
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3557   .text.vTaskSuspend:00000000000000a0 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3566   .text.vTaskPlaceOnEventList:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3573   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3609   .text.vTaskPlaceOnEventList:0000000000000018 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3614   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3621   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3690   .text.vTaskPlaceOnUnorderedEventList:000000000000003c $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3695   .text.xTaskRemoveFromEventList:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3702   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3924   .text.xTaskRemoveFromEventList:00000000000000c4 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3934   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:3941   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4113   .text.vTaskRemoveFromUnorderedEventList:00000000000000a0 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4122   .text.vTaskSetTimeOutState:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4129   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4167   .text.vTaskSetTimeOutState:000000000000001c $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4173   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4180   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4203   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4209   .text.xTaskCheckForTimeOut:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4216   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4338   .text.xTaskCheckForTimeOut:0000000000000058 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4344   .text.vTaskMissedYield:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4351   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4368   .text.vTaskMissedYield:0000000000000008 $d
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 236


C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4373   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4380   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4399   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4404   .text.xTaskGetSchedulerState:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4411   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4449   .text.xTaskGetSchedulerState:0000000000000018 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4455   .text.uxTaskResetEventItemValue:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4462   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4489   .text.uxTaskResetEventItemValue:0000000000000014 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4494   .text.ulTaskGenericNotifyTake:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4501   .text.ulTaskGenericNotifyTake:0000000000000000 ulTaskGenericNotifyTake
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4637   .text.ulTaskGenericNotifyTake:0000000000000090 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4643   .text.xTaskGenericNotifyWait:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4650   .text.xTaskGenericNotifyWait:0000000000000000 xTaskGenericNotifyWait
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4813   .text.xTaskGenericNotifyWait:00000000000000b4 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4819   .text.xTaskGenericNotify:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4826   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4886   .text.xTaskGenericNotify:0000000000000040 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:4890   .text.xTaskGenericNotify:0000000000000044 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5109   .text.xTaskGenericNotify:0000000000000110 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5118   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5125   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5204   .text.xTaskGenericNotifyFromISR:0000000000000040 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5208   .text.xTaskGenericNotifyFromISR:0000000000000044 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5485   .text.xTaskGenericNotifyFromISR:0000000000000134 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5496   .text.vTaskGenericNotifyGiveFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5503   .text.vTaskGenericNotifyGiveFromISR:0000000000000000 vTaskGenericNotifyGiveFromISR
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5762   .text.vTaskGenericNotifyGiveFromISR:00000000000000d8 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5773   .text.xTaskGenericNotifyStateClear:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5780   .text.xTaskGenericNotifyStateClear:0000000000000000 xTaskGenericNotifyStateClear
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5852   .text.xTaskGenericNotifyStateClear:0000000000000034 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5857   .text.ulTaskGenericNotifyValueClear:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5864   .text.ulTaskGenericNotifyValueClear:0000000000000000 ulTaskGenericNotifyValueClear
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5921   .text.ulTaskGenericNotifyValueClear:0000000000000030 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6079   .data.uxTopUsedPriority:0000000000000000 uxTopUsedPriority
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5932   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5928   .bss.pxCurrentTCB:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5935   .bss.pxDelayedTaskList:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5939   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5942   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5946   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5949   .bss.pxReadyTasksLists:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5953   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5956   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5960   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5963   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5967   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5970   .bss.uxSchedulerSuspended:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5974   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5977   .bss.uxTaskNumber:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5981   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5984   .bss.uxTopReadyPriority:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5988   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5991   .bss.xDelayedTaskList1:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5995   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:5998   .bss.xDelayedTaskList2:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6002   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
ARM GAS  C:\Users\User\AppData\Local\Temp\cclBpeKN.s 			page 237


C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6005   .bss.xIdleTaskHandle:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6009   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6012   .bss.xNextTaskUnblockTime:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6016   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6019   .bss.xNumOfOverflows:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6023   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6026   .bss.xPendedTicks:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6030   .bss.xPendedTicks:0000000000000000 xPendedTicks
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6033   .bss.xPendingReadyList:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6037   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6040   .bss.xSchedulerRunning:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6044   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6047   .bss.xSuspendedTaskList:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6051   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6054   .bss.xTasksWaitingTermination:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6058   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6061   .bss.xTickCount:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6065   .bss.xTickCount:0000000000000000 xTickCount
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6068   .bss.xYieldPending:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6072   .bss.xYieldPending:0000000000000000 xYieldPending
C:\Users\User\AppData\Local\Temp\cclBpeKN.s:6075   .data.uxTopUsedPriority:0000000000000000 $d

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vListInsertEnd
xPortStartScheduler
vPortEndScheduler
