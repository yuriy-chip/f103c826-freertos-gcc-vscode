ARM GAS  C:\Users\User\AppData\Local\Temp\ccpoFCd5.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"heap_1.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.pvPortMalloc,"ax",%progbits
  16              		.align	1
  17              		.global	pvPortMalloc
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	pvPortMalloc:
  25              	.LVL0:
  26              	.LFB4:
  27              		.file 1 "Src/heap_1.c"
   1:Src/heap_1.c  **** /*
   2:Src/heap_1.c  ****  * FreeRTOS Kernel V10.4.6
   3:Src/heap_1.c  ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Src/heap_1.c  ****  *
   5:Src/heap_1.c  ****  * SPDX-License-Identifier: MIT
   6:Src/heap_1.c  ****  *
   7:Src/heap_1.c  ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Src/heap_1.c  ****  * this software and associated documentation files (the "Software"), to deal in
   9:Src/heap_1.c  ****  * the Software without restriction, including without limitation the rights to
  10:Src/heap_1.c  ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Src/heap_1.c  ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Src/heap_1.c  ****  * subject to the following conditions:
  13:Src/heap_1.c  ****  *
  14:Src/heap_1.c  ****  * The above copyright notice and this permission notice shall be included in all
  15:Src/heap_1.c  ****  * copies or substantial portions of the Software.
  16:Src/heap_1.c  ****  *
  17:Src/heap_1.c  ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Src/heap_1.c  ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Src/heap_1.c  ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Src/heap_1.c  ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Src/heap_1.c  ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Src/heap_1.c  ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Src/heap_1.c  ****  *
  24:Src/heap_1.c  ****  * https://www.FreeRTOS.org
  25:Src/heap_1.c  ****  * https://github.com/FreeRTOS
  26:Src/heap_1.c  ****  *
  27:Src/heap_1.c  ****  */
  28:Src/heap_1.c  **** 
  29:Src/heap_1.c  **** 
  30:Src/heap_1.c  **** /*
  31:Src/heap_1.c  ****  * The simplest possible implementation of pvPortMalloc().  Note that this
ARM GAS  C:\Users\User\AppData\Local\Temp\ccpoFCd5.s 			page 2


  32:Src/heap_1.c  ****  * implementation does NOT allow allocated memory to be freed again.
  33:Src/heap_1.c  ****  *
  34:Src/heap_1.c  ****  * See heap_2.c, heap_3.c and heap_4.c for alternative implementations, and the
  35:Src/heap_1.c  ****  * memory management pages of https://www.FreeRTOS.org for more information.
  36:Src/heap_1.c  ****  */
  37:Src/heap_1.c  **** #include <stdlib.h>
  38:Src/heap_1.c  **** 
  39:Src/heap_1.c  **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  40:Src/heap_1.c  ****  * all the API functions to use the MPU wrappers.  That should only be done when
  41:Src/heap_1.c  ****  * task.h is included from an application file. */
  42:Src/heap_1.c  **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  43:Src/heap_1.c  **** 
  44:Src/heap_1.c  **** #include "FreeRTOS.h"
  45:Src/heap_1.c  **** #include "task.h"
  46:Src/heap_1.c  **** 
  47:Src/heap_1.c  **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  48:Src/heap_1.c  **** 
  49:Src/heap_1.c  **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  50:Src/heap_1.c  ****     #error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  51:Src/heap_1.c  **** #endif
  52:Src/heap_1.c  **** 
  53:Src/heap_1.c  **** /* A few bytes might be lost to byte aligning the heap start address. */
  54:Src/heap_1.c  **** #define configADJUSTED_HEAP_SIZE    ( configTOTAL_HEAP_SIZE - portBYTE_ALIGNMENT )
  55:Src/heap_1.c  **** 
  56:Src/heap_1.c  **** /* Allocate the memory for the heap. */
  57:Src/heap_1.c  **** #if ( configAPPLICATION_ALLOCATED_HEAP == 1 )
  58:Src/heap_1.c  **** 
  59:Src/heap_1.c  **** /* The application writer has already defined the array used for the RTOS
  60:Src/heap_1.c  **** * heap - probably so it can be placed in a special segment or address. */
  61:Src/heap_1.c  ****     extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  62:Src/heap_1.c  **** #else
  63:Src/heap_1.c  ****     static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  64:Src/heap_1.c  **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
  65:Src/heap_1.c  **** 
  66:Src/heap_1.c  **** /* Index into the ucHeap array. */
  67:Src/heap_1.c  **** static size_t xNextFreeByte = ( size_t ) 0;
  68:Src/heap_1.c  **** 
  69:Src/heap_1.c  **** /*-----------------------------------------------------------*/
  70:Src/heap_1.c  **** 
  71:Src/heap_1.c  **** void * pvPortMalloc( size_t xWantedSize )
  72:Src/heap_1.c  **** {
  28              		.loc 1 72 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 72 1 is_stmt 0 view .LVU1
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40 0002 0446     		mov	r4, r0
  73:Src/heap_1.c  ****     void * pvReturn = NULL;
  41              		.loc 1 73 5 is_stmt 1 view .LVU2
  42              	.LVL1:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccpoFCd5.s 			page 3


  74:Src/heap_1.c  ****     static uint8_t * pucAlignedHeap = NULL;
  43              		.loc 1 74 5 view .LVU3
  75:Src/heap_1.c  **** 
  76:Src/heap_1.c  ****     /* Ensure that blocks are always aligned. */
  77:Src/heap_1.c  ****     #if ( portBYTE_ALIGNMENT != 1 )
  78:Src/heap_1.c  ****         {
  79:Src/heap_1.c  ****             if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  44              		.loc 1 79 13 view .LVU4
  45              		.loc 1 79 15 is_stmt 0 view .LVU5
  46 0004 10F0070F 		tst	r0, #7
  47 0008 05D0     		beq	.L2
  80:Src/heap_1.c  ****             {
  81:Src/heap_1.c  ****                 /* Byte alignment required. Check for overflow. */
  82:Src/heap_1.c  ****                 if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK 
  48              		.loc 1 82 17 is_stmt 1 view .LVU6
  49              		.loc 1 82 35 is_stmt 0 view .LVU7
  50 000a 20F00703 		bic	r3, r0, #7
  51 000e 0833     		adds	r3, r3, #8
  52              		.loc 1 82 20 view .LVU8
  53 0010 8342     		cmp	r3, r0
  54 0012 18D8     		bhi	.L5
  83:Src/heap_1.c  ****                 {
  84:Src/heap_1.c  ****                     xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK )
  85:Src/heap_1.c  ****                 }
  86:Src/heap_1.c  ****                 else
  87:Src/heap_1.c  ****                 {
  88:Src/heap_1.c  ****                     xWantedSize = 0;
  55              		.loc 1 88 33 view .LVU9
  56 0014 0024     		movs	r4, #0
  57              	.L2:
  58              	.LVL2:
  89:Src/heap_1.c  ****                 }
  90:Src/heap_1.c  ****             }
  91:Src/heap_1.c  ****         }
  92:Src/heap_1.c  ****     #endif
  93:Src/heap_1.c  **** 
  94:Src/heap_1.c  ****     vTaskSuspendAll();
  59              		.loc 1 94 5 is_stmt 1 view .LVU10
  60 0016 FFF7FEFF 		bl	vTaskSuspendAll
  61              	.LVL3:
  95:Src/heap_1.c  ****     {
  96:Src/heap_1.c  ****         if( pucAlignedHeap == NULL )
  62              		.loc 1 96 9 view .LVU11
  63              		.loc 1 96 28 is_stmt 0 view .LVU12
  64 001a 124B     		ldr	r3, .L11
  65 001c 1B68     		ldr	r3, [r3]
  66              		.loc 1 96 11 view .LVU13
  67 001e A3B1     		cbz	r3, .L10
  68              	.L3:
  97:Src/heap_1.c  ****         {
  98:Src/heap_1.c  ****             /* Ensure the heap starts on a correctly aligned boundary. */
  99:Src/heap_1.c  ****             pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNME
 100:Src/heap_1.c  ****         }
 101:Src/heap_1.c  **** 
 102:Src/heap_1.c  ****         /* Check there is enough room left for the allocation and. */
 103:Src/heap_1.c  ****         if( ( xWantedSize > 0 ) && /* valid size */
  69              		.loc 1 103 9 is_stmt 1 view .LVU14
ARM GAS  C:\Users\User\AppData\Local\Temp\ccpoFCd5.s 			page 4


  70              		.loc 1 103 11 is_stmt 0 view .LVU15
  71 0020 CCB1     		cbz	r4, .L6
 104:Src/heap_1.c  ****             ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  72              		.loc 1 104 31 discriminator 1 view .LVU16
  73 0022 114B     		ldr	r3, .L11+4
  74 0024 1B68     		ldr	r3, [r3]
  75 0026 1C44     		add	r4, r4, r3
  76              	.LVL4:
 103:Src/heap_1.c  ****             ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  77              		.loc 1 103 33 discriminator 1 view .LVU17
  78 0028 41F2F772 		movw	r2, #6135
  79 002c 9442     		cmp	r4, r2
  80 002e 14D8     		bhi	.L7
  81              		.loc 1 104 76 view .LVU18
  82 0030 A342     		cmp	r3, r4
  83 0032 14D2     		bcs	.L8
 105:Src/heap_1.c  ****             ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 106:Src/heap_1.c  ****         {
 107:Src/heap_1.c  ****             /* Return the next free byte then increment the index past this
 108:Src/heap_1.c  ****              * block. */
 109:Src/heap_1.c  ****             pvReturn = pucAlignedHeap + xNextFreeByte;
  84              		.loc 1 109 13 is_stmt 1 view .LVU19
  85              		.loc 1 109 39 is_stmt 0 view .LVU20
  86 0034 0B4A     		ldr	r2, .L11
  87 0036 1568     		ldr	r5, [r2]
  88              		.loc 1 109 22 view .LVU21
  89 0038 1D44     		add	r5, r5, r3
  90              	.LVL5:
 110:Src/heap_1.c  ****             xNextFreeByte += xWantedSize;
  91              		.loc 1 110 13 is_stmt 1 view .LVU22
  92              		.loc 1 110 27 is_stmt 0 view .LVU23
  93 003a 0B4B     		ldr	r3, .L11+4
  94 003c 1C60     		str	r4, [r3]
  95              	.LVL6:
  96              	.L4:
 111:Src/heap_1.c  ****         }
 112:Src/heap_1.c  **** 
 113:Src/heap_1.c  ****         traceMALLOC( pvReturn, xWantedSize );
  97              		.loc 1 113 45 is_stmt 1 view .LVU24
 114:Src/heap_1.c  ****     }
 115:Src/heap_1.c  ****     ( void ) xTaskResumeAll();
  98              		.loc 1 115 5 view .LVU25
  99              		.loc 1 115 14 is_stmt 0 view .LVU26
 100 003e FFF7FEFF 		bl	xTaskResumeAll
 101              	.LVL7:
 116:Src/heap_1.c  **** 
 117:Src/heap_1.c  ****     #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
 118:Src/heap_1.c  ****         {
 119:Src/heap_1.c  ****             if( pvReturn == NULL )
 120:Src/heap_1.c  ****             {
 121:Src/heap_1.c  ****                 extern void vApplicationMallocFailedHook( void );
 122:Src/heap_1.c  ****                 vApplicationMallocFailedHook();
 123:Src/heap_1.c  ****             }
 124:Src/heap_1.c  ****         }
 125:Src/heap_1.c  ****     #endif
 126:Src/heap_1.c  **** 
 127:Src/heap_1.c  ****     return pvReturn;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccpoFCd5.s 			page 5


 102              		.loc 1 127 5 is_stmt 1 view .LVU27
 128:Src/heap_1.c  **** }
 103              		.loc 1 128 1 is_stmt 0 view .LVU28
 104 0042 2846     		mov	r0, r5
 105 0044 38BD     		pop	{r3, r4, r5, pc}
 106              	.LVL8:
 107              	.L5:
  84:Src/heap_1.c  ****                 }
 108              		.loc 1 84 33 view .LVU29
 109 0046 1C46     		mov	r4, r3
 110 0048 E5E7     		b	.L2
 111              	.LVL9:
 112              	.L10:
  99:Src/heap_1.c  ****         }
 113              		.loc 1 99 13 is_stmt 1 view .LVU30
  99:Src/heap_1.c  ****         }
 114              		.loc 1 99 48 is_stmt 0 view .LVU31
 115 004a 084B     		ldr	r3, .L11+8
  99:Src/heap_1.c  ****         }
 116              		.loc 1 99 28 view .LVU32
 117 004c 23F00703 		bic	r3, r3, #7
 118 0050 044A     		ldr	r2, .L11
 119 0052 1360     		str	r3, [r2]
 120 0054 E4E7     		b	.L3
 121              	.L6:
  73:Src/heap_1.c  ****     static uint8_t * pucAlignedHeap = NULL;
 122              		.loc 1 73 12 view .LVU33
 123 0056 0025     		movs	r5, #0
 124 0058 F1E7     		b	.L4
 125              	.LVL10:
 126              	.L7:
  73:Src/heap_1.c  ****     static uint8_t * pucAlignedHeap = NULL;
 127              		.loc 1 73 12 view .LVU34
 128 005a 0025     		movs	r5, #0
 129 005c EFE7     		b	.L4
 130              	.L8:
 131 005e 0025     		movs	r5, #0
 132 0060 EDE7     		b	.L4
 133              	.L12:
 134 0062 00BF     		.align	2
 135              	.L11:
 136 0064 00000000 		.word	.LANCHOR0
 137 0068 00000000 		.word	.LANCHOR1
 138 006c 07000000 		.word	ucHeap+7
 139              		.cfi_endproc
 140              	.LFE4:
 142              		.section	.text.vPortFree,"ax",%progbits
 143              		.align	1
 144              		.global	vPortFree
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu softvfp
 150              	vPortFree:
 151              	.LVL11:
 152              	.LFB5:
 129:Src/heap_1.c  **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\User\AppData\Local\Temp\ccpoFCd5.s 			page 6


 130:Src/heap_1.c  **** 
 131:Src/heap_1.c  **** void vPortFree( void * pv )
 132:Src/heap_1.c  **** {
 153              		.loc 1 132 1 is_stmt 1 view -0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 133:Src/heap_1.c  ****     /* Memory cannot be freed using this scheme.  See heap_2.c, heap_3.c and
 134:Src/heap_1.c  ****      * heap_4.c for alternative implementations, and the memory management pages of
 135:Src/heap_1.c  ****      * https://www.FreeRTOS.org for more information. */
 136:Src/heap_1.c  ****     ( void ) pv;
 158              		.loc 1 136 5 view .LVU36
 137:Src/heap_1.c  **** 
 138:Src/heap_1.c  ****     /* Force an assert as it is invalid to call this function. */
 139:Src/heap_1.c  ****     configASSERT( pv == NULL );
 159              		.loc 1 139 31 view .LVU37
 140:Src/heap_1.c  **** }
 160              		.loc 1 140 1 is_stmt 0 view .LVU38
 161 0000 7047     		bx	lr
 162              		.cfi_endproc
 163              	.LFE5:
 165              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 166              		.align	1
 167              		.global	vPortInitialiseBlocks
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu softvfp
 173              	vPortInitialiseBlocks:
 174              	.LFB6:
 141:Src/heap_1.c  **** /*-----------------------------------------------------------*/
 142:Src/heap_1.c  **** 
 143:Src/heap_1.c  **** void vPortInitialiseBlocks( void )
 144:Src/heap_1.c  **** {
 175              		.loc 1 144 1 is_stmt 1 view -0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		@ link register save eliminated.
 145:Src/heap_1.c  ****     /* Only required when static memory is not cleared. */
 146:Src/heap_1.c  ****     xNextFreeByte = ( size_t ) 0;
 180              		.loc 1 146 5 view .LVU40
 181              		.loc 1 146 19 is_stmt 0 view .LVU41
 182 0000 014B     		ldr	r3, .L15
 183 0002 0022     		movs	r2, #0
 184 0004 1A60     		str	r2, [r3]
 147:Src/heap_1.c  **** }
 185              		.loc 1 147 1 view .LVU42
 186 0006 7047     		bx	lr
 187              	.L16:
 188              		.align	2
 189              	.L15:
 190 0008 00000000 		.word	.LANCHOR1
 191              		.cfi_endproc
 192              	.LFE6:
 194              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
ARM GAS  C:\Users\User\AppData\Local\Temp\ccpoFCd5.s 			page 7


 195              		.align	1
 196              		.global	xPortGetFreeHeapSize
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu softvfp
 202              	xPortGetFreeHeapSize:
 203              	.LFB7:
 148:Src/heap_1.c  **** /*-----------------------------------------------------------*/
 149:Src/heap_1.c  **** 
 150:Src/heap_1.c  **** size_t xPortGetFreeHeapSize( void )
 151:Src/heap_1.c  **** {
 204              		.loc 1 151 1 is_stmt 1 view -0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 152:Src/heap_1.c  ****     return( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 209              		.loc 1 152 5 view .LVU44
 210              		.loc 1 152 38 is_stmt 0 view .LVU45
 211 0000 024B     		ldr	r3, .L18
 212 0002 1868     		ldr	r0, [r3]
 153:Src/heap_1.c  **** }
 213              		.loc 1 153 1 view .LVU46
 214 0004 C0F5BF50 		rsb	r0, r0, #6112
 215 0008 1830     		adds	r0, r0, #24
 216 000a 7047     		bx	lr
 217              	.L19:
 218              		.align	2
 219              	.L18:
 220 000c 00000000 		.word	.LANCHOR1
 221              		.cfi_endproc
 222              	.LFE7:
 224              		.section	.bss.pucAlignedHeap.5178,"aw",%nobits
 225              		.align	2
 226              		.set	.LANCHOR0,. + 0
 229              	pucAlignedHeap.5178:
 230 0000 00000000 		.space	4
 231              		.section	.bss.ucHeap,"aw",%nobits
 232              		.align	2
 235              	ucHeap:
 236 0000 00000000 		.space	6144
 236      00000000 
 236      00000000 
 236      00000000 
 236      00000000 
 237              		.section	.bss.xNextFreeByte,"aw",%nobits
 238              		.align	2
 239              		.set	.LANCHOR1,. + 0
 242              	xNextFreeByte:
 243 0000 00000000 		.space	4
 244              		.text
 245              	.Letext0:
 246              		.file 2 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\stddef.h"
 247              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 248              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 249              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccpoFCd5.s 			page 8


 250              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 251              		.file 7 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
 252              		.file 8 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 253              		.file 9 "Inc/task.h"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccpoFCd5.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 heap_1.c
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:16     .text.pvPortMalloc:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:24     .text.pvPortMalloc:0000000000000000 pvPortMalloc
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:136    .text.pvPortMalloc:0000000000000064 $d
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:235    .bss.ucHeap:0000000000000000 ucHeap
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:143    .text.vPortFree:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:150    .text.vPortFree:0000000000000000 vPortFree
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:166    .text.vPortInitialiseBlocks:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:173    .text.vPortInitialiseBlocks:0000000000000000 vPortInitialiseBlocks
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:190    .text.vPortInitialiseBlocks:0000000000000008 $d
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:195    .text.xPortGetFreeHeapSize:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:202    .text.xPortGetFreeHeapSize:0000000000000000 xPortGetFreeHeapSize
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:220    .text.xPortGetFreeHeapSize:000000000000000c $d
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:225    .bss.pucAlignedHeap.5178:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:229    .bss.pucAlignedHeap.5178:0000000000000000 pucAlignedHeap.5178
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:232    .bss.ucHeap:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:238    .bss.xNextFreeByte:0000000000000000 $d
C:\Users\User\AppData\Local\Temp\ccpoFCd5.s:242    .bss.xNextFreeByte:0000000000000000 xNextFreeByte

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
