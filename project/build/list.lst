ARM GAS  C:\Users\User\AppData\Local\Temp\cclj9U2P.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"list.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.vListInitialise,"ax",%progbits
  16              		.align	1
  17              		.global	vListInitialise
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	vListInitialise:
  25              	.LVL0:
  26              	.LFB4:
  27              		.file 1 "Src/list.c"
   1:Src/list.c    **** /*
   2:Src/list.c    ****  * FreeRTOS Kernel V10.4.6
   3:Src/list.c    ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Src/list.c    ****  *
   5:Src/list.c    ****  * SPDX-License-Identifier: MIT
   6:Src/list.c    ****  *
   7:Src/list.c    ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Src/list.c    ****  * this software and associated documentation files (the "Software"), to deal in
   9:Src/list.c    ****  * the Software without restriction, including without limitation the rights to
  10:Src/list.c    ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Src/list.c    ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Src/list.c    ****  * subject to the following conditions:
  13:Src/list.c    ****  *
  14:Src/list.c    ****  * The above copyright notice and this permission notice shall be included in all
  15:Src/list.c    ****  * copies or substantial portions of the Software.
  16:Src/list.c    ****  *
  17:Src/list.c    ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Src/list.c    ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Src/list.c    ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Src/list.c    ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Src/list.c    ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Src/list.c    ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Src/list.c    ****  *
  24:Src/list.c    ****  * https://www.FreeRTOS.org
  25:Src/list.c    ****  * https://github.com/FreeRTOS
  26:Src/list.c    ****  *
  27:Src/list.c    ****  */
  28:Src/list.c    **** 
  29:Src/list.c    **** 
  30:Src/list.c    **** #include <stdlib.h>
  31:Src/list.c    **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\cclj9U2P.s 			page 2


  32:Src/list.c    **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Src/list.c    ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:Src/list.c    ****  * task.h is included from an application file. */
  35:Src/list.c    **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Src/list.c    **** 
  37:Src/list.c    **** #include "FreeRTOS.h"
  38:Src/list.c    **** #include "list.h"
  39:Src/list.c    **** 
  40:Src/list.c    **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  41:Src/list.c    ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
  42:Src/list.c    ****  * defined for the header files above, but not in this file, in order to
  43:Src/list.c    ****  * generate the correct privileged Vs unprivileged linkage and placement. */
  44:Src/list.c    **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  45:Src/list.c    **** 
  46:Src/list.c    **** /*-----------------------------------------------------------
  47:Src/list.c    **** * PUBLIC LIST API documented in list.h
  48:Src/list.c    **** *----------------------------------------------------------*/
  49:Src/list.c    **** 
  50:Src/list.c    **** void vListInitialise( List_t * const pxList )
  51:Src/list.c    **** {
  28              		.loc 1 51 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  52:Src/list.c    ****     /* The list structure contains a list item which is used to mark the
  53:Src/list.c    ****      * end of the list.  To initialise the list the list end is inserted
  54:Src/list.c    ****      * as the only list entry. */
  55:Src/list.c    ****     pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini li
  33              		.loc 1 55 5 view .LVU1
  34              		.loc 1 55 40 is_stmt 0 view .LVU2
  35 0000 00F10803 		add	r3, r0, #8
  36              		.loc 1 55 21 view .LVU3
  37 0004 4360     		str	r3, [r0, #4]
  56:Src/list.c    **** 
  57:Src/list.c    ****     /* The list end value is the highest possible value in the list to
  58:Src/list.c    ****      * ensure it remains at the end of the list. */
  59:Src/list.c    ****     pxList->xListEnd.xItemValue = portMAX_DELAY;
  38              		.loc 1 59 5 is_stmt 1 view .LVU4
  39              		.loc 1 59 33 is_stmt 0 view .LVU5
  40 0006 4FF0FF32 		mov	r2, #-1
  41 000a 8260     		str	r2, [r0, #8]
  60:Src/list.c    **** 
  61:Src/list.c    ****     /* The list end next and previous pointers point to itself so we know
  62:Src/list.c    ****      * when the list is empty. */
  63:Src/list.c    ****     pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087
  42              		.loc 1 63 5 is_stmt 1 view .LVU6
  43              		.loc 1 63 29 is_stmt 0 view .LVU7
  44 000c C360     		str	r3, [r0, #12]
  64:Src/list.c    ****     pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087
  45              		.loc 1 64 5 is_stmt 1 view .LVU8
  46              		.loc 1 64 33 is_stmt 0 view .LVU9
  47 000e 0361     		str	r3, [r0, #16]
  65:Src/list.c    **** 
  66:Src/list.c    ****     pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  48              		.loc 1 66 5 is_stmt 1 view .LVU10
  49              		.loc 1 66 29 is_stmt 0 view .LVU11
ARM GAS  C:\Users\User\AppData\Local\Temp\cclj9U2P.s 			page 3


  50 0010 0023     		movs	r3, #0
  51 0012 0360     		str	r3, [r0]
  67:Src/list.c    **** 
  68:Src/list.c    ****     /* Write known values into the list if
  69:Src/list.c    ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  70:Src/list.c    ****     listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  52              		.loc 1 70 51 is_stmt 1 view .LVU12
  71:Src/list.c    ****     listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  53              		.loc 1 71 51 view .LVU13
  72:Src/list.c    **** }
  54              		.loc 1 72 1 is_stmt 0 view .LVU14
  55 0014 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE4:
  59              		.section	.text.vListInitialiseItem,"ax",%progbits
  60              		.align	1
  61              		.global	vListInitialiseItem
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu softvfp
  67              	vListInitialiseItem:
  68              	.LVL1:
  69              	.LFB5:
  73:Src/list.c    **** /*-----------------------------------------------------------*/
  74:Src/list.c    **** 
  75:Src/list.c    **** void vListInitialiseItem( ListItem_t * const pxItem )
  76:Src/list.c    **** {
  70              		.loc 1 76 1 is_stmt 1 view -0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  77:Src/list.c    ****     /* Make sure the list item is not recorded as being on a list. */
  78:Src/list.c    ****     pxItem->pxContainer = NULL;
  75              		.loc 1 78 5 view .LVU16
  76              		.loc 1 78 25 is_stmt 0 view .LVU17
  77 0000 0023     		movs	r3, #0
  78 0002 0361     		str	r3, [r0, #16]
  79:Src/list.c    **** 
  80:Src/list.c    ****     /* Write known values into the list item if
  81:Src/list.c    ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  82:Src/list.c    ****     listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  79              		.loc 1 82 60 is_stmt 1 view .LVU18
  83:Src/list.c    ****     listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  80              		.loc 1 83 61 view .LVU19
  84:Src/list.c    **** }
  81              		.loc 1 84 1 is_stmt 0 view .LVU20
  82 0004 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE5:
  86              		.section	.text.vListInsertEnd,"ax",%progbits
  87              		.align	1
  88              		.global	vListInsertEnd
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
ARM GAS  C:\Users\User\AppData\Local\Temp\cclj9U2P.s 			page 4


  92              		.fpu softvfp
  94              	vListInsertEnd:
  95              	.LVL2:
  96              	.LFB6:
  85:Src/list.c    **** /*-----------------------------------------------------------*/
  86:Src/list.c    **** 
  87:Src/list.c    **** void vListInsertEnd( List_t * const pxList,
  88:Src/list.c    ****                      ListItem_t * const pxNewListItem )
  89:Src/list.c    **** {
  97              		.loc 1 89 1 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
  90:Src/list.c    ****     ListItem_t * const pxIndex = pxList->pxIndex;
 102              		.loc 1 90 5 view .LVU22
 103              		.loc 1 90 24 is_stmt 0 view .LVU23
 104 0000 4368     		ldr	r3, [r0, #4]
 105              	.LVL3:
  91:Src/list.c    **** 
  92:Src/list.c    ****     /* Only effective when configASSERT() is also defined, these tests may catch
  93:Src/list.c    ****      * the list data structures being overwritten in memory.  They will not catch
  94:Src/list.c    ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
  95:Src/list.c    ****     listTEST_LIST_INTEGRITY( pxList );
 106              		.loc 1 95 38 is_stmt 1 view .LVU24
  96:Src/list.c    ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 107              		.loc 1 96 50 view .LVU25
  97:Src/list.c    **** 
  98:Src/list.c    ****     /* Insert a new list item into pxList, but rather than sort the list,
  99:Src/list.c    ****      * makes the new list item the last item to be removed by a call to
 100:Src/list.c    ****      * listGET_OWNER_OF_NEXT_ENTRY(). */
 101:Src/list.c    ****     pxNewListItem->pxNext = pxIndex;
 108              		.loc 1 101 5 view .LVU26
 109              		.loc 1 101 27 is_stmt 0 view .LVU27
 110 0002 4B60     		str	r3, [r1, #4]
 102:Src/list.c    ****     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 111              		.loc 1 102 5 is_stmt 1 view .LVU28
 112              		.loc 1 102 40 is_stmt 0 view .LVU29
 113 0004 9A68     		ldr	r2, [r3, #8]
 114              		.loc 1 102 31 view .LVU30
 115 0006 8A60     		str	r2, [r1, #8]
 103:Src/list.c    **** 
 104:Src/list.c    ****     /* Only used during decision coverage testing. */
 105:Src/list.c    ****     mtCOVERAGE_TEST_DELAY();
 116              		.loc 1 105 28 is_stmt 1 view .LVU31
 106:Src/list.c    **** 
 107:Src/list.c    ****     pxIndex->pxPrevious->pxNext = pxNewListItem;
 117              		.loc 1 107 5 view .LVU32
 118              		.loc 1 107 33 is_stmt 0 view .LVU33
 119 0008 5160     		str	r1, [r2, #4]
 108:Src/list.c    ****     pxIndex->pxPrevious = pxNewListItem;
 120              		.loc 1 108 5 is_stmt 1 view .LVU34
 121              		.loc 1 108 25 is_stmt 0 view .LVU35
 122 000a 9960     		str	r1, [r3, #8]
 109:Src/list.c    **** 
 110:Src/list.c    ****     /* Remember which list the item is in. */
 111:Src/list.c    ****     pxNewListItem->pxContainer = pxList;
ARM GAS  C:\Users\User\AppData\Local\Temp\cclj9U2P.s 			page 5


 123              		.loc 1 111 5 is_stmt 1 view .LVU36
 124              		.loc 1 111 32 is_stmt 0 view .LVU37
 125 000c 0861     		str	r0, [r1, #16]
 112:Src/list.c    **** 
 113:Src/list.c    ****     ( pxList->uxNumberOfItems )++;
 126              		.loc 1 113 5 is_stmt 1 view .LVU38
 127              		.loc 1 113 13 is_stmt 0 view .LVU39
 128 000e 0368     		ldr	r3, [r0]
 129              	.LVL4:
 130              		.loc 1 113 32 view .LVU40
 131 0010 0133     		adds	r3, r3, #1
 132 0012 0360     		str	r3, [r0]
 114:Src/list.c    **** }
 133              		.loc 1 114 1 view .LVU41
 134 0014 7047     		bx	lr
 135              		.cfi_endproc
 136              	.LFE6:
 138              		.section	.text.vListInsert,"ax",%progbits
 139              		.align	1
 140              		.global	vListInsert
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu softvfp
 146              	vListInsert:
 147              	.LVL5:
 148              	.LFB7:
 115:Src/list.c    **** /*-----------------------------------------------------------*/
 116:Src/list.c    **** 
 117:Src/list.c    **** void vListInsert( List_t * const pxList,
 118:Src/list.c    ****                   ListItem_t * const pxNewListItem )
 119:Src/list.c    **** {
 149              		.loc 1 119 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              		.loc 1 119 1 is_stmt 0 view .LVU43
 155 0000 30B4     		push	{r4, r5}
 156              	.LCFI0:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 4, -8
 159              		.cfi_offset 5, -4
 120:Src/list.c    ****     ListItem_t * pxIterator;
 160              		.loc 1 120 5 is_stmt 1 view .LVU44
 121:Src/list.c    ****     const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 161              		.loc 1 121 5 view .LVU45
 162              		.loc 1 121 22 is_stmt 0 view .LVU46
 163 0002 0D68     		ldr	r5, [r1]
 164              	.LVL6:
 122:Src/list.c    **** 
 123:Src/list.c    ****     /* Only effective when configASSERT() is also defined, these tests may catch
 124:Src/list.c    ****      * the list data structures being overwritten in memory.  They will not catch
 125:Src/list.c    ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
 126:Src/list.c    ****     listTEST_LIST_INTEGRITY( pxList );
 165              		.loc 1 126 38 is_stmt 1 view .LVU47
 127:Src/list.c    ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
ARM GAS  C:\Users\User\AppData\Local\Temp\cclj9U2P.s 			page 6


 166              		.loc 1 127 50 view .LVU48
 128:Src/list.c    **** 
 129:Src/list.c    ****     /* Insert the new list item into the list, sorted in xItemValue order.
 130:Src/list.c    ****      *
 131:Src/list.c    ****      * If the list already contains a list item with the same item value then the
 132:Src/list.c    ****      * new list item should be placed after it.  This ensures that TCBs which are
 133:Src/list.c    ****      * stored in ready lists (all of which have the same xItemValue value) get a
 134:Src/list.c    ****      * share of the CPU.  However, if the xItemValue is the same as the back marker
 135:Src/list.c    ****      * the iteration loop below will not end.  Therefore the value is checked
 136:Src/list.c    ****      * first, and the algorithm slightly modified if necessary. */
 137:Src/list.c    ****     if( xValueOfInsertion == portMAX_DELAY )
 167              		.loc 1 137 5 view .LVU49
 168              		.loc 1 137 7 is_stmt 0 view .LVU50
 169 0004 B5F1FF3F 		cmp	r5, #-1
 170 0008 11D0     		beq	.L9
 138:Src/list.c    ****     {
 139:Src/list.c    ****         pxIterator = pxList->xListEnd.pxPrevious;
 140:Src/list.c    ****     }
 141:Src/list.c    ****     else
 142:Src/list.c    ****     {
 143:Src/list.c    ****         /* *** NOTE ***********************************************************
 144:Src/list.c    ****         *  If you find your application is crashing here then likely causes are
 145:Src/list.c    ****         *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
 146:Src/list.c    ****         *  more tips, and ensure configASSERT() is defined!
 147:Src/list.c    ****         *  https://www.FreeRTOS.org/a00110.html#configASSERT
 148:Src/list.c    ****         *
 149:Src/list.c    ****         *   1) Stack overflow -
 150:Src/list.c    ****         *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
 151:Src/list.c    ****         *   2) Incorrect interrupt priority assignment, especially on Cortex-M
 152:Src/list.c    ****         *      parts where numerically high priority values denote low actual
 153:Src/list.c    ****         *      interrupt priorities, which can seem counter intuitive.  See
 154:Src/list.c    ****         *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
 155:Src/list.c    ****         *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 156:Src/list.c    ****         *      https://www.FreeRTOS.org/a00110.html
 157:Src/list.c    ****         *   3) Calling an API function from within a critical section or when
 158:Src/list.c    ****         *      the scheduler is suspended, or calling an API function that does
 159:Src/list.c    ****         *      not end in "FromISR" from an interrupt.
 160:Src/list.c    ****         *   4) Using a queue or semaphore before it has been initialised or
 161:Src/list.c    ****         *      before the scheduler has been started (are interrupts firing
 162:Src/list.c    ****         *      before vTaskStartScheduler() has been called?).
 163:Src/list.c    ****         *   5) If the FreeRTOS port supports interrupt nesting then ensure that
 164:Src/list.c    ****         *      the priority of the tick interrupt is at or below
 165:Src/list.c    ****         *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
 166:Src/list.c    ****         **********************************************************************/
 167:Src/list.c    **** 
 168:Src/list.c    ****         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <=
 171              		.loc 1 168 9 is_stmt 1 view .LVU51
 172              		.loc 1 168 25 is_stmt 0 view .LVU52
 173 000a 00F10803 		add	r3, r0, #8
 174              	.LVL7:
 175              	.L7:
 176              		.loc 1 168 67 is_stmt 1 discriminator 1 view .LVU53
 177 000e 1C46     		mov	r4, r3
 178              		.loc 1 168 77 is_stmt 0 discriminator 1 view .LVU54
 179 0010 5B68     		ldr	r3, [r3, #4]
 180              	.LVL8:
 181              		.loc 1 168 85 discriminator 1 view .LVU55
ARM GAS  C:\Users\User\AppData\Local\Temp\cclj9U2P.s 			page 7


 182 0012 1A68     		ldr	r2, [r3]
 183              		.loc 1 168 9 discriminator 1 view .LVU56
 184 0014 AA42     		cmp	r2, r5
 185 0016 FAD9     		bls	.L7
 186              	.L6:
 169:Src/list.c    ****         {
 170:Src/list.c    ****             /* There is nothing to do here, just iterating to the wanted
 171:Src/list.c    ****              * insertion position. */
 172:Src/list.c    ****         }
 173:Src/list.c    ****     }
 174:Src/list.c    **** 
 175:Src/list.c    ****     pxNewListItem->pxNext = pxIterator->pxNext;
 187              		.loc 1 175 5 is_stmt 1 view .LVU57
 188              		.loc 1 175 39 is_stmt 0 view .LVU58
 189 0018 6368     		ldr	r3, [r4, #4]
 190              		.loc 1 175 27 view .LVU59
 191 001a 4B60     		str	r3, [r1, #4]
 176:Src/list.c    ****     pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 192              		.loc 1 176 5 is_stmt 1 view .LVU60
 193              		.loc 1 176 39 is_stmt 0 view .LVU61
 194 001c 9960     		str	r1, [r3, #8]
 177:Src/list.c    ****     pxNewListItem->pxPrevious = pxIterator;
 195              		.loc 1 177 5 is_stmt 1 view .LVU62
 196              		.loc 1 177 31 is_stmt 0 view .LVU63
 197 001e 8C60     		str	r4, [r1, #8]
 178:Src/list.c    ****     pxIterator->pxNext = pxNewListItem;
 198              		.loc 1 178 5 is_stmt 1 view .LVU64
 199              		.loc 1 178 24 is_stmt 0 view .LVU65
 200 0020 6160     		str	r1, [r4, #4]
 179:Src/list.c    **** 
 180:Src/list.c    ****     /* Remember which list the item is in.  This allows fast removal of the
 181:Src/list.c    ****      * item later. */
 182:Src/list.c    ****     pxNewListItem->pxContainer = pxList;
 201              		.loc 1 182 5 is_stmt 1 view .LVU66
 202              		.loc 1 182 32 is_stmt 0 view .LVU67
 203 0022 0861     		str	r0, [r1, #16]
 183:Src/list.c    **** 
 184:Src/list.c    ****     ( pxList->uxNumberOfItems )++;
 204              		.loc 1 184 5 is_stmt 1 view .LVU68
 205              		.loc 1 184 13 is_stmt 0 view .LVU69
 206 0024 0368     		ldr	r3, [r0]
 207              		.loc 1 184 32 view .LVU70
 208 0026 0133     		adds	r3, r3, #1
 209 0028 0360     		str	r3, [r0]
 185:Src/list.c    **** }
 210              		.loc 1 185 1 view .LVU71
 211 002a 30BC     		pop	{r4, r5}
 212              	.LCFI1:
 213              		.cfi_remember_state
 214              		.cfi_restore 5
 215              		.cfi_restore 4
 216              		.cfi_def_cfa_offset 0
 217              	.LVL9:
 218              		.loc 1 185 1 view .LVU72
 219 002c 7047     		bx	lr
 220              	.LVL10:
 221              	.L9:
ARM GAS  C:\Users\User\AppData\Local\Temp\cclj9U2P.s 			page 8


 222              	.LCFI2:
 223              		.cfi_restore_state
 139:Src/list.c    ****     }
 224              		.loc 1 139 9 is_stmt 1 view .LVU73
 139:Src/list.c    ****     }
 225              		.loc 1 139 20 is_stmt 0 view .LVU74
 226 002e 0469     		ldr	r4, [r0, #16]
 227              	.LVL11:
 139:Src/list.c    ****     }
 228              		.loc 1 139 20 view .LVU75
 229 0030 F2E7     		b	.L6
 230              		.cfi_endproc
 231              	.LFE7:
 233              		.section	.text.uxListRemove,"ax",%progbits
 234              		.align	1
 235              		.global	uxListRemove
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu softvfp
 241              	uxListRemove:
 242              	.LVL12:
 243              	.LFB8:
 186:Src/list.c    **** /*-----------------------------------------------------------*/
 187:Src/list.c    **** 
 188:Src/list.c    **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 189:Src/list.c    **** {
 244              		.loc 1 189 1 is_stmt 1 view -0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 190:Src/list.c    **** /* The list item knows which list it is in.  Obtain the list from the list
 191:Src/list.c    ****  * item. */
 192:Src/list.c    ****     List_t * const pxList = pxItemToRemove->pxContainer;
 249              		.loc 1 192 5 view .LVU77
 250              		.loc 1 192 20 is_stmt 0 view .LVU78
 251 0000 0369     		ldr	r3, [r0, #16]
 252              	.LVL13:
 193:Src/list.c    **** 
 194:Src/list.c    ****     pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 253              		.loc 1 194 5 is_stmt 1 view .LVU79
 254              		.loc 1 194 19 is_stmt 0 view .LVU80
 255 0002 4168     		ldr	r1, [r0, #4]
 256              		.loc 1 194 56 view .LVU81
 257 0004 8268     		ldr	r2, [r0, #8]
 258              		.loc 1 194 40 view .LVU82
 259 0006 8A60     		str	r2, [r1, #8]
 195:Src/list.c    ****     pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 260              		.loc 1 195 5 is_stmt 1 view .LVU83
 261              		.loc 1 195 56 is_stmt 0 view .LVU84
 262 0008 4168     		ldr	r1, [r0, #4]
 263              		.loc 1 195 40 view .LVU85
 264 000a 5160     		str	r1, [r2, #4]
 196:Src/list.c    **** 
 197:Src/list.c    ****     /* Only used during decision coverage testing. */
 198:Src/list.c    ****     mtCOVERAGE_TEST_DELAY();
ARM GAS  C:\Users\User\AppData\Local\Temp\cclj9U2P.s 			page 9


 265              		.loc 1 198 28 is_stmt 1 view .LVU86
 199:Src/list.c    **** 
 200:Src/list.c    ****     /* Make sure the index is left pointing to a valid item. */
 201:Src/list.c    ****     if( pxList->pxIndex == pxItemToRemove )
 266              		.loc 1 201 5 view .LVU87
 267              		.loc 1 201 15 is_stmt 0 view .LVU88
 268 000c 5A68     		ldr	r2, [r3, #4]
 269              		.loc 1 201 7 view .LVU89
 270 000e 8242     		cmp	r2, r0
 271 0010 06D0     		beq	.L12
 272              	.L11:
 202:Src/list.c    ****     {
 203:Src/list.c    ****         pxList->pxIndex = pxItemToRemove->pxPrevious;
 204:Src/list.c    ****     }
 205:Src/list.c    ****     else
 206:Src/list.c    ****     {
 207:Src/list.c    ****         mtCOVERAGE_TEST_MARKER();
 273              		.loc 1 207 33 is_stmt 1 view .LVU90
 208:Src/list.c    ****     }
 209:Src/list.c    **** 
 210:Src/list.c    ****     pxItemToRemove->pxContainer = NULL;
 274              		.loc 1 210 5 view .LVU91
 275              		.loc 1 210 33 is_stmt 0 view .LVU92
 276 0012 0022     		movs	r2, #0
 277 0014 0261     		str	r2, [r0, #16]
 211:Src/list.c    ****     ( pxList->uxNumberOfItems )--;
 278              		.loc 1 211 5 is_stmt 1 view .LVU93
 279              		.loc 1 211 13 is_stmt 0 view .LVU94
 280 0016 1A68     		ldr	r2, [r3]
 281              		.loc 1 211 32 view .LVU95
 282 0018 013A     		subs	r2, r2, #1
 283 001a 1A60     		str	r2, [r3]
 212:Src/list.c    **** 
 213:Src/list.c    ****     return pxList->uxNumberOfItems;
 284              		.loc 1 213 5 is_stmt 1 view .LVU96
 285              		.loc 1 213 18 is_stmt 0 view .LVU97
 286 001c 1868     		ldr	r0, [r3]
 287              	.LVL14:
 214:Src/list.c    **** }
 288              		.loc 1 214 1 view .LVU98
 289 001e 7047     		bx	lr
 290              	.LVL15:
 291              	.L12:
 203:Src/list.c    ****     }
 292              		.loc 1 203 9 is_stmt 1 view .LVU99
 203:Src/list.c    ****     }
 293              		.loc 1 203 41 is_stmt 0 view .LVU100
 294 0020 8268     		ldr	r2, [r0, #8]
 203:Src/list.c    ****     }
 295              		.loc 1 203 25 view .LVU101
 296 0022 5A60     		str	r2, [r3, #4]
 297 0024 F5E7     		b	.L11
 298              		.cfi_endproc
 299              	.LFE8:
 301              		.text
 302              	.Letext0:
 303              		.file 2 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
ARM GAS  C:\Users\User\AppData\Local\Temp\cclj9U2P.s 			page 10


 304              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 305              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 306              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\stddef.h"
 307              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 308              		.file 7 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
 309              		.file 8 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 310              		.file 9 "Inc/portmacro.h"
 311              		.file 10 "Inc/list.h"
ARM GAS  C:\Users\User\AppData\Local\Temp\cclj9U2P.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
C:\Users\User\AppData\Local\Temp\cclj9U2P.s:16     .text.vListInitialise:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclj9U2P.s:24     .text.vListInitialise:0000000000000000 vListInitialise
C:\Users\User\AppData\Local\Temp\cclj9U2P.s:60     .text.vListInitialiseItem:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclj9U2P.s:67     .text.vListInitialiseItem:0000000000000000 vListInitialiseItem
C:\Users\User\AppData\Local\Temp\cclj9U2P.s:87     .text.vListInsertEnd:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclj9U2P.s:94     .text.vListInsertEnd:0000000000000000 vListInsertEnd
C:\Users\User\AppData\Local\Temp\cclj9U2P.s:139    .text.vListInsert:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclj9U2P.s:146    .text.vListInsert:0000000000000000 vListInsert
C:\Users\User\AppData\Local\Temp\cclj9U2P.s:234    .text.uxListRemove:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\cclj9U2P.s:241    .text.uxListRemove:0000000000000000 uxListRemove

NO UNDEFINED SYMBOLS
