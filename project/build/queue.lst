ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"queue.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvIsQueueFull,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	prvIsQueueFull:
  24              	.LVL0:
  25              	.LFB24:
  26              		.file 1 "Src/queue.c"
   1:Src/queue.c   **** /*
   2:Src/queue.c   ****  * FreeRTOS Kernel V10.4.6
   3:Src/queue.c   ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Src/queue.c   ****  *
   5:Src/queue.c   ****  * SPDX-License-Identifier: MIT
   6:Src/queue.c   ****  *
   7:Src/queue.c   ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Src/queue.c   ****  * this software and associated documentation files (the "Software"), to deal in
   9:Src/queue.c   ****  * the Software without restriction, including without limitation the rights to
  10:Src/queue.c   ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Src/queue.c   ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Src/queue.c   ****  * subject to the following conditions:
  13:Src/queue.c   ****  *
  14:Src/queue.c   ****  * The above copyright notice and this permission notice shall be included in all
  15:Src/queue.c   ****  * copies or substantial portions of the Software.
  16:Src/queue.c   ****  *
  17:Src/queue.c   ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Src/queue.c   ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Src/queue.c   ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Src/queue.c   ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Src/queue.c   ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Src/queue.c   ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Src/queue.c   ****  *
  24:Src/queue.c   ****  * https://www.FreeRTOS.org
  25:Src/queue.c   ****  * https://github.com/FreeRTOS
  26:Src/queue.c   ****  *
  27:Src/queue.c   ****  */
  28:Src/queue.c   **** 
  29:Src/queue.c   **** #include <stdlib.h>
  30:Src/queue.c   **** #include <string.h>
  31:Src/queue.c   **** 
  32:Src/queue.c   **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 2


  33:Src/queue.c   ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:Src/queue.c   ****  * task.h is included from an application file. */
  35:Src/queue.c   **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Src/queue.c   **** 
  37:Src/queue.c   **** #include "FreeRTOS.h"
  38:Src/queue.c   **** #include "task.h"
  39:Src/queue.c   **** #include "queue.h"
  40:Src/queue.c   **** 
  41:Src/queue.c   **** #if ( configUSE_CO_ROUTINES == 1 )
  42:Src/queue.c   ****     #include "croutine.h"
  43:Src/queue.c   **** #endif
  44:Src/queue.c   **** 
  45:Src/queue.c   **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:Src/queue.c   ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:Src/queue.c   ****  * for the header files above, but not in this file, in order to generate the
  48:Src/queue.c   ****  * correct privileged Vs unprivileged linkage and placement. */
  49:Src/queue.c   **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  50:Src/queue.c   **** 
  51:Src/queue.c   **** 
  52:Src/queue.c   **** /* Constants used with the cRxLock and cTxLock structure members. */
  53:Src/queue.c   **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  54:Src/queue.c   **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  55:Src/queue.c   **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  56:Src/queue.c   **** 
  57:Src/queue.c   **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  58:Src/queue.c   ****  * pcTail members are used as pointers into the queue storage area.  When the
  59:Src/queue.c   ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  60:Src/queue.c   ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  61:Src/queue.c   ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  62:Src/queue.c   ****  * names to the pcHead and structure member to ensure the readability of the code
  63:Src/queue.c   ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  64:Src/queue.c   ****  * a union as their usage is mutually exclusive dependent on what the queue is
  65:Src/queue.c   ****  * being used for. */
  66:Src/queue.c   **** #define uxQueueType               pcHead
  67:Src/queue.c   **** #define queueQUEUE_IS_MUTEX       NULL
  68:Src/queue.c   **** 
  69:Src/queue.c   **** typedef struct QueuePointers
  70:Src/queue.c   **** {
  71:Src/queue.c   ****     int8_t * pcTail;     /*< Points to the byte at the end of the queue storage area.  Once more by
  72:Src/queue.c   ****     int8_t * pcReadFrom; /*< Points to the last place that a queued item was read from when the str
  73:Src/queue.c   **** } QueuePointers_t;
  74:Src/queue.c   **** 
  75:Src/queue.c   **** typedef struct SemaphoreData
  76:Src/queue.c   **** {
  77:Src/queue.c   ****     TaskHandle_t xMutexHolder;        /*< The handle of the task that holds the mutex. */
  78:Src/queue.c   ****     UBaseType_t uxRecursiveCallCount; /*< Maintains a count of the number of times a recursive mute
  79:Src/queue.c   **** } SemaphoreData_t;
  80:Src/queue.c   **** 
  81:Src/queue.c   **** /* Semaphores do not actually store or copy data, so have an item size of
  82:Src/queue.c   ****  * zero. */
  83:Src/queue.c   **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  84:Src/queue.c   **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  85:Src/queue.c   **** 
  86:Src/queue.c   **** #if ( configUSE_PREEMPTION == 0 )
  87:Src/queue.c   **** 
  88:Src/queue.c   **** /* If the cooperative scheduler is being used then a yield should not be
  89:Src/queue.c   ****  * performed just because a higher priority task has been woken. */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 3


  90:Src/queue.c   ****     #define queueYIELD_IF_USING_PREEMPTION()
  91:Src/queue.c   **** #else
  92:Src/queue.c   ****     #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  93:Src/queue.c   **** #endif
  94:Src/queue.c   **** 
  95:Src/queue.c   **** /*
  96:Src/queue.c   ****  * Definition of the queue used by the scheduler.
  97:Src/queue.c   ****  * Items are queued by copy, not reference.  See the following link for the
  98:Src/queue.c   ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
  99:Src/queue.c   ****  */
 100:Src/queue.c   **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
 101:Src/queue.c   **** {
 102:Src/queue.c   ****     int8_t * pcHead;           /*< Points to the beginning of the queue storage area. */
 103:Src/queue.c   ****     int8_t * pcWriteTo;        /*< Points to the free next place in the storage area. */
 104:Src/queue.c   **** 
 105:Src/queue.c   ****     union
 106:Src/queue.c   ****     {
 107:Src/queue.c   ****         QueuePointers_t xQueue;     /*< Data required exclusively when this structure is used as a 
 108:Src/queue.c   ****         SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a 
 109:Src/queue.c   ****     } u;
 110:Src/queue.c   **** 
 111:Src/queue.c   ****     List_t xTasksWaitingToSend;             /*< List of tasks that are blocked waiting to post onto
 112:Src/queue.c   ****     List_t xTasksWaitingToReceive;          /*< List of tasks that are blocked waiting to read from
 113:Src/queue.c   **** 
 114:Src/queue.c   ****     volatile UBaseType_t uxMessagesWaiting; /*< The number of items currently in the queue. */
 115:Src/queue.c   ****     UBaseType_t uxLength;                   /*< The length of the queue defined as the number of it
 116:Src/queue.c   ****     UBaseType_t uxItemSize;                 /*< The size of each items that the queue will hold. */
 117:Src/queue.c   **** 
 118:Src/queue.c   ****     volatile int8_t cRxLock;                /*< Stores the number of items received from the queue 
 119:Src/queue.c   ****     volatile int8_t cTxLock;                /*< Stores the number of items transmitted to the queue
 120:Src/queue.c   **** 
 121:Src/queue.c   ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 122:Src/queue.c   ****         uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the memory used by the queue was static
 123:Src/queue.c   ****     #endif
 124:Src/queue.c   **** 
 125:Src/queue.c   ****     #if ( configUSE_QUEUE_SETS == 1 )
 126:Src/queue.c   ****         struct QueueDefinition * pxQueueSetContainer;
 127:Src/queue.c   ****     #endif
 128:Src/queue.c   **** 
 129:Src/queue.c   ****     #if ( configUSE_TRACE_FACILITY == 1 )
 130:Src/queue.c   ****         UBaseType_t uxQueueNumber;
 131:Src/queue.c   ****         uint8_t ucQueueType;
 132:Src/queue.c   ****     #endif
 133:Src/queue.c   **** } xQUEUE;
 134:Src/queue.c   **** 
 135:Src/queue.c   **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 136:Src/queue.c   ****  * name below to enable the use of older kernel aware debuggers. */
 137:Src/queue.c   **** typedef xQUEUE Queue_t;
 138:Src/queue.c   **** 
 139:Src/queue.c   **** /*-----------------------------------------------------------*/
 140:Src/queue.c   **** 
 141:Src/queue.c   **** /*
 142:Src/queue.c   ****  * The queue registry is just a means for kernel aware debuggers to locate
 143:Src/queue.c   ****  * queue structures.  It has no other purpose so is an optional component.
 144:Src/queue.c   ****  */
 145:Src/queue.c   **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 146:Src/queue.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 4


 147:Src/queue.c   **** /* The type stored within the queue registry array.  This allows a name
 148:Src/queue.c   ****  * to be assigned to each queue making kernel aware debugging a little
 149:Src/queue.c   ****  * more user friendly. */
 150:Src/queue.c   ****     typedef struct QUEUE_REGISTRY_ITEM
 151:Src/queue.c   ****     {
 152:Src/queue.c   ****         const char * pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and s
 153:Src/queue.c   ****         QueueHandle_t xHandle;
 154:Src/queue.c   ****     } xQueueRegistryItem;
 155:Src/queue.c   **** 
 156:Src/queue.c   **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 157:Src/queue.c   ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 158:Src/queue.c   ****  * debuggers. */
 159:Src/queue.c   ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 160:Src/queue.c   **** 
 161:Src/queue.c   **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 162:Src/queue.c   ****  * The pcQueueName member of a structure being NULL is indicative of the
 163:Src/queue.c   ****  * array position being vacant. */
 164:Src/queue.c   ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 165:Src/queue.c   **** 
 166:Src/queue.c   **** #endif /* configQUEUE_REGISTRY_SIZE */
 167:Src/queue.c   **** 
 168:Src/queue.c   **** /*
 169:Src/queue.c   ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 170:Src/queue.c   ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 171:Src/queue.c   ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 172:Src/queue.c   ****  * queue is locked it will instead increment the appropriate queue lock count
 173:Src/queue.c   ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 174:Src/queue.c   ****  * these lock counts are inspected, and the appropriate action taken.
 175:Src/queue.c   ****  */
 176:Src/queue.c   **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 177:Src/queue.c   **** 
 178:Src/queue.c   **** /*
 179:Src/queue.c   ****  * Uses a critical section to determine if there is any data in a queue.
 180:Src/queue.c   ****  *
 181:Src/queue.c   ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 182:Src/queue.c   ****  */
 183:Src/queue.c   **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 184:Src/queue.c   **** 
 185:Src/queue.c   **** /*
 186:Src/queue.c   ****  * Uses a critical section to determine if there is any space in a queue.
 187:Src/queue.c   ****  *
 188:Src/queue.c   ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 189:Src/queue.c   ****  */
 190:Src/queue.c   **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 191:Src/queue.c   **** 
 192:Src/queue.c   **** /*
 193:Src/queue.c   ****  * Copies an item into the queue, either at the front of the queue or the
 194:Src/queue.c   ****  * back of the queue.
 195:Src/queue.c   ****  */
 196:Src/queue.c   **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 197:Src/queue.c   ****                                       const void * pvItemToQueue,
 198:Src/queue.c   ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 199:Src/queue.c   **** 
 200:Src/queue.c   **** /*
 201:Src/queue.c   ****  * Copies an item out of a queue.
 202:Src/queue.c   ****  */
 203:Src/queue.c   **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 5


 204:Src/queue.c   ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 205:Src/queue.c   **** 
 206:Src/queue.c   **** #if ( configUSE_QUEUE_SETS == 1 )
 207:Src/queue.c   **** 
 208:Src/queue.c   **** /*
 209:Src/queue.c   ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 210:Src/queue.c   ****  * the queue set that the queue contains data.
 211:Src/queue.c   ****  */
 212:Src/queue.c   ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 213:Src/queue.c   **** #endif
 214:Src/queue.c   **** 
 215:Src/queue.c   **** /*
 216:Src/queue.c   ****  * Called after a Queue_t structure has been allocated either statically or
 217:Src/queue.c   ****  * dynamically to fill in the structure's members.
 218:Src/queue.c   ****  */
 219:Src/queue.c   **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 220:Src/queue.c   ****                                    const UBaseType_t uxItemSize,
 221:Src/queue.c   ****                                    uint8_t * pucQueueStorage,
 222:Src/queue.c   ****                                    const uint8_t ucQueueType,
 223:Src/queue.c   ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 224:Src/queue.c   **** 
 225:Src/queue.c   **** /*
 226:Src/queue.c   ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 227:Src/queue.c   ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 228:Src/queue.c   ****  * as a mutex.
 229:Src/queue.c   ****  */
 230:Src/queue.c   **** #if ( configUSE_MUTEXES == 1 )
 231:Src/queue.c   ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 232:Src/queue.c   **** #endif
 233:Src/queue.c   **** 
 234:Src/queue.c   **** #if ( configUSE_MUTEXES == 1 )
 235:Src/queue.c   **** 
 236:Src/queue.c   **** /*
 237:Src/queue.c   ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 238:Src/queue.c   ****  * priority, but the waiting task times out, then the holder should
 239:Src/queue.c   ****  * disinherit the priority - but only down to the highest priority of any
 240:Src/queue.c   ****  * other tasks that are waiting for the same mutex.  This function returns
 241:Src/queue.c   ****  * that priority.
 242:Src/queue.c   ****  */
 243:Src/queue.c   ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 244:Src/queue.c   **** #endif
 245:Src/queue.c   **** /*-----------------------------------------------------------*/
 246:Src/queue.c   **** 
 247:Src/queue.c   **** /*
 248:Src/queue.c   ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 249:Src/queue.c   ****  * accessing the queue event lists.
 250:Src/queue.c   ****  */
 251:Src/queue.c   **** #define prvLockQueue( pxQueue )                            \
 252:Src/queue.c   ****     taskENTER_CRITICAL();                                  \
 253:Src/queue.c   ****     {                                                      \
 254:Src/queue.c   ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 255:Src/queue.c   ****         {                                                  \
 256:Src/queue.c   ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 257:Src/queue.c   ****         }                                                  \
 258:Src/queue.c   ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 259:Src/queue.c   ****         {                                                  \
 260:Src/queue.c   ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 6


 261:Src/queue.c   ****         }                                                  \
 262:Src/queue.c   ****     }                                                      \
 263:Src/queue.c   ****     taskEXIT_CRITICAL()
 264:Src/queue.c   **** /*-----------------------------------------------------------*/
 265:Src/queue.c   **** 
 266:Src/queue.c   **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 267:Src/queue.c   ****                                BaseType_t xNewQueue )
 268:Src/queue.c   **** {
 269:Src/queue.c   ****     BaseType_t xReturn = pdPASS;
 270:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 271:Src/queue.c   **** 
 272:Src/queue.c   ****     configASSERT( pxQueue );
 273:Src/queue.c   **** 
 274:Src/queue.c   ****     if( ( pxQueue != NULL ) &&
 275:Src/queue.c   ****         ( pxQueue->uxLength >= 1U ) &&
 276:Src/queue.c   ****         /* Check for multiplication overflow. */
 277:Src/queue.c   ****         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 278:Src/queue.c   ****     {
 279:Src/queue.c   ****         taskENTER_CRITICAL();
 280:Src/queue.c   ****         {
 281:Src/queue.c   ****             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize 
 282:Src/queue.c   ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 283:Src/queue.c   ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 284:Src/queue.c   ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 285:Src/queue.c   ****             pxQueue->cRxLock = queueUNLOCKED;
 286:Src/queue.c   ****             pxQueue->cTxLock = queueUNLOCKED;
 287:Src/queue.c   **** 
 288:Src/queue.c   ****             if( xNewQueue == pdFALSE )
 289:Src/queue.c   ****             {
 290:Src/queue.c   ****                 /* If there are tasks blocked waiting to read from the queue, then
 291:Src/queue.c   ****                  * the tasks will remain blocked as after this function exits the queue
 292:Src/queue.c   ****                  * will still be empty.  If there are tasks blocked waiting to write to
 293:Src/queue.c   ****                  * the queue, then one should be unblocked as after this function exits
 294:Src/queue.c   ****                  * it will be possible to write to it. */
 295:Src/queue.c   ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 296:Src/queue.c   ****                 {
 297:Src/queue.c   ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 298:Src/queue.c   ****                     {
 299:Src/queue.c   ****                         queueYIELD_IF_USING_PREEMPTION();
 300:Src/queue.c   ****                     }
 301:Src/queue.c   ****                     else
 302:Src/queue.c   ****                     {
 303:Src/queue.c   ****                         mtCOVERAGE_TEST_MARKER();
 304:Src/queue.c   ****                     }
 305:Src/queue.c   ****                 }
 306:Src/queue.c   ****                 else
 307:Src/queue.c   ****                 {
 308:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
 309:Src/queue.c   ****                 }
 310:Src/queue.c   ****             }
 311:Src/queue.c   ****             else
 312:Src/queue.c   ****             {
 313:Src/queue.c   ****                 /* Ensure the event queues start in the correct state. */
 314:Src/queue.c   ****                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 315:Src/queue.c   ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 316:Src/queue.c   ****             }
 317:Src/queue.c   ****         }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 7


 318:Src/queue.c   ****         taskEXIT_CRITICAL();
 319:Src/queue.c   ****     }
 320:Src/queue.c   ****     else
 321:Src/queue.c   ****     {
 322:Src/queue.c   ****         xReturn = pdFAIL;
 323:Src/queue.c   ****     }
 324:Src/queue.c   **** 
 325:Src/queue.c   ****     configASSERT( xReturn != pdFAIL );
 326:Src/queue.c   **** 
 327:Src/queue.c   ****     /* A value is returned for calling semantic consistency with previous
 328:Src/queue.c   ****      * versions. */
 329:Src/queue.c   ****     return xReturn;
 330:Src/queue.c   **** }
 331:Src/queue.c   **** /*-----------------------------------------------------------*/
 332:Src/queue.c   **** 
 333:Src/queue.c   **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 334:Src/queue.c   **** 
 335:Src/queue.c   ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 336:Src/queue.c   ****                                              const UBaseType_t uxItemSize,
 337:Src/queue.c   ****                                              uint8_t * pucQueueStorage,
 338:Src/queue.c   ****                                              StaticQueue_t * pxStaticQueue,
 339:Src/queue.c   ****                                              const uint8_t ucQueueType )
 340:Src/queue.c   ****     {
 341:Src/queue.c   ****         Queue_t * pxNewQueue = NULL;
 342:Src/queue.c   **** 
 343:Src/queue.c   ****         /* The StaticQueue_t structure and the queue storage area must be
 344:Src/queue.c   ****          * supplied. */
 345:Src/queue.c   ****         configASSERT( pxStaticQueue );
 346:Src/queue.c   **** 
 347:Src/queue.c   ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 348:Src/queue.c   ****             ( pxStaticQueue != NULL ) &&
 349:Src/queue.c   **** 
 350:Src/queue.c   ****             /* A queue storage area should be provided if the item size is not 0, and
 351:Src/queue.c   ****              * should not be provided if the item size is 0. */
 352:Src/queue.c   ****             ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 353:Src/queue.c   ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 354:Src/queue.c   ****         {
 355:Src/queue.c   ****             #if ( configASSERT_DEFINED == 1 )
 356:Src/queue.c   ****                 {
 357:Src/queue.c   ****                     /* Sanity check that the size of the structure used to declare a
 358:Src/queue.c   ****                      * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 359:Src/queue.c   ****                      * the real queue and semaphore structures. */
 360:Src/queue.c   ****                     volatile size_t xSize = sizeof( StaticQueue_t );
 361:Src/queue.c   **** 
 362:Src/queue.c   ****                     /* This assertion cannot be branch covered in unit tests */
 363:Src/queue.c   ****                     configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 364:Src/queue.c   ****                     ( void ) xSize;                             /* Keeps lint quiet when configASSE
 365:Src/queue.c   ****                 }
 366:Src/queue.c   ****             #endif /* configASSERT_DEFINED */
 367:Src/queue.c   **** 
 368:Src/queue.c   ****             /* The address of a statically allocated queue was passed in, use it.
 369:Src/queue.c   ****              * The address of a statically allocated storage area was also passed in
 370:Src/queue.c   ****              * but is already set. */
 371:Src/queue.c   ****             pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the
 372:Src/queue.c   **** 
 373:Src/queue.c   ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 374:Src/queue.c   ****                 {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 8


 375:Src/queue.c   ****                     /* Queues can be allocated wither statically or dynamically, so
 376:Src/queue.c   ****                      * note this queue was allocated statically in case the queue is
 377:Src/queue.c   ****                      * later deleted. */
 378:Src/queue.c   ****                     pxNewQueue->ucStaticallyAllocated = pdTRUE;
 379:Src/queue.c   ****                 }
 380:Src/queue.c   ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 381:Src/queue.c   **** 
 382:Src/queue.c   ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 383:Src/queue.c   ****         }
 384:Src/queue.c   ****         else
 385:Src/queue.c   ****         {
 386:Src/queue.c   ****             configASSERT( pxNewQueue );
 387:Src/queue.c   ****             mtCOVERAGE_TEST_MARKER();
 388:Src/queue.c   ****         }
 389:Src/queue.c   **** 
 390:Src/queue.c   ****         return pxNewQueue;
 391:Src/queue.c   ****     }
 392:Src/queue.c   **** 
 393:Src/queue.c   **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 394:Src/queue.c   **** /*-----------------------------------------------------------*/
 395:Src/queue.c   **** 
 396:Src/queue.c   **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 397:Src/queue.c   **** 
 398:Src/queue.c   ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 399:Src/queue.c   ****                                        const UBaseType_t uxItemSize,
 400:Src/queue.c   ****                                        const uint8_t ucQueueType )
 401:Src/queue.c   ****     {
 402:Src/queue.c   ****         Queue_t * pxNewQueue = NULL;
 403:Src/queue.c   ****         size_t xQueueSizeInBytes;
 404:Src/queue.c   ****         uint8_t * pucQueueStorage;
 405:Src/queue.c   **** 
 406:Src/queue.c   ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 407:Src/queue.c   ****             /* Check for multiplication overflow. */
 408:Src/queue.c   ****             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 409:Src/queue.c   ****             /* Check for addition overflow. */
 410:Src/queue.c   ****             ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 411:Src/queue.c   ****         {
 412:Src/queue.c   ****             /* Allocate enough space to hold the maximum number of items that
 413:Src/queue.c   ****              * can be in the queue at any time.  It is valid for uxItemSize to be
 414:Src/queue.c   ****              * zero in the case the queue is used as a semaphore. */
 415:Src/queue.c   ****             xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA excep
 416:Src/queue.c   **** 
 417:Src/queue.c   ****             /* Allocate the queue and storage area.  Justification for MISRA
 418:Src/queue.c   ****              * deviation as follows:  pvPortMalloc() always ensures returned memory
 419:Src/queue.c   ****              * blocks are aligned per the requirements of the MCU stack.  In this case
 420:Src/queue.c   ****              * pvPortMalloc() must return a pointer that is guaranteed to meet the
 421:Src/queue.c   ****              * alignment requirements of the Queue_t structure - which in this case
 422:Src/queue.c   ****              * is an int8_t *.  Therefore, whenever the stack alignment requirements
 423:Src/queue.c   ****              * are greater than or equal to the pointer to char requirements the cast
 424:Src/queue.c   ****              * is safe.  In other cases alignment requirements are not strict (one or
 425:Src/queue.c   ****              * two bytes). */
 426:Src/queue.c   ****             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lin
 427:Src/queue.c   **** 
 428:Src/queue.c   ****             if( pxNewQueue != NULL )
 429:Src/queue.c   ****             {
 430:Src/queue.c   ****                 /* Jump past the queue structure to find the location of the queue
 431:Src/queue.c   ****                  * storage area. */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 9


 432:Src/queue.c   ****                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 433:Src/queue.c   ****                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on c
 434:Src/queue.c   **** 
 435:Src/queue.c   ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 436:Src/queue.c   ****                     {
 437:Src/queue.c   ****                         /* Queues can be created either statically or dynamically, so
 438:Src/queue.c   ****                          * note this task was created dynamically in case it is later
 439:Src/queue.c   ****                          * deleted. */
 440:Src/queue.c   ****                         pxNewQueue->ucStaticallyAllocated = pdFALSE;
 441:Src/queue.c   ****                     }
 442:Src/queue.c   ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 443:Src/queue.c   **** 
 444:Src/queue.c   ****                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxN
 445:Src/queue.c   ****             }
 446:Src/queue.c   ****             else
 447:Src/queue.c   ****             {
 448:Src/queue.c   ****                 traceQUEUE_CREATE_FAILED( ucQueueType );
 449:Src/queue.c   ****                 mtCOVERAGE_TEST_MARKER();
 450:Src/queue.c   ****             }
 451:Src/queue.c   ****         }
 452:Src/queue.c   ****         else
 453:Src/queue.c   ****         {
 454:Src/queue.c   ****             configASSERT( pxNewQueue );
 455:Src/queue.c   ****             mtCOVERAGE_TEST_MARKER();
 456:Src/queue.c   ****         }
 457:Src/queue.c   **** 
 458:Src/queue.c   ****         return pxNewQueue;
 459:Src/queue.c   ****     }
 460:Src/queue.c   **** 
 461:Src/queue.c   **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 462:Src/queue.c   **** /*-----------------------------------------------------------*/
 463:Src/queue.c   **** 
 464:Src/queue.c   **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 465:Src/queue.c   ****                                    const UBaseType_t uxItemSize,
 466:Src/queue.c   ****                                    uint8_t * pucQueueStorage,
 467:Src/queue.c   ****                                    const uint8_t ucQueueType,
 468:Src/queue.c   ****                                    Queue_t * pxNewQueue )
 469:Src/queue.c   **** {
 470:Src/queue.c   ****     /* Remove compiler warnings about unused parameters should
 471:Src/queue.c   ****      * configUSE_TRACE_FACILITY not be set to 1. */
 472:Src/queue.c   ****     ( void ) ucQueueType;
 473:Src/queue.c   **** 
 474:Src/queue.c   ****     if( uxItemSize == ( UBaseType_t ) 0 )
 475:Src/queue.c   ****     {
 476:Src/queue.c   ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 477:Src/queue.c   ****          * be set to NULL because NULL is used as a key to say the queue is used as
 478:Src/queue.c   ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 479:Src/queue.c   ****          * value that is known to be within the memory map. */
 480:Src/queue.c   ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 481:Src/queue.c   ****     }
 482:Src/queue.c   ****     else
 483:Src/queue.c   ****     {
 484:Src/queue.c   ****         /* Set the head to the start of the queue storage area. */
 485:Src/queue.c   ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 486:Src/queue.c   ****     }
 487:Src/queue.c   **** 
 488:Src/queue.c   ****     /* Initialise the queue members as described where the queue type is
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 10


 489:Src/queue.c   ****      * defined. */
 490:Src/queue.c   ****     pxNewQueue->uxLength = uxQueueLength;
 491:Src/queue.c   ****     pxNewQueue->uxItemSize = uxItemSize;
 492:Src/queue.c   ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 493:Src/queue.c   **** 
 494:Src/queue.c   ****     #if ( configUSE_TRACE_FACILITY == 1 )
 495:Src/queue.c   ****         {
 496:Src/queue.c   ****             pxNewQueue->ucQueueType = ucQueueType;
 497:Src/queue.c   ****         }
 498:Src/queue.c   ****     #endif /* configUSE_TRACE_FACILITY */
 499:Src/queue.c   **** 
 500:Src/queue.c   ****     #if ( configUSE_QUEUE_SETS == 1 )
 501:Src/queue.c   ****         {
 502:Src/queue.c   ****             pxNewQueue->pxQueueSetContainer = NULL;
 503:Src/queue.c   ****         }
 504:Src/queue.c   ****     #endif /* configUSE_QUEUE_SETS */
 505:Src/queue.c   **** 
 506:Src/queue.c   ****     traceQUEUE_CREATE( pxNewQueue );
 507:Src/queue.c   **** }
 508:Src/queue.c   **** /*-----------------------------------------------------------*/
 509:Src/queue.c   **** 
 510:Src/queue.c   **** #if ( configUSE_MUTEXES == 1 )
 511:Src/queue.c   **** 
 512:Src/queue.c   ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 513:Src/queue.c   ****     {
 514:Src/queue.c   ****         if( pxNewQueue != NULL )
 515:Src/queue.c   ****         {
 516:Src/queue.c   ****             /* The queue create function will set all the queue structure members
 517:Src/queue.c   ****             * correctly for a generic queue, but this function is creating a
 518:Src/queue.c   ****             * mutex.  Overwrite those members that need to be set differently -
 519:Src/queue.c   ****             * in particular the information required for priority inheritance. */
 520:Src/queue.c   ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 521:Src/queue.c   ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 522:Src/queue.c   **** 
 523:Src/queue.c   ****             /* In case this is a recursive mutex. */
 524:Src/queue.c   ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 525:Src/queue.c   **** 
 526:Src/queue.c   ****             traceCREATE_MUTEX( pxNewQueue );
 527:Src/queue.c   **** 
 528:Src/queue.c   ****             /* Start with the semaphore in the expected state. */
 529:Src/queue.c   ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 530:Src/queue.c   ****         }
 531:Src/queue.c   ****         else
 532:Src/queue.c   ****         {
 533:Src/queue.c   ****             traceCREATE_MUTEX_FAILED();
 534:Src/queue.c   ****         }
 535:Src/queue.c   ****     }
 536:Src/queue.c   **** 
 537:Src/queue.c   **** #endif /* configUSE_MUTEXES */
 538:Src/queue.c   **** /*-----------------------------------------------------------*/
 539:Src/queue.c   **** 
 540:Src/queue.c   **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 541:Src/queue.c   **** 
 542:Src/queue.c   ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 543:Src/queue.c   ****     {
 544:Src/queue.c   ****         QueueHandle_t xNewQueue;
 545:Src/queue.c   ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 11


 546:Src/queue.c   **** 
 547:Src/queue.c   ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 548:Src/queue.c   ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 549:Src/queue.c   **** 
 550:Src/queue.c   ****         return xNewQueue;
 551:Src/queue.c   ****     }
 552:Src/queue.c   **** 
 553:Src/queue.c   **** #endif /* configUSE_MUTEXES */
 554:Src/queue.c   **** /*-----------------------------------------------------------*/
 555:Src/queue.c   **** 
 556:Src/queue.c   **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 557:Src/queue.c   **** 
 558:Src/queue.c   ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 559:Src/queue.c   ****                                            StaticQueue_t * pxStaticQueue )
 560:Src/queue.c   ****     {
 561:Src/queue.c   ****         QueueHandle_t xNewQueue;
 562:Src/queue.c   ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 563:Src/queue.c   **** 
 564:Src/queue.c   ****         /* Prevent compiler warnings about unused parameters if
 565:Src/queue.c   ****          * configUSE_TRACE_FACILITY does not equal 1. */
 566:Src/queue.c   ****         ( void ) ucQueueType;
 567:Src/queue.c   **** 
 568:Src/queue.c   ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 569:Src/queue.c   ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 570:Src/queue.c   **** 
 571:Src/queue.c   ****         return xNewQueue;
 572:Src/queue.c   ****     }
 573:Src/queue.c   **** 
 574:Src/queue.c   **** #endif /* configUSE_MUTEXES */
 575:Src/queue.c   **** /*-----------------------------------------------------------*/
 576:Src/queue.c   **** 
 577:Src/queue.c   **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 578:Src/queue.c   **** 
 579:Src/queue.c   ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 580:Src/queue.c   ****     {
 581:Src/queue.c   ****         TaskHandle_t pxReturn;
 582:Src/queue.c   ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 583:Src/queue.c   **** 
 584:Src/queue.c   ****         configASSERT( xSemaphore );
 585:Src/queue.c   **** 
 586:Src/queue.c   ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 587:Src/queue.c   ****          * be called directly.  Note:  This is a good way of determining if the
 588:Src/queue.c   ****          * calling task is the mutex holder, but not a good way of determining the
 589:Src/queue.c   ****          * identity of the mutex holder, as the holder may change between the
 590:Src/queue.c   ****          * following critical section exiting and the function returning. */
 591:Src/queue.c   ****         taskENTER_CRITICAL();
 592:Src/queue.c   ****         {
 593:Src/queue.c   ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 594:Src/queue.c   ****             {
 595:Src/queue.c   ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 596:Src/queue.c   ****             }
 597:Src/queue.c   ****             else
 598:Src/queue.c   ****             {
 599:Src/queue.c   ****                 pxReturn = NULL;
 600:Src/queue.c   ****             }
 601:Src/queue.c   ****         }
 602:Src/queue.c   ****         taskEXIT_CRITICAL();
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 12


 603:Src/queue.c   **** 
 604:Src/queue.c   ****         return pxReturn;
 605:Src/queue.c   ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 606:Src/queue.c   **** 
 607:Src/queue.c   **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 608:Src/queue.c   **** /*-----------------------------------------------------------*/
 609:Src/queue.c   **** 
 610:Src/queue.c   **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 611:Src/queue.c   **** 
 612:Src/queue.c   ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 613:Src/queue.c   ****     {
 614:Src/queue.c   ****         TaskHandle_t pxReturn;
 615:Src/queue.c   **** 
 616:Src/queue.c   ****         configASSERT( xSemaphore );
 617:Src/queue.c   **** 
 618:Src/queue.c   ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 619:Src/queue.c   ****          * holder should not change in an ISR, and therefore a critical section is
 620:Src/queue.c   ****          * not required here. */
 621:Src/queue.c   ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 622:Src/queue.c   ****         {
 623:Src/queue.c   ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 624:Src/queue.c   ****         }
 625:Src/queue.c   ****         else
 626:Src/queue.c   ****         {
 627:Src/queue.c   ****             pxReturn = NULL;
 628:Src/queue.c   ****         }
 629:Src/queue.c   **** 
 630:Src/queue.c   ****         return pxReturn;
 631:Src/queue.c   ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 632:Src/queue.c   **** 
 633:Src/queue.c   **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 634:Src/queue.c   **** /*-----------------------------------------------------------*/
 635:Src/queue.c   **** 
 636:Src/queue.c   **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 637:Src/queue.c   **** 
 638:Src/queue.c   ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 639:Src/queue.c   ****     {
 640:Src/queue.c   ****         BaseType_t xReturn;
 641:Src/queue.c   ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 642:Src/queue.c   **** 
 643:Src/queue.c   ****         configASSERT( pxMutex );
 644:Src/queue.c   **** 
 645:Src/queue.c   ****         /* If this is the task that holds the mutex then xMutexHolder will not
 646:Src/queue.c   ****          * change outside of this task.  If this task does not hold the mutex then
 647:Src/queue.c   ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 648:Src/queue.c   ****          * this is the only condition we are interested in it does not matter if
 649:Src/queue.c   ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 650:Src/queue.c   ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 651:Src/queue.c   ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 652:Src/queue.c   ****         {
 653:Src/queue.c   ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 654:Src/queue.c   **** 
 655:Src/queue.c   ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 656:Src/queue.c   ****              * the task handle, therefore no underflow check is required.  Also,
 657:Src/queue.c   ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 658:Src/queue.c   ****              * there can only be one, no mutual exclusion is required to modify the
 659:Src/queue.c   ****              * uxRecursiveCallCount member. */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 13


 660:Src/queue.c   ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 661:Src/queue.c   **** 
 662:Src/queue.c   ****             /* Has the recursive call count unwound to 0? */
 663:Src/queue.c   ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 664:Src/queue.c   ****             {
 665:Src/queue.c   ****                 /* Return the mutex.  This will automatically unblock any other
 666:Src/queue.c   ****                  * task that might be waiting to access the mutex. */
 667:Src/queue.c   ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 668:Src/queue.c   ****             }
 669:Src/queue.c   ****             else
 670:Src/queue.c   ****             {
 671:Src/queue.c   ****                 mtCOVERAGE_TEST_MARKER();
 672:Src/queue.c   ****             }
 673:Src/queue.c   **** 
 674:Src/queue.c   ****             xReturn = pdPASS;
 675:Src/queue.c   ****         }
 676:Src/queue.c   ****         else
 677:Src/queue.c   ****         {
 678:Src/queue.c   ****             /* The mutex cannot be given because the calling task is not the
 679:Src/queue.c   ****              * holder. */
 680:Src/queue.c   ****             xReturn = pdFAIL;
 681:Src/queue.c   **** 
 682:Src/queue.c   ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 683:Src/queue.c   ****         }
 684:Src/queue.c   **** 
 685:Src/queue.c   ****         return xReturn;
 686:Src/queue.c   ****     }
 687:Src/queue.c   **** 
 688:Src/queue.c   **** #endif /* configUSE_RECURSIVE_MUTEXES */
 689:Src/queue.c   **** /*-----------------------------------------------------------*/
 690:Src/queue.c   **** 
 691:Src/queue.c   **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 692:Src/queue.c   **** 
 693:Src/queue.c   ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
 694:Src/queue.c   ****                                          TickType_t xTicksToWait )
 695:Src/queue.c   ****     {
 696:Src/queue.c   ****         BaseType_t xReturn;
 697:Src/queue.c   ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 698:Src/queue.c   **** 
 699:Src/queue.c   ****         configASSERT( pxMutex );
 700:Src/queue.c   **** 
 701:Src/queue.c   ****         /* Comments regarding mutual exclusion as per those within
 702:Src/queue.c   ****          * xQueueGiveMutexRecursive(). */
 703:Src/queue.c   **** 
 704:Src/queue.c   ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 705:Src/queue.c   **** 
 706:Src/queue.c   ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 707:Src/queue.c   ****         {
 708:Src/queue.c   ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 709:Src/queue.c   ****             xReturn = pdPASS;
 710:Src/queue.c   ****         }
 711:Src/queue.c   ****         else
 712:Src/queue.c   ****         {
 713:Src/queue.c   ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 714:Src/queue.c   **** 
 715:Src/queue.c   ****             /* pdPASS will only be returned if the mutex was successfully
 716:Src/queue.c   ****              * obtained.  The calling task may have entered the Blocked state
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 14


 717:Src/queue.c   ****              * before reaching here. */
 718:Src/queue.c   ****             if( xReturn != pdFAIL )
 719:Src/queue.c   ****             {
 720:Src/queue.c   ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 721:Src/queue.c   ****             }
 722:Src/queue.c   ****             else
 723:Src/queue.c   ****             {
 724:Src/queue.c   ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 725:Src/queue.c   ****             }
 726:Src/queue.c   ****         }
 727:Src/queue.c   **** 
 728:Src/queue.c   ****         return xReturn;
 729:Src/queue.c   ****     }
 730:Src/queue.c   **** 
 731:Src/queue.c   **** #endif /* configUSE_RECURSIVE_MUTEXES */
 732:Src/queue.c   **** /*-----------------------------------------------------------*/
 733:Src/queue.c   **** 
 734:Src/queue.c   **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 735:Src/queue.c   **** 
 736:Src/queue.c   ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 737:Src/queue.c   ****                                                        const UBaseType_t uxInitialCount,
 738:Src/queue.c   ****                                                        StaticQueue_t * pxStaticQueue )
 739:Src/queue.c   ****     {
 740:Src/queue.c   ****         QueueHandle_t xHandle = NULL;
 741:Src/queue.c   **** 
 742:Src/queue.c   ****         if( ( uxMaxCount != 0 ) &&
 743:Src/queue.c   ****             ( uxInitialCount <= uxMaxCount ) )
 744:Src/queue.c   ****         {
 745:Src/queue.c   ****             xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL
 746:Src/queue.c   **** 
 747:Src/queue.c   ****             if( xHandle != NULL )
 748:Src/queue.c   ****             {
 749:Src/queue.c   ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 750:Src/queue.c   **** 
 751:Src/queue.c   ****                 traceCREATE_COUNTING_SEMAPHORE();
 752:Src/queue.c   ****             }
 753:Src/queue.c   ****             else
 754:Src/queue.c   ****             {
 755:Src/queue.c   ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 756:Src/queue.c   ****             }
 757:Src/queue.c   ****         }
 758:Src/queue.c   ****         else
 759:Src/queue.c   ****         {
 760:Src/queue.c   ****             configASSERT( xHandle );
 761:Src/queue.c   ****             mtCOVERAGE_TEST_MARKER();
 762:Src/queue.c   ****         }
 763:Src/queue.c   **** 
 764:Src/queue.c   ****         return xHandle;
 765:Src/queue.c   ****     }
 766:Src/queue.c   **** 
 767:Src/queue.c   **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 768:Src/queue.c   **** /*-----------------------------------------------------------*/
 769:Src/queue.c   **** 
 770:Src/queue.c   **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 771:Src/queue.c   **** 
 772:Src/queue.c   ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 773:Src/queue.c   ****                                                  const UBaseType_t uxInitialCount )
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 15


 774:Src/queue.c   ****     {
 775:Src/queue.c   ****         QueueHandle_t xHandle = NULL;
 776:Src/queue.c   **** 
 777:Src/queue.c   ****         if( ( uxMaxCount != 0 ) &&
 778:Src/queue.c   ****             ( uxInitialCount <= uxMaxCount ) )
 779:Src/queue.c   ****         {
 780:Src/queue.c   ****             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE
 781:Src/queue.c   **** 
 782:Src/queue.c   ****             if( xHandle != NULL )
 783:Src/queue.c   ****             {
 784:Src/queue.c   ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 785:Src/queue.c   **** 
 786:Src/queue.c   ****                 traceCREATE_COUNTING_SEMAPHORE();
 787:Src/queue.c   ****             }
 788:Src/queue.c   ****             else
 789:Src/queue.c   ****             {
 790:Src/queue.c   ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 791:Src/queue.c   ****             }
 792:Src/queue.c   ****         }
 793:Src/queue.c   ****         else
 794:Src/queue.c   ****         {
 795:Src/queue.c   ****             configASSERT( xHandle );
 796:Src/queue.c   ****             mtCOVERAGE_TEST_MARKER();
 797:Src/queue.c   ****         }
 798:Src/queue.c   **** 
 799:Src/queue.c   ****         return xHandle;
 800:Src/queue.c   ****     }
 801:Src/queue.c   **** 
 802:Src/queue.c   **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 803:Src/queue.c   **** /*-----------------------------------------------------------*/
 804:Src/queue.c   **** 
 805:Src/queue.c   **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 806:Src/queue.c   ****                               const void * const pvItemToQueue,
 807:Src/queue.c   ****                               TickType_t xTicksToWait,
 808:Src/queue.c   ****                               const BaseType_t xCopyPosition )
 809:Src/queue.c   **** {
 810:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 811:Src/queue.c   ****     TimeOut_t xTimeOut;
 812:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 813:Src/queue.c   **** 
 814:Src/queue.c   ****     configASSERT( pxQueue );
 815:Src/queue.c   ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 816:Src/queue.c   ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 817:Src/queue.c   ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 818:Src/queue.c   ****         {
 819:Src/queue.c   ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
 820:Src/queue.c   ****         }
 821:Src/queue.c   ****     #endif
 822:Src/queue.c   **** 
 823:Src/queue.c   ****     /*lint -save -e904 This function relaxes the coding standard somewhat to
 824:Src/queue.c   ****      * allow return statements within the function itself.  This is done in the
 825:Src/queue.c   ****      * interest of execution time efficiency. */
 826:Src/queue.c   ****     for( ; ; )
 827:Src/queue.c   ****     {
 828:Src/queue.c   ****         taskENTER_CRITICAL();
 829:Src/queue.c   ****         {
 830:Src/queue.c   ****             /* Is there room on the queue now?  The running task must be the
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 16


 831:Src/queue.c   ****              * highest priority task wanting to access the queue.  If the head item
 832:Src/queue.c   ****              * in the queue is to be overwritten then it does not matter if the
 833:Src/queue.c   ****              * queue is full. */
 834:Src/queue.c   ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 835:Src/queue.c   ****             {
 836:Src/queue.c   ****                 traceQUEUE_SEND( pxQueue );
 837:Src/queue.c   **** 
 838:Src/queue.c   ****                 #if ( configUSE_QUEUE_SETS == 1 )
 839:Src/queue.c   ****                     {
 840:Src/queue.c   ****                         const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 841:Src/queue.c   **** 
 842:Src/queue.c   ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 843:Src/queue.c   **** 
 844:Src/queue.c   ****                         if( pxQueue->pxQueueSetContainer != NULL )
 845:Src/queue.c   ****                         {
 846:Src/queue.c   ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
 847:Src/queue.c   ****                             {
 848:Src/queue.c   ****                                 /* Do not notify the queue set as an existing item
 849:Src/queue.c   ****                                  * was overwritten in the queue so the number of items
 850:Src/queue.c   ****                                  * in the queue has not changed. */
 851:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
 852:Src/queue.c   ****                             }
 853:Src/queue.c   ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 854:Src/queue.c   ****                             {
 855:Src/queue.c   ****                                 /* The queue is a member of a queue set, and posting
 856:Src/queue.c   ****                                  * to the queue set caused a higher priority task to
 857:Src/queue.c   ****                                  * unblock. A context switch is required. */
 858:Src/queue.c   ****                                 queueYIELD_IF_USING_PREEMPTION();
 859:Src/queue.c   ****                             }
 860:Src/queue.c   ****                             else
 861:Src/queue.c   ****                             {
 862:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
 863:Src/queue.c   ****                             }
 864:Src/queue.c   ****                         }
 865:Src/queue.c   ****                         else
 866:Src/queue.c   ****                         {
 867:Src/queue.c   ****                             /* If there was a task waiting for data to arrive on the
 868:Src/queue.c   ****                              * queue then unblock it now. */
 869:Src/queue.c   ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
 870:Src/queue.c   ****                             {
 871:Src/queue.c   ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
 872:Src/queue.c   ****                                 {
 873:Src/queue.c   ****                                     /* The unblocked task has a priority higher than
 874:Src/queue.c   ****                                      * our own so yield immediately.  Yes it is ok to
 875:Src/queue.c   ****                                      * do this from within the critical section - the
 876:Src/queue.c   ****                                      * kernel takes care of that. */
 877:Src/queue.c   ****                                     queueYIELD_IF_USING_PREEMPTION();
 878:Src/queue.c   ****                                 }
 879:Src/queue.c   ****                                 else
 880:Src/queue.c   ****                                 {
 881:Src/queue.c   ****                                     mtCOVERAGE_TEST_MARKER();
 882:Src/queue.c   ****                                 }
 883:Src/queue.c   ****                             }
 884:Src/queue.c   ****                             else if( xYieldRequired != pdFALSE )
 885:Src/queue.c   ****                             {
 886:Src/queue.c   ****                                 /* This path is a special case that will only get
 887:Src/queue.c   ****                                  * executed if the task was holding multiple mutexes
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 17


 888:Src/queue.c   ****                                  * and the mutexes were given back in an order that is
 889:Src/queue.c   ****                                  * different to that in which they were taken. */
 890:Src/queue.c   ****                                 queueYIELD_IF_USING_PREEMPTION();
 891:Src/queue.c   ****                             }
 892:Src/queue.c   ****                             else
 893:Src/queue.c   ****                             {
 894:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
 895:Src/queue.c   ****                             }
 896:Src/queue.c   ****                         }
 897:Src/queue.c   ****                     }
 898:Src/queue.c   ****                 #else /* configUSE_QUEUE_SETS */
 899:Src/queue.c   ****                     {
 900:Src/queue.c   ****                         xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition 
 901:Src/queue.c   **** 
 902:Src/queue.c   ****                         /* If there was a task waiting for data to arrive on the
 903:Src/queue.c   ****                          * queue then unblock it now. */
 904:Src/queue.c   ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 905:Src/queue.c   ****                         {
 906:Src/queue.c   ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 907:Src/queue.c   ****                             {
 908:Src/queue.c   ****                                 /* The unblocked task has a priority higher than
 909:Src/queue.c   ****                                  * our own so yield immediately.  Yes it is ok to do
 910:Src/queue.c   ****                                  * this from within the critical section - the kernel
 911:Src/queue.c   ****                                  * takes care of that. */
 912:Src/queue.c   ****                                 queueYIELD_IF_USING_PREEMPTION();
 913:Src/queue.c   ****                             }
 914:Src/queue.c   ****                             else
 915:Src/queue.c   ****                             {
 916:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
 917:Src/queue.c   ****                             }
 918:Src/queue.c   ****                         }
 919:Src/queue.c   ****                         else if( xYieldRequired != pdFALSE )
 920:Src/queue.c   ****                         {
 921:Src/queue.c   ****                             /* This path is a special case that will only get
 922:Src/queue.c   ****                              * executed if the task was holding multiple mutexes and
 923:Src/queue.c   ****                              * the mutexes were given back in an order that is
 924:Src/queue.c   ****                              * different to that in which they were taken. */
 925:Src/queue.c   ****                             queueYIELD_IF_USING_PREEMPTION();
 926:Src/queue.c   ****                         }
 927:Src/queue.c   ****                         else
 928:Src/queue.c   ****                         {
 929:Src/queue.c   ****                             mtCOVERAGE_TEST_MARKER();
 930:Src/queue.c   ****                         }
 931:Src/queue.c   ****                     }
 932:Src/queue.c   ****                 #endif /* configUSE_QUEUE_SETS */
 933:Src/queue.c   **** 
 934:Src/queue.c   ****                 taskEXIT_CRITICAL();
 935:Src/queue.c   ****                 return pdPASS;
 936:Src/queue.c   ****             }
 937:Src/queue.c   ****             else
 938:Src/queue.c   ****             {
 939:Src/queue.c   ****                 if( xTicksToWait == ( TickType_t ) 0 )
 940:Src/queue.c   ****                 {
 941:Src/queue.c   ****                     /* The queue was full and no block time is specified (or
 942:Src/queue.c   ****                      * the block time has expired) so leave now. */
 943:Src/queue.c   ****                     taskEXIT_CRITICAL();
 944:Src/queue.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 18


 945:Src/queue.c   ****                     /* Return to the original privilege level before exiting
 946:Src/queue.c   ****                      * the function. */
 947:Src/queue.c   ****                     traceQUEUE_SEND_FAILED( pxQueue );
 948:Src/queue.c   ****                     return errQUEUE_FULL;
 949:Src/queue.c   ****                 }
 950:Src/queue.c   ****                 else if( xEntryTimeSet == pdFALSE )
 951:Src/queue.c   ****                 {
 952:Src/queue.c   ****                     /* The queue was full and a block time was specified so
 953:Src/queue.c   ****                      * configure the timeout structure. */
 954:Src/queue.c   ****                     vTaskInternalSetTimeOutState( &xTimeOut );
 955:Src/queue.c   ****                     xEntryTimeSet = pdTRUE;
 956:Src/queue.c   ****                 }
 957:Src/queue.c   ****                 else
 958:Src/queue.c   ****                 {
 959:Src/queue.c   ****                     /* Entry time was already set. */
 960:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
 961:Src/queue.c   ****                 }
 962:Src/queue.c   ****             }
 963:Src/queue.c   ****         }
 964:Src/queue.c   ****         taskEXIT_CRITICAL();
 965:Src/queue.c   **** 
 966:Src/queue.c   ****         /* Interrupts and other tasks can send to and receive from the queue
 967:Src/queue.c   ****          * now the critical section has been exited. */
 968:Src/queue.c   **** 
 969:Src/queue.c   ****         vTaskSuspendAll();
 970:Src/queue.c   ****         prvLockQueue( pxQueue );
 971:Src/queue.c   **** 
 972:Src/queue.c   ****         /* Update the timeout state to see if it has expired yet. */
 973:Src/queue.c   ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 974:Src/queue.c   ****         {
 975:Src/queue.c   ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 976:Src/queue.c   ****             {
 977:Src/queue.c   ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 978:Src/queue.c   ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 979:Src/queue.c   **** 
 980:Src/queue.c   ****                 /* Unlocking the queue means queue events can effect the
 981:Src/queue.c   ****                  * event list. It is possible that interrupts occurring now
 982:Src/queue.c   ****                  * remove this task from the event list again - but as the
 983:Src/queue.c   ****                  * scheduler is suspended the task will go onto the pending
 984:Src/queue.c   ****                  * ready list instead of the actual ready list. */
 985:Src/queue.c   ****                 prvUnlockQueue( pxQueue );
 986:Src/queue.c   **** 
 987:Src/queue.c   ****                 /* Resuming the scheduler will move tasks from the pending
 988:Src/queue.c   ****                  * ready list into the ready list - so it is feasible that this
 989:Src/queue.c   ****                  * task is already in the ready list before it yields - in which
 990:Src/queue.c   ****                  * case the yield will not cause a context switch unless there
 991:Src/queue.c   ****                  * is also a higher priority task in the pending ready list. */
 992:Src/queue.c   ****                 if( xTaskResumeAll() == pdFALSE )
 993:Src/queue.c   ****                 {
 994:Src/queue.c   ****                     portYIELD_WITHIN_API();
 995:Src/queue.c   ****                 }
 996:Src/queue.c   ****             }
 997:Src/queue.c   ****             else
 998:Src/queue.c   ****             {
 999:Src/queue.c   ****                 /* Try again. */
1000:Src/queue.c   ****                 prvUnlockQueue( pxQueue );
1001:Src/queue.c   ****                 ( void ) xTaskResumeAll();
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 19


1002:Src/queue.c   ****             }
1003:Src/queue.c   ****         }
1004:Src/queue.c   ****         else
1005:Src/queue.c   ****         {
1006:Src/queue.c   ****             /* The timeout has expired. */
1007:Src/queue.c   ****             prvUnlockQueue( pxQueue );
1008:Src/queue.c   ****             ( void ) xTaskResumeAll();
1009:Src/queue.c   **** 
1010:Src/queue.c   ****             traceQUEUE_SEND_FAILED( pxQueue );
1011:Src/queue.c   ****             return errQUEUE_FULL;
1012:Src/queue.c   ****         }
1013:Src/queue.c   ****     } /*lint -restore */
1014:Src/queue.c   **** }
1015:Src/queue.c   **** /*-----------------------------------------------------------*/
1016:Src/queue.c   **** 
1017:Src/queue.c   **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
1018:Src/queue.c   ****                                      const void * const pvItemToQueue,
1019:Src/queue.c   ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
1020:Src/queue.c   ****                                      const BaseType_t xCopyPosition )
1021:Src/queue.c   **** {
1022:Src/queue.c   ****     BaseType_t xReturn;
1023:Src/queue.c   ****     UBaseType_t uxSavedInterruptStatus;
1024:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
1025:Src/queue.c   **** 
1026:Src/queue.c   ****     configASSERT( pxQueue );
1027:Src/queue.c   ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
1028:Src/queue.c   ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1029:Src/queue.c   **** 
1030:Src/queue.c   ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1031:Src/queue.c   ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1032:Src/queue.c   ****      * above the maximum system call priority are kept permanently enabled, even
1033:Src/queue.c   ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1034:Src/queue.c   ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1035:Src/queue.c   ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1036:Src/queue.c   ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1037:Src/queue.c   ****      * assigned a priority above the configured maximum system call priority.
1038:Src/queue.c   ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1039:Src/queue.c   ****      * that have been assigned a priority at or (logically) below the maximum
1040:Src/queue.c   ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1041:Src/queue.c   ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1042:Src/queue.c   ****      * More information (albeit Cortex-M specific) is provided on the following
1043:Src/queue.c   ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1044:Src/queue.c   ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1045:Src/queue.c   **** 
1046:Src/queue.c   ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1047:Src/queue.c   ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1048:Src/queue.c   ****      * read, instead return a flag to say whether a context switch is required or
1049:Src/queue.c   ****      * not (i.e. has a task with a higher priority than us been woken by this
1050:Src/queue.c   ****      * post). */
1051:Src/queue.c   ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1052:Src/queue.c   ****     {
1053:Src/queue.c   ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
1054:Src/queue.c   ****         {
1055:Src/queue.c   ****             const int8_t cTxLock = pxQueue->cTxLock;
1056:Src/queue.c   ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
1057:Src/queue.c   **** 
1058:Src/queue.c   ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 20


1059:Src/queue.c   **** 
1060:Src/queue.c   ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1061:Src/queue.c   ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1062:Src/queue.c   ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1063:Src/queue.c   ****              *  called here even though the disinherit function does not check if
1064:Src/queue.c   ****              *  the scheduler is suspended before accessing the ready lists. */
1065:Src/queue.c   ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1066:Src/queue.c   **** 
1067:Src/queue.c   ****             /* The event list is not altered if the queue is locked.  This will
1068:Src/queue.c   ****              * be done when the queue is unlocked later. */
1069:Src/queue.c   ****             if( cTxLock == queueUNLOCKED )
1070:Src/queue.c   ****             {
1071:Src/queue.c   ****                 #if ( configUSE_QUEUE_SETS == 1 )
1072:Src/queue.c   ****                     {
1073:Src/queue.c   ****                         if( pxQueue->pxQueueSetContainer != NULL )
1074:Src/queue.c   ****                         {
1075:Src/queue.c   ****                             if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting 
1076:Src/queue.c   ****                             {
1077:Src/queue.c   ****                                 /* Do not notify the queue set as an existing item
1078:Src/queue.c   ****                                  * was overwritten in the queue so the number of items
1079:Src/queue.c   ****                                  * in the queue has not changed. */
1080:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
1081:Src/queue.c   ****                             }
1082:Src/queue.c   ****                             else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1083:Src/queue.c   ****                             {
1084:Src/queue.c   ****                                 /* The queue is a member of a queue set, and posting
1085:Src/queue.c   ****                                  * to the queue set caused a higher priority task to
1086:Src/queue.c   ****                                  * unblock.  A context switch is required. */
1087:Src/queue.c   ****                                 if( pxHigherPriorityTaskWoken != NULL )
1088:Src/queue.c   ****                                 {
1089:Src/queue.c   ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1090:Src/queue.c   ****                                 }
1091:Src/queue.c   ****                                 else
1092:Src/queue.c   ****                                 {
1093:Src/queue.c   ****                                     mtCOVERAGE_TEST_MARKER();
1094:Src/queue.c   ****                                 }
1095:Src/queue.c   ****                             }
1096:Src/queue.c   ****                             else
1097:Src/queue.c   ****                             {
1098:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
1099:Src/queue.c   ****                             }
1100:Src/queue.c   ****                         }
1101:Src/queue.c   ****                         else
1102:Src/queue.c   ****                         {
1103:Src/queue.c   ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1104:Src/queue.c   ****                             {
1105:Src/queue.c   ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1106:Src/queue.c   ****                                 {
1107:Src/queue.c   ****                                     /* The task waiting has a higher priority so
1108:Src/queue.c   ****                                      *  record that a context switch is required. */
1109:Src/queue.c   ****                                     if( pxHigherPriorityTaskWoken != NULL )
1110:Src/queue.c   ****                                     {
1111:Src/queue.c   ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
1112:Src/queue.c   ****                                     }
1113:Src/queue.c   ****                                     else
1114:Src/queue.c   ****                                     {
1115:Src/queue.c   ****                                         mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 21


1116:Src/queue.c   ****                                     }
1117:Src/queue.c   ****                                 }
1118:Src/queue.c   ****                                 else
1119:Src/queue.c   ****                                 {
1120:Src/queue.c   ****                                     mtCOVERAGE_TEST_MARKER();
1121:Src/queue.c   ****                                 }
1122:Src/queue.c   ****                             }
1123:Src/queue.c   ****                             else
1124:Src/queue.c   ****                             {
1125:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
1126:Src/queue.c   ****                             }
1127:Src/queue.c   ****                         }
1128:Src/queue.c   ****                     }
1129:Src/queue.c   ****                 #else /* configUSE_QUEUE_SETS */
1130:Src/queue.c   ****                     {
1131:Src/queue.c   ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1132:Src/queue.c   ****                         {
1133:Src/queue.c   ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1134:Src/queue.c   ****                             {
1135:Src/queue.c   ****                                 /* The task waiting has a higher priority so record that a
1136:Src/queue.c   ****                                  * context switch is required. */
1137:Src/queue.c   ****                                 if( pxHigherPriorityTaskWoken != NULL )
1138:Src/queue.c   ****                                 {
1139:Src/queue.c   ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1140:Src/queue.c   ****                                 }
1141:Src/queue.c   ****                                 else
1142:Src/queue.c   ****                                 {
1143:Src/queue.c   ****                                     mtCOVERAGE_TEST_MARKER();
1144:Src/queue.c   ****                                 }
1145:Src/queue.c   ****                             }
1146:Src/queue.c   ****                             else
1147:Src/queue.c   ****                             {
1148:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
1149:Src/queue.c   ****                             }
1150:Src/queue.c   ****                         }
1151:Src/queue.c   ****                         else
1152:Src/queue.c   ****                         {
1153:Src/queue.c   ****                             mtCOVERAGE_TEST_MARKER();
1154:Src/queue.c   ****                         }
1155:Src/queue.c   **** 
1156:Src/queue.c   ****                         /* Not used in this path. */
1157:Src/queue.c   ****                         ( void ) uxPreviousMessagesWaiting;
1158:Src/queue.c   ****                     }
1159:Src/queue.c   ****                 #endif /* configUSE_QUEUE_SETS */
1160:Src/queue.c   ****             }
1161:Src/queue.c   ****             else
1162:Src/queue.c   ****             {
1163:Src/queue.c   ****                 /* Increment the lock count so the task that unlocks the queue
1164:Src/queue.c   ****                  * knows that data was posted while it was locked. */
1165:Src/queue.c   ****                 configASSERT( cTxLock != queueINT8_MAX );
1166:Src/queue.c   **** 
1167:Src/queue.c   ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1168:Src/queue.c   ****             }
1169:Src/queue.c   **** 
1170:Src/queue.c   ****             xReturn = pdPASS;
1171:Src/queue.c   ****         }
1172:Src/queue.c   ****         else
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 22


1173:Src/queue.c   ****         {
1174:Src/queue.c   ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1175:Src/queue.c   ****             xReturn = errQUEUE_FULL;
1176:Src/queue.c   ****         }
1177:Src/queue.c   ****     }
1178:Src/queue.c   ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1179:Src/queue.c   **** 
1180:Src/queue.c   ****     return xReturn;
1181:Src/queue.c   **** }
1182:Src/queue.c   **** /*-----------------------------------------------------------*/
1183:Src/queue.c   **** 
1184:Src/queue.c   **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1185:Src/queue.c   ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1186:Src/queue.c   **** {
1187:Src/queue.c   ****     BaseType_t xReturn;
1188:Src/queue.c   ****     UBaseType_t uxSavedInterruptStatus;
1189:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
1190:Src/queue.c   **** 
1191:Src/queue.c   ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1192:Src/queue.c   ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1193:Src/queue.c   ****      * read, instead return a flag to say whether a context switch is required or
1194:Src/queue.c   ****      * not (i.e. has a task with a higher priority than us been woken by this
1195:Src/queue.c   ****      * post). */
1196:Src/queue.c   **** 
1197:Src/queue.c   ****     configASSERT( pxQueue );
1198:Src/queue.c   **** 
1199:Src/queue.c   ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1200:Src/queue.c   ****      * if the item size is not 0. */
1201:Src/queue.c   ****     configASSERT( pxQueue->uxItemSize == 0 );
1202:Src/queue.c   **** 
1203:Src/queue.c   ****     /* Normally a mutex would not be given from an interrupt, especially if
1204:Src/queue.c   ****      * there is a mutex holder, as priority inheritance makes no sense for an
1205:Src/queue.c   ****      * interrupts, only tasks. */
1206:Src/queue.c   ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
1207:Src/queue.c   **** 
1208:Src/queue.c   ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1209:Src/queue.c   ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1210:Src/queue.c   ****      * above the maximum system call priority are kept permanently enabled, even
1211:Src/queue.c   ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1212:Src/queue.c   ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1213:Src/queue.c   ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1214:Src/queue.c   ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1215:Src/queue.c   ****      * assigned a priority above the configured maximum system call priority.
1216:Src/queue.c   ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1217:Src/queue.c   ****      * that have been assigned a priority at or (logically) below the maximum
1218:Src/queue.c   ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1219:Src/queue.c   ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1220:Src/queue.c   ****      * More information (albeit Cortex-M specific) is provided on the following
1221:Src/queue.c   ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1222:Src/queue.c   ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1223:Src/queue.c   **** 
1224:Src/queue.c   ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1225:Src/queue.c   ****     {
1226:Src/queue.c   ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1227:Src/queue.c   **** 
1228:Src/queue.c   ****         /* When the queue is used to implement a semaphore no data is ever
1229:Src/queue.c   ****          * moved through the queue but it is still valid to see if the queue 'has
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 23


1230:Src/queue.c   ****          * space'. */
1231:Src/queue.c   ****         if( uxMessagesWaiting < pxQueue->uxLength )
1232:Src/queue.c   ****         {
1233:Src/queue.c   ****             const int8_t cTxLock = pxQueue->cTxLock;
1234:Src/queue.c   **** 
1235:Src/queue.c   ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1236:Src/queue.c   **** 
1237:Src/queue.c   ****             /* A task can only have an inherited priority if it is a mutex
1238:Src/queue.c   ****              * holder - and if there is a mutex holder then the mutex cannot be
1239:Src/queue.c   ****              * given from an ISR.  As this is the ISR version of the function it
1240:Src/queue.c   ****              * can be assumed there is no mutex holder and no need to determine if
1241:Src/queue.c   ****              * priority disinheritance is needed.  Simply increase the count of
1242:Src/queue.c   ****              * messages (semaphores) available. */
1243:Src/queue.c   ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1244:Src/queue.c   **** 
1245:Src/queue.c   ****             /* The event list is not altered if the queue is locked.  This will
1246:Src/queue.c   ****              * be done when the queue is unlocked later. */
1247:Src/queue.c   ****             if( cTxLock == queueUNLOCKED )
1248:Src/queue.c   ****             {
1249:Src/queue.c   ****                 #if ( configUSE_QUEUE_SETS == 1 )
1250:Src/queue.c   ****                     {
1251:Src/queue.c   ****                         if( pxQueue->pxQueueSetContainer != NULL )
1252:Src/queue.c   ****                         {
1253:Src/queue.c   ****                             if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1254:Src/queue.c   ****                             {
1255:Src/queue.c   ****                                 /* The semaphore is a member of a queue set, and
1256:Src/queue.c   ****                                  * posting to the queue set caused a higher priority
1257:Src/queue.c   ****                                  * task to unblock.  A context switch is required. */
1258:Src/queue.c   ****                                 if( pxHigherPriorityTaskWoken != NULL )
1259:Src/queue.c   ****                                 {
1260:Src/queue.c   ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1261:Src/queue.c   ****                                 }
1262:Src/queue.c   ****                                 else
1263:Src/queue.c   ****                                 {
1264:Src/queue.c   ****                                     mtCOVERAGE_TEST_MARKER();
1265:Src/queue.c   ****                                 }
1266:Src/queue.c   ****                             }
1267:Src/queue.c   ****                             else
1268:Src/queue.c   ****                             {
1269:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
1270:Src/queue.c   ****                             }
1271:Src/queue.c   ****                         }
1272:Src/queue.c   ****                         else
1273:Src/queue.c   ****                         {
1274:Src/queue.c   ****                             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALS
1275:Src/queue.c   ****                             {
1276:Src/queue.c   ****                                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) 
1277:Src/queue.c   ****                                 {
1278:Src/queue.c   ****                                     /* The task waiting has a higher priority so
1279:Src/queue.c   ****                                      *  record that a context switch is required. */
1280:Src/queue.c   ****                                     if( pxHigherPriorityTaskWoken != NULL )
1281:Src/queue.c   ****                                     {
1282:Src/queue.c   ****                                         *pxHigherPriorityTaskWoken = pdTRUE;
1283:Src/queue.c   ****                                     }
1284:Src/queue.c   ****                                     else
1285:Src/queue.c   ****                                     {
1286:Src/queue.c   ****                                         mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 24


1287:Src/queue.c   ****                                     }
1288:Src/queue.c   ****                                 }
1289:Src/queue.c   ****                                 else
1290:Src/queue.c   ****                                 {
1291:Src/queue.c   ****                                     mtCOVERAGE_TEST_MARKER();
1292:Src/queue.c   ****                                 }
1293:Src/queue.c   ****                             }
1294:Src/queue.c   ****                             else
1295:Src/queue.c   ****                             {
1296:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
1297:Src/queue.c   ****                             }
1298:Src/queue.c   ****                         }
1299:Src/queue.c   ****                     }
1300:Src/queue.c   ****                 #else /* configUSE_QUEUE_SETS */
1301:Src/queue.c   ****                     {
1302:Src/queue.c   ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1303:Src/queue.c   ****                         {
1304:Src/queue.c   ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1305:Src/queue.c   ****                             {
1306:Src/queue.c   ****                                 /* The task waiting has a higher priority so record that a
1307:Src/queue.c   ****                                  * context switch is required. */
1308:Src/queue.c   ****                                 if( pxHigherPriorityTaskWoken != NULL )
1309:Src/queue.c   ****                                 {
1310:Src/queue.c   ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1311:Src/queue.c   ****                                 }
1312:Src/queue.c   ****                                 else
1313:Src/queue.c   ****                                 {
1314:Src/queue.c   ****                                     mtCOVERAGE_TEST_MARKER();
1315:Src/queue.c   ****                                 }
1316:Src/queue.c   ****                             }
1317:Src/queue.c   ****                             else
1318:Src/queue.c   ****                             {
1319:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
1320:Src/queue.c   ****                             }
1321:Src/queue.c   ****                         }
1322:Src/queue.c   ****                         else
1323:Src/queue.c   ****                         {
1324:Src/queue.c   ****                             mtCOVERAGE_TEST_MARKER();
1325:Src/queue.c   ****                         }
1326:Src/queue.c   ****                     }
1327:Src/queue.c   ****                 #endif /* configUSE_QUEUE_SETS */
1328:Src/queue.c   ****             }
1329:Src/queue.c   ****             else
1330:Src/queue.c   ****             {
1331:Src/queue.c   ****                 /* Increment the lock count so the task that unlocks the queue
1332:Src/queue.c   ****                  * knows that data was posted while it was locked. */
1333:Src/queue.c   ****                 configASSERT( cTxLock != queueINT8_MAX );
1334:Src/queue.c   **** 
1335:Src/queue.c   ****                 pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1336:Src/queue.c   ****             }
1337:Src/queue.c   **** 
1338:Src/queue.c   ****             xReturn = pdPASS;
1339:Src/queue.c   ****         }
1340:Src/queue.c   ****         else
1341:Src/queue.c   ****         {
1342:Src/queue.c   ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1343:Src/queue.c   ****             xReturn = errQUEUE_FULL;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 25


1344:Src/queue.c   ****         }
1345:Src/queue.c   ****     }
1346:Src/queue.c   ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1347:Src/queue.c   **** 
1348:Src/queue.c   ****     return xReturn;
1349:Src/queue.c   **** }
1350:Src/queue.c   **** /*-----------------------------------------------------------*/
1351:Src/queue.c   **** 
1352:Src/queue.c   **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1353:Src/queue.c   ****                           void * const pvBuffer,
1354:Src/queue.c   ****                           TickType_t xTicksToWait )
1355:Src/queue.c   **** {
1356:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE;
1357:Src/queue.c   ****     TimeOut_t xTimeOut;
1358:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
1359:Src/queue.c   **** 
1360:Src/queue.c   ****     /* Check the pointer is not NULL. */
1361:Src/queue.c   ****     configASSERT( ( pxQueue ) );
1362:Src/queue.c   **** 
1363:Src/queue.c   ****     /* The buffer into which data is received can only be NULL if the data size
1364:Src/queue.c   ****      * is zero (so no data is copied into the buffer). */
1365:Src/queue.c   ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1366:Src/queue.c   **** 
1367:Src/queue.c   ****     /* Cannot block if the scheduler is suspended. */
1368:Src/queue.c   ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1369:Src/queue.c   ****         {
1370:Src/queue.c   ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1371:Src/queue.c   ****         }
1372:Src/queue.c   ****     #endif
1373:Src/queue.c   **** 
1374:Src/queue.c   ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1375:Src/queue.c   ****      * allow return statements within the function itself.  This is done in the
1376:Src/queue.c   ****      * interest of execution time efficiency. */
1377:Src/queue.c   ****     for( ; ; )
1378:Src/queue.c   ****     {
1379:Src/queue.c   ****         taskENTER_CRITICAL();
1380:Src/queue.c   ****         {
1381:Src/queue.c   ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1382:Src/queue.c   **** 
1383:Src/queue.c   ****             /* Is there data in the queue now?  To be running the calling task
1384:Src/queue.c   ****              * must be the highest priority task wanting to access the queue. */
1385:Src/queue.c   ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1386:Src/queue.c   ****             {
1387:Src/queue.c   ****                 /* Data available, remove one item. */
1388:Src/queue.c   ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1389:Src/queue.c   ****                 traceQUEUE_RECEIVE( pxQueue );
1390:Src/queue.c   ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1391:Src/queue.c   **** 
1392:Src/queue.c   ****                 /* There is now space in the queue, were any tasks waiting to
1393:Src/queue.c   ****                  * post to the queue?  If so, unblock the highest priority waiting
1394:Src/queue.c   ****                  * task. */
1395:Src/queue.c   ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1396:Src/queue.c   ****                 {
1397:Src/queue.c   ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1398:Src/queue.c   ****                     {
1399:Src/queue.c   ****                         queueYIELD_IF_USING_PREEMPTION();
1400:Src/queue.c   ****                     }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 26


1401:Src/queue.c   ****                     else
1402:Src/queue.c   ****                     {
1403:Src/queue.c   ****                         mtCOVERAGE_TEST_MARKER();
1404:Src/queue.c   ****                     }
1405:Src/queue.c   ****                 }
1406:Src/queue.c   ****                 else
1407:Src/queue.c   ****                 {
1408:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
1409:Src/queue.c   ****                 }
1410:Src/queue.c   **** 
1411:Src/queue.c   ****                 taskEXIT_CRITICAL();
1412:Src/queue.c   ****                 return pdPASS;
1413:Src/queue.c   ****             }
1414:Src/queue.c   ****             else
1415:Src/queue.c   ****             {
1416:Src/queue.c   ****                 if( xTicksToWait == ( TickType_t ) 0 )
1417:Src/queue.c   ****                 {
1418:Src/queue.c   ****                     /* The queue was empty and no block time is specified (or
1419:Src/queue.c   ****                      * the block time has expired) so leave now. */
1420:Src/queue.c   ****                     taskEXIT_CRITICAL();
1421:Src/queue.c   ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1422:Src/queue.c   ****                     return errQUEUE_EMPTY;
1423:Src/queue.c   ****                 }
1424:Src/queue.c   ****                 else if( xEntryTimeSet == pdFALSE )
1425:Src/queue.c   ****                 {
1426:Src/queue.c   ****                     /* The queue was empty and a block time was specified so
1427:Src/queue.c   ****                      * configure the timeout structure. */
1428:Src/queue.c   ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1429:Src/queue.c   ****                     xEntryTimeSet = pdTRUE;
1430:Src/queue.c   ****                 }
1431:Src/queue.c   ****                 else
1432:Src/queue.c   ****                 {
1433:Src/queue.c   ****                     /* Entry time was already set. */
1434:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
1435:Src/queue.c   ****                 }
1436:Src/queue.c   ****             }
1437:Src/queue.c   ****         }
1438:Src/queue.c   ****         taskEXIT_CRITICAL();
1439:Src/queue.c   **** 
1440:Src/queue.c   ****         /* Interrupts and other tasks can send to and receive from the queue
1441:Src/queue.c   ****          * now the critical section has been exited. */
1442:Src/queue.c   **** 
1443:Src/queue.c   ****         vTaskSuspendAll();
1444:Src/queue.c   ****         prvLockQueue( pxQueue );
1445:Src/queue.c   **** 
1446:Src/queue.c   ****         /* Update the timeout state to see if it has expired yet. */
1447:Src/queue.c   ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1448:Src/queue.c   ****         {
1449:Src/queue.c   ****             /* The timeout has not expired.  If the queue is still empty place
1450:Src/queue.c   ****              * the task on the list of tasks waiting to receive from the queue. */
1451:Src/queue.c   ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1452:Src/queue.c   ****             {
1453:Src/queue.c   ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1454:Src/queue.c   ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1455:Src/queue.c   ****                 prvUnlockQueue( pxQueue );
1456:Src/queue.c   **** 
1457:Src/queue.c   ****                 if( xTaskResumeAll() == pdFALSE )
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 27


1458:Src/queue.c   ****                 {
1459:Src/queue.c   ****                     portYIELD_WITHIN_API();
1460:Src/queue.c   ****                 }
1461:Src/queue.c   ****                 else
1462:Src/queue.c   ****                 {
1463:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
1464:Src/queue.c   ****                 }
1465:Src/queue.c   ****             }
1466:Src/queue.c   ****             else
1467:Src/queue.c   ****             {
1468:Src/queue.c   ****                 /* The queue contains data again.  Loop back to try and read the
1469:Src/queue.c   ****                  * data. */
1470:Src/queue.c   ****                 prvUnlockQueue( pxQueue );
1471:Src/queue.c   ****                 ( void ) xTaskResumeAll();
1472:Src/queue.c   ****             }
1473:Src/queue.c   ****         }
1474:Src/queue.c   ****         else
1475:Src/queue.c   ****         {
1476:Src/queue.c   ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1477:Src/queue.c   ****              * back and attempt to read the data. */
1478:Src/queue.c   ****             prvUnlockQueue( pxQueue );
1479:Src/queue.c   ****             ( void ) xTaskResumeAll();
1480:Src/queue.c   **** 
1481:Src/queue.c   ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1482:Src/queue.c   ****             {
1483:Src/queue.c   ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1484:Src/queue.c   ****                 return errQUEUE_EMPTY;
1485:Src/queue.c   ****             }
1486:Src/queue.c   ****             else
1487:Src/queue.c   ****             {
1488:Src/queue.c   ****                 mtCOVERAGE_TEST_MARKER();
1489:Src/queue.c   ****             }
1490:Src/queue.c   ****         }
1491:Src/queue.c   ****     } /*lint -restore */
1492:Src/queue.c   **** }
1493:Src/queue.c   **** /*-----------------------------------------------------------*/
1494:Src/queue.c   **** 
1495:Src/queue.c   **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
1496:Src/queue.c   ****                                 TickType_t xTicksToWait )
1497:Src/queue.c   **** {
1498:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE;
1499:Src/queue.c   ****     TimeOut_t xTimeOut;
1500:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
1501:Src/queue.c   **** 
1502:Src/queue.c   ****     #if ( configUSE_MUTEXES == 1 )
1503:Src/queue.c   ****         BaseType_t xInheritanceOccurred = pdFALSE;
1504:Src/queue.c   ****     #endif
1505:Src/queue.c   **** 
1506:Src/queue.c   ****     /* Check the queue pointer is not NULL. */
1507:Src/queue.c   ****     configASSERT( ( pxQueue ) );
1508:Src/queue.c   **** 
1509:Src/queue.c   ****     /* Check this really is a semaphore, in which case the item size will be
1510:Src/queue.c   ****      * 0. */
1511:Src/queue.c   ****     configASSERT( pxQueue->uxItemSize == 0 );
1512:Src/queue.c   **** 
1513:Src/queue.c   ****     /* Cannot block if the scheduler is suspended. */
1514:Src/queue.c   ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 28


1515:Src/queue.c   ****         {
1516:Src/queue.c   ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1517:Src/queue.c   ****         }
1518:Src/queue.c   ****     #endif
1519:Src/queue.c   **** 
1520:Src/queue.c   ****     /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1521:Src/queue.c   ****      * statements within the function itself.  This is done in the interest
1522:Src/queue.c   ****      * of execution time efficiency. */
1523:Src/queue.c   ****     for( ; ; )
1524:Src/queue.c   ****     {
1525:Src/queue.c   ****         taskENTER_CRITICAL();
1526:Src/queue.c   ****         {
1527:Src/queue.c   ****             /* Semaphores are queues with an item size of 0, and where the
1528:Src/queue.c   ****              * number of messages in the queue is the semaphore's count value. */
1529:Src/queue.c   ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1530:Src/queue.c   **** 
1531:Src/queue.c   ****             /* Is there data in the queue now?  To be running the calling task
1532:Src/queue.c   ****              * must be the highest priority task wanting to access the queue. */
1533:Src/queue.c   ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1534:Src/queue.c   ****             {
1535:Src/queue.c   ****                 traceQUEUE_RECEIVE( pxQueue );
1536:Src/queue.c   **** 
1537:Src/queue.c   ****                 /* Semaphores are queues with a data size of zero and where the
1538:Src/queue.c   ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1539:Src/queue.c   ****                 pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1540:Src/queue.c   **** 
1541:Src/queue.c   ****                 #if ( configUSE_MUTEXES == 1 )
1542:Src/queue.c   ****                     {
1543:Src/queue.c   ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1544:Src/queue.c   ****                         {
1545:Src/queue.c   ****                             /* Record the information required to implement
1546:Src/queue.c   ****                              * priority inheritance should it become necessary. */
1547:Src/queue.c   ****                             pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1548:Src/queue.c   ****                         }
1549:Src/queue.c   ****                         else
1550:Src/queue.c   ****                         {
1551:Src/queue.c   ****                             mtCOVERAGE_TEST_MARKER();
1552:Src/queue.c   ****                         }
1553:Src/queue.c   ****                     }
1554:Src/queue.c   ****                 #endif /* configUSE_MUTEXES */
1555:Src/queue.c   **** 
1556:Src/queue.c   ****                 /* Check to see if other tasks are blocked waiting to give the
1557:Src/queue.c   ****                  * semaphore, and if so, unblock the highest priority such task. */
1558:Src/queue.c   ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1559:Src/queue.c   ****                 {
1560:Src/queue.c   ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1561:Src/queue.c   ****                     {
1562:Src/queue.c   ****                         queueYIELD_IF_USING_PREEMPTION();
1563:Src/queue.c   ****                     }
1564:Src/queue.c   ****                     else
1565:Src/queue.c   ****                     {
1566:Src/queue.c   ****                         mtCOVERAGE_TEST_MARKER();
1567:Src/queue.c   ****                     }
1568:Src/queue.c   ****                 }
1569:Src/queue.c   ****                 else
1570:Src/queue.c   ****                 {
1571:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 29


1572:Src/queue.c   ****                 }
1573:Src/queue.c   **** 
1574:Src/queue.c   ****                 taskEXIT_CRITICAL();
1575:Src/queue.c   ****                 return pdPASS;
1576:Src/queue.c   ****             }
1577:Src/queue.c   ****             else
1578:Src/queue.c   ****             {
1579:Src/queue.c   ****                 if( xTicksToWait == ( TickType_t ) 0 )
1580:Src/queue.c   ****                 {
1581:Src/queue.c   ****                     /* For inheritance to have occurred there must have been an
1582:Src/queue.c   ****                      * initial timeout, and an adjusted timeout cannot become 0, as
1583:Src/queue.c   ****                      * if it were 0 the function would have exited. */
1584:Src/queue.c   ****                     #if ( configUSE_MUTEXES == 1 )
1585:Src/queue.c   ****                         {
1586:Src/queue.c   ****                             configASSERT( xInheritanceOccurred == pdFALSE );
1587:Src/queue.c   ****                         }
1588:Src/queue.c   ****                     #endif /* configUSE_MUTEXES */
1589:Src/queue.c   **** 
1590:Src/queue.c   ****                     /* The semaphore count was 0 and no block time is specified
1591:Src/queue.c   ****                      * (or the block time has expired) so exit now. */
1592:Src/queue.c   ****                     taskEXIT_CRITICAL();
1593:Src/queue.c   ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1594:Src/queue.c   ****                     return errQUEUE_EMPTY;
1595:Src/queue.c   ****                 }
1596:Src/queue.c   ****                 else if( xEntryTimeSet == pdFALSE )
1597:Src/queue.c   ****                 {
1598:Src/queue.c   ****                     /* The semaphore count was 0 and a block time was specified
1599:Src/queue.c   ****                      * so configure the timeout structure ready to block. */
1600:Src/queue.c   ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1601:Src/queue.c   ****                     xEntryTimeSet = pdTRUE;
1602:Src/queue.c   ****                 }
1603:Src/queue.c   ****                 else
1604:Src/queue.c   ****                 {
1605:Src/queue.c   ****                     /* Entry time was already set. */
1606:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
1607:Src/queue.c   ****                 }
1608:Src/queue.c   ****             }
1609:Src/queue.c   ****         }
1610:Src/queue.c   ****         taskEXIT_CRITICAL();
1611:Src/queue.c   **** 
1612:Src/queue.c   ****         /* Interrupts and other tasks can give to and take from the semaphore
1613:Src/queue.c   ****          * now the critical section has been exited. */
1614:Src/queue.c   **** 
1615:Src/queue.c   ****         vTaskSuspendAll();
1616:Src/queue.c   ****         prvLockQueue( pxQueue );
1617:Src/queue.c   **** 
1618:Src/queue.c   ****         /* Update the timeout state to see if it has expired yet. */
1619:Src/queue.c   ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1620:Src/queue.c   ****         {
1621:Src/queue.c   ****             /* A block time is specified and not expired.  If the semaphore
1622:Src/queue.c   ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1623:Src/queue.c   ****              * become available.  As semaphores are implemented with queues the
1624:Src/queue.c   ****              * queue being empty is equivalent to the semaphore count being 0. */
1625:Src/queue.c   ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1626:Src/queue.c   ****             {
1627:Src/queue.c   ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1628:Src/queue.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 30


1629:Src/queue.c   ****                 #if ( configUSE_MUTEXES == 1 )
1630:Src/queue.c   ****                     {
1631:Src/queue.c   ****                         if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1632:Src/queue.c   ****                         {
1633:Src/queue.c   ****                             taskENTER_CRITICAL();
1634:Src/queue.c   ****                             {
1635:Src/queue.c   ****                                 xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.
1636:Src/queue.c   ****                             }
1637:Src/queue.c   ****                             taskEXIT_CRITICAL();
1638:Src/queue.c   ****                         }
1639:Src/queue.c   ****                         else
1640:Src/queue.c   ****                         {
1641:Src/queue.c   ****                             mtCOVERAGE_TEST_MARKER();
1642:Src/queue.c   ****                         }
1643:Src/queue.c   ****                     }
1644:Src/queue.c   ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1645:Src/queue.c   **** 
1646:Src/queue.c   ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1647:Src/queue.c   ****                 prvUnlockQueue( pxQueue );
1648:Src/queue.c   **** 
1649:Src/queue.c   ****                 if( xTaskResumeAll() == pdFALSE )
1650:Src/queue.c   ****                 {
1651:Src/queue.c   ****                     portYIELD_WITHIN_API();
1652:Src/queue.c   ****                 }
1653:Src/queue.c   ****                 else
1654:Src/queue.c   ****                 {
1655:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
1656:Src/queue.c   ****                 }
1657:Src/queue.c   ****             }
1658:Src/queue.c   ****             else
1659:Src/queue.c   ****             {
1660:Src/queue.c   ****                 /* There was no timeout and the semaphore count was not 0, so
1661:Src/queue.c   ****                  * attempt to take the semaphore again. */
1662:Src/queue.c   ****                 prvUnlockQueue( pxQueue );
1663:Src/queue.c   ****                 ( void ) xTaskResumeAll();
1664:Src/queue.c   ****             }
1665:Src/queue.c   ****         }
1666:Src/queue.c   ****         else
1667:Src/queue.c   ****         {
1668:Src/queue.c   ****             /* Timed out. */
1669:Src/queue.c   ****             prvUnlockQueue( pxQueue );
1670:Src/queue.c   ****             ( void ) xTaskResumeAll();
1671:Src/queue.c   **** 
1672:Src/queue.c   ****             /* If the semaphore count is 0 exit now as the timeout has
1673:Src/queue.c   ****              * expired.  Otherwise return to attempt to take the semaphore that is
1674:Src/queue.c   ****              * known to be available.  As semaphores are implemented by queues the
1675:Src/queue.c   ****              * queue being empty is equivalent to the semaphore count being 0. */
1676:Src/queue.c   ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1677:Src/queue.c   ****             {
1678:Src/queue.c   ****                 #if ( configUSE_MUTEXES == 1 )
1679:Src/queue.c   ****                     {
1680:Src/queue.c   ****                         /* xInheritanceOccurred could only have be set if
1681:Src/queue.c   ****                          * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1682:Src/queue.c   ****                          * test the mutex type again to check it is actually a mutex. */
1683:Src/queue.c   ****                         if( xInheritanceOccurred != pdFALSE )
1684:Src/queue.c   ****                         {
1685:Src/queue.c   ****                             taskENTER_CRITICAL();
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 31


1686:Src/queue.c   ****                             {
1687:Src/queue.c   ****                                 UBaseType_t uxHighestWaitingPriority;
1688:Src/queue.c   **** 
1689:Src/queue.c   ****                                 /* This task blocking on the mutex caused another
1690:Src/queue.c   ****                                  * task to inherit this task's priority.  Now this task
1691:Src/queue.c   ****                                  * has timed out the priority should be disinherited
1692:Src/queue.c   ****                                  * again, but only as low as the next highest priority
1693:Src/queue.c   ****                                  * task that is waiting for the same mutex. */
1694:Src/queue.c   ****                                 uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( px
1695:Src/queue.c   ****                                 vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHo
1696:Src/queue.c   ****                             }
1697:Src/queue.c   ****                             taskEXIT_CRITICAL();
1698:Src/queue.c   ****                         }
1699:Src/queue.c   ****                     }
1700:Src/queue.c   ****                 #endif /* configUSE_MUTEXES */
1701:Src/queue.c   **** 
1702:Src/queue.c   ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1703:Src/queue.c   ****                 return errQUEUE_EMPTY;
1704:Src/queue.c   ****             }
1705:Src/queue.c   ****             else
1706:Src/queue.c   ****             {
1707:Src/queue.c   ****                 mtCOVERAGE_TEST_MARKER();
1708:Src/queue.c   ****             }
1709:Src/queue.c   ****         }
1710:Src/queue.c   ****     } /*lint -restore */
1711:Src/queue.c   **** }
1712:Src/queue.c   **** /*-----------------------------------------------------------*/
1713:Src/queue.c   **** 
1714:Src/queue.c   **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1715:Src/queue.c   ****                        void * const pvBuffer,
1716:Src/queue.c   ****                        TickType_t xTicksToWait )
1717:Src/queue.c   **** {
1718:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE;
1719:Src/queue.c   ****     TimeOut_t xTimeOut;
1720:Src/queue.c   ****     int8_t * pcOriginalReadPosition;
1721:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
1722:Src/queue.c   **** 
1723:Src/queue.c   ****     /* Check the pointer is not NULL. */
1724:Src/queue.c   ****     configASSERT( ( pxQueue ) );
1725:Src/queue.c   **** 
1726:Src/queue.c   ****     /* The buffer into which data is received can only be NULL if the data size
1727:Src/queue.c   ****      * is zero (so no data is copied into the buffer. */
1728:Src/queue.c   ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1729:Src/queue.c   **** 
1730:Src/queue.c   ****     /* Cannot block if the scheduler is suspended. */
1731:Src/queue.c   ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1732:Src/queue.c   ****         {
1733:Src/queue.c   ****             configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToW
1734:Src/queue.c   ****         }
1735:Src/queue.c   ****     #endif
1736:Src/queue.c   **** 
1737:Src/queue.c   ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1738:Src/queue.c   ****      * allow return statements within the function itself.  This is done in the
1739:Src/queue.c   ****      * interest of execution time efficiency. */
1740:Src/queue.c   ****     for( ; ; )
1741:Src/queue.c   ****     {
1742:Src/queue.c   ****         taskENTER_CRITICAL();
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 32


1743:Src/queue.c   ****         {
1744:Src/queue.c   ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1745:Src/queue.c   **** 
1746:Src/queue.c   ****             /* Is there data in the queue now?  To be running the calling task
1747:Src/queue.c   ****              * must be the highest priority task wanting to access the queue. */
1748:Src/queue.c   ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1749:Src/queue.c   ****             {
1750:Src/queue.c   ****                 /* Remember the read position so it can be reset after the data
1751:Src/queue.c   ****                  * is read from the queue as this function is only peeking the
1752:Src/queue.c   ****                  * data, not removing it. */
1753:Src/queue.c   ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1754:Src/queue.c   **** 
1755:Src/queue.c   ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1756:Src/queue.c   ****                 traceQUEUE_PEEK( pxQueue );
1757:Src/queue.c   **** 
1758:Src/queue.c   ****                 /* The data is not being removed, so reset the read pointer. */
1759:Src/queue.c   ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1760:Src/queue.c   **** 
1761:Src/queue.c   ****                 /* The data is being left in the queue, so see if there are
1762:Src/queue.c   ****                  * any other tasks waiting for the data. */
1763:Src/queue.c   ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1764:Src/queue.c   ****                 {
1765:Src/queue.c   ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
1766:Src/queue.c   ****                     {
1767:Src/queue.c   ****                         /* The task waiting has a higher priority than this task. */
1768:Src/queue.c   ****                         queueYIELD_IF_USING_PREEMPTION();
1769:Src/queue.c   ****                     }
1770:Src/queue.c   ****                     else
1771:Src/queue.c   ****                     {
1772:Src/queue.c   ****                         mtCOVERAGE_TEST_MARKER();
1773:Src/queue.c   ****                     }
1774:Src/queue.c   ****                 }
1775:Src/queue.c   ****                 else
1776:Src/queue.c   ****                 {
1777:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
1778:Src/queue.c   ****                 }
1779:Src/queue.c   **** 
1780:Src/queue.c   ****                 taskEXIT_CRITICAL();
1781:Src/queue.c   ****                 return pdPASS;
1782:Src/queue.c   ****             }
1783:Src/queue.c   ****             else
1784:Src/queue.c   ****             {
1785:Src/queue.c   ****                 if( xTicksToWait == ( TickType_t ) 0 )
1786:Src/queue.c   ****                 {
1787:Src/queue.c   ****                     /* The queue was empty and no block time is specified (or
1788:Src/queue.c   ****                      * the block time has expired) so leave now. */
1789:Src/queue.c   ****                     taskEXIT_CRITICAL();
1790:Src/queue.c   ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1791:Src/queue.c   ****                     return errQUEUE_EMPTY;
1792:Src/queue.c   ****                 }
1793:Src/queue.c   ****                 else if( xEntryTimeSet == pdFALSE )
1794:Src/queue.c   ****                 {
1795:Src/queue.c   ****                     /* The queue was empty and a block time was specified so
1796:Src/queue.c   ****                      * configure the timeout structure ready to enter the blocked
1797:Src/queue.c   ****                      * state. */
1798:Src/queue.c   ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1799:Src/queue.c   ****                     xEntryTimeSet = pdTRUE;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 33


1800:Src/queue.c   ****                 }
1801:Src/queue.c   ****                 else
1802:Src/queue.c   ****                 {
1803:Src/queue.c   ****                     /* Entry time was already set. */
1804:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
1805:Src/queue.c   ****                 }
1806:Src/queue.c   ****             }
1807:Src/queue.c   ****         }
1808:Src/queue.c   ****         taskEXIT_CRITICAL();
1809:Src/queue.c   **** 
1810:Src/queue.c   ****         /* Interrupts and other tasks can send to and receive from the queue
1811:Src/queue.c   ****          * now that the critical section has been exited. */
1812:Src/queue.c   **** 
1813:Src/queue.c   ****         vTaskSuspendAll();
1814:Src/queue.c   ****         prvLockQueue( pxQueue );
1815:Src/queue.c   **** 
1816:Src/queue.c   ****         /* Update the timeout state to see if it has expired yet. */
1817:Src/queue.c   ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1818:Src/queue.c   ****         {
1819:Src/queue.c   ****             /* Timeout has not expired yet, check to see if there is data in the
1820:Src/queue.c   ****             * queue now, and if not enter the Blocked state to wait for data. */
1821:Src/queue.c   ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1822:Src/queue.c   ****             {
1823:Src/queue.c   ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1824:Src/queue.c   ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1825:Src/queue.c   ****                 prvUnlockQueue( pxQueue );
1826:Src/queue.c   **** 
1827:Src/queue.c   ****                 if( xTaskResumeAll() == pdFALSE )
1828:Src/queue.c   ****                 {
1829:Src/queue.c   ****                     portYIELD_WITHIN_API();
1830:Src/queue.c   ****                 }
1831:Src/queue.c   ****                 else
1832:Src/queue.c   ****                 {
1833:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
1834:Src/queue.c   ****                 }
1835:Src/queue.c   ****             }
1836:Src/queue.c   ****             else
1837:Src/queue.c   ****             {
1838:Src/queue.c   ****                 /* There is data in the queue now, so don't enter the blocked
1839:Src/queue.c   ****                  * state, instead return to try and obtain the data. */
1840:Src/queue.c   ****                 prvUnlockQueue( pxQueue );
1841:Src/queue.c   ****                 ( void ) xTaskResumeAll();
1842:Src/queue.c   ****             }
1843:Src/queue.c   ****         }
1844:Src/queue.c   ****         else
1845:Src/queue.c   ****         {
1846:Src/queue.c   ****             /* The timeout has expired.  If there is still no data in the queue
1847:Src/queue.c   ****              * exit, otherwise go back and try to read the data again. */
1848:Src/queue.c   ****             prvUnlockQueue( pxQueue );
1849:Src/queue.c   ****             ( void ) xTaskResumeAll();
1850:Src/queue.c   **** 
1851:Src/queue.c   ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1852:Src/queue.c   ****             {
1853:Src/queue.c   ****                 traceQUEUE_PEEK_FAILED( pxQueue );
1854:Src/queue.c   ****                 return errQUEUE_EMPTY;
1855:Src/queue.c   ****             }
1856:Src/queue.c   ****             else
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 34


1857:Src/queue.c   ****             {
1858:Src/queue.c   ****                 mtCOVERAGE_TEST_MARKER();
1859:Src/queue.c   ****             }
1860:Src/queue.c   ****         }
1861:Src/queue.c   ****     } /*lint -restore */
1862:Src/queue.c   **** }
1863:Src/queue.c   **** /*-----------------------------------------------------------*/
1864:Src/queue.c   **** 
1865:Src/queue.c   **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
1866:Src/queue.c   ****                                  void * const pvBuffer,
1867:Src/queue.c   ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
1868:Src/queue.c   **** {
1869:Src/queue.c   ****     BaseType_t xReturn;
1870:Src/queue.c   ****     UBaseType_t uxSavedInterruptStatus;
1871:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
1872:Src/queue.c   **** 
1873:Src/queue.c   ****     configASSERT( pxQueue );
1874:Src/queue.c   ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1875:Src/queue.c   **** 
1876:Src/queue.c   ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1877:Src/queue.c   ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1878:Src/queue.c   ****      * above the maximum system call priority are kept permanently enabled, even
1879:Src/queue.c   ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1880:Src/queue.c   ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1881:Src/queue.c   ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1882:Src/queue.c   ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1883:Src/queue.c   ****      * assigned a priority above the configured maximum system call priority.
1884:Src/queue.c   ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1885:Src/queue.c   ****      * that have been assigned a priority at or (logically) below the maximum
1886:Src/queue.c   ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1887:Src/queue.c   ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1888:Src/queue.c   ****      * More information (albeit Cortex-M specific) is provided on the following
1889:Src/queue.c   ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1890:Src/queue.c   ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1891:Src/queue.c   **** 
1892:Src/queue.c   ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1893:Src/queue.c   ****     {
1894:Src/queue.c   ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1895:Src/queue.c   **** 
1896:Src/queue.c   ****         /* Cannot block in an ISR, so check there is data available. */
1897:Src/queue.c   ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1898:Src/queue.c   ****         {
1899:Src/queue.c   ****             const int8_t cRxLock = pxQueue->cRxLock;
1900:Src/queue.c   **** 
1901:Src/queue.c   ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1902:Src/queue.c   **** 
1903:Src/queue.c   ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
1904:Src/queue.c   ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1905:Src/queue.c   **** 
1906:Src/queue.c   ****             /* If the queue is locked the event list will not be modified.
1907:Src/queue.c   ****              * Instead update the lock count so the task that unlocks the queue
1908:Src/queue.c   ****              * will know that an ISR has removed data while the queue was
1909:Src/queue.c   ****              * locked. */
1910:Src/queue.c   ****             if( cRxLock == queueUNLOCKED )
1911:Src/queue.c   ****             {
1912:Src/queue.c   ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1913:Src/queue.c   ****                 {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 35


1914:Src/queue.c   ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1915:Src/queue.c   ****                     {
1916:Src/queue.c   ****                         /* The task waiting has a higher priority than us so
1917:Src/queue.c   ****                          * force a context switch. */
1918:Src/queue.c   ****                         if( pxHigherPriorityTaskWoken != NULL )
1919:Src/queue.c   ****                         {
1920:Src/queue.c   ****                             *pxHigherPriorityTaskWoken = pdTRUE;
1921:Src/queue.c   ****                         }
1922:Src/queue.c   ****                         else
1923:Src/queue.c   ****                         {
1924:Src/queue.c   ****                             mtCOVERAGE_TEST_MARKER();
1925:Src/queue.c   ****                         }
1926:Src/queue.c   ****                     }
1927:Src/queue.c   ****                     else
1928:Src/queue.c   ****                     {
1929:Src/queue.c   ****                         mtCOVERAGE_TEST_MARKER();
1930:Src/queue.c   ****                     }
1931:Src/queue.c   ****                 }
1932:Src/queue.c   ****                 else
1933:Src/queue.c   ****                 {
1934:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
1935:Src/queue.c   ****                 }
1936:Src/queue.c   ****             }
1937:Src/queue.c   ****             else
1938:Src/queue.c   ****             {
1939:Src/queue.c   ****                 /* Increment the lock count so the task that unlocks the queue
1940:Src/queue.c   ****                  * knows that data was removed while it was locked. */
1941:Src/queue.c   ****                 configASSERT( cRxLock != queueINT8_MAX );
1942:Src/queue.c   **** 
1943:Src/queue.c   ****                 pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1944:Src/queue.c   ****             }
1945:Src/queue.c   **** 
1946:Src/queue.c   ****             xReturn = pdPASS;
1947:Src/queue.c   ****         }
1948:Src/queue.c   ****         else
1949:Src/queue.c   ****         {
1950:Src/queue.c   ****             xReturn = pdFAIL;
1951:Src/queue.c   ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1952:Src/queue.c   ****         }
1953:Src/queue.c   ****     }
1954:Src/queue.c   ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1955:Src/queue.c   **** 
1956:Src/queue.c   ****     return xReturn;
1957:Src/queue.c   **** }
1958:Src/queue.c   **** /*-----------------------------------------------------------*/
1959:Src/queue.c   **** 
1960:Src/queue.c   **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
1961:Src/queue.c   ****                               void * const pvBuffer )
1962:Src/queue.c   **** {
1963:Src/queue.c   ****     BaseType_t xReturn;
1964:Src/queue.c   ****     UBaseType_t uxSavedInterruptStatus;
1965:Src/queue.c   ****     int8_t * pcOriginalReadPosition;
1966:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
1967:Src/queue.c   **** 
1968:Src/queue.c   ****     configASSERT( pxQueue );
1969:Src/queue.c   ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1970:Src/queue.c   ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 36


1971:Src/queue.c   **** 
1972:Src/queue.c   ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1973:Src/queue.c   ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1974:Src/queue.c   ****      * above the maximum system call priority are kept permanently enabled, even
1975:Src/queue.c   ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1976:Src/queue.c   ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1977:Src/queue.c   ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1978:Src/queue.c   ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1979:Src/queue.c   ****      * assigned a priority above the configured maximum system call priority.
1980:Src/queue.c   ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1981:Src/queue.c   ****      * that have been assigned a priority at or (logically) below the maximum
1982:Src/queue.c   ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1983:Src/queue.c   ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1984:Src/queue.c   ****      * More information (albeit Cortex-M specific) is provided on the following
1985:Src/queue.c   ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1986:Src/queue.c   ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1987:Src/queue.c   **** 
1988:Src/queue.c   ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1989:Src/queue.c   ****     {
1990:Src/queue.c   ****         /* Cannot block in an ISR, so check there is data available. */
1991:Src/queue.c   ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1992:Src/queue.c   ****         {
1993:Src/queue.c   ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
1994:Src/queue.c   **** 
1995:Src/queue.c   ****             /* Remember the read position so it can be reset as nothing is
1996:Src/queue.c   ****              * actually being removed from the queue. */
1997:Src/queue.c   ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1998:Src/queue.c   ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
1999:Src/queue.c   ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
2000:Src/queue.c   **** 
2001:Src/queue.c   ****             xReturn = pdPASS;
2002:Src/queue.c   ****         }
2003:Src/queue.c   ****         else
2004:Src/queue.c   ****         {
2005:Src/queue.c   ****             xReturn = pdFAIL;
2006:Src/queue.c   ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
2007:Src/queue.c   ****         }
2008:Src/queue.c   ****     }
2009:Src/queue.c   ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2010:Src/queue.c   **** 
2011:Src/queue.c   ****     return xReturn;
2012:Src/queue.c   **** }
2013:Src/queue.c   **** /*-----------------------------------------------------------*/
2014:Src/queue.c   **** 
2015:Src/queue.c   **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
2016:Src/queue.c   **** {
2017:Src/queue.c   ****     UBaseType_t uxReturn;
2018:Src/queue.c   **** 
2019:Src/queue.c   ****     configASSERT( xQueue );
2020:Src/queue.c   **** 
2021:Src/queue.c   ****     taskENTER_CRITICAL();
2022:Src/queue.c   ****     {
2023:Src/queue.c   ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
2024:Src/queue.c   ****     }
2025:Src/queue.c   ****     taskEXIT_CRITICAL();
2026:Src/queue.c   **** 
2027:Src/queue.c   ****     return uxReturn;
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 37


2028:Src/queue.c   **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2029:Src/queue.c   **** /*-----------------------------------------------------------*/
2030:Src/queue.c   **** 
2031:Src/queue.c   **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
2032:Src/queue.c   **** {
2033:Src/queue.c   ****     UBaseType_t uxReturn;
2034:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
2035:Src/queue.c   **** 
2036:Src/queue.c   ****     configASSERT( pxQueue );
2037:Src/queue.c   **** 
2038:Src/queue.c   ****     taskENTER_CRITICAL();
2039:Src/queue.c   ****     {
2040:Src/queue.c   ****         uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
2041:Src/queue.c   ****     }
2042:Src/queue.c   ****     taskEXIT_CRITICAL();
2043:Src/queue.c   **** 
2044:Src/queue.c   ****     return uxReturn;
2045:Src/queue.c   **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2046:Src/queue.c   **** /*-----------------------------------------------------------*/
2047:Src/queue.c   **** 
2048:Src/queue.c   **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2049:Src/queue.c   **** {
2050:Src/queue.c   ****     UBaseType_t uxReturn;
2051:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
2052:Src/queue.c   **** 
2053:Src/queue.c   ****     configASSERT( pxQueue );
2054:Src/queue.c   ****     uxReturn = pxQueue->uxMessagesWaiting;
2055:Src/queue.c   **** 
2056:Src/queue.c   ****     return uxReturn;
2057:Src/queue.c   **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2058:Src/queue.c   **** /*-----------------------------------------------------------*/
2059:Src/queue.c   **** 
2060:Src/queue.c   **** void vQueueDelete( QueueHandle_t xQueue )
2061:Src/queue.c   **** {
2062:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
2063:Src/queue.c   **** 
2064:Src/queue.c   ****     configASSERT( pxQueue );
2065:Src/queue.c   ****     traceQUEUE_DELETE( pxQueue );
2066:Src/queue.c   **** 
2067:Src/queue.c   ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2068:Src/queue.c   ****         {
2069:Src/queue.c   ****             vQueueUnregisterQueue( pxQueue );
2070:Src/queue.c   ****         }
2071:Src/queue.c   ****     #endif
2072:Src/queue.c   **** 
2073:Src/queue.c   ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2074:Src/queue.c   ****         {
2075:Src/queue.c   ****             /* The queue can only have been allocated dynamically - free it
2076:Src/queue.c   ****              * again. */
2077:Src/queue.c   ****             vPortFree( pxQueue );
2078:Src/queue.c   ****         }
2079:Src/queue.c   ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2080:Src/queue.c   ****         {
2081:Src/queue.c   ****             /* The queue could have been allocated statically or dynamically, so
2082:Src/queue.c   ****              * check before attempting to free the memory. */
2083:Src/queue.c   ****             if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2084:Src/queue.c   ****             {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 38


2085:Src/queue.c   ****                 vPortFree( pxQueue );
2086:Src/queue.c   ****             }
2087:Src/queue.c   ****             else
2088:Src/queue.c   ****             {
2089:Src/queue.c   ****                 mtCOVERAGE_TEST_MARKER();
2090:Src/queue.c   ****             }
2091:Src/queue.c   ****         }
2092:Src/queue.c   ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2093:Src/queue.c   ****         {
2094:Src/queue.c   ****             /* The queue must have been statically allocated, so is not going to be
2095:Src/queue.c   ****              * deleted.  Avoid compiler warnings about the unused parameter. */
2096:Src/queue.c   ****             ( void ) pxQueue;
2097:Src/queue.c   ****         }
2098:Src/queue.c   ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2099:Src/queue.c   **** }
2100:Src/queue.c   **** /*-----------------------------------------------------------*/
2101:Src/queue.c   **** 
2102:Src/queue.c   **** #if ( configUSE_TRACE_FACILITY == 1 )
2103:Src/queue.c   **** 
2104:Src/queue.c   ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2105:Src/queue.c   ****     {
2106:Src/queue.c   ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2107:Src/queue.c   ****     }
2108:Src/queue.c   **** 
2109:Src/queue.c   **** #endif /* configUSE_TRACE_FACILITY */
2110:Src/queue.c   **** /*-----------------------------------------------------------*/
2111:Src/queue.c   **** 
2112:Src/queue.c   **** #if ( configUSE_TRACE_FACILITY == 1 )
2113:Src/queue.c   **** 
2114:Src/queue.c   ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2115:Src/queue.c   ****                                UBaseType_t uxQueueNumber )
2116:Src/queue.c   ****     {
2117:Src/queue.c   ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2118:Src/queue.c   ****     }
2119:Src/queue.c   **** 
2120:Src/queue.c   **** #endif /* configUSE_TRACE_FACILITY */
2121:Src/queue.c   **** /*-----------------------------------------------------------*/
2122:Src/queue.c   **** 
2123:Src/queue.c   **** #if ( configUSE_TRACE_FACILITY == 1 )
2124:Src/queue.c   **** 
2125:Src/queue.c   ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2126:Src/queue.c   ****     {
2127:Src/queue.c   ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
2128:Src/queue.c   ****     }
2129:Src/queue.c   **** 
2130:Src/queue.c   **** #endif /* configUSE_TRACE_FACILITY */
2131:Src/queue.c   **** /*-----------------------------------------------------------*/
2132:Src/queue.c   **** 
2133:Src/queue.c   **** #if ( configUSE_MUTEXES == 1 )
2134:Src/queue.c   **** 
2135:Src/queue.c   ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2136:Src/queue.c   ****     {
2137:Src/queue.c   ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
2138:Src/queue.c   **** 
2139:Src/queue.c   ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2140:Src/queue.c   ****          * priority, but the waiting task times out, then the holder should
2141:Src/queue.c   ****          * disinherit the priority - but only down to the highest priority of any
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 39


2142:Src/queue.c   ****          * other tasks that are waiting for the same mutex.  For this purpose,
2143:Src/queue.c   ****          * return the priority of the highest priority task that is waiting for the
2144:Src/queue.c   ****          * mutex. */
2145:Src/queue.c   ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
2146:Src/queue.c   ****         {
2147:Src/queue.c   ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t 
2148:Src/queue.c   ****         }
2149:Src/queue.c   ****         else
2150:Src/queue.c   ****         {
2151:Src/queue.c   ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2152:Src/queue.c   ****         }
2153:Src/queue.c   **** 
2154:Src/queue.c   ****         return uxHighestPriorityOfWaitingTasks;
2155:Src/queue.c   ****     }
2156:Src/queue.c   **** 
2157:Src/queue.c   **** #endif /* configUSE_MUTEXES */
2158:Src/queue.c   **** /*-----------------------------------------------------------*/
2159:Src/queue.c   **** 
2160:Src/queue.c   **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2161:Src/queue.c   ****                                       const void * pvItemToQueue,
2162:Src/queue.c   ****                                       const BaseType_t xPosition )
2163:Src/queue.c   **** {
2164:Src/queue.c   ****     BaseType_t xReturn = pdFALSE;
2165:Src/queue.c   ****     UBaseType_t uxMessagesWaiting;
2166:Src/queue.c   **** 
2167:Src/queue.c   ****     /* This function is called from a critical section. */
2168:Src/queue.c   **** 
2169:Src/queue.c   ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2170:Src/queue.c   **** 
2171:Src/queue.c   ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2172:Src/queue.c   ****     {
2173:Src/queue.c   ****         #if ( configUSE_MUTEXES == 1 )
2174:Src/queue.c   ****             {
2175:Src/queue.c   ****                 if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2176:Src/queue.c   ****                 {
2177:Src/queue.c   ****                     /* The mutex is no longer being held. */
2178:Src/queue.c   ****                     xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2179:Src/queue.c   ****                     pxQueue->u.xSemaphore.xMutexHolder = NULL;
2180:Src/queue.c   ****                 }
2181:Src/queue.c   ****                 else
2182:Src/queue.c   ****                 {
2183:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
2184:Src/queue.c   ****                 }
2185:Src/queue.c   ****             }
2186:Src/queue.c   ****         #endif /* configUSE_MUTEXES */
2187:Src/queue.c   ****     }
2188:Src/queue.c   ****     else if( xPosition == queueSEND_TO_BACK )
2189:Src/queue.c   ****     {
2190:Src/queue.c   ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
2191:Src/queue.c   ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
2192:Src/queue.c   **** 
2193:Src/queue.c   ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                       
2194:Src/queue.c   ****         {
2195:Src/queue.c   ****             pxQueue->pcWriteTo = pxQueue->pcHead;
2196:Src/queue.c   ****         }
2197:Src/queue.c   ****         else
2198:Src/queue.c   ****         {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 40


2199:Src/queue.c   ****             mtCOVERAGE_TEST_MARKER();
2200:Src/queue.c   ****         }
2201:Src/queue.c   ****     }
2202:Src/queue.c   ****     else
2203:Src/queue.c   ****     {
2204:Src/queue.c   ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
2205:Src/queue.c   ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2206:Src/queue.c   **** 
2207:Src/queue.c   ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified
2208:Src/queue.c   ****         {
2209:Src/queue.c   ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2210:Src/queue.c   ****         }
2211:Src/queue.c   ****         else
2212:Src/queue.c   ****         {
2213:Src/queue.c   ****             mtCOVERAGE_TEST_MARKER();
2214:Src/queue.c   ****         }
2215:Src/queue.c   **** 
2216:Src/queue.c   ****         if( xPosition == queueOVERWRITE )
2217:Src/queue.c   ****         {
2218:Src/queue.c   ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2219:Src/queue.c   ****             {
2220:Src/queue.c   ****                 /* An item is not being added but overwritten, so subtract
2221:Src/queue.c   ****                  * one from the recorded number of items in the queue so when
2222:Src/queue.c   ****                  * one is added again below the number of recorded items remains
2223:Src/queue.c   ****                  * correct. */
2224:Src/queue.c   ****                 --uxMessagesWaiting;
2225:Src/queue.c   ****             }
2226:Src/queue.c   ****             else
2227:Src/queue.c   ****             {
2228:Src/queue.c   ****                 mtCOVERAGE_TEST_MARKER();
2229:Src/queue.c   ****             }
2230:Src/queue.c   ****         }
2231:Src/queue.c   ****         else
2232:Src/queue.c   ****         {
2233:Src/queue.c   ****             mtCOVERAGE_TEST_MARKER();
2234:Src/queue.c   ****         }
2235:Src/queue.c   ****     }
2236:Src/queue.c   **** 
2237:Src/queue.c   ****     pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2238:Src/queue.c   **** 
2239:Src/queue.c   ****     return xReturn;
2240:Src/queue.c   **** }
2241:Src/queue.c   **** /*-----------------------------------------------------------*/
2242:Src/queue.c   **** 
2243:Src/queue.c   **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2244:Src/queue.c   ****                                   void * const pvBuffer )
2245:Src/queue.c   **** {
2246:Src/queue.c   ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2247:Src/queue.c   ****     {
2248:Src/queue.c   ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithm
2249:Src/queue.c   **** 
2250:Src/queue.c   ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception
2251:Src/queue.c   ****         {
2252:Src/queue.c   ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2253:Src/queue.c   ****         }
2254:Src/queue.c   ****         else
2255:Src/queue.c   ****         {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 41


2256:Src/queue.c   ****             mtCOVERAGE_TEST_MARKER();
2257:Src/queue.c   ****         }
2258:Src/queue.c   **** 
2259:Src/queue.c   ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
2260:Src/queue.c   ****     }
2261:Src/queue.c   **** }
2262:Src/queue.c   **** /*-----------------------------------------------------------*/
2263:Src/queue.c   **** 
2264:Src/queue.c   **** static void prvUnlockQueue( Queue_t * const pxQueue )
2265:Src/queue.c   **** {
2266:Src/queue.c   ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2267:Src/queue.c   **** 
2268:Src/queue.c   ****     /* The lock counts contains the number of extra data items placed or
2269:Src/queue.c   ****      * removed from the queue while the queue was locked.  When a queue is
2270:Src/queue.c   ****      * locked items can be added or removed, but the event lists cannot be
2271:Src/queue.c   ****      * updated. */
2272:Src/queue.c   ****     taskENTER_CRITICAL();
2273:Src/queue.c   ****     {
2274:Src/queue.c   ****         int8_t cTxLock = pxQueue->cTxLock;
2275:Src/queue.c   **** 
2276:Src/queue.c   ****         /* See if data was added to the queue while it was locked. */
2277:Src/queue.c   ****         while( cTxLock > queueLOCKED_UNMODIFIED )
2278:Src/queue.c   ****         {
2279:Src/queue.c   ****             /* Data was posted while the queue was locked.  Are any tasks
2280:Src/queue.c   ****              * blocked waiting for data to become available? */
2281:Src/queue.c   ****             #if ( configUSE_QUEUE_SETS == 1 )
2282:Src/queue.c   ****                 {
2283:Src/queue.c   ****                     if( pxQueue->pxQueueSetContainer != NULL )
2284:Src/queue.c   ****                     {
2285:Src/queue.c   ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2286:Src/queue.c   ****                         {
2287:Src/queue.c   ****                             /* The queue is a member of a queue set, and posting to
2288:Src/queue.c   ****                              * the queue set caused a higher priority task to unblock.
2289:Src/queue.c   ****                              * A context switch is required. */
2290:Src/queue.c   ****                             vTaskMissedYield();
2291:Src/queue.c   ****                         }
2292:Src/queue.c   ****                         else
2293:Src/queue.c   ****                         {
2294:Src/queue.c   ****                             mtCOVERAGE_TEST_MARKER();
2295:Src/queue.c   ****                         }
2296:Src/queue.c   ****                     }
2297:Src/queue.c   ****                     else
2298:Src/queue.c   ****                     {
2299:Src/queue.c   ****                         /* Tasks that are removed from the event list will get
2300:Src/queue.c   ****                          * added to the pending ready list as the scheduler is still
2301:Src/queue.c   ****                          * suspended. */
2302:Src/queue.c   ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2303:Src/queue.c   ****                         {
2304:Src/queue.c   ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
2305:Src/queue.c   ****                             {
2306:Src/queue.c   ****                                 /* The task waiting has a higher priority so record that a
2307:Src/queue.c   ****                                  * context switch is required. */
2308:Src/queue.c   ****                                 vTaskMissedYield();
2309:Src/queue.c   ****                             }
2310:Src/queue.c   ****                             else
2311:Src/queue.c   ****                             {
2312:Src/queue.c   ****                                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 42


2313:Src/queue.c   ****                             }
2314:Src/queue.c   ****                         }
2315:Src/queue.c   ****                         else
2316:Src/queue.c   ****                         {
2317:Src/queue.c   ****                             break;
2318:Src/queue.c   ****                         }
2319:Src/queue.c   ****                     }
2320:Src/queue.c   ****                 }
2321:Src/queue.c   ****             #else /* configUSE_QUEUE_SETS */
2322:Src/queue.c   ****                 {
2323:Src/queue.c   ****                     /* Tasks that are removed from the event list will get added to
2324:Src/queue.c   ****                      * the pending ready list as the scheduler is still suspended. */
2325:Src/queue.c   ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2326:Src/queue.c   ****                     {
2327:Src/queue.c   ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2328:Src/queue.c   ****                         {
2329:Src/queue.c   ****                             /* The task waiting has a higher priority so record that
2330:Src/queue.c   ****                              * a context switch is required. */
2331:Src/queue.c   ****                             vTaskMissedYield();
2332:Src/queue.c   ****                         }
2333:Src/queue.c   ****                         else
2334:Src/queue.c   ****                         {
2335:Src/queue.c   ****                             mtCOVERAGE_TEST_MARKER();
2336:Src/queue.c   ****                         }
2337:Src/queue.c   ****                     }
2338:Src/queue.c   ****                     else
2339:Src/queue.c   ****                     {
2340:Src/queue.c   ****                         break;
2341:Src/queue.c   ****                     }
2342:Src/queue.c   ****                 }
2343:Src/queue.c   ****             #endif /* configUSE_QUEUE_SETS */
2344:Src/queue.c   **** 
2345:Src/queue.c   ****             --cTxLock;
2346:Src/queue.c   ****         }
2347:Src/queue.c   **** 
2348:Src/queue.c   ****         pxQueue->cTxLock = queueUNLOCKED;
2349:Src/queue.c   ****     }
2350:Src/queue.c   ****     taskEXIT_CRITICAL();
2351:Src/queue.c   **** 
2352:Src/queue.c   ****     /* Do the same for the Rx lock. */
2353:Src/queue.c   ****     taskENTER_CRITICAL();
2354:Src/queue.c   ****     {
2355:Src/queue.c   ****         int8_t cRxLock = pxQueue->cRxLock;
2356:Src/queue.c   **** 
2357:Src/queue.c   ****         while( cRxLock > queueLOCKED_UNMODIFIED )
2358:Src/queue.c   ****         {
2359:Src/queue.c   ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2360:Src/queue.c   ****             {
2361:Src/queue.c   ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2362:Src/queue.c   ****                 {
2363:Src/queue.c   ****                     vTaskMissedYield();
2364:Src/queue.c   ****                 }
2365:Src/queue.c   ****                 else
2366:Src/queue.c   ****                 {
2367:Src/queue.c   ****                     mtCOVERAGE_TEST_MARKER();
2368:Src/queue.c   ****                 }
2369:Src/queue.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 43


2370:Src/queue.c   ****                 --cRxLock;
2371:Src/queue.c   ****             }
2372:Src/queue.c   ****             else
2373:Src/queue.c   ****             {
2374:Src/queue.c   ****                 break;
2375:Src/queue.c   ****             }
2376:Src/queue.c   ****         }
2377:Src/queue.c   **** 
2378:Src/queue.c   ****         pxQueue->cRxLock = queueUNLOCKED;
2379:Src/queue.c   ****     }
2380:Src/queue.c   ****     taskEXIT_CRITICAL();
2381:Src/queue.c   **** }
2382:Src/queue.c   **** /*-----------------------------------------------------------*/
2383:Src/queue.c   **** 
2384:Src/queue.c   **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2385:Src/queue.c   **** {
2386:Src/queue.c   ****     BaseType_t xReturn;
2387:Src/queue.c   **** 
2388:Src/queue.c   ****     taskENTER_CRITICAL();
2389:Src/queue.c   ****     {
2390:Src/queue.c   ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2391:Src/queue.c   ****         {
2392:Src/queue.c   ****             xReturn = pdTRUE;
2393:Src/queue.c   ****         }
2394:Src/queue.c   ****         else
2395:Src/queue.c   ****         {
2396:Src/queue.c   ****             xReturn = pdFALSE;
2397:Src/queue.c   ****         }
2398:Src/queue.c   ****     }
2399:Src/queue.c   ****     taskEXIT_CRITICAL();
2400:Src/queue.c   **** 
2401:Src/queue.c   ****     return xReturn;
2402:Src/queue.c   **** }
2403:Src/queue.c   **** /*-----------------------------------------------------------*/
2404:Src/queue.c   **** 
2405:Src/queue.c   **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2406:Src/queue.c   **** {
2407:Src/queue.c   ****     BaseType_t xReturn;
2408:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
2409:Src/queue.c   **** 
2410:Src/queue.c   ****     configASSERT( pxQueue );
2411:Src/queue.c   **** 
2412:Src/queue.c   ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2413:Src/queue.c   ****     {
2414:Src/queue.c   ****         xReturn = pdTRUE;
2415:Src/queue.c   ****     }
2416:Src/queue.c   ****     else
2417:Src/queue.c   ****     {
2418:Src/queue.c   ****         xReturn = pdFALSE;
2419:Src/queue.c   ****     }
2420:Src/queue.c   **** 
2421:Src/queue.c   ****     return xReturn;
2422:Src/queue.c   **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2423:Src/queue.c   **** /*-----------------------------------------------------------*/
2424:Src/queue.c   **** 
2425:Src/queue.c   **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2426:Src/queue.c   **** {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 44


  27              		.loc 1 2426 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		.loc 1 2426 1 is_stmt 0 view .LVU1
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
2427:Src/queue.c   ****     BaseType_t xReturn;
  38              		.loc 1 2427 5 is_stmt 1 view .LVU2
2428:Src/queue.c   **** 
2429:Src/queue.c   ****     taskENTER_CRITICAL();
  39              		.loc 1 2429 5 view .LVU3
  40 0004 FFF7FEFF 		bl	vPortEnterCritical
  41              	.LVL1:
2430:Src/queue.c   ****     {
2431:Src/queue.c   ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  42              		.loc 1 2431 9 view .LVU4
  43              		.loc 1 2431 20 is_stmt 0 view .LVU5
  44 0008 A26B     		ldr	r2, [r4, #56]
  45              		.loc 1 2431 50 view .LVU6
  46 000a E36B     		ldr	r3, [r4, #60]
  47              		.loc 1 2431 11 view .LVU7
  48 000c 9A42     		cmp	r2, r3
  49 000e 04D0     		beq	.L5
2432:Src/queue.c   ****         {
2433:Src/queue.c   ****             xReturn = pdTRUE;
2434:Src/queue.c   ****         }
2435:Src/queue.c   ****         else
2436:Src/queue.c   ****         {
2437:Src/queue.c   ****             xReturn = pdFALSE;
  50              		.loc 1 2437 21 view .LVU8
  51 0010 0024     		movs	r4, #0
  52              	.LVL2:
  53              	.L2:
2438:Src/queue.c   ****         }
2439:Src/queue.c   ****     }
2440:Src/queue.c   ****     taskEXIT_CRITICAL();
  54              		.loc 1 2440 5 is_stmt 1 view .LVU9
  55 0012 FFF7FEFF 		bl	vPortExitCritical
  56              	.LVL3:
2441:Src/queue.c   **** 
2442:Src/queue.c   ****     return xReturn;
  57              		.loc 1 2442 5 view .LVU10
2443:Src/queue.c   **** }
  58              		.loc 1 2443 1 is_stmt 0 view .LVU11
  59 0016 2046     		mov	r0, r4
  60 0018 10BD     		pop	{r4, pc}
  61              	.LVL4:
  62              	.L5:
2433:Src/queue.c   ****         }
  63              		.loc 1 2433 21 view .LVU12
  64 001a 0124     		movs	r4, #1
  65              	.LVL5:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 45


2433:Src/queue.c   ****         }
  66              		.loc 1 2433 21 view .LVU13
  67 001c F9E7     		b	.L2
  68              		.cfi_endproc
  69              	.LFE24:
  71              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  72              		.align	1
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu softvfp
  78              	prvIsQueueEmpty:
  79              	.LVL6:
  80              	.LFB22:
2385:Src/queue.c   ****     BaseType_t xReturn;
  81              		.loc 1 2385 1 is_stmt 1 view -0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
2385:Src/queue.c   ****     BaseType_t xReturn;
  85              		.loc 1 2385 1 is_stmt 0 view .LVU15
  86 0000 10B5     		push	{r4, lr}
  87              	.LCFI1:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 4, -8
  90              		.cfi_offset 14, -4
  91 0002 0446     		mov	r4, r0
2386:Src/queue.c   **** 
  92              		.loc 1 2386 5 is_stmt 1 view .LVU16
2388:Src/queue.c   ****     {
  93              		.loc 1 2388 5 view .LVU17
  94 0004 FFF7FEFF 		bl	vPortEnterCritical
  95              	.LVL7:
2390:Src/queue.c   ****         {
  96              		.loc 1 2390 9 view .LVU18
2390:Src/queue.c   ****         {
  97              		.loc 1 2390 20 is_stmt 0 view .LVU19
  98 0008 A36B     		ldr	r3, [r4, #56]
2390:Src/queue.c   ****         {
  99              		.loc 1 2390 11 view .LVU20
 100 000a 23B9     		cbnz	r3, .L8
2392:Src/queue.c   ****         }
 101              		.loc 1 2392 21 view .LVU21
 102 000c 0124     		movs	r4, #1
 103              	.LVL8:
 104              	.L7:
2399:Src/queue.c   **** 
 105              		.loc 1 2399 5 is_stmt 1 view .LVU22
 106 000e FFF7FEFF 		bl	vPortExitCritical
 107              	.LVL9:
2401:Src/queue.c   **** }
 108              		.loc 1 2401 5 view .LVU23
2402:Src/queue.c   **** /*-----------------------------------------------------------*/
 109              		.loc 1 2402 1 is_stmt 0 view .LVU24
 110 0012 2046     		mov	r0, r4
 111 0014 10BD     		pop	{r4, pc}
 112              	.LVL10:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 46


 113              	.L8:
2396:Src/queue.c   ****         }
 114              		.loc 1 2396 21 view .LVU25
 115 0016 0024     		movs	r4, #0
 116              	.LVL11:
2396:Src/queue.c   ****         }
 117              		.loc 1 2396 21 view .LVU26
 118 0018 F9E7     		b	.L7
 119              		.cfi_endproc
 120              	.LFE22:
 122              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 123              		.align	1
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 127              		.fpu softvfp
 129              	prvCopyDataToQueue:
 130              	.LVL12:
 131              	.LFB19:
2163:Src/queue.c   ****     BaseType_t xReturn = pdFALSE;
 132              		.loc 1 2163 1 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
2163:Src/queue.c   ****     BaseType_t xReturn = pdFALSE;
 136              		.loc 1 2163 1 is_stmt 0 view .LVU28
 137 0000 70B5     		push	{r4, r5, r6, lr}
 138              	.LCFI2:
 139              		.cfi_def_cfa_offset 16
 140              		.cfi_offset 4, -16
 141              		.cfi_offset 5, -12
 142              		.cfi_offset 6, -8
 143              		.cfi_offset 14, -4
 144 0002 0446     		mov	r4, r0
 145 0004 1646     		mov	r6, r2
2164:Src/queue.c   ****     UBaseType_t uxMessagesWaiting;
 146              		.loc 1 2164 5 is_stmt 1 view .LVU29
 147              	.LVL13:
2165:Src/queue.c   **** 
 148              		.loc 1 2165 5 view .LVU30
2169:Src/queue.c   **** 
 149              		.loc 1 2169 5 view .LVU31
2169:Src/queue.c   **** 
 150              		.loc 1 2169 23 is_stmt 0 view .LVU32
 151 0006 856B     		ldr	r5, [r0, #56]
 152              	.LVL14:
2171:Src/queue.c   ****     {
 153              		.loc 1 2171 5 is_stmt 1 view .LVU33
2171:Src/queue.c   ****     {
 154              		.loc 1 2171 16 is_stmt 0 view .LVU34
 155 0008 026C     		ldr	r2, [r0, #64]
 156              	.LVL15:
2171:Src/queue.c   ****     {
 157              		.loc 1 2171 7 view .LVU35
 158 000a EAB1     		cbz	r2, .L11
2188:Src/queue.c   ****     {
 159              		.loc 1 2188 10 is_stmt 1 view .LVU36
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 47


2188:Src/queue.c   ****     {
 160              		.loc 1 2188 12 is_stmt 0 view .LVU37
 161 000c 66B9     		cbnz	r6, .L12
2190:Src/queue.c   ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 162              		.loc 1 2190 9 is_stmt 1 view .LVU38
2190:Src/queue.c   ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 163              		.loc 1 2190 18 is_stmt 0 view .LVU39
 164 000e 4068     		ldr	r0, [r0, #4]
 165              	.LVL16:
2190:Src/queue.c   ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 166              		.loc 1 2190 18 view .LVU40
 167 0010 FFF7FEFF 		bl	memcpy
 168              	.LVL17:
2191:Src/queue.c   **** 
 169              		.loc 1 2191 9 is_stmt 1 view .LVU41
2191:Src/queue.c   **** 
 170              		.loc 1 2191 38 is_stmt 0 view .LVU42
 171 0014 226C     		ldr	r2, [r4, #64]
2191:Src/queue.c   **** 
 172              		.loc 1 2191 28 view .LVU43
 173 0016 6368     		ldr	r3, [r4, #4]
 174 0018 1344     		add	r3, r3, r2
 175 001a 6360     		str	r3, [r4, #4]
2193:Src/queue.c   ****         {
 176              		.loc 1 2193 9 is_stmt 1 view .LVU44
2193:Src/queue.c   ****         {
 177              		.loc 1 2193 52 is_stmt 0 view .LVU45
 178 001c A268     		ldr	r2, [r4, #8]
2193:Src/queue.c   ****         {
 179              		.loc 1 2193 11 view .LVU46
 180 001e 9342     		cmp	r3, r2
 181 0020 12D3     		bcc	.L11
2195:Src/queue.c   ****         }
 182              		.loc 1 2195 13 is_stmt 1 view .LVU47
2195:Src/queue.c   ****         }
 183              		.loc 1 2195 41 is_stmt 0 view .LVU48
 184 0022 2368     		ldr	r3, [r4]
2195:Src/queue.c   ****         }
 185              		.loc 1 2195 32 view .LVU49
 186 0024 6360     		str	r3, [r4, #4]
 187 0026 0FE0     		b	.L11
 188              	.LVL18:
 189              	.L12:
2204:Src/queue.c   ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 190              		.loc 1 2204 9 is_stmt 1 view .LVU50
2204:Src/queue.c   ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 191              		.loc 1 2204 18 is_stmt 0 view .LVU51
 192 0028 C068     		ldr	r0, [r0, #12]
 193              	.LVL19:
2204:Src/queue.c   ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 194              		.loc 1 2204 18 view .LVU52
 195 002a FFF7FEFF 		bl	memcpy
 196              	.LVL20:
2205:Src/queue.c   **** 
 197              		.loc 1 2205 9 is_stmt 1 view .LVU53
2205:Src/queue.c   **** 
 198              		.loc 1 2205 48 is_stmt 0 view .LVU54
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 48


 199 002e 226C     		ldr	r2, [r4, #64]
2205:Src/queue.c   **** 
 200              		.loc 1 2205 38 view .LVU55
 201 0030 5142     		rsbs	r1, r2, #0
 202 0032 E368     		ldr	r3, [r4, #12]
 203 0034 9B1A     		subs	r3, r3, r2
 204 0036 E360     		str	r3, [r4, #12]
2207:Src/queue.c   ****         {
 205              		.loc 1 2207 9 is_stmt 1 view .LVU56
2207:Src/queue.c   ****         {
 206              		.loc 1 2207 51 is_stmt 0 view .LVU57
 207 0038 2268     		ldr	r2, [r4]
2207:Src/queue.c   ****         {
 208              		.loc 1 2207 11 view .LVU58
 209 003a 9342     		cmp	r3, r2
 210 003c 02D2     		bcs	.L13
2209:Src/queue.c   ****         }
 211              		.loc 1 2209 13 is_stmt 1 view .LVU59
2209:Src/queue.c   ****         }
 212              		.loc 1 2209 63 is_stmt 0 view .LVU60
 213 003e A368     		ldr	r3, [r4, #8]
2209:Src/queue.c   ****         }
 214              		.loc 1 2209 71 view .LVU61
 215 0040 0B44     		add	r3, r3, r1
2209:Src/queue.c   ****         }
 216              		.loc 1 2209 42 view .LVU62
 217 0042 E360     		str	r3, [r4, #12]
 218              	.L13:
2213:Src/queue.c   ****         }
 219              		.loc 1 2213 37 is_stmt 1 view .LVU63
2216:Src/queue.c   ****         {
 220              		.loc 1 2216 9 view .LVU64
2216:Src/queue.c   ****         {
 221              		.loc 1 2216 11 is_stmt 0 view .LVU65
 222 0044 022E     		cmp	r6, #2
 223 0046 03D0     		beq	.L15
 224              	.L11:
2233:Src/queue.c   ****         }
 225              		.loc 1 2233 37 is_stmt 1 view .LVU66
2237:Src/queue.c   **** 
 226              		.loc 1 2237 5 view .LVU67
2237:Src/queue.c   **** 
 227              		.loc 1 2237 52 is_stmt 0 view .LVU68
 228 0048 0135     		adds	r5, r5, #1
 229              	.LVL21:
2237:Src/queue.c   **** 
 230              		.loc 1 2237 32 view .LVU69
 231 004a A563     		str	r5, [r4, #56]
2239:Src/queue.c   **** }
 232              		.loc 1 2239 5 is_stmt 1 view .LVU70
2240:Src/queue.c   **** /*-----------------------------------------------------------*/
 233              		.loc 1 2240 1 is_stmt 0 view .LVU71
 234 004c 0020     		movs	r0, #0
 235 004e 70BD     		pop	{r4, r5, r6, pc}
 236              	.LVL22:
 237              	.L15:
2218:Src/queue.c   ****             {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 49


 238              		.loc 1 2218 13 is_stmt 1 view .LVU72
2218:Src/queue.c   ****             {
 239              		.loc 1 2218 15 is_stmt 0 view .LVU73
 240 0050 002D     		cmp	r5, #0
 241 0052 F9D0     		beq	.L11
2224:Src/queue.c   ****             }
 242              		.loc 1 2224 17 is_stmt 1 view .LVU74
 243 0054 013D     		subs	r5, r5, #1
 244              	.LVL23:
2224:Src/queue.c   ****             }
 245              		.loc 1 2224 17 is_stmt 0 view .LVU75
 246 0056 F7E7     		b	.L11
 247              		.cfi_endproc
 248              	.LFE19:
 250              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 251              		.align	1
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu softvfp
 257              	prvCopyDataFromQueue:
 258              	.LVL24:
 259              	.LFB20:
2245:Src/queue.c   ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 260              		.loc 1 2245 1 is_stmt 1 view -0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
2245:Src/queue.c   ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 264              		.loc 1 2245 1 is_stmt 0 view .LVU77
 265 0000 0346     		mov	r3, r0
2246:Src/queue.c   ****     {
 266              		.loc 1 2246 5 is_stmt 1 view .LVU78
2246:Src/queue.c   ****     {
 267              		.loc 1 2246 16 is_stmt 0 view .LVU79
 268 0002 026C     		ldr	r2, [r0, #64]
2246:Src/queue.c   ****     {
 269              		.loc 1 2246 7 view .LVU80
 270 0004 6AB1     		cbz	r2, .L20
2245:Src/queue.c   ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 271              		.loc 1 2245 1 view .LVU81
 272 0006 10B5     		push	{r4, lr}
 273              	.LCFI3:
 274              		.cfi_def_cfa_offset 8
 275              		.cfi_offset 4, -8
 276              		.cfi_offset 14, -4
 277 0008 0846     		mov	r0, r1
 278              	.LVL25:
2248:Src/queue.c   **** 
 279              		.loc 1 2248 9 is_stmt 1 view .LVU82
2248:Src/queue.c   **** 
 280              		.loc 1 2248 38 is_stmt 0 view .LVU83
 281 000a D968     		ldr	r1, [r3, #12]
 282              	.LVL26:
2248:Src/queue.c   **** 
 283              		.loc 1 2248 38 view .LVU84
 284 000c 1144     		add	r1, r1, r2
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 50


 285 000e D960     		str	r1, [r3, #12]
2250:Src/queue.c   ****         {
 286              		.loc 1 2250 9 is_stmt 1 view .LVU85
2250:Src/queue.c   ****         {
 287              		.loc 1 2250 62 is_stmt 0 view .LVU86
 288 0010 9C68     		ldr	r4, [r3, #8]
2250:Src/queue.c   ****         {
 289              		.loc 1 2250 11 view .LVU87
 290 0012 A142     		cmp	r1, r4
 291 0014 01D3     		bcc	.L18
2252:Src/queue.c   ****         }
 292              		.loc 1 2252 13 is_stmt 1 view .LVU88
2252:Src/queue.c   ****         }
 293              		.loc 1 2252 51 is_stmt 0 view .LVU89
 294 0016 1968     		ldr	r1, [r3]
2252:Src/queue.c   ****         }
 295              		.loc 1 2252 42 view .LVU90
 296 0018 D960     		str	r1, [r3, #12]
 297              	.L18:
2256:Src/queue.c   ****         }
 298              		.loc 1 2256 37 is_stmt 1 view .LVU91
2259:Src/queue.c   ****     }
 299              		.loc 1 2259 9 view .LVU92
2259:Src/queue.c   ****     }
 300              		.loc 1 2259 18 is_stmt 0 view .LVU93
 301 001a D968     		ldr	r1, [r3, #12]
 302 001c FFF7FEFF 		bl	memcpy
 303              	.LVL27:
2261:Src/queue.c   **** /*-----------------------------------------------------------*/
 304              		.loc 1 2261 1 view .LVU94
 305 0020 10BD     		pop	{r4, pc}
 306              	.LVL28:
 307              	.L20:
 308              	.LCFI4:
 309              		.cfi_def_cfa_offset 0
 310              		.cfi_restore 4
 311              		.cfi_restore 14
2261:Src/queue.c   **** /*-----------------------------------------------------------*/
 312              		.loc 1 2261 1 view .LVU95
 313 0022 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE20:
 317              		.section	.text.prvUnlockQueue,"ax",%progbits
 318              		.align	1
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 322              		.fpu softvfp
 324              	prvUnlockQueue:
 325              	.LVL29:
 326              	.LFB21:
2265:Src/queue.c   ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 327              		.loc 1 2265 1 is_stmt 1 view -0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
2265:Src/queue.c   ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 51


 331              		.loc 1 2265 1 is_stmt 0 view .LVU97
 332 0000 38B5     		push	{r3, r4, r5, lr}
 333              	.LCFI5:
 334              		.cfi_def_cfa_offset 16
 335              		.cfi_offset 3, -16
 336              		.cfi_offset 4, -12
 337              		.cfi_offset 5, -8
 338              		.cfi_offset 14, -4
 339 0002 0546     		mov	r5, r0
2272:Src/queue.c   ****     {
 340              		.loc 1 2272 5 is_stmt 1 view .LVU98
 341 0004 FFF7FEFF 		bl	vPortEnterCritical
 342              	.LVL30:
 343              	.LBB23:
2274:Src/queue.c   **** 
 344              		.loc 1 2274 9 view .LVU99
2274:Src/queue.c   **** 
 345              		.loc 1 2274 16 is_stmt 0 view .LVU100
 346 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 347 000c 64B2     		sxtb	r4, r4
 348              	.LVL31:
2277:Src/queue.c   ****         {
 349              		.loc 1 2277 9 is_stmt 1 view .LVU101
2277:Src/queue.c   ****         {
 350              		.loc 1 2277 14 is_stmt 0 view .LVU102
 351 000e 03E0     		b	.L24
 352              	.L33:
2331:Src/queue.c   ****                         }
 353              		.loc 1 2331 29 is_stmt 1 view .LVU103
 354 0010 FFF7FEFF 		bl	vTaskMissedYield
 355              	.LVL32:
 356              	.L26:
2335:Src/queue.c   ****                         }
 357              		.loc 1 2335 53 view .LVU104
2345:Src/queue.c   ****         }
 358              		.loc 1 2345 13 view .LVU105
 359 0014 013C     		subs	r4, r4, #1
 360              	.LVL33:
2345:Src/queue.c   ****         }
 361              		.loc 1 2345 13 is_stmt 0 view .LVU106
 362 0016 64B2     		sxtb	r4, r4
 363              	.LVL34:
 364              	.L24:
2277:Src/queue.c   ****         {
 365              		.loc 1 2277 14 is_stmt 1 view .LVU107
 366 0018 002C     		cmp	r4, #0
 367 001a 08DD     		ble	.L25
2325:Src/queue.c   ****                     {
 368              		.loc 1 2325 21 view .LVU108
2325:Src/queue.c   ****                     {
 369              		.loc 1 2325 25 is_stmt 0 view .LVU109
 370 001c 6B6A     		ldr	r3, [r5, #36]
2325:Src/queue.c   ****                     {
 371              		.loc 1 2325 23 view .LVU110
 372 001e 33B1     		cbz	r3, .L25
2327:Src/queue.c   ****                         {
 373              		.loc 1 2327 25 is_stmt 1 view .LVU111
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 52


2327:Src/queue.c   ****                         {
 374              		.loc 1 2327 29 is_stmt 0 view .LVU112
 375 0020 05F12400 		add	r0, r5, #36
 376 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 377              	.LVL35:
2327:Src/queue.c   ****                         {
 378              		.loc 1 2327 27 view .LVU113
 379 0028 0028     		cmp	r0, #0
 380 002a F3D0     		beq	.L26
 381 002c F0E7     		b	.L33
 382              	.L25:
2348:Src/queue.c   ****     }
 383              		.loc 1 2348 9 is_stmt 1 view .LVU114
2348:Src/queue.c   ****     }
 384              		.loc 1 2348 26 is_stmt 0 view .LVU115
 385 002e FF23     		movs	r3, #255
 386 0030 85F84530 		strb	r3, [r5, #69]
 387              	.LBE23:
2350:Src/queue.c   **** 
 388              		.loc 1 2350 5 is_stmt 1 view .LVU116
 389 0034 FFF7FEFF 		bl	vPortExitCritical
 390              	.LVL36:
2353:Src/queue.c   ****     {
 391              		.loc 1 2353 5 view .LVU117
 392 0038 FFF7FEFF 		bl	vPortEnterCritical
 393              	.LVL37:
 394              	.LBB24:
2355:Src/queue.c   **** 
 395              		.loc 1 2355 9 view .LVU118
2355:Src/queue.c   **** 
 396              		.loc 1 2355 16 is_stmt 0 view .LVU119
 397 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 398              	.LVL38:
2355:Src/queue.c   **** 
 399              		.loc 1 2355 16 view .LVU120
 400 0040 64B2     		sxtb	r4, r4
 401              	.LVL39:
2357:Src/queue.c   ****         {
 402              		.loc 1 2357 9 is_stmt 1 view .LVU121
2357:Src/queue.c   ****         {
 403              		.loc 1 2357 14 is_stmt 0 view .LVU122
 404 0042 03E0     		b	.L28
 405              	.L34:
2363:Src/queue.c   ****                 }
 406              		.loc 1 2363 21 is_stmt 1 view .LVU123
 407 0044 FFF7FEFF 		bl	vTaskMissedYield
 408              	.LVL40:
 409              	.L30:
2367:Src/queue.c   ****                 }
 410              		.loc 1 2367 45 view .LVU124
2370:Src/queue.c   ****             }
 411              		.loc 1 2370 17 view .LVU125
 412 0048 013C     		subs	r4, r4, #1
 413              	.LVL41:
2370:Src/queue.c   ****             }
 414              		.loc 1 2370 17 is_stmt 0 view .LVU126
 415 004a 64B2     		sxtb	r4, r4
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 53


 416              	.LVL42:
 417              	.L28:
2357:Src/queue.c   ****         {
 418              		.loc 1 2357 14 is_stmt 1 view .LVU127
 419 004c 002C     		cmp	r4, #0
 420 004e 08DD     		ble	.L29
2359:Src/queue.c   ****             {
 421              		.loc 1 2359 13 view .LVU128
2359:Src/queue.c   ****             {
 422              		.loc 1 2359 17 is_stmt 0 view .LVU129
 423 0050 2B69     		ldr	r3, [r5, #16]
2359:Src/queue.c   ****             {
 424              		.loc 1 2359 15 view .LVU130
 425 0052 33B1     		cbz	r3, .L29
2361:Src/queue.c   ****                 {
 426              		.loc 1 2361 17 is_stmt 1 view .LVU131
2361:Src/queue.c   ****                 {
 427              		.loc 1 2361 21 is_stmt 0 view .LVU132
 428 0054 05F11000 		add	r0, r5, #16
 429 0058 FFF7FEFF 		bl	xTaskRemoveFromEventList
 430              	.LVL43:
2361:Src/queue.c   ****                 {
 431              		.loc 1 2361 19 view .LVU133
 432 005c 0028     		cmp	r0, #0
 433 005e F3D0     		beq	.L30
 434 0060 F0E7     		b	.L34
 435              	.L29:
2378:Src/queue.c   ****     }
 436              		.loc 1 2378 9 is_stmt 1 view .LVU134
2378:Src/queue.c   ****     }
 437              		.loc 1 2378 26 is_stmt 0 view .LVU135
 438 0062 FF23     		movs	r3, #255
 439 0064 85F84430 		strb	r3, [r5, #68]
 440              	.LBE24:
2380:Src/queue.c   **** }
 441              		.loc 1 2380 5 is_stmt 1 view .LVU136
 442 0068 FFF7FEFF 		bl	vPortExitCritical
 443              	.LVL44:
2381:Src/queue.c   **** /*-----------------------------------------------------------*/
 444              		.loc 1 2381 1 is_stmt 0 view .LVU137
 445 006c 38BD     		pop	{r3, r4, r5, pc}
2381:Src/queue.c   **** /*-----------------------------------------------------------*/
 446              		.loc 1 2381 1 view .LVU138
 447              		.cfi_endproc
 448              	.LFE21:
 450              		.section	.text.xQueueGenericReset,"ax",%progbits
 451              		.align	1
 452              		.global	xQueueGenericReset
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 456              		.fpu softvfp
 458              	xQueueGenericReset:
 459              	.LVL45:
 460              	.LFB4:
 268:Src/queue.c   ****     BaseType_t xReturn = pdPASS;
 461              		.loc 1 268 1 is_stmt 1 view -0
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 54


 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 269:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 465              		.loc 1 269 5 view .LVU140
 270:Src/queue.c   **** 
 466              		.loc 1 270 5 view .LVU141
 272:Src/queue.c   **** 
 467              		.loc 1 272 28 view .LVU142
 274:Src/queue.c   ****         ( pxQueue->uxLength >= 1U ) &&
 468              		.loc 1 274 5 view .LVU143
 274:Src/queue.c   ****         ( pxQueue->uxLength >= 1U ) &&
 469              		.loc 1 274 7 is_stmt 0 view .LVU144
 470 0000 0028     		cmp	r0, #0
 471 0002 42D0     		beq	.L41
 268:Src/queue.c   ****     BaseType_t xReturn = pdPASS;
 472              		.loc 1 268 1 discriminator 1 view .LVU145
 473 0004 38B5     		push	{r3, r4, r5, lr}
 474              	.LCFI6:
 475              		.cfi_def_cfa_offset 16
 476              		.cfi_offset 3, -16
 477              		.cfi_offset 4, -12
 478              		.cfi_offset 5, -8
 479              		.cfi_offset 14, -4
 480 0006 0D46     		mov	r5, r1
 481 0008 0446     		mov	r4, r0
 275:Src/queue.c   ****         /* Check for multiplication overflow. */
 482              		.loc 1 275 18 discriminator 1 view .LVU146
 483 000a C36B     		ldr	r3, [r0, #60]
 274:Src/queue.c   ****         ( pxQueue->uxLength >= 1U ) &&
 484              		.loc 1 274 29 discriminator 1 view .LVU147
 485 000c 002B     		cmp	r3, #0
 486 000e 3ED0     		beq	.L42
 277:Src/queue.c   ****     {
 487              		.loc 1 277 54 view .LVU148
 488 0010 026C     		ldr	r2, [r0, #64]
 277:Src/queue.c   ****     {
 489              		.loc 1 277 44 view .LVU149
 490 0012 0021     		movs	r1, #0
 491              	.LVL46:
 277:Src/queue.c   ****     {
 492              		.loc 1 277 44 view .LVU150
 493 0014 A3FB0223 		umull	r2, r3, r3, r2
 494 0018 13B9     		cbnz	r3, .L48
 495              	.L37:
 275:Src/queue.c   ****         /* Check for multiplication overflow. */
 496              		.loc 1 275 37 view .LVU151
 497 001a 19B1     		cbz	r1, .L49
 322:Src/queue.c   ****     }
 498              		.loc 1 322 17 view .LVU152
 499 001c 0020     		movs	r0, #0
 500              	.LVL47:
 325:Src/queue.c   **** 
 501              		.loc 1 325 38 is_stmt 1 view .LVU153
 329:Src/queue.c   **** }
 502              		.loc 1 329 5 view .LVU154
 329:Src/queue.c   **** }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 55


 503              		.loc 1 329 12 is_stmt 0 view .LVU155
 504 001e 37E0     		b	.L35
 505              	.LVL48:
 506              	.L48:
 277:Src/queue.c   ****     {
 507              		.loc 1 277 44 view .LVU156
 508 0020 0121     		movs	r1, #1
 509 0022 FAE7     		b	.L37
 510              	.L49:
 279:Src/queue.c   ****         {
 511              		.loc 1 279 9 is_stmt 1 view .LVU157
 512 0024 FFF7FEFF 		bl	vPortEnterCritical
 513              	.LVL49:
 281:Src/queue.c   ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 514              		.loc 1 281 13 view .LVU158
 281:Src/queue.c   ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 515              		.loc 1 281 47 is_stmt 0 view .LVU159
 516 0028 2168     		ldr	r1, [r4]
 281:Src/queue.c   ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 517              		.loc 1 281 67 view .LVU160
 518 002a E26B     		ldr	r2, [r4, #60]
 281:Src/queue.c   ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 519              		.loc 1 281 87 view .LVU161
 520 002c 236C     		ldr	r3, [r4, #64]
 281:Src/queue.c   ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 521              		.loc 1 281 56 view .LVU162
 522 002e 03FB0210 		mla	r0, r3, r2, r1
 281:Src/queue.c   ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 523              		.loc 1 281 38 view .LVU163
 524 0032 A060     		str	r0, [r4, #8]
 282:Src/queue.c   ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 525              		.loc 1 282 13 is_stmt 1 view .LVU164
 282:Src/queue.c   ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 526              		.loc 1 282 40 is_stmt 0 view .LVU165
 527 0034 0020     		movs	r0, #0
 528 0036 A063     		str	r0, [r4, #56]
 283:Src/queue.c   ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 529              		.loc 1 283 13 is_stmt 1 view .LVU166
 283:Src/queue.c   ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 530              		.loc 1 283 32 is_stmt 0 view .LVU167
 531 0038 6160     		str	r1, [r4, #4]
 284:Src/queue.c   ****             pxQueue->cRxLock = queueUNLOCKED;
 532              		.loc 1 284 13 is_stmt 1 view .LVU168
 284:Src/queue.c   ****             pxQueue->cRxLock = queueUNLOCKED;
 533              		.loc 1 284 84 is_stmt 0 view .LVU169
 534 003a 013A     		subs	r2, r2, #1
 284:Src/queue.c   ****             pxQueue->cRxLock = queueUNLOCKED;
 535              		.loc 1 284 60 view .LVU170
 536 003c 02FB0313 		mla	r3, r2, r3, r1
 284:Src/queue.c   ****             pxQueue->cRxLock = queueUNLOCKED;
 537              		.loc 1 284 42 view .LVU171
 538 0040 E360     		str	r3, [r4, #12]
 285:Src/queue.c   ****             pxQueue->cTxLock = queueUNLOCKED;
 539              		.loc 1 285 13 is_stmt 1 view .LVU172
 285:Src/queue.c   ****             pxQueue->cTxLock = queueUNLOCKED;
 540              		.loc 1 285 30 is_stmt 0 view .LVU173
 541 0042 FF23     		movs	r3, #255
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 56


 542 0044 84F84430 		strb	r3, [r4, #68]
 286:Src/queue.c   **** 
 543              		.loc 1 286 13 is_stmt 1 view .LVU174
 286:Src/queue.c   **** 
 544              		.loc 1 286 30 is_stmt 0 view .LVU175
 545 0048 84F84530 		strb	r3, [r4, #69]
 288:Src/queue.c   ****             {
 546              		.loc 1 288 13 is_stmt 1 view .LVU176
 288:Src/queue.c   ****             {
 547              		.loc 1 288 15 is_stmt 0 view .LVU177
 548 004c A5B9     		cbnz	r5, .L39
 295:Src/queue.c   ****                 {
 549              		.loc 1 295 17 is_stmt 1 view .LVU178
 295:Src/queue.c   ****                 {
 550              		.loc 1 295 21 is_stmt 0 view .LVU179
 551 004e 2369     		ldr	r3, [r4, #16]
 295:Src/queue.c   ****                 {
 552              		.loc 1 295 19 view .LVU180
 553 0050 1BB9     		cbnz	r3, .L50
 554              	.L40:
 318:Src/queue.c   ****     }
 555              		.loc 1 318 9 is_stmt 1 view .LVU181
 556 0052 FFF7FEFF 		bl	vPortExitCritical
 557              	.LVL50:
 269:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 558              		.loc 1 269 16 is_stmt 0 view .LVU182
 559 0056 0120     		movs	r0, #1
 318:Src/queue.c   ****     }
 560              		.loc 1 318 9 view .LVU183
 561 0058 1AE0     		b	.L35
 562              	.L50:
 297:Src/queue.c   ****                     {
 563              		.loc 1 297 21 is_stmt 1 view .LVU184
 297:Src/queue.c   ****                     {
 564              		.loc 1 297 25 is_stmt 0 view .LVU185
 565 005a 04F11000 		add	r0, r4, #16
 566 005e FFF7FEFF 		bl	xTaskRemoveFromEventList
 567              	.LVL51:
 297:Src/queue.c   ****                     {
 568              		.loc 1 297 23 view .LVU186
 569 0062 0028     		cmp	r0, #0
 570 0064 F5D0     		beq	.L40
 299:Src/queue.c   ****                     }
 571              		.loc 1 299 25 is_stmt 1 view .LVU187
 572 0066 0B4B     		ldr	r3, .L51
 573 0068 4FF08052 		mov	r2, #268435456
 574 006c 1A60     		str	r2, [r3]
 299:Src/queue.c   ****                     }
 575              		.loc 1 299 25 view .LVU188
 576              		.syntax unified
 577              	@ 299 "Src/queue.c" 1
 578 006e BFF34F8F 		dsb
 579              	@ 0 "" 2
 299:Src/queue.c   ****                     }
 580              		.loc 1 299 25 view .LVU189
 581              	@ 299 "Src/queue.c" 1
 582 0072 BFF36F8F 		isb
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 57


 583              	@ 0 "" 2
 299:Src/queue.c   ****                     }
 584              		.loc 1 299 57 view .LVU190
 585              		.thumb
 586              		.syntax unified
 587 0076 ECE7     		b	.L40
 588              	.L39:
 314:Src/queue.c   ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 589              		.loc 1 314 17 view .LVU191
 590 0078 04F11000 		add	r0, r4, #16
 591 007c FFF7FEFF 		bl	vListInitialise
 592              	.LVL52:
 315:Src/queue.c   ****             }
 593              		.loc 1 315 17 view .LVU192
 594 0080 04F12400 		add	r0, r4, #36
 595 0084 FFF7FEFF 		bl	vListInitialise
 596              	.LVL53:
 597 0088 E3E7     		b	.L40
 598              	.LVL54:
 599              	.L41:
 600              	.LCFI7:
 601              		.cfi_def_cfa_offset 0
 602              		.cfi_restore 3
 603              		.cfi_restore 4
 604              		.cfi_restore 5
 605              		.cfi_restore 14
 322:Src/queue.c   ****     }
 606              		.loc 1 322 17 is_stmt 0 view .LVU193
 607 008a 0020     		movs	r0, #0
 608              	.LVL55:
 330:Src/queue.c   **** /*-----------------------------------------------------------*/
 609              		.loc 1 330 1 view .LVU194
 610 008c 7047     		bx	lr
 611              	.LVL56:
 612              	.L42:
 613              	.LCFI8:
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 3, -16
 616              		.cfi_offset 4, -12
 617              		.cfi_offset 5, -8
 618              		.cfi_offset 14, -4
 322:Src/queue.c   ****     }
 619              		.loc 1 322 17 view .LVU195
 620 008e 0020     		movs	r0, #0
 621              	.LVL57:
 622              	.L35:
 330:Src/queue.c   **** /*-----------------------------------------------------------*/
 623              		.loc 1 330 1 view .LVU196
 624 0090 38BD     		pop	{r3, r4, r5, pc}
 625              	.LVL58:
 626              	.L52:
 330:Src/queue.c   **** /*-----------------------------------------------------------*/
 627              		.loc 1 330 1 view .LVU197
 628 0092 00BF     		.align	2
 629              	.L51:
 630 0094 04ED00E0 		.word	-536810236
 631              		.cfi_endproc
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 58


 632              	.LFE4:
 634              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 635              		.align	1
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu softvfp
 641              	prvInitialiseNewQueue:
 642              	.LVL59:
 643              	.LFB6:
 469:Src/queue.c   ****     /* Remove compiler warnings about unused parameters should
 644              		.loc 1 469 1 is_stmt 1 view -0
 645              		.cfi_startproc
 646              		@ args = 4, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 469:Src/queue.c   ****     /* Remove compiler warnings about unused parameters should
 648              		.loc 1 469 1 is_stmt 0 view .LVU199
 649 0000 10B5     		push	{r4, lr}
 650              	.LCFI9:
 651              		.cfi_def_cfa_offset 8
 652              		.cfi_offset 4, -8
 653              		.cfi_offset 14, -4
 654 0002 0346     		mov	r3, r0
 655              	.LVL60:
 469:Src/queue.c   ****     /* Remove compiler warnings about unused parameters should
 656              		.loc 1 469 1 view .LVU200
 657 0004 0298     		ldr	r0, [sp, #8]
 658              	.LVL61:
 472:Src/queue.c   **** 
 659              		.loc 1 472 5 is_stmt 1 view .LVU201
 474:Src/queue.c   ****     {
 660              		.loc 1 474 5 view .LVU202
 474:Src/queue.c   ****     {
 661              		.loc 1 474 7 is_stmt 0 view .LVU203
 662 0006 0C46     		mov	r4, r1
 663 0008 31B9     		cbnz	r1, .L54
 480:Src/queue.c   ****     }
 664              		.loc 1 480 9 is_stmt 1 view .LVU204
 480:Src/queue.c   ****     }
 665              		.loc 1 480 28 is_stmt 0 view .LVU205
 666 000a 0060     		str	r0, [r0]
 667              	.L55:
 490:Src/queue.c   ****     pxNewQueue->uxItemSize = uxItemSize;
 668              		.loc 1 490 5 is_stmt 1 view .LVU206
 490:Src/queue.c   ****     pxNewQueue->uxItemSize = uxItemSize;
 669              		.loc 1 490 26 is_stmt 0 view .LVU207
 670 000c C363     		str	r3, [r0, #60]
 491:Src/queue.c   ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 671              		.loc 1 491 5 is_stmt 1 view .LVU208
 491:Src/queue.c   ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 672              		.loc 1 491 28 is_stmt 0 view .LVU209
 673 000e 0464     		str	r4, [r0, #64]
 492:Src/queue.c   **** 
 674              		.loc 1 492 5 is_stmt 1 view .LVU210
 492:Src/queue.c   **** 
 675              		.loc 1 492 14 is_stmt 0 view .LVU211
 676 0010 0121     		movs	r1, #1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 59


 677              	.LVL62:
 492:Src/queue.c   **** 
 678              		.loc 1 492 14 view .LVU212
 679 0012 FFF7FEFF 		bl	xQueueGenericReset
 680              	.LVL63:
 506:Src/queue.c   **** }
 681              		.loc 1 506 36 is_stmt 1 view .LVU213
 507:Src/queue.c   **** /*-----------------------------------------------------------*/
 682              		.loc 1 507 1 is_stmt 0 view .LVU214
 683 0016 10BD     		pop	{r4, pc}
 684              	.LVL64:
 685              	.L54:
 485:Src/queue.c   ****     }
 686              		.loc 1 485 9 is_stmt 1 view .LVU215
 485:Src/queue.c   ****     }
 687              		.loc 1 485 28 is_stmt 0 view .LVU216
 688 0018 0260     		str	r2, [r0]
 689 001a F7E7     		b	.L55
 690              		.cfi_endproc
 691              	.LFE6:
 693              		.section	.text.xQueueGenericCreate,"ax",%progbits
 694              		.align	1
 695              		.global	xQueueGenericCreate
 696              		.syntax unified
 697              		.thumb
 698              		.thumb_func
 699              		.fpu softvfp
 701              	xQueueGenericCreate:
 702              	.LVL65:
 703              	.LFB5:
 401:Src/queue.c   ****         Queue_t * pxNewQueue = NULL;
 704              		.loc 1 401 5 is_stmt 1 view -0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 401:Src/queue.c   ****         Queue_t * pxNewQueue = NULL;
 708              		.loc 1 401 5 is_stmt 0 view .LVU218
 709 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 710              	.LCFI10:
 711              		.cfi_def_cfa_offset 20
 712              		.cfi_offset 4, -20
 713              		.cfi_offset 5, -16
 714              		.cfi_offset 6, -12
 715              		.cfi_offset 7, -8
 716              		.cfi_offset 14, -4
 717 0002 83B0     		sub	sp, sp, #12
 718              	.LCFI11:
 719              		.cfi_def_cfa_offset 32
 402:Src/queue.c   ****         size_t xQueueSizeInBytes;
 720              		.loc 1 402 9 is_stmt 1 view .LVU219
 721              	.LVL66:
 403:Src/queue.c   ****         uint8_t * pucQueueStorage;
 722              		.loc 1 403 9 view .LVU220
 404:Src/queue.c   **** 
 723              		.loc 1 404 9 view .LVU221
 406:Src/queue.c   ****             /* Check for multiplication overflow. */
 724              		.loc 1 406 9 view .LVU222
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 60


 406:Src/queue.c   ****             /* Check for multiplication overflow. */
 725              		.loc 1 406 11 is_stmt 0 view .LVU223
 726 0004 E0B1     		cbz	r0, .L61
 727 0006 0C46     		mov	r4, r1
 728 0008 1746     		mov	r7, r2
 729 000a 0546     		mov	r5, r0
 408:Src/queue.c   ****             /* Check for addition overflow. */
 730              		.loc 1 408 44 discriminator 1 view .LVU224
 731 000c 0023     		movs	r3, #0
 732 000e A0FB0412 		umull	r1, r2, r0, r4
 733              	.LVL67:
 408:Src/queue.c   ****             /* Check for addition overflow. */
 734              		.loc 1 408 44 discriminator 1 view .LVU225
 735 0012 9AB9     		cbnz	r2, .L65
 736              	.L59:
 406:Src/queue.c   ****             /* Check for multiplication overflow. */
 737              		.loc 1 406 51 discriminator 1 view .LVU226
 738 0014 C3B9     		cbnz	r3, .L62
 410:Src/queue.c   ****         {
 739              		.loc 1 410 67 view .LVU227
 740 0016 04FB05F0 		mul	r0, r4, r5
 741              	.LVL68:
 408:Src/queue.c   ****             /* Check for addition overflow. */
 742              		.loc 1 408 60 view .LVU228
 743 001a 10F1490F 		cmn	r0, #73
 744 001e 15D8     		bhi	.L63
 415:Src/queue.c   **** 
 745              		.loc 1 415 13 is_stmt 1 view .LVU229
 746              	.LVL69:
 426:Src/queue.c   **** 
 747              		.loc 1 426 13 view .LVU230
 426:Src/queue.c   **** 
 748              		.loc 1 426 40 is_stmt 0 view .LVU231
 749 0020 4830     		adds	r0, r0, #72
 750              	.LVL70:
 426:Src/queue.c   **** 
 751              		.loc 1 426 40 view .LVU232
 752 0022 FFF7FEFF 		bl	pvPortMalloc
 753              	.LVL71:
 428:Src/queue.c   ****             {
 754              		.loc 1 428 13 is_stmt 1 view .LVU233
 428:Src/queue.c   ****             {
 755              		.loc 1 428 15 is_stmt 0 view .LVU234
 756 0026 0646     		mov	r6, r0
 757 0028 58B1     		cbz	r0, .L57
 432:Src/queue.c   ****                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on c
 758              		.loc 1 432 17 is_stmt 1 view .LVU235
 759              	.LVL72:
 433:Src/queue.c   **** 
 760              		.loc 1 433 17 view .LVU236
 444:Src/queue.c   ****             }
 761              		.loc 1 444 17 view .LVU237
 762 002a 0090     		str	r0, [sp]
 763 002c 3B46     		mov	r3, r7
 764 002e 00F14802 		add	r2, r0, #72
 765              	.LVL73:
 444:Src/queue.c   ****             }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 61


 766              		.loc 1 444 17 is_stmt 0 view .LVU238
 767 0032 2146     		mov	r1, r4
 768 0034 2846     		mov	r0, r5
 769              	.LVL74:
 444:Src/queue.c   ****             }
 770              		.loc 1 444 17 view .LVU239
 771 0036 FFF7FEFF 		bl	prvInitialiseNewQueue
 772              	.LVL75:
 444:Src/queue.c   ****             }
 773              		.loc 1 444 17 view .LVU240
 774 003a 02E0     		b	.L57
 775              	.LVL76:
 776              	.L65:
 408:Src/queue.c   ****             /* Check for addition overflow. */
 777              		.loc 1 408 44 discriminator 1 view .LVU241
 778 003c 0123     		movs	r3, #1
 779 003e E9E7     		b	.L59
 780              	.LVL77:
 781              	.L61:
 402:Src/queue.c   ****         size_t xQueueSizeInBytes;
 782              		.loc 1 402 19 view .LVU242
 783 0040 0026     		movs	r6, #0
 784              	.LVL78:
 785              	.L57:
 459:Src/queue.c   **** 
 786              		.loc 1 459 5 view .LVU243
 787 0042 3046     		mov	r0, r6
 788 0044 03B0     		add	sp, sp, #12
 789              	.LCFI12:
 790              		.cfi_remember_state
 791              		.cfi_def_cfa_offset 20
 792              		@ sp needed
 793 0046 F0BD     		pop	{r4, r5, r6, r7, pc}
 794              	.LVL79:
 795              	.L62:
 796              	.LCFI13:
 797              		.cfi_restore_state
 402:Src/queue.c   ****         size_t xQueueSizeInBytes;
 798              		.loc 1 402 19 view .LVU244
 799 0048 0026     		movs	r6, #0
 800 004a FAE7     		b	.L57
 801              	.LVL80:
 802              	.L63:
 402:Src/queue.c   ****         size_t xQueueSizeInBytes;
 803              		.loc 1 402 19 view .LVU245
 804 004c 0026     		movs	r6, #0
 454:Src/queue.c   ****             mtCOVERAGE_TEST_MARKER();
 805              		.loc 1 454 39 is_stmt 1 view .LVU246
 455:Src/queue.c   ****         }
 806              		.loc 1 455 37 view .LVU247
 458:Src/queue.c   ****     }
 807              		.loc 1 458 9 view .LVU248
 458:Src/queue.c   ****     }
 808              		.loc 1 458 16 is_stmt 0 view .LVU249
 809 004e F8E7     		b	.L57
 810              		.cfi_endproc
 811              	.LFE5:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 62


 813              		.section	.text.xQueueGenericSend,"ax",%progbits
 814              		.align	1
 815              		.global	xQueueGenericSend
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu softvfp
 821              	xQueueGenericSend:
 822              	.LVL81:
 823              	.LFB7:
 809:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 824              		.loc 1 809 1 is_stmt 1 view -0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 16
 827              		@ frame_needed = 0, uses_anonymous_args = 0
 809:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 828              		.loc 1 809 1 is_stmt 0 view .LVU251
 829 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 830              	.LCFI14:
 831              		.cfi_def_cfa_offset 20
 832              		.cfi_offset 4, -20
 833              		.cfi_offset 5, -16
 834              		.cfi_offset 6, -12
 835              		.cfi_offset 7, -8
 836              		.cfi_offset 14, -4
 837 0002 85B0     		sub	sp, sp, #20
 838              	.LCFI15:
 839              		.cfi_def_cfa_offset 40
 840 0004 0446     		mov	r4, r0
 841 0006 0F46     		mov	r7, r1
 842 0008 0192     		str	r2, [sp, #4]
 843 000a 1D46     		mov	r5, r3
 810:Src/queue.c   ****     TimeOut_t xTimeOut;
 844              		.loc 1 810 5 is_stmt 1 view .LVU252
 845              	.LVL82:
 811:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 846              		.loc 1 811 5 view .LVU253
 812:Src/queue.c   **** 
 847              		.loc 1 812 5 view .LVU254
 810:Src/queue.c   ****     TimeOut_t xTimeOut;
 848              		.loc 1 810 16 is_stmt 0 view .LVU255
 849 000c 0026     		movs	r6, #0
 850 000e 39E0     		b	.L67
 851              	.LVL83:
 852              	.L68:
 836:Src/queue.c   **** 
 853              		.loc 1 836 43 is_stmt 1 view .LVU256
 900:Src/queue.c   **** 
 854              		.loc 1 900 25 view .LVU257
 900:Src/queue.c   **** 
 855              		.loc 1 900 42 is_stmt 0 view .LVU258
 856 0010 2A46     		mov	r2, r5
 857 0012 3946     		mov	r1, r7
 858 0014 2046     		mov	r0, r4
 859 0016 FFF7FEFF 		bl	prvCopyDataToQueue
 860              	.LVL84:
 904:Src/queue.c   ****                         {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 63


 861              		.loc 1 904 25 is_stmt 1 view .LVU259
 904:Src/queue.c   ****                         {
 862              		.loc 1 904 29 is_stmt 0 view .LVU260
 863 001a 636A     		ldr	r3, [r4, #36]
 904:Src/queue.c   ****                         {
 864              		.loc 1 904 27 view .LVU261
 865 001c 6BB9     		cbnz	r3, .L81
 919:Src/queue.c   ****                         {
 866              		.loc 1 919 30 is_stmt 1 view .LVU262
 919:Src/queue.c   ****                         {
 867              		.loc 1 919 32 is_stmt 0 view .LVU263
 868 001e 38B1     		cbz	r0, .L71
 925:Src/queue.c   ****                         }
 869              		.loc 1 925 29 is_stmt 1 view .LVU264
 870 0020 3C4B     		ldr	r3, .L86
 871 0022 4FF08052 		mov	r2, #268435456
 872 0026 1A60     		str	r2, [r3]
 925:Src/queue.c   ****                         }
 873              		.loc 1 925 29 view .LVU265
 874              		.syntax unified
 875              	@ 925 "Src/queue.c" 1
 876 0028 BFF34F8F 		dsb
 877              	@ 0 "" 2
 925:Src/queue.c   ****                         }
 878              		.loc 1 925 29 view .LVU266
 879              	@ 925 "Src/queue.c" 1
 880 002c BFF36F8F 		isb
 881              	@ 0 "" 2
 925:Src/queue.c   ****                         }
 882              		.loc 1 925 61 view .LVU267
 883              	.LVL85:
 884              		.thumb
 885              		.syntax unified
 886              	.L71:
 929:Src/queue.c   ****                         }
 887              		.loc 1 929 53 view .LVU268
 934:Src/queue.c   ****                 return pdPASS;
 888              		.loc 1 934 17 view .LVU269
 889 0030 FFF7FEFF 		bl	vPortExitCritical
 890              	.LVL86:
 935:Src/queue.c   ****             }
 891              		.loc 1 935 17 view .LVU270
 935:Src/queue.c   ****             }
 892              		.loc 1 935 24 is_stmt 0 view .LVU271
 893 0034 0120     		movs	r0, #1
 894              	.L66:
1014:Src/queue.c   **** /*-----------------------------------------------------------*/
 895              		.loc 1 1014 1 view .LVU272
 896 0036 05B0     		add	sp, sp, #20
 897              	.LCFI16:
 898              		.cfi_remember_state
 899              		.cfi_def_cfa_offset 20
 900              		@ sp needed
 901 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 902              	.LVL87:
 903              	.L81:
 904              	.LCFI17:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 64


 905              		.cfi_restore_state
 906:Src/queue.c   ****                             {
 906              		.loc 1 906 29 is_stmt 1 view .LVU273
 906:Src/queue.c   ****                             {
 907              		.loc 1 906 33 is_stmt 0 view .LVU274
 908 003a 04F12400 		add	r0, r4, #36
 909              	.LVL88:
 906:Src/queue.c   ****                             {
 910              		.loc 1 906 33 view .LVU275
 911 003e FFF7FEFF 		bl	xTaskRemoveFromEventList
 912              	.LVL89:
 906:Src/queue.c   ****                             {
 913              		.loc 1 906 31 view .LVU276
 914 0042 0028     		cmp	r0, #0
 915 0044 F4D0     		beq	.L71
 912:Src/queue.c   ****                             }
 916              		.loc 1 912 33 is_stmt 1 view .LVU277
 917 0046 334B     		ldr	r3, .L86
 918 0048 4FF08052 		mov	r2, #268435456
 919 004c 1A60     		str	r2, [r3]
 912:Src/queue.c   ****                             }
 920              		.loc 1 912 33 view .LVU278
 921              		.syntax unified
 922              	@ 912 "Src/queue.c" 1
 923 004e BFF34F8F 		dsb
 924              	@ 0 "" 2
 912:Src/queue.c   ****                             }
 925              		.loc 1 912 33 view .LVU279
 926              	@ 912 "Src/queue.c" 1
 927 0052 BFF36F8F 		isb
 928              	@ 0 "" 2
 912:Src/queue.c   ****                             }
 929              		.loc 1 912 65 view .LVU280
 930              		.thumb
 931              		.syntax unified
 932 0056 EBE7     		b	.L71
 933              	.L82:
 943:Src/queue.c   **** 
 934              		.loc 1 943 21 view .LVU281
 935 0058 FFF7FEFF 		bl	vPortExitCritical
 936              	.LVL90:
 947:Src/queue.c   ****                     return errQUEUE_FULL;
 937              		.loc 1 947 54 view .LVU282
 948:Src/queue.c   ****                 }
 938              		.loc 1 948 21 view .LVU283
 948:Src/queue.c   ****                 }
 939              		.loc 1 948 28 is_stmt 0 view .LVU284
 940 005c 0020     		movs	r0, #0
 941 005e EAE7     		b	.L66
 942              	.L83:
 954:Src/queue.c   ****                     xEntryTimeSet = pdTRUE;
 943              		.loc 1 954 21 is_stmt 1 view .LVU285
 944 0060 02A8     		add	r0, sp, #8
 945 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 946              	.LVL91:
 955:Src/queue.c   ****                 }
 947              		.loc 1 955 21 view .LVU286
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 65


 955:Src/queue.c   ****                 }
 948              		.loc 1 955 35 is_stmt 0 view .LVU287
 949 0066 0126     		movs	r6, #1
 950 0068 19E0     		b	.L74
 951              	.LVL92:
 952              	.L84:
 970:Src/queue.c   **** 
 953              		.loc 1 970 9 is_stmt 1 discriminator 1 view .LVU288
 954 006a 0023     		movs	r3, #0
 955 006c 84F84430 		strb	r3, [r4, #68]
 956 0070 21E0     		b	.L75
 957              	.L85:
 970:Src/queue.c   **** 
 958              		.loc 1 970 9 discriminator 4 view .LVU289
 959 0072 0023     		movs	r3, #0
 960 0074 84F84530 		strb	r3, [r4, #69]
 961 0078 23E0     		b	.L76
 962              	.L78:
1000:Src/queue.c   ****                 ( void ) xTaskResumeAll();
 963              		.loc 1 1000 17 view .LVU290
 964 007a 2046     		mov	r0, r4
 965 007c FFF7FEFF 		bl	prvUnlockQueue
 966              	.LVL93:
1001:Src/queue.c   ****             }
 967              		.loc 1 1001 17 view .LVU291
1001:Src/queue.c   ****             }
 968              		.loc 1 1001 26 is_stmt 0 view .LVU292
 969 0080 FFF7FEFF 		bl	xTaskResumeAll
 970              	.LVL94:
 971              	.L67:
 814:Src/queue.c   ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 972              		.loc 1 814 28 is_stmt 1 view .LVU293
 815:Src/queue.c   ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 973              		.loc 1 815 100 view .LVU294
 816:Src/queue.c   ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 974              		.loc 1 816 91 view .LVU295
 819:Src/queue.c   ****         }
 975              		.loc 1 819 114 view .LVU296
 826:Src/queue.c   ****     {
 976              		.loc 1 826 5 view .LVU297
 828:Src/queue.c   ****         {
 977              		.loc 1 828 9 view .LVU298
 978 0084 FFF7FEFF 		bl	vPortEnterCritical
 979              	.LVL95:
 834:Src/queue.c   ****             {
 980              		.loc 1 834 13 view .LVU299
 834:Src/queue.c   ****             {
 981              		.loc 1 834 26 is_stmt 0 view .LVU300
 982 0088 A26B     		ldr	r2, [r4, #56]
 834:Src/queue.c   ****             {
 983              		.loc 1 834 55 view .LVU301
 984 008a E36B     		ldr	r3, [r4, #60]
 834:Src/queue.c   ****             {
 985              		.loc 1 834 15 view .LVU302
 986 008c 9A42     		cmp	r2, r3
 987 008e BFD3     		bcc	.L68
 834:Src/queue.c   ****             {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 66


 988              		.loc 1 834 68 discriminator 1 view .LVU303
 989 0090 022D     		cmp	r5, #2
 990 0092 BDD0     		beq	.L68
 939:Src/queue.c   ****                 {
 991              		.loc 1 939 17 is_stmt 1 view .LVU304
 939:Src/queue.c   ****                 {
 992              		.loc 1 939 34 is_stmt 0 view .LVU305
 993 0094 019B     		ldr	r3, [sp, #4]
 939:Src/queue.c   ****                 {
 994              		.loc 1 939 19 view .LVU306
 995 0096 002B     		cmp	r3, #0
 996 0098 DED0     		beq	.L82
 950:Src/queue.c   ****                 {
 997              		.loc 1 950 22 is_stmt 1 view .LVU307
 950:Src/queue.c   ****                 {
 998              		.loc 1 950 24 is_stmt 0 view .LVU308
 999 009a 002E     		cmp	r6, #0
 1000 009c E0D0     		beq	.L83
 1001              	.LVL96:
 1002              	.L74:
 960:Src/queue.c   ****                 }
 1003              		.loc 1 960 45 is_stmt 1 view .LVU309
 964:Src/queue.c   **** 
 1004              		.loc 1 964 9 view .LVU310
 1005 009e FFF7FEFF 		bl	vPortExitCritical
 1006              	.LVL97:
 969:Src/queue.c   ****         prvLockQueue( pxQueue );
 1007              		.loc 1 969 9 view .LVU311
 1008 00a2 FFF7FEFF 		bl	vTaskSuspendAll
 1009              	.LVL98:
 970:Src/queue.c   **** 
 1010              		.loc 1 970 9 view .LVU312
 1011 00a6 FFF7FEFF 		bl	vPortEnterCritical
 1012              	.LVL99:
 970:Src/queue.c   **** 
 1013              		.loc 1 970 9 view .LVU313
 1014 00aa 94F84420 		ldrb	r2, [r4, #68]	@ zero_extendqisi2
 1015 00ae 52B2     		sxtb	r2, r2
 1016 00b0 B2F1FF3F 		cmp	r2, #-1
 1017 00b4 D9D0     		beq	.L84
 1018              	.L75:
 970:Src/queue.c   **** 
 1019              		.loc 1 970 9 discriminator 3 view .LVU314
 1020 00b6 94F84520 		ldrb	r2, [r4, #69]	@ zero_extendqisi2
 1021 00ba 52B2     		sxtb	r2, r2
 1022 00bc B2F1FF3F 		cmp	r2, #-1
 1023 00c0 D7D0     		beq	.L85
 1024              	.L76:
 970:Src/queue.c   **** 
 1025              		.loc 1 970 9 discriminator 6 view .LVU315
 1026 00c2 FFF7FEFF 		bl	vPortExitCritical
 1027              	.LVL100:
 973:Src/queue.c   ****         {
 1028              		.loc 1 973 9 discriminator 6 view .LVU316
 973:Src/queue.c   ****         {
 1029              		.loc 1 973 13 is_stmt 0 discriminator 6 view .LVU317
 1030 00c6 01A9     		add	r1, sp, #4
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 67


 1031 00c8 02A8     		add	r0, sp, #8
 1032 00ca FFF7FEFF 		bl	xTaskCheckForTimeOut
 1033              	.LVL101:
 973:Src/queue.c   ****         {
 1034              		.loc 1 973 11 discriminator 6 view .LVU318
 1035 00ce C8B9     		cbnz	r0, .L77
 975:Src/queue.c   ****             {
 1036              		.loc 1 975 13 is_stmt 1 view .LVU319
 975:Src/queue.c   ****             {
 1037              		.loc 1 975 17 is_stmt 0 view .LVU320
 1038 00d0 2046     		mov	r0, r4
 1039 00d2 FFF7FEFF 		bl	prvIsQueueFull
 1040              	.LVL102:
 975:Src/queue.c   ****             {
 1041              		.loc 1 975 15 view .LVU321
 1042 00d6 0028     		cmp	r0, #0
 1043 00d8 CFD0     		beq	.L78
 977:Src/queue.c   ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1044              		.loc 1 977 55 is_stmt 1 view .LVU322
 978:Src/queue.c   **** 
 1045              		.loc 1 978 17 view .LVU323
 1046 00da 0199     		ldr	r1, [sp, #4]
 1047 00dc 04F11000 		add	r0, r4, #16
 1048 00e0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1049              	.LVL103:
 985:Src/queue.c   **** 
 1050              		.loc 1 985 17 view .LVU324
 1051 00e4 2046     		mov	r0, r4
 1052 00e6 FFF7FEFF 		bl	prvUnlockQueue
 1053              	.LVL104:
 992:Src/queue.c   ****                 {
 1054              		.loc 1 992 17 view .LVU325
 992:Src/queue.c   ****                 {
 1055              		.loc 1 992 21 is_stmt 0 view .LVU326
 1056 00ea FFF7FEFF 		bl	xTaskResumeAll
 1057              	.LVL105:
 992:Src/queue.c   ****                 {
 1058              		.loc 1 992 19 view .LVU327
 1059 00ee 0028     		cmp	r0, #0
 1060 00f0 C8D1     		bne	.L67
 994:Src/queue.c   ****                 }
 1061              		.loc 1 994 21 is_stmt 1 view .LVU328
 1062 00f2 084B     		ldr	r3, .L86
 1063 00f4 4FF08052 		mov	r2, #268435456
 1064 00f8 1A60     		str	r2, [r3]
 994:Src/queue.c   ****                 }
 1065              		.loc 1 994 21 view .LVU329
 1066              		.syntax unified
 1067              	@ 994 "Src/queue.c" 1
 1068 00fa BFF34F8F 		dsb
 1069              	@ 0 "" 2
 994:Src/queue.c   ****                 }
 1070              		.loc 1 994 21 view .LVU330
 1071              	@ 994 "Src/queue.c" 1
 1072 00fe BFF36F8F 		isb
 1073              	@ 0 "" 2
 1074              		.thumb
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 68


 1075              		.syntax unified
 1076 0102 BFE7     		b	.L67
 1077              	.L77:
1007:Src/queue.c   ****             ( void ) xTaskResumeAll();
 1078              		.loc 1 1007 13 view .LVU331
 1079 0104 2046     		mov	r0, r4
 1080 0106 FFF7FEFF 		bl	prvUnlockQueue
 1081              	.LVL106:
1008:Src/queue.c   **** 
 1082              		.loc 1 1008 13 view .LVU332
1008:Src/queue.c   **** 
 1083              		.loc 1 1008 22 is_stmt 0 view .LVU333
 1084 010a FFF7FEFF 		bl	xTaskResumeAll
 1085              	.LVL107:
1010:Src/queue.c   ****             return errQUEUE_FULL;
 1086              		.loc 1 1010 46 is_stmt 1 view .LVU334
1011:Src/queue.c   ****         }
 1087              		.loc 1 1011 13 view .LVU335
1011:Src/queue.c   ****         }
 1088              		.loc 1 1011 20 is_stmt 0 view .LVU336
 1089 010e 0020     		movs	r0, #0
 1090 0110 91E7     		b	.L66
 1091              	.L87:
 1092 0112 00BF     		.align	2
 1093              	.L86:
 1094 0114 04ED00E0 		.word	-536810236
 1095              		.cfi_endproc
 1096              	.LFE7:
 1098              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1099              		.align	1
 1100              		.global	xQueueGenericSendFromISR
 1101              		.syntax unified
 1102              		.thumb
 1103              		.thumb_func
 1104              		.fpu softvfp
 1106              	xQueueGenericSendFromISR:
 1107              	.LVL108:
 1108              	.LFB8:
1021:Src/queue.c   ****     BaseType_t xReturn;
 1109              		.loc 1 1021 1 is_stmt 1 view -0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
1021:Src/queue.c   ****     BaseType_t xReturn;
 1113              		.loc 1 1021 1 is_stmt 0 view .LVU338
 1114 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1115              	.LCFI18:
 1116              		.cfi_def_cfa_offset 24
 1117              		.cfi_offset 3, -24
 1118              		.cfi_offset 4, -20
 1119              		.cfi_offset 5, -16
 1120              		.cfi_offset 6, -12
 1121              		.cfi_offset 7, -8
 1122              		.cfi_offset 14, -4
 1123 0002 0446     		mov	r4, r0
 1124 0004 1646     		mov	r6, r2
 1125 0006 1A46     		mov	r2, r3
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 69


 1126              	.LVL109:
1022:Src/queue.c   ****     UBaseType_t uxSavedInterruptStatus;
 1127              		.loc 1 1022 5 is_stmt 1 view .LVU339
1023:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 1128              		.loc 1 1023 5 view .LVU340
1024:Src/queue.c   **** 
 1129              		.loc 1 1024 5 view .LVU341
1026:Src/queue.c   ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 1130              		.loc 1 1026 28 view .LVU342
1027:Src/queue.c   ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1131              		.loc 1 1027 100 view .LVU343
1028:Src/queue.c   **** 
 1132              		.loc 1 1028 91 view .LVU344
1044:Src/queue.c   **** 
 1133              		.loc 1 1044 47 view .LVU345
1051:Src/queue.c   ****     {
 1134              		.loc 1 1051 5 view .LVU346
 1135              	.LBB25:
 1136              	.LBI25:
 1137              		.file 2 "Inc/portmacro.h"
   1:Inc/portmacro.h **** /*
   2:Inc/portmacro.h ****  * FreeRTOS Kernel V10.4.6
   3:Inc/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Inc/portmacro.h ****  *
   5:Inc/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:Inc/portmacro.h ****  *
   7:Inc/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:Inc/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:Inc/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:Inc/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:Inc/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:Inc/portmacro.h ****  * subject to the following conditions:
  13:Inc/portmacro.h ****  *
  14:Inc/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:Inc/portmacro.h ****  * copies or substantial portions of the Software.
  16:Inc/portmacro.h ****  *
  17:Inc/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Inc/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:Inc/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:Inc/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:Inc/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:Inc/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:Inc/portmacro.h ****  *
  24:Inc/portmacro.h ****  * https://www.FreeRTOS.org
  25:Inc/portmacro.h ****  * https://github.com/FreeRTOS
  26:Inc/portmacro.h ****  *
  27:Inc/portmacro.h ****  */
  28:Inc/portmacro.h **** 
  29:Inc/portmacro.h **** 
  30:Inc/portmacro.h **** #ifndef PORTMACRO_H
  31:Inc/portmacro.h ****     #define PORTMACRO_H
  32:Inc/portmacro.h **** 
  33:Inc/portmacro.h ****     #ifdef __cplusplus
  34:Inc/portmacro.h ****         extern "C" {
  35:Inc/portmacro.h ****     #endif
  36:Inc/portmacro.h **** 
  37:Inc/portmacro.h **** /*-----------------------------------------------------------
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 70


  38:Inc/portmacro.h ****  * Port specific definitions.
  39:Inc/portmacro.h ****  *
  40:Inc/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  41:Inc/portmacro.h ****  * given hardware and compiler.
  42:Inc/portmacro.h ****  *
  43:Inc/portmacro.h ****  * These settings should not be altered.
  44:Inc/portmacro.h ****  *-----------------------------------------------------------
  45:Inc/portmacro.h ****  */
  46:Inc/portmacro.h **** 
  47:Inc/portmacro.h **** /* Type definitions. */
  48:Inc/portmacro.h ****     #define portCHAR          char
  49:Inc/portmacro.h ****     #define portFLOAT         float
  50:Inc/portmacro.h ****     #define portDOUBLE        double
  51:Inc/portmacro.h ****     #define portLONG          long
  52:Inc/portmacro.h ****     #define portSHORT         short
  53:Inc/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  54:Inc/portmacro.h ****     #define portBASE_TYPE     long
  55:Inc/portmacro.h **** 
  56:Inc/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  57:Inc/portmacro.h ****     typedef long             BaseType_t;
  58:Inc/portmacro.h ****     typedef unsigned long    UBaseType_t;
  59:Inc/portmacro.h **** 
  60:Inc/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  61:Inc/portmacro.h ****         typedef uint16_t     TickType_t;
  62:Inc/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  63:Inc/portmacro.h ****     #else
  64:Inc/portmacro.h ****         typedef uint32_t     TickType_t;
  65:Inc/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  66:Inc/portmacro.h **** 
  67:Inc/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  68:Inc/portmacro.h ****  * not need to be guarded with a critical section. */
  69:Inc/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  70:Inc/portmacro.h ****     #endif
  71:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  72:Inc/portmacro.h **** 
  73:Inc/portmacro.h **** /* Architecture specifics. */
  74:Inc/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  75:Inc/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  76:Inc/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  77:Inc/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  78:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  79:Inc/portmacro.h **** 
  80:Inc/portmacro.h **** /* Scheduler utilities. */
  81:Inc/portmacro.h ****     #define portYIELD()                                 \
  82:Inc/portmacro.h ****     {                                                   \
  83:Inc/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  84:Inc/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  85:Inc/portmacro.h ****                                                         \
  86:Inc/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  87:Inc/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  88:Inc/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  89:Inc/portmacro.h ****         __asm volatile ( "isb" );                                  \
  90:Inc/portmacro.h ****     }
  91:Inc/portmacro.h **** 
  92:Inc/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  93:Inc/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  94:Inc/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 71


  95:Inc/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  96:Inc/portmacro.h **** /*-----------------------------------------------------------*/
  97:Inc/portmacro.h **** 
  98:Inc/portmacro.h **** /* Critical section management. */
  99:Inc/portmacro.h ****     extern void vPortEnterCritical( void );
 100:Inc/portmacro.h ****     extern void vPortExitCritical( void );
 101:Inc/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 102:Inc/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 103:Inc/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 104:Inc/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 105:Inc/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 106:Inc/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 107:Inc/portmacro.h **** 
 108:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 109:Inc/portmacro.h **** 
 110:Inc/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 111:Inc/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 112:Inc/portmacro.h ****  * (which build with all the ports) will build. */
 113:Inc/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 114:Inc/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 115:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 116:Inc/portmacro.h **** 
 117:Inc/portmacro.h **** /* Tickless idle/low power functionality. */
 118:Inc/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 119:Inc/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 120:Inc/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 121:Inc/portmacro.h ****     #endif
 122:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 123:Inc/portmacro.h **** 
 124:Inc/portmacro.h **** /* Architecture specific optimisations. */
 125:Inc/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 126:Inc/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 127:Inc/portmacro.h ****     #endif
 128:Inc/portmacro.h **** 
 129:Inc/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 130:Inc/portmacro.h **** 
 131:Inc/portmacro.h **** /* Generic helper function. */
 132:Inc/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 133:Inc/portmacro.h ****         {
 134:Inc/portmacro.h ****             uint8_t ucReturn;
 135:Inc/portmacro.h **** 
 136:Inc/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 137:Inc/portmacro.h **** 
 138:Inc/portmacro.h ****             return ucReturn;
 139:Inc/portmacro.h ****         }
 140:Inc/portmacro.h **** 
 141:Inc/portmacro.h **** /* Check the configuration. */
 142:Inc/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 143:Inc/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 144:Inc/portmacro.h ****         #endif
 145:Inc/portmacro.h **** 
 146:Inc/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 147:Inc/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 148:Inc/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 149:Inc/portmacro.h **** 
 150:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 151:Inc/portmacro.h **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 72


 152:Inc/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 153:Inc/portmacro.h **** 
 154:Inc/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 155:Inc/portmacro.h **** 
 156:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 157:Inc/portmacro.h **** 
 158:Inc/portmacro.h ****     #ifdef configASSERT
 159:Inc/portmacro.h ****         void vPortValidateInterruptPriority( void );
 160:Inc/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 161:Inc/portmacro.h ****     #endif
 162:Inc/portmacro.h **** 
 163:Inc/portmacro.h **** /* portNOP() is not required by this port. */
 164:Inc/portmacro.h ****     #define portNOP()
 165:Inc/portmacro.h **** 
 166:Inc/portmacro.h ****     #define portINLINE              __inline
 167:Inc/portmacro.h **** 
 168:Inc/portmacro.h ****     #ifndef portFORCE_INLINE
 169:Inc/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 170:Inc/portmacro.h ****     #endif
 171:Inc/portmacro.h **** 
 172:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 173:Inc/portmacro.h **** 
 174:Inc/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 175:Inc/portmacro.h ****     {
 176:Inc/portmacro.h ****         uint32_t ulCurrentInterrupt;
 177:Inc/portmacro.h ****         BaseType_t xReturn;
 178:Inc/portmacro.h **** 
 179:Inc/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 180:Inc/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 181:Inc/portmacro.h **** 
 182:Inc/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 183:Inc/portmacro.h ****         {
 184:Inc/portmacro.h ****             xReturn = pdFALSE;
 185:Inc/portmacro.h ****         }
 186:Inc/portmacro.h ****         else
 187:Inc/portmacro.h ****         {
 188:Inc/portmacro.h ****             xReturn = pdTRUE;
 189:Inc/portmacro.h ****         }
 190:Inc/portmacro.h **** 
 191:Inc/portmacro.h ****         return xReturn;
 192:Inc/portmacro.h ****     }
 193:Inc/portmacro.h **** 
 194:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 195:Inc/portmacro.h **** 
 196:Inc/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 197:Inc/portmacro.h ****     {
 198:Inc/portmacro.h ****         uint32_t ulNewBASEPRI;
 199:Inc/portmacro.h **** 
 200:Inc/portmacro.h ****         __asm volatile
 201:Inc/portmacro.h ****         (
 202:Inc/portmacro.h ****             "	mov %0, %1												\n"\
 203:Inc/portmacro.h ****             "	msr basepri, %0											\n"\
 204:Inc/portmacro.h ****             "	isb														\n"\
 205:Inc/portmacro.h ****             "	dsb														\n"\
 206:Inc/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 207:Inc/portmacro.h ****         );
 208:Inc/portmacro.h ****     }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 73


 209:Inc/portmacro.h **** 
 210:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 211:Inc/portmacro.h **** 
 212:Inc/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1138              		.loc 2 212 38 view .LVU347
 1139              	.LBB26:
 213:Inc/portmacro.h ****     {
 214:Inc/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1140              		.loc 2 214 9 view .LVU348
 215:Inc/portmacro.h **** 
 216:Inc/portmacro.h ****         __asm volatile
 1141              		.loc 2 216 9 view .LVU349
 1142              		.syntax unified
 1143              	@ 216 "Inc/portmacro.h" 1
 1144 0008 EFF31187 			mrs r7, basepri											
 1145 000c 4FF0BF03 		mov r3, #191												
 1146 0010 83F31188 		msr basepri, r3											
 1147 0014 BFF36F8F 		isb														
 1148 0018 BFF34F8F 		dsb														
 1149              	
 1150              	@ 0 "" 2
 1151              	.LVL110:
 217:Inc/portmacro.h ****         (
 218:Inc/portmacro.h ****             "	mrs %0, basepri											\n"\
 219:Inc/portmacro.h ****             "	mov %1, %2												\n"\
 220:Inc/portmacro.h ****             "	msr basepri, %1											\n"\
 221:Inc/portmacro.h ****             "	isb														\n"\
 222:Inc/portmacro.h ****             "	dsb														\n"\
 223:Inc/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 224:Inc/portmacro.h ****         );
 225:Inc/portmacro.h **** 
 226:Inc/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 227:Inc/portmacro.h ****          * warnings. */
 228:Inc/portmacro.h ****         return ulOriginalBASEPRI;
 1152              		.loc 2 228 9 view .LVU350
 1153              		.loc 2 228 9 is_stmt 0 view .LVU351
 1154              		.thumb
 1155              		.syntax unified
 1156              	.LBE26:
 1157              	.LBE25:
1053:Src/queue.c   ****         {
 1158              		.loc 1 1053 9 is_stmt 1 view .LVU352
1053:Src/queue.c   ****         {
 1159              		.loc 1 1053 22 is_stmt 0 view .LVU353
 1160 001c 806B     		ldr	r0, [r0, #56]
 1161              	.LVL111:
1053:Src/queue.c   ****         {
 1162              		.loc 1 1053 51 view .LVU354
 1163 001e E36B     		ldr	r3, [r4, #60]
1053:Src/queue.c   ****         {
 1164              		.loc 1 1053 11 view .LVU355
 1165 0020 9842     		cmp	r0, r3
 1166 0022 05D3     		bcc	.L89
1053:Src/queue.c   ****         {
 1167              		.loc 1 1053 64 discriminator 1 view .LVU356
 1168 0024 022A     		cmp	r2, #2
 1169 0026 03D0     		beq	.L89
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 74


1175:Src/queue.c   ****         }
 1170              		.loc 1 1175 21 view .LVU357
 1171 0028 0020     		movs	r0, #0
 1172              	.LVL112:
 1173              	.L90:
1178:Src/queue.c   **** 
 1174              		.loc 1 1178 5 is_stmt 1 view .LVU358
 1175              	.LBB27:
 1176              	.LBI27:
 229:Inc/portmacro.h ****     }
 230:Inc/portmacro.h **** /*-----------------------------------------------------------*/
 231:Inc/portmacro.h **** 
 232:Inc/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1177              		.loc 2 232 34 view .LVU359
 1178              	.LBB28:
 233:Inc/portmacro.h ****     {
 234:Inc/portmacro.h ****         __asm volatile
 1179              		.loc 2 234 9 view .LVU360
 1180              		.syntax unified
 1181              	@ 234 "Inc/portmacro.h" 1
 1182 002a 87F31188 			msr basepri, r7	
 1183              	@ 0 "" 2
 1184              	.LVL113:
 1185              		.loc 2 234 9 is_stmt 0 view .LVU361
 1186              		.thumb
 1187              		.syntax unified
 1188              	.LBE28:
 1189              	.LBE27:
1180:Src/queue.c   **** }
 1190              		.loc 1 1180 5 is_stmt 1 view .LVU362
1181:Src/queue.c   **** /*-----------------------------------------------------------*/
 1191              		.loc 1 1181 1 is_stmt 0 view .LVU363
 1192 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1193              	.LVL114:
 1194              	.L89:
 1195              	.LBB29:
1055:Src/queue.c   ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1196              		.loc 1 1055 13 is_stmt 1 view .LVU364
1055:Src/queue.c   ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 1197              		.loc 1 1055 26 is_stmt 0 view .LVU365
 1198 0030 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1199 0034 6DB2     		sxtb	r5, r5
 1200              	.LVL115:
1056:Src/queue.c   **** 
 1201              		.loc 1 1056 13 is_stmt 1 view .LVU366
1056:Src/queue.c   **** 
 1202              		.loc 1 1056 31 is_stmt 0 view .LVU367
 1203 0036 A36B     		ldr	r3, [r4, #56]
1058:Src/queue.c   **** 
 1204              		.loc 1 1058 48 is_stmt 1 view .LVU368
1065:Src/queue.c   **** 
 1205              		.loc 1 1065 13 view .LVU369
1065:Src/queue.c   **** 
 1206              		.loc 1 1065 22 is_stmt 0 view .LVU370
 1207 0038 2046     		mov	r0, r4
 1208 003a FFF7FEFF 		bl	prvCopyDataToQueue
 1209              	.LVL116:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 75


1069:Src/queue.c   ****             {
 1210              		.loc 1 1069 13 is_stmt 1 view .LVU371
1069:Src/queue.c   ****             {
 1211              		.loc 1 1069 15 is_stmt 0 view .LVU372
 1212 003e B5F1FF3F 		cmp	r5, #-1
 1213 0042 05D0     		beq	.L97
1165:Src/queue.c   **** 
 1214              		.loc 1 1165 57 is_stmt 1 view .LVU373
1167:Src/queue.c   ****             }
 1215              		.loc 1 1167 17 view .LVU374
1167:Src/queue.c   ****             }
 1216              		.loc 1 1167 57 is_stmt 0 view .LVU375
 1217 0044 0135     		adds	r5, r5, #1
 1218              	.LVL117:
1167:Src/queue.c   ****             }
 1219              		.loc 1 1167 36 view .LVU376
 1220 0046 6DB2     		sxtb	r5, r5
 1221              	.LVL118:
1167:Src/queue.c   ****             }
 1222              		.loc 1 1167 34 view .LVU377
 1223 0048 84F84550 		strb	r5, [r4, #69]
1170:Src/queue.c   ****         }
 1224              		.loc 1 1170 21 view .LVU378
 1225 004c 0120     		movs	r0, #1
 1226 004e ECE7     		b	.L90
 1227              	.LVL119:
 1228              	.L97:
1131:Src/queue.c   ****                         {
 1229              		.loc 1 1131 25 is_stmt 1 view .LVU379
1131:Src/queue.c   ****                         {
 1230              		.loc 1 1131 29 is_stmt 0 view .LVU380
 1231 0050 636A     		ldr	r3, [r4, #36]
1131:Src/queue.c   ****                         {
 1232              		.loc 1 1131 27 view .LVU381
 1233 0052 0BB9     		cbnz	r3, .L98
1170:Src/queue.c   ****         }
 1234              		.loc 1 1170 21 view .LVU382
 1235 0054 0120     		movs	r0, #1
 1236 0056 E8E7     		b	.L90
 1237              	.L98:
1133:Src/queue.c   ****                             {
 1238              		.loc 1 1133 29 is_stmt 1 view .LVU383
1133:Src/queue.c   ****                             {
 1239              		.loc 1 1133 33 is_stmt 0 view .LVU384
 1240 0058 04F12400 		add	r0, r4, #36
 1241 005c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1242              	.LVL120:
1133:Src/queue.c   ****                             {
 1243              		.loc 1 1133 31 view .LVU385
 1244 0060 18B1     		cbz	r0, .L94
1137:Src/queue.c   ****                                 {
 1245              		.loc 1 1137 33 is_stmt 1 view .LVU386
1137:Src/queue.c   ****                                 {
 1246              		.loc 1 1137 35 is_stmt 0 view .LVU387
 1247 0062 26B1     		cbz	r6, .L95
1139:Src/queue.c   ****                                 }
 1248              		.loc 1 1139 37 is_stmt 1 view .LVU388
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 76


1139:Src/queue.c   ****                                 }
 1249              		.loc 1 1139 64 is_stmt 0 view .LVU389
 1250 0064 0120     		movs	r0, #1
 1251 0066 3060     		str	r0, [r6]
 1252 0068 DFE7     		b	.L90
 1253              	.L94:
1170:Src/queue.c   ****         }
 1254              		.loc 1 1170 21 view .LVU390
 1255 006a 0120     		movs	r0, #1
 1256 006c DDE7     		b	.L90
 1257              	.L95:
 1258 006e 0120     		movs	r0, #1
 1259 0070 DBE7     		b	.L90
 1260              	.LBE29:
 1261              		.cfi_endproc
 1262              	.LFE8:
 1264              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1265              		.align	1
 1266              		.global	xQueueGiveFromISR
 1267              		.syntax unified
 1268              		.thumb
 1269              		.thumb_func
 1270              		.fpu softvfp
 1272              	xQueueGiveFromISR:
 1273              	.LVL121:
 1274              	.LFB9:
1186:Src/queue.c   ****     BaseType_t xReturn;
 1275              		.loc 1 1186 1 is_stmt 1 view -0
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 0
 1278              		@ frame_needed = 0, uses_anonymous_args = 0
1186:Src/queue.c   ****     BaseType_t xReturn;
 1279              		.loc 1 1186 1 is_stmt 0 view .LVU392
 1280 0000 38B5     		push	{r3, r4, r5, lr}
 1281              	.LCFI19:
 1282              		.cfi_def_cfa_offset 16
 1283              		.cfi_offset 3, -16
 1284              		.cfi_offset 4, -12
 1285              		.cfi_offset 5, -8
 1286              		.cfi_offset 14, -4
1187:Src/queue.c   ****     UBaseType_t uxSavedInterruptStatus;
 1287              		.loc 1 1187 5 is_stmt 1 view .LVU393
1188:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 1288              		.loc 1 1188 5 view .LVU394
1189:Src/queue.c   **** 
 1289              		.loc 1 1189 5 view .LVU395
 1290              	.LVL122:
1197:Src/queue.c   **** 
 1291              		.loc 1 1197 28 view .LVU396
1201:Src/queue.c   **** 
 1292              		.loc 1 1201 45 view .LVU397
1206:Src/queue.c   **** 
 1293              		.loc 1 1206 123 view .LVU398
1222:Src/queue.c   **** 
 1294              		.loc 1 1222 47 view .LVU399
1224:Src/queue.c   ****     {
 1295              		.loc 1 1224 5 view .LVU400
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 77


 1296              	.LBB30:
 1297              	.LBI30:
 212:Inc/portmacro.h ****     {
 1298              		.loc 2 212 38 view .LVU401
 1299              	.LBB31:
 214:Inc/portmacro.h **** 
 1300              		.loc 2 214 9 view .LVU402
 216:Inc/portmacro.h ****         (
 1301              		.loc 2 216 9 view .LVU403
 1302              		.syntax unified
 1303              	@ 216 "Inc/portmacro.h" 1
 1304 0002 EFF31184 			mrs r4, basepri											
 1305 0006 4FF0BF03 		mov r3, #191												
 1306 000a 83F31188 		msr basepri, r3											
 1307 000e BFF36F8F 		isb														
 1308 0012 BFF34F8F 		dsb														
 1309              	
 1310              	@ 0 "" 2
 1311              	.LVL123:
 228:Inc/portmacro.h ****     }
 1312              		.loc 2 228 9 view .LVU404
 228:Inc/portmacro.h ****     }
 1313              		.loc 2 228 9 is_stmt 0 view .LVU405
 1314              		.thumb
 1315              		.syntax unified
 1316              	.LBE31:
 1317              	.LBE30:
 1318              	.LBB32:
1226:Src/queue.c   **** 
 1319              		.loc 1 1226 9 is_stmt 1 view .LVU406
1226:Src/queue.c   **** 
 1320              		.loc 1 1226 27 is_stmt 0 view .LVU407
 1321 0016 826B     		ldr	r2, [r0, #56]
 1322              	.LVL124:
1231:Src/queue.c   ****         {
 1323              		.loc 1 1231 9 is_stmt 1 view .LVU408
1231:Src/queue.c   ****         {
 1324              		.loc 1 1231 40 is_stmt 0 view .LVU409
 1325 0018 C36B     		ldr	r3, [r0, #60]
1231:Src/queue.c   ****         {
 1326              		.loc 1 1231 11 view .LVU410
 1327 001a 9342     		cmp	r3, r2
 1328 001c 1AD9     		bls	.L102
 1329 001e 0D46     		mov	r5, r1
 1330              	.LBB33:
1233:Src/queue.c   **** 
 1331              		.loc 1 1233 13 is_stmt 1 view .LVU411
1233:Src/queue.c   **** 
 1332              		.loc 1 1233 26 is_stmt 0 view .LVU412
 1333 0020 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1334 0024 5BB2     		sxtb	r3, r3
 1335              	.LVL125:
1235:Src/queue.c   **** 
 1336              		.loc 1 1235 48 is_stmt 1 view .LVU413
1243:Src/queue.c   **** 
 1337              		.loc 1 1243 13 view .LVU414
1243:Src/queue.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 78


 1338              		.loc 1 1243 60 is_stmt 0 view .LVU415
 1339 0026 0132     		adds	r2, r2, #1
 1340              	.LVL126:
1243:Src/queue.c   **** 
 1341              		.loc 1 1243 40 view .LVU416
 1342 0028 8263     		str	r2, [r0, #56]
1247:Src/queue.c   ****             {
 1343              		.loc 1 1247 13 is_stmt 1 view .LVU417
1247:Src/queue.c   ****             {
 1344              		.loc 1 1247 15 is_stmt 0 view .LVU418
 1345 002a B3F1FF3F 		cmp	r3, #-1
 1346 002e 05D0     		beq	.L107
1333:Src/queue.c   **** 
 1347              		.loc 1 1333 57 is_stmt 1 view .LVU419
1335:Src/queue.c   ****             }
 1348              		.loc 1 1335 17 view .LVU420
1335:Src/queue.c   ****             }
 1349              		.loc 1 1335 57 is_stmt 0 view .LVU421
 1350 0030 0133     		adds	r3, r3, #1
 1351              	.LVL127:
1335:Src/queue.c   ****             }
 1352              		.loc 1 1335 36 view .LVU422
 1353 0032 5BB2     		sxtb	r3, r3
 1354              	.LVL128:
1335:Src/queue.c   ****             }
 1355              		.loc 1 1335 34 view .LVU423
 1356 0034 80F84530 		strb	r3, [r0, #69]
1338:Src/queue.c   ****         }
 1357              		.loc 1 1338 21 view .LVU424
 1358 0038 0120     		movs	r0, #1
 1359              	.LVL129:
1338:Src/queue.c   ****         }
 1360              		.loc 1 1338 21 view .LVU425
 1361 003a 0CE0     		b	.L100
 1362              	.LVL130:
 1363              	.L107:
1302:Src/queue.c   ****                         {
 1364              		.loc 1 1302 25 is_stmt 1 view .LVU426
1302:Src/queue.c   ****                         {
 1365              		.loc 1 1302 29 is_stmt 0 view .LVU427
 1366 003c 436A     		ldr	r3, [r0, #36]
 1367              	.LVL131:
1302:Src/queue.c   ****                         {
 1368              		.loc 1 1302 27 view .LVU428
 1369 003e 0BB9     		cbnz	r3, .L108
1338:Src/queue.c   ****         }
 1370              		.loc 1 1338 21 view .LVU429
 1371 0040 0120     		movs	r0, #1
 1372              	.LVL132:
1338:Src/queue.c   ****         }
 1373              		.loc 1 1338 21 view .LVU430
 1374 0042 08E0     		b	.L100
 1375              	.LVL133:
 1376              	.L108:
1304:Src/queue.c   ****                             {
 1377              		.loc 1 1304 29 is_stmt 1 view .LVU431
1304:Src/queue.c   ****                             {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 79


 1378              		.loc 1 1304 33 is_stmt 0 view .LVU432
 1379 0044 2430     		adds	r0, r0, #36
 1380              	.LVL134:
1304:Src/queue.c   ****                             {
 1381              		.loc 1 1304 33 view .LVU433
 1382 0046 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1383              	.LVL135:
1304:Src/queue.c   ****                             {
 1384              		.loc 1 1304 31 view .LVU434
 1385 004a 38B1     		cbz	r0, .L104
1308:Src/queue.c   ****                                 {
 1386              		.loc 1 1308 33 is_stmt 1 view .LVU435
1308:Src/queue.c   ****                                 {
 1387              		.loc 1 1308 35 is_stmt 0 view .LVU436
 1388 004c 45B1     		cbz	r5, .L105
1310:Src/queue.c   ****                                 }
 1389              		.loc 1 1310 37 is_stmt 1 view .LVU437
1310:Src/queue.c   ****                                 }
 1390              		.loc 1 1310 64 is_stmt 0 view .LVU438
 1391 004e 0120     		movs	r0, #1
 1392 0050 2860     		str	r0, [r5]
 1393 0052 00E0     		b	.L100
 1394              	.LVL136:
 1395              	.L102:
1310:Src/queue.c   ****                                 }
 1396              		.loc 1 1310 64 view .LVU439
 1397              	.LBE33:
1343:Src/queue.c   ****         }
 1398              		.loc 1 1343 21 view .LVU440
 1399 0054 0020     		movs	r0, #0
 1400              	.LVL137:
 1401              	.L100:
1343:Src/queue.c   ****         }
 1402              		.loc 1 1343 21 view .LVU441
 1403              	.LBE32:
1346:Src/queue.c   **** 
 1404              		.loc 1 1346 5 is_stmt 1 view .LVU442
 1405              	.LBB35:
 1406              	.LBI35:
 232:Inc/portmacro.h ****     {
 1407              		.loc 2 232 34 view .LVU443
 1408              	.LBB36:
 1409              		.loc 2 234 9 view .LVU444
 1410              		.syntax unified
 1411              	@ 234 "Inc/portmacro.h" 1
 1412 0056 84F31188 			msr basepri, r4	
 1413              	@ 0 "" 2
 1414              	.LVL138:
 1415              		.loc 2 234 9 is_stmt 0 view .LVU445
 1416              		.thumb
 1417              		.syntax unified
 1418              	.LBE36:
 1419              	.LBE35:
1348:Src/queue.c   **** }
 1420              		.loc 1 1348 5 is_stmt 1 view .LVU446
1349:Src/queue.c   **** /*-----------------------------------------------------------*/
 1421              		.loc 1 1349 1 is_stmt 0 view .LVU447
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 80


 1422 005a 38BD     		pop	{r3, r4, r5, pc}
 1423              	.LVL139:
 1424              	.L104:
 1425              	.LBB37:
 1426              	.LBB34:
1338:Src/queue.c   ****         }
 1427              		.loc 1 1338 21 view .LVU448
 1428 005c 0120     		movs	r0, #1
 1429 005e FAE7     		b	.L100
 1430              	.L105:
 1431 0060 0120     		movs	r0, #1
 1432 0062 F8E7     		b	.L100
 1433              	.LBE34:
 1434              	.LBE37:
 1435              		.cfi_endproc
 1436              	.LFE9:
 1438              		.section	.text.xQueueReceive,"ax",%progbits
 1439              		.align	1
 1440              		.global	xQueueReceive
 1441              		.syntax unified
 1442              		.thumb
 1443              		.thumb_func
 1444              		.fpu softvfp
 1446              	xQueueReceive:
 1447              	.LVL140:
 1448              	.LFB10:
1355:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE;
 1449              		.loc 1 1355 1 is_stmt 1 view -0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 16
 1452              		@ frame_needed = 0, uses_anonymous_args = 0
1355:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE;
 1453              		.loc 1 1355 1 is_stmt 0 view .LVU450
 1454 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1455              	.LCFI20:
 1456              		.cfi_def_cfa_offset 20
 1457              		.cfi_offset 4, -20
 1458              		.cfi_offset 5, -16
 1459              		.cfi_offset 6, -12
 1460              		.cfi_offset 7, -8
 1461              		.cfi_offset 14, -4
 1462 0002 85B0     		sub	sp, sp, #20
 1463              	.LCFI21:
 1464              		.cfi_def_cfa_offset 40
 1465 0004 0446     		mov	r4, r0
 1466 0006 0F46     		mov	r7, r1
 1467 0008 0192     		str	r2, [sp, #4]
1356:Src/queue.c   ****     TimeOut_t xTimeOut;
 1468              		.loc 1 1356 5 is_stmt 1 view .LVU451
 1469              	.LVL141:
1357:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 1470              		.loc 1 1357 5 view .LVU452
1358:Src/queue.c   **** 
 1471              		.loc 1 1358 5 view .LVU453
1356:Src/queue.c   ****     TimeOut_t xTimeOut;
 1472              		.loc 1 1356 16 is_stmt 0 view .LVU454
 1473 000a 0026     		movs	r6, #0
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 81


 1474 000c 3CE0     		b	.L110
 1475              	.LVL142:
 1476              	.L124:
 1477              	.LBB38:
1388:Src/queue.c   ****                 traceQUEUE_RECEIVE( pxQueue );
 1478              		.loc 1 1388 17 is_stmt 1 view .LVU455
 1479 000e 3946     		mov	r1, r7
 1480 0010 2046     		mov	r0, r4
 1481 0012 FFF7FEFF 		bl	prvCopyDataFromQueue
 1482              	.LVL143:
1389:Src/queue.c   ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1483              		.loc 1 1389 46 view .LVU456
1390:Src/queue.c   **** 
 1484              		.loc 1 1390 17 view .LVU457
1390:Src/queue.c   **** 
 1485              		.loc 1 1390 64 is_stmt 0 view .LVU458
 1486 0016 013D     		subs	r5, r5, #1
 1487              	.LVL144:
1390:Src/queue.c   **** 
 1488              		.loc 1 1390 44 view .LVU459
 1489 0018 A563     		str	r5, [r4, #56]
1395:Src/queue.c   ****                 {
 1490              		.loc 1 1395 17 is_stmt 1 view .LVU460
1395:Src/queue.c   ****                 {
 1491              		.loc 1 1395 21 is_stmt 0 view .LVU461
 1492 001a 2369     		ldr	r3, [r4, #16]
1395:Src/queue.c   ****                 {
 1493              		.loc 1 1395 19 view .LVU462
 1494 001c 23B9     		cbnz	r3, .L122
 1495              	.L112:
1408:Src/queue.c   ****                 }
 1496              		.loc 1 1408 45 is_stmt 1 view .LVU463
1411:Src/queue.c   ****                 return pdPASS;
 1497              		.loc 1 1411 17 view .LVU464
 1498 001e FFF7FEFF 		bl	vPortExitCritical
 1499              	.LVL145:
1412:Src/queue.c   ****             }
 1500              		.loc 1 1412 17 view .LVU465
1412:Src/queue.c   ****             }
 1501              		.loc 1 1412 24 is_stmt 0 view .LVU466
 1502 0022 0120     		movs	r0, #1
 1503              	.LVL146:
 1504              	.L109:
1412:Src/queue.c   ****             }
 1505              		.loc 1 1412 24 view .LVU467
 1506              	.LBE38:
1492:Src/queue.c   **** /*-----------------------------------------------------------*/
 1507              		.loc 1 1492 1 view .LVU468
 1508 0024 05B0     		add	sp, sp, #20
 1509              	.LCFI22:
 1510              		.cfi_remember_state
 1511              		.cfi_def_cfa_offset 20
 1512              		@ sp needed
 1513 0026 F0BD     		pop	{r4, r5, r6, r7, pc}
 1514              	.LVL147:
 1515              	.L122:
 1516              	.LCFI23:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 82


 1517              		.cfi_restore_state
 1518              	.LBB39:
1397:Src/queue.c   ****                     {
 1519              		.loc 1 1397 21 is_stmt 1 view .LVU469
1397:Src/queue.c   ****                     {
 1520              		.loc 1 1397 25 is_stmt 0 view .LVU470
 1521 0028 04F11000 		add	r0, r4, #16
 1522 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1523              	.LVL148:
1397:Src/queue.c   ****                     {
 1524              		.loc 1 1397 23 view .LVU471
 1525 0030 0028     		cmp	r0, #0
 1526 0032 F4D0     		beq	.L112
1399:Src/queue.c   ****                     }
 1527              		.loc 1 1399 25 is_stmt 1 view .LVU472
 1528 0034 344B     		ldr	r3, .L129
 1529 0036 4FF08052 		mov	r2, #268435456
 1530 003a 1A60     		str	r2, [r3]
1399:Src/queue.c   ****                     }
 1531              		.loc 1 1399 25 view .LVU473
 1532              		.syntax unified
 1533              	@ 1399 "Src/queue.c" 1
 1534 003c BFF34F8F 		dsb
 1535              	@ 0 "" 2
1399:Src/queue.c   ****                     }
 1536              		.loc 1 1399 25 view .LVU474
 1537              	@ 1399 "Src/queue.c" 1
 1538 0040 BFF36F8F 		isb
 1539              	@ 0 "" 2
1399:Src/queue.c   ****                     }
 1540              		.loc 1 1399 57 view .LVU475
 1541              		.thumb
 1542              		.syntax unified
 1543 0044 EBE7     		b	.L112
 1544              	.LVL149:
 1545              	.L125:
1420:Src/queue.c   ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 1546              		.loc 1 1420 21 view .LVU476
 1547 0046 FFF7FEFF 		bl	vPortExitCritical
 1548              	.LVL150:
1421:Src/queue.c   ****                     return errQUEUE_EMPTY;
 1549              		.loc 1 1421 57 view .LVU477
1422:Src/queue.c   ****                 }
 1550              		.loc 1 1422 21 view .LVU478
1422:Src/queue.c   ****                 }
 1551              		.loc 1 1422 28 is_stmt 0 view .LVU479
 1552 004a 0020     		movs	r0, #0
 1553 004c EAE7     		b	.L109
 1554              	.L126:
1428:Src/queue.c   ****                     xEntryTimeSet = pdTRUE;
 1555              		.loc 1 1428 21 is_stmt 1 view .LVU480
 1556 004e 02A8     		add	r0, sp, #8
 1557 0050 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1558              	.LVL151:
1429:Src/queue.c   ****                 }
 1559              		.loc 1 1429 21 view .LVU481
1429:Src/queue.c   ****                 }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 83


 1560              		.loc 1 1429 35 is_stmt 0 view .LVU482
 1561 0054 0126     		movs	r6, #1
 1562 0056 21E0     		b	.L115
 1563              	.LVL152:
 1564              	.L127:
1429:Src/queue.c   ****                 }
 1565              		.loc 1 1429 35 view .LVU483
 1566              	.LBE39:
1444:Src/queue.c   **** 
 1567              		.loc 1 1444 9 is_stmt 1 discriminator 1 view .LVU484
 1568 0058 0023     		movs	r3, #0
 1569 005a 84F84430 		strb	r3, [r4, #68]
 1570 005e 29E0     		b	.L116
 1571              	.L128:
1444:Src/queue.c   **** 
 1572              		.loc 1 1444 9 discriminator 4 view .LVU485
 1573 0060 0023     		movs	r3, #0
 1574 0062 84F84530 		strb	r3, [r4, #69]
 1575 0066 2BE0     		b	.L117
 1576              	.L119:
1470:Src/queue.c   ****                 ( void ) xTaskResumeAll();
 1577              		.loc 1 1470 17 view .LVU486
 1578 0068 2046     		mov	r0, r4
 1579 006a FFF7FEFF 		bl	prvUnlockQueue
 1580              	.LVL153:
1471:Src/queue.c   ****             }
 1581              		.loc 1 1471 17 view .LVU487
1471:Src/queue.c   ****             }
 1582              		.loc 1 1471 26 is_stmt 0 view .LVU488
 1583 006e FFF7FEFF 		bl	xTaskResumeAll
 1584              	.LVL154:
 1585 0072 09E0     		b	.L110
 1586              	.L118:
1478:Src/queue.c   ****             ( void ) xTaskResumeAll();
 1587              		.loc 1 1478 13 is_stmt 1 view .LVU489
 1588 0074 2046     		mov	r0, r4
 1589 0076 FFF7FEFF 		bl	prvUnlockQueue
 1590              	.LVL155:
1479:Src/queue.c   **** 
 1591              		.loc 1 1479 13 view .LVU490
1479:Src/queue.c   **** 
 1592              		.loc 1 1479 22 is_stmt 0 view .LVU491
 1593 007a FFF7FEFF 		bl	xTaskResumeAll
 1594              	.LVL156:
1481:Src/queue.c   ****             {
 1595              		.loc 1 1481 13 is_stmt 1 view .LVU492
1481:Src/queue.c   ****             {
 1596              		.loc 1 1481 17 is_stmt 0 view .LVU493
 1597 007e 2046     		mov	r0, r4
 1598 0080 FFF7FEFF 		bl	prvIsQueueEmpty
 1599              	.LVL157:
1481:Src/queue.c   ****             {
 1600              		.loc 1 1481 15 view .LVU494
 1601 0084 0028     		cmp	r0, #0
 1602 0086 3DD1     		bne	.L123
 1603              	.LVL158:
 1604              	.L110:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 84


1361:Src/queue.c   **** 
 1605              		.loc 1 1361 32 is_stmt 1 view .LVU495
1365:Src/queue.c   **** 
 1606              		.loc 1 1365 103 view .LVU496
1370:Src/queue.c   ****         }
 1607              		.loc 1 1370 114 view .LVU497
1377:Src/queue.c   ****     {
 1608              		.loc 1 1377 5 view .LVU498
1379:Src/queue.c   ****         {
 1609              		.loc 1 1379 9 view .LVU499
 1610 0088 FFF7FEFF 		bl	vPortEnterCritical
 1611              	.LVL159:
 1612              	.LBB40:
1381:Src/queue.c   **** 
 1613              		.loc 1 1381 13 view .LVU500
1381:Src/queue.c   **** 
 1614              		.loc 1 1381 31 is_stmt 0 view .LVU501
 1615 008c A56B     		ldr	r5, [r4, #56]
 1616              	.LVL160:
1385:Src/queue.c   ****             {
 1617              		.loc 1 1385 13 is_stmt 1 view .LVU502
1385:Src/queue.c   ****             {
 1618              		.loc 1 1385 15 is_stmt 0 view .LVU503
 1619 008e 002D     		cmp	r5, #0
 1620 0090 BDD1     		bne	.L124
1416:Src/queue.c   ****                 {
 1621              		.loc 1 1416 17 is_stmt 1 view .LVU504
1416:Src/queue.c   ****                 {
 1622              		.loc 1 1416 34 is_stmt 0 view .LVU505
 1623 0092 019B     		ldr	r3, [sp, #4]
1416:Src/queue.c   ****                 {
 1624              		.loc 1 1416 19 view .LVU506
 1625 0094 002B     		cmp	r3, #0
 1626 0096 D6D0     		beq	.L125
1424:Src/queue.c   ****                 {
 1627              		.loc 1 1424 22 is_stmt 1 view .LVU507
1424:Src/queue.c   ****                 {
 1628              		.loc 1 1424 24 is_stmt 0 view .LVU508
 1629 0098 002E     		cmp	r6, #0
 1630 009a D8D0     		beq	.L126
 1631              	.LVL161:
 1632              	.L115:
1434:Src/queue.c   ****                 }
 1633              		.loc 1 1434 45 is_stmt 1 view .LVU509
 1634              	.LBE40:
1438:Src/queue.c   **** 
 1635              		.loc 1 1438 9 view .LVU510
 1636 009c FFF7FEFF 		bl	vPortExitCritical
 1637              	.LVL162:
1443:Src/queue.c   ****         prvLockQueue( pxQueue );
 1638              		.loc 1 1443 9 view .LVU511
 1639 00a0 FFF7FEFF 		bl	vTaskSuspendAll
 1640              	.LVL163:
1444:Src/queue.c   **** 
 1641              		.loc 1 1444 9 view .LVU512
 1642 00a4 FFF7FEFF 		bl	vPortEnterCritical
 1643              	.LVL164:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 85


1444:Src/queue.c   **** 
 1644              		.loc 1 1444 9 view .LVU513
 1645 00a8 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1646 00ac 5BB2     		sxtb	r3, r3
 1647 00ae B3F1FF3F 		cmp	r3, #-1
 1648 00b2 D1D0     		beq	.L127
 1649              	.L116:
1444:Src/queue.c   **** 
 1650              		.loc 1 1444 9 discriminator 3 view .LVU514
 1651 00b4 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1652 00b8 5BB2     		sxtb	r3, r3
 1653 00ba B3F1FF3F 		cmp	r3, #-1
 1654 00be CFD0     		beq	.L128
 1655              	.L117:
1444:Src/queue.c   **** 
 1656              		.loc 1 1444 9 discriminator 6 view .LVU515
 1657 00c0 FFF7FEFF 		bl	vPortExitCritical
 1658              	.LVL165:
1447:Src/queue.c   ****         {
 1659              		.loc 1 1447 9 discriminator 6 view .LVU516
1447:Src/queue.c   ****         {
 1660              		.loc 1 1447 13 is_stmt 0 discriminator 6 view .LVU517
 1661 00c4 01A9     		add	r1, sp, #4
 1662 00c6 02A8     		add	r0, sp, #8
 1663 00c8 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1664              	.LVL166:
1447:Src/queue.c   ****         {
 1665              		.loc 1 1447 11 discriminator 6 view .LVU518
 1666 00cc 0028     		cmp	r0, #0
 1667 00ce D1D1     		bne	.L118
1451:Src/queue.c   ****             {
 1668              		.loc 1 1451 13 is_stmt 1 view .LVU519
1451:Src/queue.c   ****             {
 1669              		.loc 1 1451 17 is_stmt 0 view .LVU520
 1670 00d0 2046     		mov	r0, r4
 1671 00d2 FFF7FEFF 		bl	prvIsQueueEmpty
 1672              	.LVL167:
1451:Src/queue.c   ****             {
 1673              		.loc 1 1451 15 view .LVU521
 1674 00d6 0028     		cmp	r0, #0
 1675 00d8 C6D0     		beq	.L119
1453:Src/queue.c   ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1676              		.loc 1 1453 58 is_stmt 1 view .LVU522
1454:Src/queue.c   ****                 prvUnlockQueue( pxQueue );
 1677              		.loc 1 1454 17 view .LVU523
 1678 00da 0199     		ldr	r1, [sp, #4]
 1679 00dc 04F12400 		add	r0, r4, #36
 1680 00e0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1681              	.LVL168:
1455:Src/queue.c   **** 
 1682              		.loc 1 1455 17 view .LVU524
 1683 00e4 2046     		mov	r0, r4
 1684 00e6 FFF7FEFF 		bl	prvUnlockQueue
 1685              	.LVL169:
1457:Src/queue.c   ****                 {
 1686              		.loc 1 1457 17 view .LVU525
1457:Src/queue.c   ****                 {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 86


 1687              		.loc 1 1457 21 is_stmt 0 view .LVU526
 1688 00ea FFF7FEFF 		bl	xTaskResumeAll
 1689              	.LVL170:
1457:Src/queue.c   ****                 {
 1690              		.loc 1 1457 19 view .LVU527
 1691 00ee 0028     		cmp	r0, #0
 1692 00f0 CAD1     		bne	.L110
1459:Src/queue.c   ****                 }
 1693              		.loc 1 1459 21 is_stmt 1 view .LVU528
 1694 00f2 054B     		ldr	r3, .L129
 1695 00f4 4FF08052 		mov	r2, #268435456
 1696 00f8 1A60     		str	r2, [r3]
1459:Src/queue.c   ****                 }
 1697              		.loc 1 1459 21 view .LVU529
 1698              		.syntax unified
 1699              	@ 1459 "Src/queue.c" 1
 1700 00fa BFF34F8F 		dsb
 1701              	@ 0 "" 2
1459:Src/queue.c   ****                 }
 1702              		.loc 1 1459 21 view .LVU530
 1703              	@ 1459 "Src/queue.c" 1
 1704 00fe BFF36F8F 		isb
 1705              	@ 0 "" 2
1459:Src/queue.c   ****                 }
 1706              		.loc 1 1459 43 view .LVU531
 1707              		.thumb
 1708              		.syntax unified
 1709 0102 C1E7     		b	.L110
 1710              	.L123:
1484:Src/queue.c   ****             }
 1711              		.loc 1 1484 24 is_stmt 0 view .LVU532
 1712 0104 0020     		movs	r0, #0
 1713 0106 8DE7     		b	.L109
 1714              	.L130:
 1715              		.align	2
 1716              	.L129:
 1717 0108 04ED00E0 		.word	-536810236
 1718              		.cfi_endproc
 1719              	.LFE10:
 1721              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1722              		.align	1
 1723              		.global	xQueueSemaphoreTake
 1724              		.syntax unified
 1725              		.thumb
 1726              		.thumb_func
 1727              		.fpu softvfp
 1729              	xQueueSemaphoreTake:
 1730              	.LVL171:
 1731              	.LFB11:
1497:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE;
 1732              		.loc 1 1497 1 is_stmt 1 view -0
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 16
 1735              		@ frame_needed = 0, uses_anonymous_args = 0
1497:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE;
 1736              		.loc 1 1497 1 is_stmt 0 view .LVU534
 1737 0000 30B5     		push	{r4, r5, lr}
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 87


 1738              	.LCFI24:
 1739              		.cfi_def_cfa_offset 12
 1740              		.cfi_offset 4, -12
 1741              		.cfi_offset 5, -8
 1742              		.cfi_offset 14, -4
 1743 0002 85B0     		sub	sp, sp, #20
 1744              	.LCFI25:
 1745              		.cfi_def_cfa_offset 32
 1746 0004 0446     		mov	r4, r0
 1747 0006 0191     		str	r1, [sp, #4]
1498:Src/queue.c   ****     TimeOut_t xTimeOut;
 1748              		.loc 1 1498 5 is_stmt 1 view .LVU535
 1749              	.LVL172:
1499:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 1750              		.loc 1 1499 5 view .LVU536
1500:Src/queue.c   **** 
 1751              		.loc 1 1500 5 view .LVU537
1498:Src/queue.c   ****     TimeOut_t xTimeOut;
 1752              		.loc 1 1498 16 is_stmt 0 view .LVU538
 1753 0008 0025     		movs	r5, #0
 1754 000a 38E0     		b	.L132
 1755              	.LVL173:
 1756              	.L146:
 1757              	.LBB41:
1535:Src/queue.c   **** 
 1758              		.loc 1 1535 46 is_stmt 1 view .LVU539
1539:Src/queue.c   **** 
 1759              		.loc 1 1539 17 view .LVU540
1539:Src/queue.c   **** 
 1760              		.loc 1 1539 63 is_stmt 0 view .LVU541
 1761 000c 013B     		subs	r3, r3, #1
 1762              	.LVL174:
1539:Src/queue.c   **** 
 1763              		.loc 1 1539 44 view .LVU542
 1764 000e A363     		str	r3, [r4, #56]
1558:Src/queue.c   ****                 {
 1765              		.loc 1 1558 17 is_stmt 1 view .LVU543
1558:Src/queue.c   ****                 {
 1766              		.loc 1 1558 21 is_stmt 0 view .LVU544
 1767 0010 2369     		ldr	r3, [r4, #16]
 1768              	.LVL175:
1558:Src/queue.c   ****                 {
 1769              		.loc 1 1558 19 view .LVU545
 1770 0012 23B9     		cbnz	r3, .L144
 1771              	.LVL176:
 1772              	.L134:
1571:Src/queue.c   ****                 }
 1773              		.loc 1 1571 45 is_stmt 1 view .LVU546
1574:Src/queue.c   ****                 return pdPASS;
 1774              		.loc 1 1574 17 view .LVU547
 1775 0014 FFF7FEFF 		bl	vPortExitCritical
 1776              	.LVL177:
1575:Src/queue.c   ****             }
 1777              		.loc 1 1575 17 view .LVU548
1575:Src/queue.c   ****             }
 1778              		.loc 1 1575 24 is_stmt 0 view .LVU549
 1779 0018 0120     		movs	r0, #1
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 88


 1780              	.L131:
1575:Src/queue.c   ****             }
 1781              		.loc 1 1575 24 view .LVU550
 1782              	.LBE41:
1711:Src/queue.c   **** /*-----------------------------------------------------------*/
 1783              		.loc 1 1711 1 view .LVU551
 1784 001a 05B0     		add	sp, sp, #20
 1785              	.LCFI26:
 1786              		.cfi_remember_state
 1787              		.cfi_def_cfa_offset 12
 1788              		@ sp needed
 1789 001c 30BD     		pop	{r4, r5, pc}
 1790              	.LVL178:
 1791              	.L144:
 1792              	.LCFI27:
 1793              		.cfi_restore_state
 1794              	.LBB42:
1560:Src/queue.c   ****                     {
 1795              		.loc 1 1560 21 is_stmt 1 view .LVU552
1560:Src/queue.c   ****                     {
 1796              		.loc 1 1560 25 is_stmt 0 view .LVU553
 1797 001e 04F11000 		add	r0, r4, #16
 1798 0022 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1799              	.LVL179:
1560:Src/queue.c   ****                     {
 1800              		.loc 1 1560 23 view .LVU554
 1801 0026 0028     		cmp	r0, #0
 1802 0028 F4D0     		beq	.L134
1562:Src/queue.c   ****                     }
 1803              		.loc 1 1562 25 is_stmt 1 view .LVU555
 1804 002a 354B     		ldr	r3, .L151
 1805 002c 4FF08052 		mov	r2, #268435456
 1806 0030 1A60     		str	r2, [r3]
1562:Src/queue.c   ****                     }
 1807              		.loc 1 1562 25 view .LVU556
 1808              		.syntax unified
 1809              	@ 1562 "Src/queue.c" 1
 1810 0032 BFF34F8F 		dsb
 1811              	@ 0 "" 2
1562:Src/queue.c   ****                     }
 1812              		.loc 1 1562 25 view .LVU557
 1813              	@ 1562 "Src/queue.c" 1
 1814 0036 BFF36F8F 		isb
 1815              	@ 0 "" 2
1562:Src/queue.c   ****                     }
 1816              		.loc 1 1562 57 view .LVU558
 1817              		.thumb
 1818              		.syntax unified
 1819 003a EBE7     		b	.L134
 1820              	.L147:
1592:Src/queue.c   ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 1821              		.loc 1 1592 21 view .LVU559
 1822 003c FFF7FEFF 		bl	vPortExitCritical
 1823              	.LVL180:
1593:Src/queue.c   ****                     return errQUEUE_EMPTY;
 1824              		.loc 1 1593 57 view .LVU560
1594:Src/queue.c   ****                 }
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 89


 1825              		.loc 1 1594 21 view .LVU561
1594:Src/queue.c   ****                 }
 1826              		.loc 1 1594 28 is_stmt 0 view .LVU562
 1827 0040 0020     		movs	r0, #0
 1828 0042 EAE7     		b	.L131
 1829              	.L148:
1600:Src/queue.c   ****                     xEntryTimeSet = pdTRUE;
 1830              		.loc 1 1600 21 is_stmt 1 view .LVU563
 1831 0044 02A8     		add	r0, sp, #8
 1832 0046 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1833              	.LVL181:
1601:Src/queue.c   ****                 }
 1834              		.loc 1 1601 21 view .LVU564
1601:Src/queue.c   ****                 }
 1835              		.loc 1 1601 35 is_stmt 0 view .LVU565
 1836 004a 0125     		movs	r5, #1
 1837 004c 21E0     		b	.L137
 1838              	.LVL182:
 1839              	.L149:
1601:Src/queue.c   ****                 }
 1840              		.loc 1 1601 35 view .LVU566
 1841              	.LBE42:
1616:Src/queue.c   **** 
 1842              		.loc 1 1616 9 is_stmt 1 discriminator 1 view .LVU567
 1843 004e 0023     		movs	r3, #0
 1844 0050 84F84430 		strb	r3, [r4, #68]
 1845 0054 29E0     		b	.L138
 1846              	.L150:
1616:Src/queue.c   **** 
 1847              		.loc 1 1616 9 discriminator 4 view .LVU568
 1848 0056 0023     		movs	r3, #0
 1849 0058 84F84530 		strb	r3, [r4, #69]
 1850 005c 2BE0     		b	.L139
 1851              	.L141:
1662:Src/queue.c   ****                 ( void ) xTaskResumeAll();
 1852              		.loc 1 1662 17 view .LVU569
 1853 005e 2046     		mov	r0, r4
 1854 0060 FFF7FEFF 		bl	prvUnlockQueue
 1855              	.LVL183:
1663:Src/queue.c   ****             }
 1856              		.loc 1 1663 17 view .LVU570
1663:Src/queue.c   ****             }
 1857              		.loc 1 1663 26 is_stmt 0 view .LVU571
 1858 0064 FFF7FEFF 		bl	xTaskResumeAll
 1859              	.LVL184:
 1860 0068 09E0     		b	.L132
 1861              	.L140:
1669:Src/queue.c   ****             ( void ) xTaskResumeAll();
 1862              		.loc 1 1669 13 is_stmt 1 view .LVU572
 1863 006a 2046     		mov	r0, r4
 1864 006c FFF7FEFF 		bl	prvUnlockQueue
 1865              	.LVL185:
1670:Src/queue.c   **** 
 1866              		.loc 1 1670 13 view .LVU573
1670:Src/queue.c   **** 
 1867              		.loc 1 1670 22 is_stmt 0 view .LVU574
 1868 0070 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 90


 1869              	.LVL186:
1676:Src/queue.c   ****             {
 1870              		.loc 1 1676 13 is_stmt 1 view .LVU575
1676:Src/queue.c   ****             {
 1871              		.loc 1 1676 17 is_stmt 0 view .LVU576
 1872 0074 2046     		mov	r0, r4
 1873 0076 FFF7FEFF 		bl	prvIsQueueEmpty
 1874              	.LVL187:
1676:Src/queue.c   ****             {
 1875              		.loc 1 1676 15 view .LVU577
 1876 007a 0028     		cmp	r0, #0
 1877 007c 3DD1     		bne	.L145
 1878              	.LVL188:
 1879              	.L132:
1507:Src/queue.c   **** 
 1880              		.loc 1 1507 32 is_stmt 1 view .LVU578
1511:Src/queue.c   **** 
 1881              		.loc 1 1511 45 view .LVU579
1516:Src/queue.c   ****         }
 1882              		.loc 1 1516 114 view .LVU580
1523:Src/queue.c   ****     {
 1883              		.loc 1 1523 5 view .LVU581
1525:Src/queue.c   ****         {
 1884              		.loc 1 1525 9 view .LVU582
 1885 007e FFF7FEFF 		bl	vPortEnterCritical
 1886              	.LVL189:
 1887              	.LBB43:
1529:Src/queue.c   **** 
 1888              		.loc 1 1529 13 view .LVU583
1529:Src/queue.c   **** 
 1889              		.loc 1 1529 31 is_stmt 0 view .LVU584
 1890 0082 A36B     		ldr	r3, [r4, #56]
 1891              	.LVL190:
1533:Src/queue.c   ****             {
 1892              		.loc 1 1533 13 is_stmt 1 view .LVU585
1533:Src/queue.c   ****             {
 1893              		.loc 1 1533 15 is_stmt 0 view .LVU586
 1894 0084 002B     		cmp	r3, #0
 1895 0086 C1D1     		bne	.L146
1579:Src/queue.c   ****                 {
 1896              		.loc 1 1579 17 is_stmt 1 view .LVU587
1579:Src/queue.c   ****                 {
 1897              		.loc 1 1579 34 is_stmt 0 view .LVU588
 1898 0088 019B     		ldr	r3, [sp, #4]
 1899              	.LVL191:
1579:Src/queue.c   ****                 {
 1900              		.loc 1 1579 19 view .LVU589
 1901 008a 002B     		cmp	r3, #0
 1902 008c D6D0     		beq	.L147
1596:Src/queue.c   ****                 {
 1903              		.loc 1 1596 22 is_stmt 1 view .LVU590
1596:Src/queue.c   ****                 {
 1904              		.loc 1 1596 24 is_stmt 0 view .LVU591
 1905 008e 002D     		cmp	r5, #0
 1906 0090 D8D0     		beq	.L148
 1907              	.LVL192:
 1908              	.L137:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 91


1606:Src/queue.c   ****                 }
 1909              		.loc 1 1606 45 is_stmt 1 view .LVU592
 1910              	.LBE43:
1610:Src/queue.c   **** 
 1911              		.loc 1 1610 9 view .LVU593
 1912 0092 FFF7FEFF 		bl	vPortExitCritical
 1913              	.LVL193:
1615:Src/queue.c   ****         prvLockQueue( pxQueue );
 1914              		.loc 1 1615 9 view .LVU594
 1915 0096 FFF7FEFF 		bl	vTaskSuspendAll
 1916              	.LVL194:
1616:Src/queue.c   **** 
 1917              		.loc 1 1616 9 view .LVU595
 1918 009a FFF7FEFF 		bl	vPortEnterCritical
 1919              	.LVL195:
1616:Src/queue.c   **** 
 1920              		.loc 1 1616 9 view .LVU596
 1921 009e 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1922 00a2 5BB2     		sxtb	r3, r3
 1923 00a4 B3F1FF3F 		cmp	r3, #-1
 1924 00a8 D1D0     		beq	.L149
 1925              	.L138:
1616:Src/queue.c   **** 
 1926              		.loc 1 1616 9 discriminator 3 view .LVU597
 1927 00aa 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1928 00ae 5BB2     		sxtb	r3, r3
 1929 00b0 B3F1FF3F 		cmp	r3, #-1
 1930 00b4 CFD0     		beq	.L150
 1931              	.L139:
1616:Src/queue.c   **** 
 1932              		.loc 1 1616 9 discriminator 6 view .LVU598
 1933 00b6 FFF7FEFF 		bl	vPortExitCritical
 1934              	.LVL196:
1619:Src/queue.c   ****         {
 1935              		.loc 1 1619 9 discriminator 6 view .LVU599
1619:Src/queue.c   ****         {
 1936              		.loc 1 1619 13 is_stmt 0 discriminator 6 view .LVU600
 1937 00ba 01A9     		add	r1, sp, #4
 1938 00bc 02A8     		add	r0, sp, #8
 1939 00be FFF7FEFF 		bl	xTaskCheckForTimeOut
 1940              	.LVL197:
1619:Src/queue.c   ****         {
 1941              		.loc 1 1619 11 discriminator 6 view .LVU601
 1942 00c2 0028     		cmp	r0, #0
 1943 00c4 D1D1     		bne	.L140
1625:Src/queue.c   ****             {
 1944              		.loc 1 1625 13 is_stmt 1 view .LVU602
1625:Src/queue.c   ****             {
 1945              		.loc 1 1625 17 is_stmt 0 view .LVU603
 1946 00c6 2046     		mov	r0, r4
 1947 00c8 FFF7FEFF 		bl	prvIsQueueEmpty
 1948              	.LVL198:
1625:Src/queue.c   ****             {
 1949              		.loc 1 1625 15 view .LVU604
 1950 00cc 0028     		cmp	r0, #0
 1951 00ce C6D0     		beq	.L141
1627:Src/queue.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 92


 1952              		.loc 1 1627 58 is_stmt 1 view .LVU605
1646:Src/queue.c   ****                 prvUnlockQueue( pxQueue );
 1953              		.loc 1 1646 17 view .LVU606
 1954 00d0 0199     		ldr	r1, [sp, #4]
 1955 00d2 04F12400 		add	r0, r4, #36
 1956 00d6 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1957              	.LVL199:
1647:Src/queue.c   **** 
 1958              		.loc 1 1647 17 view .LVU607
 1959 00da 2046     		mov	r0, r4
 1960 00dc FFF7FEFF 		bl	prvUnlockQueue
 1961              	.LVL200:
1649:Src/queue.c   ****                 {
 1962              		.loc 1 1649 17 view .LVU608
1649:Src/queue.c   ****                 {
 1963              		.loc 1 1649 21 is_stmt 0 view .LVU609
 1964 00e0 FFF7FEFF 		bl	xTaskResumeAll
 1965              	.LVL201:
1649:Src/queue.c   ****                 {
 1966              		.loc 1 1649 19 view .LVU610
 1967 00e4 0028     		cmp	r0, #0
 1968 00e6 CAD1     		bne	.L132
1651:Src/queue.c   ****                 }
 1969              		.loc 1 1651 21 is_stmt 1 view .LVU611
 1970 00e8 054B     		ldr	r3, .L151
 1971 00ea 4FF08052 		mov	r2, #268435456
 1972 00ee 1A60     		str	r2, [r3]
1651:Src/queue.c   ****                 }
 1973              		.loc 1 1651 21 view .LVU612
 1974              		.syntax unified
 1975              	@ 1651 "Src/queue.c" 1
 1976 00f0 BFF34F8F 		dsb
 1977              	@ 0 "" 2
1651:Src/queue.c   ****                 }
 1978              		.loc 1 1651 21 view .LVU613
 1979              	@ 1651 "Src/queue.c" 1
 1980 00f4 BFF36F8F 		isb
 1981              	@ 0 "" 2
1651:Src/queue.c   ****                 }
 1982              		.loc 1 1651 43 view .LVU614
 1983              		.thumb
 1984              		.syntax unified
 1985 00f8 C1E7     		b	.L132
 1986              	.L145:
1703:Src/queue.c   ****             }
 1987              		.loc 1 1703 24 is_stmt 0 view .LVU615
 1988 00fa 0020     		movs	r0, #0
 1989 00fc 8DE7     		b	.L131
 1990              	.L152:
 1991 00fe 00BF     		.align	2
 1992              	.L151:
 1993 0100 04ED00E0 		.word	-536810236
 1994              		.cfi_endproc
 1995              	.LFE11:
 1997              		.section	.text.xQueuePeek,"ax",%progbits
 1998              		.align	1
 1999              		.global	xQueuePeek
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 93


 2000              		.syntax unified
 2001              		.thumb
 2002              		.thumb_func
 2003              		.fpu softvfp
 2005              	xQueuePeek:
 2006              	.LVL202:
 2007              	.LFB12:
1717:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE;
 2008              		.loc 1 1717 1 is_stmt 1 view -0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 16
 2011              		@ frame_needed = 0, uses_anonymous_args = 0
1717:Src/queue.c   ****     BaseType_t xEntryTimeSet = pdFALSE;
 2012              		.loc 1 1717 1 is_stmt 0 view .LVU617
 2013 0000 70B5     		push	{r4, r5, r6, lr}
 2014              	.LCFI28:
 2015              		.cfi_def_cfa_offset 16
 2016              		.cfi_offset 4, -16
 2017              		.cfi_offset 5, -12
 2018              		.cfi_offset 6, -8
 2019              		.cfi_offset 14, -4
 2020 0002 84B0     		sub	sp, sp, #16
 2021              	.LCFI29:
 2022              		.cfi_def_cfa_offset 32
 2023 0004 0446     		mov	r4, r0
 2024 0006 0E46     		mov	r6, r1
 2025 0008 0192     		str	r2, [sp, #4]
1718:Src/queue.c   ****     TimeOut_t xTimeOut;
 2026              		.loc 1 1718 5 is_stmt 1 view .LVU618
 2027              	.LVL203:
1719:Src/queue.c   ****     int8_t * pcOriginalReadPosition;
 2028              		.loc 1 1719 5 view .LVU619
1720:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 2029              		.loc 1 1720 5 view .LVU620
1721:Src/queue.c   **** 
 2030              		.loc 1 1721 5 view .LVU621
1718:Src/queue.c   ****     TimeOut_t xTimeOut;
 2031              		.loc 1 1718 16 is_stmt 0 view .LVU622
 2032 000a 0025     		movs	r5, #0
 2033 000c 3CE0     		b	.L154
 2034              	.LVL204:
 2035              	.L168:
 2036              	.LBB44:
1753:Src/queue.c   **** 
 2037              		.loc 1 1753 17 is_stmt 1 view .LVU623
1753:Src/queue.c   **** 
 2038              		.loc 1 1753 40 is_stmt 0 view .LVU624
 2039 000e E568     		ldr	r5, [r4, #12]
 2040              	.LVL205:
1755:Src/queue.c   ****                 traceQUEUE_PEEK( pxQueue );
 2041              		.loc 1 1755 17 is_stmt 1 view .LVU625
 2042 0010 3146     		mov	r1, r6
 2043 0012 2046     		mov	r0, r4
 2044 0014 FFF7FEFF 		bl	prvCopyDataFromQueue
 2045              	.LVL206:
1756:Src/queue.c   **** 
 2046              		.loc 1 1756 43 view .LVU626
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 94


1759:Src/queue.c   **** 
 2047              		.loc 1 1759 17 view .LVU627
1759:Src/queue.c   **** 
 2048              		.loc 1 1759 46 is_stmt 0 view .LVU628
 2049 0018 E560     		str	r5, [r4, #12]
1763:Src/queue.c   ****                 {
 2050              		.loc 1 1763 17 is_stmt 1 view .LVU629
1763:Src/queue.c   ****                 {
 2051              		.loc 1 1763 21 is_stmt 0 view .LVU630
 2052 001a 636A     		ldr	r3, [r4, #36]
1763:Src/queue.c   ****                 {
 2053              		.loc 1 1763 19 view .LVU631
 2054 001c 23B9     		cbnz	r3, .L166
 2055              	.L156:
1777:Src/queue.c   ****                 }
 2056              		.loc 1 1777 45 is_stmt 1 view .LVU632
1780:Src/queue.c   ****                 return pdPASS;
 2057              		.loc 1 1780 17 view .LVU633
 2058 001e FFF7FEFF 		bl	vPortExitCritical
 2059              	.LVL207:
1781:Src/queue.c   ****             }
 2060              		.loc 1 1781 17 view .LVU634
1781:Src/queue.c   ****             }
 2061              		.loc 1 1781 24 is_stmt 0 view .LVU635
 2062 0022 0120     		movs	r0, #1
 2063              	.LVL208:
 2064              	.L153:
1781:Src/queue.c   ****             }
 2065              		.loc 1 1781 24 view .LVU636
 2066              	.LBE44:
1862:Src/queue.c   **** /*-----------------------------------------------------------*/
 2067              		.loc 1 1862 1 view .LVU637
 2068 0024 04B0     		add	sp, sp, #16
 2069              	.LCFI30:
 2070              		.cfi_remember_state
 2071              		.cfi_def_cfa_offset 16
 2072              		@ sp needed
 2073 0026 70BD     		pop	{r4, r5, r6, pc}
 2074              	.LVL209:
 2075              	.L166:
 2076              	.LCFI31:
 2077              		.cfi_restore_state
 2078              	.LBB45:
1765:Src/queue.c   ****                     {
 2079              		.loc 1 1765 21 is_stmt 1 view .LVU638
1765:Src/queue.c   ****                     {
 2080              		.loc 1 1765 25 is_stmt 0 view .LVU639
 2081 0028 04F12400 		add	r0, r4, #36
 2082 002c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2083              	.LVL210:
1765:Src/queue.c   ****                     {
 2084              		.loc 1 1765 23 view .LVU640
 2085 0030 0028     		cmp	r0, #0
 2086 0032 F4D0     		beq	.L156
1768:Src/queue.c   ****                     }
 2087              		.loc 1 1768 25 is_stmt 1 view .LVU641
 2088 0034 344B     		ldr	r3, .L173
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 95


 2089 0036 4FF08052 		mov	r2, #268435456
 2090 003a 1A60     		str	r2, [r3]
1768:Src/queue.c   ****                     }
 2091              		.loc 1 1768 25 view .LVU642
 2092              		.syntax unified
 2093              	@ 1768 "Src/queue.c" 1
 2094 003c BFF34F8F 		dsb
 2095              	@ 0 "" 2
1768:Src/queue.c   ****                     }
 2096              		.loc 1 1768 25 view .LVU643
 2097              	@ 1768 "Src/queue.c" 1
 2098 0040 BFF36F8F 		isb
 2099              	@ 0 "" 2
1768:Src/queue.c   ****                     }
 2100              		.loc 1 1768 57 view .LVU644
 2101              		.thumb
 2102              		.syntax unified
 2103 0044 EBE7     		b	.L156
 2104              	.LVL211:
 2105              	.L169:
1789:Src/queue.c   ****                     traceQUEUE_PEEK_FAILED( pxQueue );
 2106              		.loc 1 1789 21 view .LVU645
 2107 0046 FFF7FEFF 		bl	vPortExitCritical
 2108              	.LVL212:
1790:Src/queue.c   ****                     return errQUEUE_EMPTY;
 2109              		.loc 1 1790 54 view .LVU646
1791:Src/queue.c   ****                 }
 2110              		.loc 1 1791 21 view .LVU647
1791:Src/queue.c   ****                 }
 2111              		.loc 1 1791 28 is_stmt 0 view .LVU648
 2112 004a 0020     		movs	r0, #0
 2113 004c EAE7     		b	.L153
 2114              	.L170:
1798:Src/queue.c   ****                     xEntryTimeSet = pdTRUE;
 2115              		.loc 1 1798 21 is_stmt 1 view .LVU649
 2116 004e 02A8     		add	r0, sp, #8
 2117 0050 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2118              	.LVL213:
1799:Src/queue.c   ****                 }
 2119              		.loc 1 1799 21 view .LVU650
1799:Src/queue.c   ****                 }
 2120              		.loc 1 1799 35 is_stmt 0 view .LVU651
 2121 0054 0125     		movs	r5, #1
 2122 0056 21E0     		b	.L159
 2123              	.LVL214:
 2124              	.L171:
1799:Src/queue.c   ****                 }
 2125              		.loc 1 1799 35 view .LVU652
 2126              	.LBE45:
1814:Src/queue.c   **** 
 2127              		.loc 1 1814 9 is_stmt 1 discriminator 1 view .LVU653
 2128 0058 0023     		movs	r3, #0
 2129 005a 84F84430 		strb	r3, [r4, #68]
 2130 005e 29E0     		b	.L160
 2131              	.L172:
1814:Src/queue.c   **** 
 2132              		.loc 1 1814 9 discriminator 4 view .LVU654
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 96


 2133 0060 0023     		movs	r3, #0
 2134 0062 84F84530 		strb	r3, [r4, #69]
 2135 0066 2BE0     		b	.L161
 2136              	.L163:
1840:Src/queue.c   ****                 ( void ) xTaskResumeAll();
 2137              		.loc 1 1840 17 view .LVU655
 2138 0068 2046     		mov	r0, r4
 2139 006a FFF7FEFF 		bl	prvUnlockQueue
 2140              	.LVL215:
1841:Src/queue.c   ****             }
 2141              		.loc 1 1841 17 view .LVU656
1841:Src/queue.c   ****             }
 2142              		.loc 1 1841 26 is_stmt 0 view .LVU657
 2143 006e FFF7FEFF 		bl	xTaskResumeAll
 2144              	.LVL216:
 2145 0072 09E0     		b	.L154
 2146              	.L162:
1848:Src/queue.c   ****             ( void ) xTaskResumeAll();
 2147              		.loc 1 1848 13 is_stmt 1 view .LVU658
 2148 0074 2046     		mov	r0, r4
 2149 0076 FFF7FEFF 		bl	prvUnlockQueue
 2150              	.LVL217:
1849:Src/queue.c   **** 
 2151              		.loc 1 1849 13 view .LVU659
1849:Src/queue.c   **** 
 2152              		.loc 1 1849 22 is_stmt 0 view .LVU660
 2153 007a FFF7FEFF 		bl	xTaskResumeAll
 2154              	.LVL218:
1851:Src/queue.c   ****             {
 2155              		.loc 1 1851 13 is_stmt 1 view .LVU661
1851:Src/queue.c   ****             {
 2156              		.loc 1 1851 17 is_stmt 0 view .LVU662
 2157 007e 2046     		mov	r0, r4
 2158 0080 FFF7FEFF 		bl	prvIsQueueEmpty
 2159              	.LVL219:
1851:Src/queue.c   ****             {
 2160              		.loc 1 1851 15 view .LVU663
 2161 0084 0028     		cmp	r0, #0
 2162 0086 3DD1     		bne	.L167
 2163              	.LVL220:
 2164              	.L154:
1724:Src/queue.c   **** 
 2165              		.loc 1 1724 32 is_stmt 1 view .LVU664
1728:Src/queue.c   **** 
 2166              		.loc 1 1728 103 view .LVU665
1733:Src/queue.c   ****         }
 2167              		.loc 1 1733 114 view .LVU666
1740:Src/queue.c   ****     {
 2168              		.loc 1 1740 5 view .LVU667
1742:Src/queue.c   ****         {
 2169              		.loc 1 1742 9 view .LVU668
 2170 0088 FFF7FEFF 		bl	vPortEnterCritical
 2171              	.LVL221:
 2172              	.LBB46:
1744:Src/queue.c   **** 
 2173              		.loc 1 1744 13 view .LVU669
1744:Src/queue.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 97


 2174              		.loc 1 1744 31 is_stmt 0 view .LVU670
 2175 008c A36B     		ldr	r3, [r4, #56]
 2176              	.LVL222:
1748:Src/queue.c   ****             {
 2177              		.loc 1 1748 13 is_stmt 1 view .LVU671
1748:Src/queue.c   ****             {
 2178              		.loc 1 1748 15 is_stmt 0 view .LVU672
 2179 008e 002B     		cmp	r3, #0
 2180 0090 BDD1     		bne	.L168
1785:Src/queue.c   ****                 {
 2181              		.loc 1 1785 17 is_stmt 1 view .LVU673
1785:Src/queue.c   ****                 {
 2182              		.loc 1 1785 34 is_stmt 0 view .LVU674
 2183 0092 019B     		ldr	r3, [sp, #4]
 2184              	.LVL223:
1785:Src/queue.c   ****                 {
 2185              		.loc 1 1785 19 view .LVU675
 2186 0094 002B     		cmp	r3, #0
 2187 0096 D6D0     		beq	.L169
1793:Src/queue.c   ****                 {
 2188              		.loc 1 1793 22 is_stmt 1 view .LVU676
1793:Src/queue.c   ****                 {
 2189              		.loc 1 1793 24 is_stmt 0 view .LVU677
 2190 0098 002D     		cmp	r5, #0
 2191 009a D8D0     		beq	.L170
 2192              	.LVL224:
 2193              	.L159:
1804:Src/queue.c   ****                 }
 2194              		.loc 1 1804 45 is_stmt 1 view .LVU678
 2195              	.LBE46:
1808:Src/queue.c   **** 
 2196              		.loc 1 1808 9 view .LVU679
 2197 009c FFF7FEFF 		bl	vPortExitCritical
 2198              	.LVL225:
1813:Src/queue.c   ****         prvLockQueue( pxQueue );
 2199              		.loc 1 1813 9 view .LVU680
 2200 00a0 FFF7FEFF 		bl	vTaskSuspendAll
 2201              	.LVL226:
1814:Src/queue.c   **** 
 2202              		.loc 1 1814 9 view .LVU681
 2203 00a4 FFF7FEFF 		bl	vPortEnterCritical
 2204              	.LVL227:
1814:Src/queue.c   **** 
 2205              		.loc 1 1814 9 view .LVU682
 2206 00a8 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2207 00ac 5BB2     		sxtb	r3, r3
 2208 00ae B3F1FF3F 		cmp	r3, #-1
 2209 00b2 D1D0     		beq	.L171
 2210              	.L160:
1814:Src/queue.c   **** 
 2211              		.loc 1 1814 9 discriminator 3 view .LVU683
 2212 00b4 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2213 00b8 5BB2     		sxtb	r3, r3
 2214 00ba B3F1FF3F 		cmp	r3, #-1
 2215 00be CFD0     		beq	.L172
 2216              	.L161:
1814:Src/queue.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 98


 2217              		.loc 1 1814 9 discriminator 6 view .LVU684
 2218 00c0 FFF7FEFF 		bl	vPortExitCritical
 2219              	.LVL228:
1817:Src/queue.c   ****         {
 2220              		.loc 1 1817 9 discriminator 6 view .LVU685
1817:Src/queue.c   ****         {
 2221              		.loc 1 1817 13 is_stmt 0 discriminator 6 view .LVU686
 2222 00c4 01A9     		add	r1, sp, #4
 2223 00c6 02A8     		add	r0, sp, #8
 2224 00c8 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2225              	.LVL229:
1817:Src/queue.c   ****         {
 2226              		.loc 1 1817 11 discriminator 6 view .LVU687
 2227 00cc 0028     		cmp	r0, #0
 2228 00ce D1D1     		bne	.L162
1821:Src/queue.c   ****             {
 2229              		.loc 1 1821 13 is_stmt 1 view .LVU688
1821:Src/queue.c   ****             {
 2230              		.loc 1 1821 17 is_stmt 0 view .LVU689
 2231 00d0 2046     		mov	r0, r4
 2232 00d2 FFF7FEFF 		bl	prvIsQueueEmpty
 2233              	.LVL230:
1821:Src/queue.c   ****             {
 2234              		.loc 1 1821 15 view .LVU690
 2235 00d6 0028     		cmp	r0, #0
 2236 00d8 C6D0     		beq	.L163
1823:Src/queue.c   ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2237              		.loc 1 1823 55 is_stmt 1 view .LVU691
1824:Src/queue.c   ****                 prvUnlockQueue( pxQueue );
 2238              		.loc 1 1824 17 view .LVU692
 2239 00da 0199     		ldr	r1, [sp, #4]
 2240 00dc 04F12400 		add	r0, r4, #36
 2241 00e0 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2242              	.LVL231:
1825:Src/queue.c   **** 
 2243              		.loc 1 1825 17 view .LVU693
 2244 00e4 2046     		mov	r0, r4
 2245 00e6 FFF7FEFF 		bl	prvUnlockQueue
 2246              	.LVL232:
1827:Src/queue.c   ****                 {
 2247              		.loc 1 1827 17 view .LVU694
1827:Src/queue.c   ****                 {
 2248              		.loc 1 1827 21 is_stmt 0 view .LVU695
 2249 00ea FFF7FEFF 		bl	xTaskResumeAll
 2250              	.LVL233:
1827:Src/queue.c   ****                 {
 2251              		.loc 1 1827 19 view .LVU696
 2252 00ee 0028     		cmp	r0, #0
 2253 00f0 CAD1     		bne	.L154
1829:Src/queue.c   ****                 }
 2254              		.loc 1 1829 21 is_stmt 1 view .LVU697
 2255 00f2 054B     		ldr	r3, .L173
 2256 00f4 4FF08052 		mov	r2, #268435456
 2257 00f8 1A60     		str	r2, [r3]
1829:Src/queue.c   ****                 }
 2258              		.loc 1 1829 21 view .LVU698
 2259              		.syntax unified
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 99


 2260              	@ 1829 "Src/queue.c" 1
 2261 00fa BFF34F8F 		dsb
 2262              	@ 0 "" 2
1829:Src/queue.c   ****                 }
 2263              		.loc 1 1829 21 view .LVU699
 2264              	@ 1829 "Src/queue.c" 1
 2265 00fe BFF36F8F 		isb
 2266              	@ 0 "" 2
1829:Src/queue.c   ****                 }
 2267              		.loc 1 1829 43 view .LVU700
 2268              		.thumb
 2269              		.syntax unified
 2270 0102 C1E7     		b	.L154
 2271              	.L167:
1854:Src/queue.c   ****             }
 2272              		.loc 1 1854 24 is_stmt 0 view .LVU701
 2273 0104 0020     		movs	r0, #0
 2274 0106 8DE7     		b	.L153
 2275              	.L174:
 2276              		.align	2
 2277              	.L173:
 2278 0108 04ED00E0 		.word	-536810236
 2279              		.cfi_endproc
 2280              	.LFE12:
 2282              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2283              		.align	1
 2284              		.global	xQueueReceiveFromISR
 2285              		.syntax unified
 2286              		.thumb
 2287              		.thumb_func
 2288              		.fpu softvfp
 2290              	xQueueReceiveFromISR:
 2291              	.LVL234:
 2292              	.LFB13:
1868:Src/queue.c   ****     BaseType_t xReturn;
 2293              		.loc 1 1868 1 is_stmt 1 view -0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
1868:Src/queue.c   ****     BaseType_t xReturn;
 2297              		.loc 1 1868 1 is_stmt 0 view .LVU703
 2298 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2299              	.LCFI32:
 2300              		.cfi_def_cfa_offset 24
 2301              		.cfi_offset 4, -24
 2302              		.cfi_offset 5, -20
 2303              		.cfi_offset 6, -16
 2304              		.cfi_offset 7, -12
 2305              		.cfi_offset 8, -8
 2306              		.cfi_offset 14, -4
1869:Src/queue.c   ****     UBaseType_t uxSavedInterruptStatus;
 2307              		.loc 1 1869 5 is_stmt 1 view .LVU704
1870:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 2308              		.loc 1 1870 5 view .LVU705
1871:Src/queue.c   **** 
 2309              		.loc 1 1871 5 view .LVU706
 2310              	.LVL235:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 100


1873:Src/queue.c   ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2311              		.loc 1 1873 28 view .LVU707
1874:Src/queue.c   **** 
 2312              		.loc 1 1874 95 view .LVU708
1890:Src/queue.c   **** 
 2313              		.loc 1 1890 47 view .LVU709
1892:Src/queue.c   ****     {
 2314              		.loc 1 1892 5 view .LVU710
 2315              	.LBB47:
 2316              	.LBI47:
 212:Inc/portmacro.h ****     {
 2317              		.loc 2 212 38 view .LVU711
 2318              	.LBB48:
 214:Inc/portmacro.h **** 
 2319              		.loc 2 214 9 view .LVU712
 216:Inc/portmacro.h ****         (
 2320              		.loc 2 216 9 view .LVU713
 2321              		.syntax unified
 2322              	@ 216 "Inc/portmacro.h" 1
 2323 0004 EFF31188 			mrs r8, basepri											
 2324 0008 4FF0BF03 		mov r3, #191												
 2325 000c 83F31188 		msr basepri, r3											
 2326 0010 BFF36F8F 		isb														
 2327 0014 BFF34F8F 		dsb														
 2328              	
 2329              	@ 0 "" 2
 2330              	.LVL236:
 228:Inc/portmacro.h ****     }
 2331              		.loc 2 228 9 view .LVU714
 228:Inc/portmacro.h ****     }
 2332              		.loc 2 228 9 is_stmt 0 view .LVU715
 2333              		.thumb
 2334              		.syntax unified
 2335              	.LBE48:
 2336              	.LBE47:
 2337              	.LBB49:
1894:Src/queue.c   **** 
 2338              		.loc 1 1894 9 is_stmt 1 view .LVU716
1894:Src/queue.c   **** 
 2339              		.loc 1 1894 27 is_stmt 0 view .LVU717
 2340 0018 866B     		ldr	r6, [r0, #56]
 2341              	.LVL237:
1897:Src/queue.c   ****         {
 2342              		.loc 1 1897 9 is_stmt 1 view .LVU718
1897:Src/queue.c   ****         {
 2343              		.loc 1 1897 11 is_stmt 0 view .LVU719
 2344 001a 26B9     		cbnz	r6, .L183
1950:Src/queue.c   ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2345              		.loc 1 1950 21 view .LVU720
 2346 001c 0020     		movs	r0, #0
 2347              	.LVL238:
 2348              	.L176:
1951:Src/queue.c   ****         }
 2349              		.loc 1 1951 58 is_stmt 1 view .LVU721
 2350              	.LBE49:
1954:Src/queue.c   **** 
 2351              		.loc 1 1954 5 view .LVU722
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 101


 2352              	.LBB51:
 2353              	.LBI51:
 232:Inc/portmacro.h ****     {
 2354              		.loc 2 232 34 view .LVU723
 2355              	.LBB52:
 2356              		.loc 2 234 9 view .LVU724
 2357              		.syntax unified
 2358              	@ 234 "Inc/portmacro.h" 1
 2359 001e 88F31188 			msr basepri, r8	
 2360              	@ 0 "" 2
 2361              	.LVL239:
 2362              		.loc 2 234 9 is_stmt 0 view .LVU725
 2363              		.thumb
 2364              		.syntax unified
 2365              	.LBE52:
 2366              	.LBE51:
1956:Src/queue.c   **** }
 2367              		.loc 1 1956 5 is_stmt 1 view .LVU726
1957:Src/queue.c   **** /*-----------------------------------------------------------*/
 2368              		.loc 1 1957 1 is_stmt 0 view .LVU727
 2369 0022 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2370              	.LVL240:
 2371              	.L183:
1957:Src/queue.c   **** /*-----------------------------------------------------------*/
 2372              		.loc 1 1957 1 view .LVU728
 2373 0026 0446     		mov	r4, r0
 2374 0028 1546     		mov	r5, r2
 2375              	.LBB53:
 2376              	.LBB50:
1899:Src/queue.c   **** 
 2377              		.loc 1 1899 13 is_stmt 1 view .LVU729
1899:Src/queue.c   **** 
 2378              		.loc 1 1899 26 is_stmt 0 view .LVU730
 2379 002a 90F84470 		ldrb	r7, [r0, #68]	@ zero_extendqisi2
 2380 002e 7FB2     		sxtb	r7, r7
 2381              	.LVL241:
1901:Src/queue.c   **** 
 2382              		.loc 1 1901 51 is_stmt 1 view .LVU731
1903:Src/queue.c   ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2383              		.loc 1 1903 13 view .LVU732
 2384 0030 FFF7FEFF 		bl	prvCopyDataFromQueue
 2385              	.LVL242:
1904:Src/queue.c   **** 
 2386              		.loc 1 1904 13 view .LVU733
1904:Src/queue.c   **** 
 2387              		.loc 1 1904 60 is_stmt 0 view .LVU734
 2388 0034 013E     		subs	r6, r6, #1
 2389              	.LVL243:
1904:Src/queue.c   **** 
 2390              		.loc 1 1904 40 view .LVU735
 2391 0036 A663     		str	r6, [r4, #56]
1910:Src/queue.c   ****             {
 2392              		.loc 1 1910 13 is_stmt 1 view .LVU736
1910:Src/queue.c   ****             {
 2393              		.loc 1 1910 15 is_stmt 0 view .LVU737
 2394 0038 B7F1FF3F 		cmp	r7, #-1
 2395 003c 05D0     		beq	.L184
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 102


1941:Src/queue.c   **** 
 2396              		.loc 1 1941 57 is_stmt 1 view .LVU738
1943:Src/queue.c   ****             }
 2397              		.loc 1 1943 17 view .LVU739
1943:Src/queue.c   ****             }
 2398              		.loc 1 1943 57 is_stmt 0 view .LVU740
 2399 003e 0137     		adds	r7, r7, #1
 2400              	.LVL244:
1943:Src/queue.c   ****             }
 2401              		.loc 1 1943 36 view .LVU741
 2402 0040 7FB2     		sxtb	r7, r7
 2403              	.LVL245:
1943:Src/queue.c   ****             }
 2404              		.loc 1 1943 34 view .LVU742
 2405 0042 84F84470 		strb	r7, [r4, #68]
1946:Src/queue.c   ****         }
 2406              		.loc 1 1946 21 view .LVU743
 2407 0046 0120     		movs	r0, #1
 2408 0048 E9E7     		b	.L176
 2409              	.LVL246:
 2410              	.L184:
1912:Src/queue.c   ****                 {
 2411              		.loc 1 1912 17 is_stmt 1 view .LVU744
1912:Src/queue.c   ****                 {
 2412              		.loc 1 1912 21 is_stmt 0 view .LVU745
 2413 004a 2369     		ldr	r3, [r4, #16]
1912:Src/queue.c   ****                 {
 2414              		.loc 1 1912 19 view .LVU746
 2415 004c 0BB9     		cbnz	r3, .L185
1946:Src/queue.c   ****         }
 2416              		.loc 1 1946 21 view .LVU747
 2417 004e 0120     		movs	r0, #1
 2418 0050 E5E7     		b	.L176
 2419              	.L185:
1914:Src/queue.c   ****                     {
 2420              		.loc 1 1914 21 is_stmt 1 view .LVU748
1914:Src/queue.c   ****                     {
 2421              		.loc 1 1914 25 is_stmt 0 view .LVU749
 2422 0052 04F11000 		add	r0, r4, #16
 2423 0056 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2424              	.LVL247:
1914:Src/queue.c   ****                     {
 2425              		.loc 1 1914 23 view .LVU750
 2426 005a 18B1     		cbz	r0, .L180
1918:Src/queue.c   ****                         {
 2427              		.loc 1 1918 25 is_stmt 1 view .LVU751
1918:Src/queue.c   ****                         {
 2428              		.loc 1 1918 27 is_stmt 0 view .LVU752
 2429 005c 25B1     		cbz	r5, .L181
1920:Src/queue.c   ****                         }
 2430              		.loc 1 1920 29 is_stmt 1 view .LVU753
1920:Src/queue.c   ****                         }
 2431              		.loc 1 1920 56 is_stmt 0 view .LVU754
 2432 005e 0120     		movs	r0, #1
 2433 0060 2860     		str	r0, [r5]
 2434 0062 DCE7     		b	.L176
 2435              	.L180:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 103


1946:Src/queue.c   ****         }
 2436              		.loc 1 1946 21 view .LVU755
 2437 0064 0120     		movs	r0, #1
 2438 0066 DAE7     		b	.L176
 2439              	.L181:
 2440 0068 0120     		movs	r0, #1
 2441 006a D8E7     		b	.L176
 2442              	.LBE50:
 2443              	.LBE53:
 2444              		.cfi_endproc
 2445              	.LFE13:
 2447              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2448              		.align	1
 2449              		.global	xQueuePeekFromISR
 2450              		.syntax unified
 2451              		.thumb
 2452              		.thumb_func
 2453              		.fpu softvfp
 2455              	xQueuePeekFromISR:
 2456              	.LVL248:
 2457              	.LFB14:
1962:Src/queue.c   ****     BaseType_t xReturn;
 2458              		.loc 1 1962 1 is_stmt 1 view -0
 2459              		.cfi_startproc
 2460              		@ args = 0, pretend = 0, frame = 0
 2461              		@ frame_needed = 0, uses_anonymous_args = 0
1962:Src/queue.c   ****     BaseType_t xReturn;
 2462              		.loc 1 1962 1 is_stmt 0 view .LVU757
 2463 0000 70B5     		push	{r4, r5, r6, lr}
 2464              	.LCFI33:
 2465              		.cfi_def_cfa_offset 16
 2466              		.cfi_offset 4, -16
 2467              		.cfi_offset 5, -12
 2468              		.cfi_offset 6, -8
 2469              		.cfi_offset 14, -4
1963:Src/queue.c   ****     UBaseType_t uxSavedInterruptStatus;
 2470              		.loc 1 1963 5 is_stmt 1 view .LVU758
1964:Src/queue.c   ****     int8_t * pcOriginalReadPosition;
 2471              		.loc 1 1964 5 view .LVU759
1965:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 2472              		.loc 1 1965 5 view .LVU760
1966:Src/queue.c   **** 
 2473              		.loc 1 1966 5 view .LVU761
 2474              	.LVL249:
1968:Src/queue.c   ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2475              		.loc 1 1968 28 view .LVU762
1969:Src/queue.c   ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2476              		.loc 1 1969 95 view .LVU763
1970:Src/queue.c   **** 
 2477              		.loc 1 1970 45 view .LVU764
1986:Src/queue.c   **** 
 2478              		.loc 1 1986 47 view .LVU765
1988:Src/queue.c   ****     {
 2479              		.loc 1 1988 5 view .LVU766
 2480              	.LBB54:
 2481              	.LBI54:
 212:Inc/portmacro.h ****     {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 104


 2482              		.loc 2 212 38 view .LVU767
 2483              	.LBB55:
 214:Inc/portmacro.h **** 
 2484              		.loc 2 214 9 view .LVU768
 216:Inc/portmacro.h ****         (
 2485              		.loc 2 216 9 view .LVU769
 2486              		.syntax unified
 2487              	@ 216 "Inc/portmacro.h" 1
 2488 0002 EFF31185 			mrs r5, basepri											
 2489 0006 4FF0BF03 		mov r3, #191												
 2490 000a 83F31188 		msr basepri, r3											
 2491 000e BFF36F8F 		isb														
 2492 0012 BFF34F8F 		dsb														
 2493              	
 2494              	@ 0 "" 2
 2495              	.LVL250:
 228:Inc/portmacro.h ****     }
 2496              		.loc 2 228 9 view .LVU770
 228:Inc/portmacro.h ****     }
 2497              		.loc 2 228 9 is_stmt 0 view .LVU771
 2498              		.thumb
 2499              		.syntax unified
 2500              	.LBE55:
 2501              	.LBE54:
1991:Src/queue.c   ****         {
 2502              		.loc 1 1991 9 is_stmt 1 view .LVU772
1991:Src/queue.c   ****         {
 2503              		.loc 1 1991 20 is_stmt 0 view .LVU773
 2504 0016 836B     		ldr	r3, [r0, #56]
1991:Src/queue.c   ****         {
 2505              		.loc 1 1991 11 view .LVU774
 2506 0018 1BB9     		cbnz	r3, .L190
2005:Src/queue.c   ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2507              		.loc 1 2005 21 view .LVU775
 2508 001a 0020     		movs	r0, #0
 2509              	.LVL251:
 2510              	.L187:
2006:Src/queue.c   ****         }
 2511              		.loc 1 2006 55 is_stmt 1 view .LVU776
2009:Src/queue.c   **** 
 2512              		.loc 1 2009 5 view .LVU777
 2513              	.LBB56:
 2514              	.LBI56:
 232:Inc/portmacro.h ****     {
 2515              		.loc 2 232 34 view .LVU778
 2516              	.LBB57:
 2517              		.loc 2 234 9 view .LVU779
 2518              		.syntax unified
 2519              	@ 234 "Inc/portmacro.h" 1
 2520 001c 85F31188 			msr basepri, r5	
 2521              	@ 0 "" 2
 2522              	.LVL252:
 2523              		.loc 2 234 9 is_stmt 0 view .LVU780
 2524              		.thumb
 2525              		.syntax unified
 2526              	.LBE57:
 2527              	.LBE56:
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 105


2011:Src/queue.c   **** }
 2528              		.loc 1 2011 5 is_stmt 1 view .LVU781
2012:Src/queue.c   **** /*-----------------------------------------------------------*/
 2529              		.loc 1 2012 1 is_stmt 0 view .LVU782
 2530 0020 70BD     		pop	{r4, r5, r6, pc}
 2531              	.LVL253:
 2532              	.L190:
2012:Src/queue.c   **** /*-----------------------------------------------------------*/
 2533              		.loc 1 2012 1 view .LVU783
 2534 0022 0446     		mov	r4, r0
1993:Src/queue.c   **** 
 2535              		.loc 1 1993 48 is_stmt 1 view .LVU784
1997:Src/queue.c   ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 2536              		.loc 1 1997 13 view .LVU785
1997:Src/queue.c   ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 2537              		.loc 1 1997 36 is_stmt 0 view .LVU786
 2538 0024 C668     		ldr	r6, [r0, #12]
 2539              	.LVL254:
1998:Src/queue.c   ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2540              		.loc 1 1998 13 is_stmt 1 view .LVU787
 2541 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
 2542              	.LVL255:
1999:Src/queue.c   **** 
 2543              		.loc 1 1999 13 view .LVU788
1999:Src/queue.c   **** 
 2544              		.loc 1 1999 42 is_stmt 0 view .LVU789
 2545 002a E660     		str	r6, [r4, #12]
2001:Src/queue.c   ****         }
 2546              		.loc 1 2001 13 is_stmt 1 view .LVU790
 2547              	.LVL256:
2001:Src/queue.c   ****         }
 2548              		.loc 1 2001 21 is_stmt 0 view .LVU791
 2549 002c 0120     		movs	r0, #1
 2550 002e F5E7     		b	.L187
 2551              		.cfi_endproc
 2552              	.LFE14:
 2554              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2555              		.align	1
 2556              		.global	uxQueueMessagesWaiting
 2557              		.syntax unified
 2558              		.thumb
 2559              		.thumb_func
 2560              		.fpu softvfp
 2562              	uxQueueMessagesWaiting:
 2563              	.LVL257:
 2564              	.LFB15:
2016:Src/queue.c   ****     UBaseType_t uxReturn;
 2565              		.loc 1 2016 1 is_stmt 1 view -0
 2566              		.cfi_startproc
 2567              		@ args = 0, pretend = 0, frame = 0
 2568              		@ frame_needed = 0, uses_anonymous_args = 0
2016:Src/queue.c   ****     UBaseType_t uxReturn;
 2569              		.loc 1 2016 1 is_stmt 0 view .LVU793
 2570 0000 10B5     		push	{r4, lr}
 2571              	.LCFI34:
 2572              		.cfi_def_cfa_offset 8
 2573              		.cfi_offset 4, -8
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 106


 2574              		.cfi_offset 14, -4
 2575 0002 0446     		mov	r4, r0
2017:Src/queue.c   **** 
 2576              		.loc 1 2017 5 is_stmt 1 view .LVU794
2019:Src/queue.c   **** 
 2577              		.loc 1 2019 27 view .LVU795
2021:Src/queue.c   ****     {
 2578              		.loc 1 2021 5 view .LVU796
 2579 0004 FFF7FEFF 		bl	vPortEnterCritical
 2580              	.LVL258:
2023:Src/queue.c   ****     }
 2581              		.loc 1 2023 9 view .LVU797
2023:Src/queue.c   ****     }
 2582              		.loc 1 2023 18 is_stmt 0 view .LVU798
 2583 0008 A46B     		ldr	r4, [r4, #56]
 2584              	.LVL259:
2025:Src/queue.c   **** 
 2585              		.loc 1 2025 5 is_stmt 1 view .LVU799
 2586 000a FFF7FEFF 		bl	vPortExitCritical
 2587              	.LVL260:
2027:Src/queue.c   **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2588              		.loc 1 2027 5 view .LVU800
2028:Src/queue.c   **** /*-----------------------------------------------------------*/
 2589              		.loc 1 2028 1 is_stmt 0 view .LVU801
 2590 000e 2046     		mov	r0, r4
 2591 0010 10BD     		pop	{r4, pc}
2028:Src/queue.c   **** /*-----------------------------------------------------------*/
 2592              		.loc 1 2028 1 view .LVU802
 2593              		.cfi_endproc
 2594              	.LFE15:
 2596              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2597              		.align	1
 2598              		.global	uxQueueSpacesAvailable
 2599              		.syntax unified
 2600              		.thumb
 2601              		.thumb_func
 2602              		.fpu softvfp
 2604              	uxQueueSpacesAvailable:
 2605              	.LVL261:
 2606              	.LFB16:
2032:Src/queue.c   ****     UBaseType_t uxReturn;
 2607              		.loc 1 2032 1 is_stmt 1 view -0
 2608              		.cfi_startproc
 2609              		@ args = 0, pretend = 0, frame = 0
 2610              		@ frame_needed = 0, uses_anonymous_args = 0
2032:Src/queue.c   ****     UBaseType_t uxReturn;
 2611              		.loc 1 2032 1 is_stmt 0 view .LVU804
 2612 0000 10B5     		push	{r4, lr}
 2613              	.LCFI35:
 2614              		.cfi_def_cfa_offset 8
 2615              		.cfi_offset 4, -8
 2616              		.cfi_offset 14, -4
 2617 0002 0446     		mov	r4, r0
2033:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 2618              		.loc 1 2033 5 is_stmt 1 view .LVU805
2034:Src/queue.c   **** 
 2619              		.loc 1 2034 5 view .LVU806
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 107


 2620              	.LVL262:
2036:Src/queue.c   **** 
 2621              		.loc 1 2036 28 view .LVU807
2038:Src/queue.c   ****     {
 2622              		.loc 1 2038 5 view .LVU808
 2623 0004 FFF7FEFF 		bl	vPortEnterCritical
 2624              	.LVL263:
2040:Src/queue.c   ****     }
 2625              		.loc 1 2040 9 view .LVU809
2040:Src/queue.c   ****     }
 2626              		.loc 1 2040 27 is_stmt 0 view .LVU810
 2627 0008 E36B     		ldr	r3, [r4, #60]
2040:Src/queue.c   ****     }
 2628              		.loc 1 2040 47 view .LVU811
 2629 000a A46B     		ldr	r4, [r4, #56]
 2630              	.LVL264:
2040:Src/queue.c   ****     }
 2631              		.loc 1 2040 18 view .LVU812
 2632 000c 1C1B     		subs	r4, r3, r4
 2633              	.LVL265:
2042:Src/queue.c   **** 
 2634              		.loc 1 2042 5 is_stmt 1 view .LVU813
 2635 000e FFF7FEFF 		bl	vPortExitCritical
 2636              	.LVL266:
2044:Src/queue.c   **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2637              		.loc 1 2044 5 view .LVU814
2045:Src/queue.c   **** /*-----------------------------------------------------------*/
 2638              		.loc 1 2045 1 is_stmt 0 view .LVU815
 2639 0012 2046     		mov	r0, r4
 2640 0014 10BD     		pop	{r4, pc}
2045:Src/queue.c   **** /*-----------------------------------------------------------*/
 2641              		.loc 1 2045 1 view .LVU816
 2642              		.cfi_endproc
 2643              	.LFE16:
 2645              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2646              		.align	1
 2647              		.global	uxQueueMessagesWaitingFromISR
 2648              		.syntax unified
 2649              		.thumb
 2650              		.thumb_func
 2651              		.fpu softvfp
 2653              	uxQueueMessagesWaitingFromISR:
 2654              	.LVL267:
 2655              	.LFB17:
2049:Src/queue.c   ****     UBaseType_t uxReturn;
 2656              		.loc 1 2049 1 is_stmt 1 view -0
 2657              		.cfi_startproc
 2658              		@ args = 0, pretend = 0, frame = 0
 2659              		@ frame_needed = 0, uses_anonymous_args = 0
 2660              		@ link register save eliminated.
2050:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 2661              		.loc 1 2050 5 view .LVU818
2051:Src/queue.c   **** 
 2662              		.loc 1 2051 5 view .LVU819
2053:Src/queue.c   ****     uxReturn = pxQueue->uxMessagesWaiting;
 2663              		.loc 1 2053 28 view .LVU820
2054:Src/queue.c   **** 
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 108


 2664              		.loc 1 2054 5 view .LVU821
2054:Src/queue.c   **** 
 2665              		.loc 1 2054 14 is_stmt 0 view .LVU822
 2666 0000 806B     		ldr	r0, [r0, #56]
 2667              	.LVL268:
2056:Src/queue.c   **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2668              		.loc 1 2056 5 is_stmt 1 view .LVU823
2057:Src/queue.c   **** /*-----------------------------------------------------------*/
 2669              		.loc 1 2057 1 is_stmt 0 view .LVU824
 2670 0002 7047     		bx	lr
 2671              		.cfi_endproc
 2672              	.LFE17:
 2674              		.section	.text.vQueueDelete,"ax",%progbits
 2675              		.align	1
 2676              		.global	vQueueDelete
 2677              		.syntax unified
 2678              		.thumb
 2679              		.thumb_func
 2680              		.fpu softvfp
 2682              	vQueueDelete:
 2683              	.LVL269:
 2684              	.LFB18:
2061:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 2685              		.loc 1 2061 1 is_stmt 1 view -0
 2686              		.cfi_startproc
 2687              		@ args = 0, pretend = 0, frame = 0
 2688              		@ frame_needed = 0, uses_anonymous_args = 0
2061:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 2689              		.loc 1 2061 1 is_stmt 0 view .LVU826
 2690 0000 08B5     		push	{r3, lr}
 2691              	.LCFI36:
 2692              		.cfi_def_cfa_offset 8
 2693              		.cfi_offset 3, -8
 2694              		.cfi_offset 14, -4
2062:Src/queue.c   **** 
 2695              		.loc 1 2062 5 is_stmt 1 view .LVU827
 2696              	.LVL270:
2064:Src/queue.c   ****     traceQUEUE_DELETE( pxQueue );
 2697              		.loc 1 2064 28 view .LVU828
2065:Src/queue.c   **** 
 2698              		.loc 1 2065 33 view .LVU829
2077:Src/queue.c   ****         }
 2699              		.loc 1 2077 13 view .LVU830
 2700 0002 FFF7FEFF 		bl	vPortFree
 2701              	.LVL271:
2099:Src/queue.c   **** /*-----------------------------------------------------------*/
 2702              		.loc 1 2099 1 is_stmt 0 view .LVU831
 2703 0006 08BD     		pop	{r3, pc}
 2704              		.cfi_endproc
 2705              	.LFE18:
 2707              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2708              		.align	1
 2709              		.global	xQueueIsQueueEmptyFromISR
 2710              		.syntax unified
 2711              		.thumb
 2712              		.thumb_func
 2713              		.fpu softvfp
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 109


 2715              	xQueueIsQueueEmptyFromISR:
 2716              	.LVL272:
 2717              	.LFB23:
2406:Src/queue.c   ****     BaseType_t xReturn;
 2718              		.loc 1 2406 1 is_stmt 1 view -0
 2719              		.cfi_startproc
 2720              		@ args = 0, pretend = 0, frame = 0
 2721              		@ frame_needed = 0, uses_anonymous_args = 0
 2722              		@ link register save eliminated.
2407:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 2723              		.loc 1 2407 5 view .LVU833
2408:Src/queue.c   **** 
 2724              		.loc 1 2408 5 view .LVU834
2410:Src/queue.c   **** 
 2725              		.loc 1 2410 28 view .LVU835
2412:Src/queue.c   ****     {
 2726              		.loc 1 2412 5 view .LVU836
2412:Src/queue.c   ****     {
 2727              		.loc 1 2412 16 is_stmt 0 view .LVU837
 2728 0000 836B     		ldr	r3, [r0, #56]
2412:Src/queue.c   ****     {
 2729              		.loc 1 2412 7 view .LVU838
 2730 0002 0BB9     		cbnz	r3, .L200
2414:Src/queue.c   ****     }
 2731              		.loc 1 2414 17 view .LVU839
 2732 0004 0120     		movs	r0, #1
 2733              	.LVL273:
2414:Src/queue.c   ****     }
 2734              		.loc 1 2414 17 view .LVU840
 2735 0006 7047     		bx	lr
 2736              	.LVL274:
 2737              	.L200:
2418:Src/queue.c   ****     }
 2738              		.loc 1 2418 17 view .LVU841
 2739 0008 0020     		movs	r0, #0
 2740              	.LVL275:
2421:Src/queue.c   **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2741              		.loc 1 2421 5 is_stmt 1 view .LVU842
2422:Src/queue.c   **** /*-----------------------------------------------------------*/
 2742              		.loc 1 2422 1 is_stmt 0 view .LVU843
 2743 000a 7047     		bx	lr
 2744              		.cfi_endproc
 2745              	.LFE23:
 2747              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2748              		.align	1
 2749              		.global	xQueueIsQueueFullFromISR
 2750              		.syntax unified
 2751              		.thumb
 2752              		.thumb_func
 2753              		.fpu softvfp
 2755              	xQueueIsQueueFullFromISR:
 2756              	.LVL276:
 2757              	.LFB25:
2444:Src/queue.c   **** /*-----------------------------------------------------------*/
2445:Src/queue.c   **** 
2446:Src/queue.c   **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2447:Src/queue.c   **** {
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 110


 2758              		.loc 1 2447 1 is_stmt 1 view -0
 2759              		.cfi_startproc
 2760              		@ args = 0, pretend = 0, frame = 0
 2761              		@ frame_needed = 0, uses_anonymous_args = 0
 2762              		@ link register save eliminated.
2448:Src/queue.c   ****     BaseType_t xReturn;
 2763              		.loc 1 2448 5 view .LVU845
2449:Src/queue.c   ****     Queue_t * const pxQueue = xQueue;
 2764              		.loc 1 2449 5 view .LVU846
2450:Src/queue.c   **** 
2451:Src/queue.c   ****     configASSERT( pxQueue );
 2765              		.loc 1 2451 28 view .LVU847
2452:Src/queue.c   **** 
2453:Src/queue.c   ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2766              		.loc 1 2453 5 view .LVU848
 2767              		.loc 1 2453 16 is_stmt 0 view .LVU849
 2768 0000 826B     		ldr	r2, [r0, #56]
 2769              		.loc 1 2453 46 view .LVU850
 2770 0002 C36B     		ldr	r3, [r0, #60]
 2771              		.loc 1 2453 7 view .LVU851
 2772 0004 9A42     		cmp	r2, r3
 2773 0006 01D0     		beq	.L204
2454:Src/queue.c   ****     {
2455:Src/queue.c   ****         xReturn = pdTRUE;
2456:Src/queue.c   ****     }
2457:Src/queue.c   ****     else
2458:Src/queue.c   ****     {
2459:Src/queue.c   ****         xReturn = pdFALSE;
 2774              		.loc 1 2459 17 view .LVU852
 2775 0008 0020     		movs	r0, #0
 2776              	.LVL277:
2460:Src/queue.c   ****     }
2461:Src/queue.c   **** 
2462:Src/queue.c   ****     return xReturn;
 2777              		.loc 1 2462 5 is_stmt 1 view .LVU853
2463:Src/queue.c   **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2778              		.loc 1 2463 1 is_stmt 0 view .LVU854
 2779 000a 7047     		bx	lr
 2780              	.LVL278:
 2781              	.L204:
2455:Src/queue.c   ****     }
 2782              		.loc 1 2455 17 view .LVU855
 2783 000c 0120     		movs	r0, #1
 2784              	.LVL279:
2455:Src/queue.c   ****     }
 2785              		.loc 1 2455 17 view .LVU856
 2786 000e 7047     		bx	lr
 2787              		.cfi_endproc
 2788              	.LFE25:
 2790              		.text
 2791              	.Letext0:
 2792              		.file 3 "c:\\software\\embeddedgcc\\arm_gcc\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\stddef.h"
 2793              		.file 4 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 2794              		.file 5 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 2795              		.file 6 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 2796              		.file 7 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 2797              		.file 8 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\stdlib.h"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 111


 2798              		.file 9 "c:\\software\\embeddedgcc\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 2799              		.file 10 "Inc/list.h"
 2800              		.file 11 "Inc/task.h"
 2801              		.file 12 "Inc/queue.h"
 2802              		.file 13 "Inc/portable.h"
 2803              		.file 14 "<built-in>"
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 112


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:16     .text.prvIsQueueFull:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:23     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:72     .text.prvIsQueueEmpty:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:78     .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:123    .text.prvCopyDataToQueue:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:129    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:251    .text.prvCopyDataFromQueue:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:257    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:318    .text.prvUnlockQueue:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:324    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:451    .text.xQueueGenericReset:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:458    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:630    .text.xQueueGenericReset:0000000000000094 $d
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:635    .text.prvInitialiseNewQueue:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:641    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:694    .text.xQueueGenericCreate:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:701    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:814    .text.xQueueGenericSend:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:821    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1094   .text.xQueueGenericSend:0000000000000114 $d
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1099   .text.xQueueGenericSendFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1106   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1265   .text.xQueueGiveFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1272   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1439   .text.xQueueReceive:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1446   .text.xQueueReceive:0000000000000000 xQueueReceive
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1717   .text.xQueueReceive:0000000000000108 $d
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1722   .text.xQueueSemaphoreTake:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1729   .text.xQueueSemaphoreTake:0000000000000000 xQueueSemaphoreTake
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1993   .text.xQueueSemaphoreTake:0000000000000100 $d
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:1998   .text.xQueuePeek:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2005   .text.xQueuePeek:0000000000000000 xQueuePeek
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2278   .text.xQueuePeek:0000000000000108 $d
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2283   .text.xQueueReceiveFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2290   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2448   .text.xQueuePeekFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2455   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2555   .text.uxQueueMessagesWaiting:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2562   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2597   .text.uxQueueSpacesAvailable:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2604   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2646   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2653   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2675   .text.vQueueDelete:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2682   .text.vQueueDelete:0000000000000000 vQueueDelete
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2708   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2715   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2748   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
C:\Users\User\AppData\Local\Temp\ccBtglKO.s:2755   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
memcpy
vTaskMissedYield
ARM GAS  C:\Users\User\AppData\Local\Temp\ccBtglKO.s 			page 113


xTaskRemoveFromEventList
vListInitialise
pvPortMalloc
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
vPortFree
